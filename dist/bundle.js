/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var t={382:function(t,e,n){!function(t,e,n,i){"use strict";var s=function(t,e,n){return{endTime:e,insertTime:n,type:"exponentialRampToValue",value:t}},o=function(t,e,n){return{endTime:e,insertTime:n,type:"linearRampToValue",value:t}},r=function(t,e){return{startTime:e,type:"setValue",value:t}},a=function(t,e,n){return{duration:n,startTime:e,type:"setValueCurve",values:t}},l=function(t,e,n){var i=n.startTime,s=n.target,o=n.timeConstant;return s+(e-s)*Math.exp((i-t)/o)},c=function(t){return"exponentialRampToValue"===t.type},u=function(t){return"linearRampToValue"===t.type},h=function(t){return c(t)||u(t)},p=function(t){return"setValue"===t.type},d=function(t){return"setValueCurve"===t.type},f=function t(e,n,i,s){var o=e[n];return void 0===o?s:h(o)||p(o)?o.value:d(o)?o.values[o.values.length-1]:l(i,t(e,n-1,o.startTime,s),o)},m=function(t,e,n,i,s){return void 0===n?[i.insertTime,s]:h(n)?[n.endTime,n.value]:p(n)?[n.startTime,n.value]:d(n)?[n.startTime+n.duration,n.values[n.values.length-1]]:[n.startTime,f(t,e-1,n.startTime,s)]},g=function(t){return"cancelAndHold"===t.type},v=function(t){return"cancelScheduledValues"===t.type},y=function(t){return g(t)||v(t)?t.cancelTime:c(t)||u(t)?t.endTime:t.startTime},_=function(t,e,n,i){var s=i.endTime,o=i.value;return n===o?o:0<n&&0<o||n<0&&o<0?n*Math.pow(o/n,(t-e)/(s-e)):0},x=function(t,e,n,i){return n+(t-e)/(i.endTime-e)*(i.value-n)},b=function(t,e){var n=e.duration,i=e.startTime,s=e.values;return function(t,e){var n=Math.floor(e),i=Math.ceil(e);return n===i?t[n]:(1-(e-n))*t[n]+(1-(i-e))*t[i]}(s,(t-i)/n*(s.length-1))},w=function(t){return"setTarget"===t.type},T=function(t){function T(t){n(this,T),this._automationEvents=[],this._currenTime=0,this._defaultValue=t}return i(T,[{key:t,value:function(){return this._automationEvents[Symbol.iterator]()}},{key:"add",value:function(t){var e=y(t);if(g(t)||v(t)){var n=this._automationEvents.findIndex((function(n){return v(t)&&d(n)?n.startTime+n.duration>=e:y(n)>=e})),i=this._automationEvents[n];if(-1!==n&&(this._automationEvents=this._automationEvents.slice(0,n)),g(t)){var l=this._automationEvents[this._automationEvents.length-1];if(void 0!==i&&h(i)){if(void 0!==l&&w(l))throw new Error("The internal list is malformed.");var p=void 0===l?i.insertTime:d(l)?l.startTime+l.duration:y(l),f=void 0===l?this._defaultValue:d(l)?l.values[l.values.length-1]:l.value,m=c(i)?_(e,p,f,i):x(e,p,f,i),b=c(i)?s(m,e,this._currenTime):o(m,e,this._currenTime);this._automationEvents.push(b)}if(void 0!==l&&w(l)&&this._automationEvents.push(r(this.getValue(e),e)),void 0!==l&&d(l)&&l.startTime+l.duration>e){var T=e-l.startTime,S=(l.values.length-1)/l.duration,C=Math.max(2,1+Math.ceil(T*S)),A=T/(C-1)*S,k=l.values.slice(0,C);if(A<1)for(var M=1;M<C;M+=1){var O=A*M%1;k[M]=l.values[M-1]*(1-O)+l.values[M]*O}this._automationEvents[this._automationEvents.length-1]=a(k,l.startTime,T)}}}else{var I=this._automationEvents.findIndex((function(t){return y(t)>e})),E=-1===I?this._automationEvents[this._automationEvents.length-1]:this._automationEvents[I-1];if(void 0!==E&&d(E)&&y(E)+E.duration>e)return!1;var P=c(t)?s(t.value,t.endTime,this._currenTime):u(t)?o(t.value,e,this._currenTime):t;if(-1===I)this._automationEvents.push(P);else{if(d(t)&&e+t.duration>y(this._automationEvents[I]))return!1;this._automationEvents.splice(I,0,P)}}return!0}},{key:"flush",value:function(t){var e=this._automationEvents.findIndex((function(e){return y(e)>t}));if(e>1){var n=this._automationEvents.slice(e-1),i=n[0];w(i)&&n.unshift(r(f(this._automationEvents,e-2,i.startTime,this._defaultValue),i.startTime)),this._automationEvents=n}}},{key:"getValue",value:function(t){if(0===this._automationEvents.length)return this._defaultValue;var n=this._automationEvents.findIndex((function(e){return y(e)>t})),i=this._automationEvents[n],s=(-1===n?this._automationEvents.length:n)-1,o=this._automationEvents[s];if(void 0!==o&&w(o)&&(void 0===i||!h(i)||i.insertTime>t))return l(t,f(this._automationEvents,s-1,o.startTime,this._defaultValue),o);if(void 0!==o&&p(o)&&(void 0===i||!h(i)))return o.value;if(void 0!==o&&d(o)&&(void 0===i||!h(i)||o.startTime+o.duration>t))return t<o.startTime+o.duration?b(t,o):o.values[o.values.length-1];if(void 0!==o&&h(o)&&(void 0===i||!h(i)))return o.value;if(void 0!==i&&c(i)){var r=m(this._automationEvents,s,o,i,this._defaultValue),a=e(r,2),g=a[0],v=a[1];return _(t,g,v,i)}if(void 0!==i&&u(i)){var T=m(this._automationEvents,s,o,i,this._defaultValue),S=e(T,2),C=S[0],A=S[1];return x(t,C,A,i)}return this._defaultValue}}]),T}(Symbol.iterator);t.AutomationEventList=T,t.createCancelAndHoldAutomationEvent=function(t){return{cancelTime:t,type:"cancelAndHold"}},t.createCancelScheduledValuesAutomationEvent=function(t){return{cancelTime:t,type:"cancelScheduledValues"}},t.createExponentialRampToValueAutomationEvent=function(t,e){return{endTime:e,type:"exponentialRampToValue",value:t}},t.createLinearRampToValueAutomationEvent=function(t,e){return{endTime:e,type:"linearRampToValue",value:t}},t.createSetTargetAutomationEvent=function(t,e,n){return{startTime:e,target:t,timeConstant:n,type:"setTarget"}},t.createSetValueAutomationEvent=r,t.createSetValueCurveAutomationEvent=a}(e,n(424),n(690),n(728))},842:function(t,e,n){var i;i=function(){return function(t){var e={};function n(i){if(e[i])return e[i].exports;var s=e[i]={i,l:!1,exports:{}};return t[i].call(s.exports,s,s.exports,n),s.l=!0,s.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var s in t)n.d(i,s,function(e){return t[e]}.bind(null,s));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=20)}([function(t,e){var i={};t.exports=i,function(){i._baseDelta=1e3/60,i._nextId=0,i._seed=0,i._nowStartTime=+new Date,i._warnedOnce={},i._decomp=null,i.extend=function(t,e){var n,s;"boolean"==typeof e?(n=2,s=e):(n=1,s=!0);for(var o=n;o<arguments.length;o++){var r=arguments[o];if(r)for(var a in r)s&&r[a]&&r[a].constructor===Object?t[a]&&t[a].constructor!==Object?t[a]=r[a]:(t[a]=t[a]||{},i.extend(t[a],s,r[a])):t[a]=r[a]}return t},i.clone=function(t,e){return i.extend({},e,t)},i.keys=function(t){if(Object.keys)return Object.keys(t);var e=[];for(var n in t)e.push(n);return e},i.values=function(t){var e=[];if(Object.keys){for(var n=Object.keys(t),i=0;i<n.length;i++)e.push(t[n[i]]);return e}for(var s in t)e.push(t[s]);return e},i.get=function(t,e,n,i){e=e.split(".").slice(n,i);for(var s=0;s<e.length;s+=1)t=t[e[s]];return t},i.set=function(t,e,n,s,o){var r=e.split(".").slice(s,o);return i.get(t,e,0,-1)[r[r.length-1]]=n,n},i.shuffle=function(t){for(var e=t.length-1;e>0;e--){var n=Math.floor(i.random()*(e+1)),s=t[e];t[e]=t[n],t[n]=s}return t},i.choose=function(t){return t[Math.floor(i.random()*t.length)]},i.isElement=function(t){return"undefined"!=typeof HTMLElement?t instanceof HTMLElement:!!(t&&t.nodeType&&t.nodeName)},i.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)},i.isFunction=function(t){return"function"==typeof t},i.isPlainObject=function(t){return"object"==typeof t&&t.constructor===Object},i.isString=function(t){return"[object String]"===toString.call(t)},i.clamp=function(t,e,n){return t<e?e:t>n?n:t},i.sign=function(t){return t<0?-1:1},i.now=function(){if("undefined"!=typeof window&&window.performance){if(window.performance.now)return window.performance.now();if(window.performance.webkitNow)return window.performance.webkitNow()}return Date.now?Date.now():new Date-i._nowStartTime},i.random=function(e,n){return n=void 0!==n?n:1,(e=void 0!==e?e:0)+t()*(n-e)};var t=function(){return i._seed=(9301*i._seed+49297)%233280,i._seed/233280};i.colorToNumber=function(t){return 3==(t=t.replace("#","")).length&&(t=t.charAt(0)+t.charAt(0)+t.charAt(1)+t.charAt(1)+t.charAt(2)+t.charAt(2)),parseInt(t,16)},i.logLevel=1,i.log=function(){console&&i.logLevel>0&&i.logLevel<=3&&console.log.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},i.info=function(){console&&i.logLevel>0&&i.logLevel<=2&&console.info.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},i.warn=function(){console&&i.logLevel>0&&i.logLevel<=3&&console.warn.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},i.warnOnce=function(){var t=Array.prototype.slice.call(arguments).join(" ");i._warnedOnce[t]||(i.warn(t),i._warnedOnce[t]=!0)},i.deprecated=function(t,e,n){t[e]=i.chain((function(){i.warnOnce("🔅 deprecated 🔅",n)}),t[e])},i.nextId=function(){return i._nextId++},i.indexOf=function(t,e){if(t.indexOf)return t.indexOf(e);for(var n=0;n<t.length;n++)if(t[n]===e)return n;return-1},i.map=function(t,e){if(t.map)return t.map(e);for(var n=[],i=0;i<t.length;i+=1)n.push(e(t[i]));return n},i.topologicalSort=function(t){var e=[],n=[],s=[];for(var o in t)n[o]||s[o]||i._topologicalSort(o,n,s,t,e);return e},i._topologicalSort=function(t,e,n,s,o){var r=s[t]||[];n[t]=!0;for(var a=0;a<r.length;a+=1){var l=r[a];n[l]||e[l]||i._topologicalSort(l,e,n,s,o)}n[t]=!1,e[t]=!0,o.push(t)},i.chain=function(){for(var t=[],e=0;e<arguments.length;e+=1){var n=arguments[e];n._chained?t.push.apply(t,n._chained):t.push(n)}var i=function(){for(var e,n=new Array(arguments.length),i=0,s=arguments.length;i<s;i++)n[i]=arguments[i];for(i=0;i<t.length;i+=1){var o=t[i].apply(e,n);void 0!==o&&(e=o)}return e};return i._chained=t,i},i.chainPathBefore=function(t,e,n){return i.set(t,e,i.chain(n,i.get(t,e)))},i.chainPathAfter=function(t,e,n){return i.set(t,e,i.chain(i.get(t,e),n))},i.setDecomp=function(t){i._decomp=t},i.getDecomp=function(){var t=i._decomp;try{t||"undefined"==typeof window||(t=window.decomp),t||void 0===n.g||(t=n.g.decomp)}catch(e){t=null}return t}}()},function(t,e){var n={};t.exports=n,n.create=function(t){var e={min:{x:0,y:0},max:{x:0,y:0}};return t&&n.update(e,t),e},n.update=function(t,e,n){t.min.x=1/0,t.max.x=-1/0,t.min.y=1/0,t.max.y=-1/0;for(var i=0;i<e.length;i++){var s=e[i];s.x>t.max.x&&(t.max.x=s.x),s.x<t.min.x&&(t.min.x=s.x),s.y>t.max.y&&(t.max.y=s.y),s.y<t.min.y&&(t.min.y=s.y)}n&&(n.x>0?t.max.x+=n.x:t.min.x+=n.x,n.y>0?t.max.y+=n.y:t.min.y+=n.y)},n.contains=function(t,e){return e.x>=t.min.x&&e.x<=t.max.x&&e.y>=t.min.y&&e.y<=t.max.y},n.overlaps=function(t,e){return t.min.x<=e.max.x&&t.max.x>=e.min.x&&t.max.y>=e.min.y&&t.min.y<=e.max.y},n.translate=function(t,e){t.min.x+=e.x,t.max.x+=e.x,t.min.y+=e.y,t.max.y+=e.y},n.shift=function(t,e){var n=t.max.x-t.min.x,i=t.max.y-t.min.y;t.min.x=e.x,t.max.x=e.x+n,t.min.y=e.y,t.max.y=e.y+i}},function(t,e){var n={};t.exports=n,n.create=function(t,e){return{x:t||0,y:e||0}},n.clone=function(t){return{x:t.x,y:t.y}},n.magnitude=function(t){return Math.sqrt(t.x*t.x+t.y*t.y)},n.magnitudeSquared=function(t){return t.x*t.x+t.y*t.y},n.rotate=function(t,e,n){var i=Math.cos(e),s=Math.sin(e);n||(n={});var o=t.x*i-t.y*s;return n.y=t.x*s+t.y*i,n.x=o,n},n.rotateAbout=function(t,e,n,i){var s=Math.cos(e),o=Math.sin(e);i||(i={});var r=n.x+((t.x-n.x)*s-(t.y-n.y)*o);return i.y=n.y+((t.x-n.x)*o+(t.y-n.y)*s),i.x=r,i},n.normalise=function(t){var e=n.magnitude(t);return 0===e?{x:0,y:0}:{x:t.x/e,y:t.y/e}},n.dot=function(t,e){return t.x*e.x+t.y*e.y},n.cross=function(t,e){return t.x*e.y-t.y*e.x},n.cross3=function(t,e,n){return(e.x-t.x)*(n.y-t.y)-(e.y-t.y)*(n.x-t.x)},n.add=function(t,e,n){return n||(n={}),n.x=t.x+e.x,n.y=t.y+e.y,n},n.sub=function(t,e,n){return n||(n={}),n.x=t.x-e.x,n.y=t.y-e.y,n},n.mult=function(t,e){return{x:t.x*e,y:t.y*e}},n.div=function(t,e){return{x:t.x/e,y:t.y/e}},n.perp=function(t,e){return{x:(e=!0===e?-1:1)*-t.y,y:e*t.x}},n.neg=function(t){return{x:-t.x,y:-t.y}},n.angle=function(t,e){return Math.atan2(e.y-t.y,e.x-t.x)},n._temp=[n.create(),n.create(),n.create(),n.create(),n.create(),n.create()]},function(t,e,n){var i={};t.exports=i;var s=n(2),o=n(0);i.create=function(t,e){for(var n=[],i=0;i<t.length;i++){var s=t[i],o={x:s.x,y:s.y,index:i,body:e,isInternal:!1};n.push(o)}return n},i.fromPath=function(t,e){var n=[];return t.replace(/L?\s*([-\d.e]+)[\s,]*([-\d.e]+)*/gi,(function(t,e,i){n.push({x:parseFloat(e),y:parseFloat(i)})})),i.create(n,e)},i.centre=function(t){for(var e,n,o,r=i.area(t,!0),a={x:0,y:0},l=0;l<t.length;l++)o=(l+1)%t.length,e=s.cross(t[l],t[o]),n=s.mult(s.add(t[l],t[o]),e),a=s.add(a,n);return s.div(a,6*r)},i.mean=function(t){for(var e={x:0,y:0},n=0;n<t.length;n++)e.x+=t[n].x,e.y+=t[n].y;return s.div(e,t.length)},i.area=function(t,e){for(var n=0,i=t.length-1,s=0;s<t.length;s++)n+=(t[i].x-t[s].x)*(t[i].y+t[s].y),i=s;return e?n/2:Math.abs(n)/2},i.inertia=function(t,e){for(var n,i,o=0,r=0,a=t,l=0;l<a.length;l++)i=(l+1)%a.length,o+=(n=Math.abs(s.cross(a[i],a[l])))*(s.dot(a[i],a[i])+s.dot(a[i],a[l])+s.dot(a[l],a[l])),r+=n;return e/6*(o/r)},i.translate=function(t,e,n){n=void 0!==n?n:1;var i,s=t.length,o=e.x*n,r=e.y*n;for(i=0;i<s;i++)t[i].x+=o,t[i].y+=r;return t},i.rotate=function(t,e,n){if(0!==e){var i,s,o,r,a=Math.cos(e),l=Math.sin(e),c=n.x,u=n.y,h=t.length;for(r=0;r<h;r++)s=(i=t[r]).x-c,o=i.y-u,i.x=c+(s*a-o*l),i.y=u+(s*l+o*a);return t}},i.contains=function(t,e){for(var n,i=e.x,s=e.y,o=t.length,r=t[o-1],a=0;a<o;a++){if(n=t[a],(i-r.x)*(n.y-r.y)+(s-r.y)*(r.x-n.x)>0)return!1;r=n}return!0},i.scale=function(t,e,n,o){if(1===e&&1===n)return t;var r,a;o=o||i.centre(t);for(var l=0;l<t.length;l++)r=t[l],a=s.sub(r,o),t[l].x=o.x+a.x*e,t[l].y=o.y+a.y*n;return t},i.chamfer=function(t,e,n,i,r){e="number"==typeof e?[e]:e||[8],n=void 0!==n?n:-1,i=i||2,r=r||14;for(var a=[],l=0;l<t.length;l++){var c=t[l-1>=0?l-1:t.length-1],u=t[l],h=t[(l+1)%t.length],p=e[l<e.length?l:e.length-1];if(0!==p){var d=s.normalise({x:u.y-c.y,y:c.x-u.x}),f=s.normalise({x:h.y-u.y,y:u.x-h.x}),m=Math.sqrt(2*Math.pow(p,2)),g=s.mult(o.clone(d),p),v=s.normalise(s.mult(s.add(d,f),.5)),y=s.sub(u,s.mult(v,m)),_=n;-1===n&&(_=1.75*Math.pow(p,.32)),(_=o.clamp(_,i,r))%2==1&&(_+=1);for(var x=Math.acos(s.dot(d,f))/_,b=0;b<_;b++)a.push(s.add(s.rotate(g,x*b),y))}else a.push(u)}return a},i.clockwiseSort=function(t){var e=i.mean(t);return t.sort((function(t,n){return s.angle(e,t)-s.angle(e,n)})),t},i.isConvex=function(t){var e,n,i,s,o=0,r=t.length;if(r<3)return null;for(e=0;e<r;e++)if(i=(e+2)%r,s=(t[n=(e+1)%r].x-t[e].x)*(t[i].y-t[n].y),(s-=(t[n].y-t[e].y)*(t[i].x-t[n].x))<0?o|=1:s>0&&(o|=2),3===o)return!1;return 0!==o||null},i.hull=function(t){var e,n,i=[],o=[];for((t=t.slice(0)).sort((function(t,e){var n=t.x-e.x;return 0!==n?n:t.y-e.y})),n=0;n<t.length;n+=1){for(e=t[n];o.length>=2&&s.cross3(o[o.length-2],o[o.length-1],e)<=0;)o.pop();o.push(e)}for(n=t.length-1;n>=0;n-=1){for(e=t[n];i.length>=2&&s.cross3(i[i.length-2],i[i.length-1],e)<=0;)i.pop();i.push(e)}return i.pop(),o.pop(),i.concat(o)}},function(t,e,n){var i={};t.exports=i;var s=n(3),o=n(2),r=n(7),a=n(0),l=n(1),c=n(11);!function(){i._timeCorrection=!0,i._inertiaScale=4,i._nextCollidingGroupId=1,i._nextNonCollidingGroupId=-1,i._nextCategory=1,i._baseDelta=1e3/60,i.create=function(e){var n={id:a.nextId(),type:"body",label:"Body",parts:[],plugin:{},angle:0,vertices:s.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"),position:{x:0,y:0},force:{x:0,y:0},torque:0,positionImpulse:{x:0,y:0},constraintImpulse:{x:0,y:0,angle:0},totalContacts:0,speed:0,angularSpeed:0,velocity:{x:0,y:0},angularVelocity:0,isSensor:!1,isStatic:!1,isSleeping:!1,motion:0,sleepThreshold:60,density:.001,restitution:0,friction:.1,frictionStatic:.5,frictionAir:.01,collisionFilter:{category:1,mask:4294967295,group:0},slop:.05,timeScale:1,render:{visible:!0,opacity:1,strokeStyle:null,fillStyle:null,lineWidth:null,sprite:{xScale:1,yScale:1,xOffset:0,yOffset:0}},events:null,bounds:null,chamfer:null,circleRadius:0,positionPrev:null,anglePrev:0,parent:null,axes:null,area:0,mass:0,inertia:0,deltaTime:1e3/60,_original:null},i=a.extend(n,e);return t(i,e),i},i.nextGroup=function(t){return t?i._nextNonCollidingGroupId--:i._nextCollidingGroupId++},i.nextCategory=function(){return i._nextCategory=i._nextCategory<<1,i._nextCategory};var t=function(t,e){e=e||{},i.set(t,{bounds:t.bounds||l.create(t.vertices),positionPrev:t.positionPrev||o.clone(t.position),anglePrev:t.anglePrev||t.angle,vertices:t.vertices,parts:t.parts||[t],isStatic:t.isStatic,isSleeping:t.isSleeping,parent:t.parent||t}),s.rotate(t.vertices,t.angle,t.position),c.rotate(t.axes,t.angle),l.update(t.bounds,t.vertices,t.velocity),i.set(t,{axes:e.axes||t.axes,area:e.area||t.area,mass:e.mass||t.mass,inertia:e.inertia||t.inertia});var n=t.isStatic?"#14151f":a.choose(["#f19648","#f5d259","#f55a3c","#063e7b","#ececd1"]),r=t.isStatic?"#555":"#ccc",u=t.isStatic&&null===t.render.fillStyle?1:0;t.render.fillStyle=t.render.fillStyle||n,t.render.strokeStyle=t.render.strokeStyle||r,t.render.lineWidth=t.render.lineWidth||u,t.render.sprite.xOffset+=-(t.bounds.min.x-t.position.x)/(t.bounds.max.x-t.bounds.min.x),t.render.sprite.yOffset+=-(t.bounds.min.y-t.position.y)/(t.bounds.max.y-t.bounds.min.y)};i.set=function(t,e,n){var s;for(s in"string"==typeof e&&(s=e,(e={})[s]=n),e)if(Object.prototype.hasOwnProperty.call(e,s))switch(n=e[s],s){case"isStatic":i.setStatic(t,n);break;case"isSleeping":r.set(t,n);break;case"mass":i.setMass(t,n);break;case"density":i.setDensity(t,n);break;case"inertia":i.setInertia(t,n);break;case"vertices":i.setVertices(t,n);break;case"position":i.setPosition(t,n);break;case"angle":i.setAngle(t,n);break;case"velocity":i.setVelocity(t,n);break;case"angularVelocity":i.setAngularVelocity(t,n);break;case"speed":i.setSpeed(t,n);break;case"angularSpeed":i.setAngularSpeed(t,n);break;case"parts":i.setParts(t,n);break;case"centre":i.setCentre(t,n);break;default:t[s]=n}},i.setStatic=function(t,e){for(var n=0;n<t.parts.length;n++){var i=t.parts[n];i.isStatic=e,e?(i._original={restitution:i.restitution,friction:i.friction,mass:i.mass,inertia:i.inertia,density:i.density,inverseMass:i.inverseMass,inverseInertia:i.inverseInertia},i.restitution=0,i.friction=1,i.mass=i.inertia=i.density=1/0,i.inverseMass=i.inverseInertia=0,i.positionPrev.x=i.position.x,i.positionPrev.y=i.position.y,i.anglePrev=i.angle,i.angularVelocity=0,i.speed=0,i.angularSpeed=0,i.motion=0):i._original&&(i.restitution=i._original.restitution,i.friction=i._original.friction,i.mass=i._original.mass,i.inertia=i._original.inertia,i.density=i._original.density,i.inverseMass=i._original.inverseMass,i.inverseInertia=i._original.inverseInertia,i._original=null)}},i.setMass=function(t,e){var n=t.inertia/(t.mass/6);t.inertia=n*(e/6),t.inverseInertia=1/t.inertia,t.mass=e,t.inverseMass=1/t.mass,t.density=t.mass/t.area},i.setDensity=function(t,e){i.setMass(t,e*t.area),t.density=e},i.setInertia=function(t,e){t.inertia=e,t.inverseInertia=1/t.inertia},i.setVertices=function(t,e){e[0].body===t?t.vertices=e:t.vertices=s.create(e,t),t.axes=c.fromVertices(t.vertices),t.area=s.area(t.vertices),i.setMass(t,t.density*t.area);var n=s.centre(t.vertices);s.translate(t.vertices,n,-1),i.setInertia(t,i._inertiaScale*s.inertia(t.vertices,t.mass)),s.translate(t.vertices,t.position),l.update(t.bounds,t.vertices,t.velocity)},i.setParts=function(t,e,n){var o;for(e=e.slice(0),t.parts.length=0,t.parts.push(t),t.parent=t,o=0;o<e.length;o++){var r=e[o];r!==t&&(r.parent=t,t.parts.push(r))}if(1!==t.parts.length){if(n=void 0===n||n){var a=[];for(o=0;o<e.length;o++)a=a.concat(e[o].vertices);s.clockwiseSort(a);var l=s.hull(a),c=s.centre(l);i.setVertices(t,l),s.translate(t.vertices,c)}var u=i._totalProperties(t);t.area=u.area,t.parent=t,t.position.x=u.centre.x,t.position.y=u.centre.y,t.positionPrev.x=u.centre.x,t.positionPrev.y=u.centre.y,i.setMass(t,u.mass),i.setInertia(t,u.inertia),i.setPosition(t,u.centre)}},i.setCentre=function(t,e,n){n?(t.positionPrev.x+=e.x,t.positionPrev.y+=e.y,t.position.x+=e.x,t.position.y+=e.y):(t.positionPrev.x=e.x-(t.position.x-t.positionPrev.x),t.positionPrev.y=e.y-(t.position.y-t.positionPrev.y),t.position.x=e.x,t.position.y=e.y)},i.setPosition=function(t,e,n){var i=o.sub(e,t.position);n?(t.positionPrev.x=t.position.x,t.positionPrev.y=t.position.y,t.velocity.x=i.x,t.velocity.y=i.y,t.speed=o.magnitude(i)):(t.positionPrev.x+=i.x,t.positionPrev.y+=i.y);for(var r=0;r<t.parts.length;r++){var a=t.parts[r];a.position.x+=i.x,a.position.y+=i.y,s.translate(a.vertices,i),l.update(a.bounds,a.vertices,t.velocity)}},i.setAngle=function(t,e,n){var i=e-t.angle;n?(t.anglePrev=t.angle,t.angularVelocity=i,t.angularSpeed=Math.abs(i)):t.anglePrev+=i;for(var r=0;r<t.parts.length;r++){var a=t.parts[r];a.angle+=i,s.rotate(a.vertices,i,t.position),c.rotate(a.axes,i),l.update(a.bounds,a.vertices,t.velocity),r>0&&o.rotateAbout(a.position,i,t.position,a.position)}},i.setVelocity=function(t,e){var n=t.deltaTime/i._baseDelta;t.positionPrev.x=t.position.x-e.x*n,t.positionPrev.y=t.position.y-e.y*n,t.velocity.x=(t.position.x-t.positionPrev.x)/n,t.velocity.y=(t.position.y-t.positionPrev.y)/n,t.speed=o.magnitude(t.velocity)},i.getVelocity=function(t){var e=i._baseDelta/t.deltaTime;return{x:(t.position.x-t.positionPrev.x)*e,y:(t.position.y-t.positionPrev.y)*e}},i.getSpeed=function(t){return o.magnitude(i.getVelocity(t))},i.setSpeed=function(t,e){i.setVelocity(t,o.mult(o.normalise(i.getVelocity(t)),e))},i.setAngularVelocity=function(t,e){var n=t.deltaTime/i._baseDelta;t.anglePrev=t.angle-e*n,t.angularVelocity=(t.angle-t.anglePrev)/n,t.angularSpeed=Math.abs(t.angularVelocity)},i.getAngularVelocity=function(t){return(t.angle-t.anglePrev)*i._baseDelta/t.deltaTime},i.getAngularSpeed=function(t){return Math.abs(i.getAngularVelocity(t))},i.setAngularSpeed=function(t,e){i.setAngularVelocity(t,a.sign(i.getAngularVelocity(t))*e)},i.translate=function(t,e,n){i.setPosition(t,o.add(t.position,e),n)},i.rotate=function(t,e,n,s){if(n){var o=Math.cos(e),r=Math.sin(e),a=t.position.x-n.x,l=t.position.y-n.y;i.setPosition(t,{x:n.x+(a*o-l*r),y:n.y+(a*r+l*o)},s),i.setAngle(t,t.angle+e,s)}else i.setAngle(t,t.angle+e,s)},i.scale=function(t,e,n,o){var r=0,a=0;o=o||t.position;for(var u=0;u<t.parts.length;u++){var h=t.parts[u];s.scale(h.vertices,e,n,o),h.axes=c.fromVertices(h.vertices),h.area=s.area(h.vertices),i.setMass(h,t.density*h.area),s.translate(h.vertices,{x:-h.position.x,y:-h.position.y}),i.setInertia(h,i._inertiaScale*s.inertia(h.vertices,h.mass)),s.translate(h.vertices,{x:h.position.x,y:h.position.y}),u>0&&(r+=h.area,a+=h.inertia),h.position.x=o.x+(h.position.x-o.x)*e,h.position.y=o.y+(h.position.y-o.y)*n,l.update(h.bounds,h.vertices,t.velocity)}t.parts.length>1&&(t.area=r,t.isStatic||(i.setMass(t,t.density*r),i.setInertia(t,a))),t.circleRadius&&(e===n?t.circleRadius*=e:t.circleRadius=null)},i.update=function(t,e){var n=(e=(void 0!==e?e:1e3/60)*t.timeScale)*e,r=i._timeCorrection?e/(t.deltaTime||e):1,u=1-t.frictionAir*(e/a._baseDelta),h=(t.position.x-t.positionPrev.x)*r,p=(t.position.y-t.positionPrev.y)*r;t.velocity.x=h*u+t.force.x/t.mass*n,t.velocity.y=p*u+t.force.y/t.mass*n,t.positionPrev.x=t.position.x,t.positionPrev.y=t.position.y,t.position.x+=t.velocity.x,t.position.y+=t.velocity.y,t.deltaTime=e,t.angularVelocity=(t.angle-t.anglePrev)*u*r+t.torque/t.inertia*n,t.anglePrev=t.angle,t.angle+=t.angularVelocity;for(var d=0;d<t.parts.length;d++){var f=t.parts[d];s.translate(f.vertices,t.velocity),d>0&&(f.position.x+=t.velocity.x,f.position.y+=t.velocity.y),0!==t.angularVelocity&&(s.rotate(f.vertices,t.angularVelocity,t.position),c.rotate(f.axes,t.angularVelocity),d>0&&o.rotateAbout(f.position,t.angularVelocity,t.position,f.position)),l.update(f.bounds,f.vertices,t.velocity)}},i.updateVelocities=function(t){var e=i._baseDelta/t.deltaTime,n=t.velocity;n.x=(t.position.x-t.positionPrev.x)*e,n.y=(t.position.y-t.positionPrev.y)*e,t.speed=Math.sqrt(n.x*n.x+n.y*n.y),t.angularVelocity=(t.angle-t.anglePrev)*e,t.angularSpeed=Math.abs(t.angularVelocity)},i.applyForce=function(t,e,n){var i=e.x-t.position.x,s=e.y-t.position.y;t.force.x+=n.x,t.force.y+=n.y,t.torque+=i*n.y-s*n.x},i._totalProperties=function(t){for(var e={mass:0,area:0,inertia:0,centre:{x:0,y:0}},n=1===t.parts.length?0:1;n<t.parts.length;n++){var i=t.parts[n],s=i.mass!==1/0?i.mass:1;e.mass+=s,e.area+=i.area,e.inertia+=i.inertia,e.centre=o.add(e.centre,o.mult(i.position,s))}return e.centre=o.div(e.centre,e.mass),e}}()},function(t,e,n){var i={};t.exports=i;var s=n(0);i.on=function(t,e,n){for(var i,s=e.split(" "),o=0;o<s.length;o++)i=s[o],t.events=t.events||{},t.events[i]=t.events[i]||[],t.events[i].push(n);return n},i.off=function(t,e,n){if(e){"function"==typeof e&&(n=e,e=s.keys(t.events).join(" "));for(var i=e.split(" "),o=0;o<i.length;o++){var r=t.events[i[o]],a=[];if(n&&r)for(var l=0;l<r.length;l++)r[l]!==n&&a.push(r[l]);t.events[i[o]]=a}}else t.events={}},i.trigger=function(t,e,n){var i,o,r,a,l=t.events;if(l&&s.keys(l).length>0){n||(n={}),i=e.split(" ");for(var c=0;c<i.length;c++)if(r=l[o=i[c]]){(a=s.clone(n,!1)).name=o,a.source=t;for(var u=0;u<r.length;u++)r[u].apply(t,[a])}}}},function(t,e,n){var i={};t.exports=i;var s=n(5),o=n(0),r=n(1),a=n(4);i.create=function(t){return o.extend({id:o.nextId(),type:"composite",parent:null,isModified:!1,bodies:[],constraints:[],composites:[],label:"Composite",plugin:{},cache:{allBodies:null,allConstraints:null,allComposites:null}},t)},i.setModified=function(t,e,n,s){if(t.isModified=e,e&&t.cache&&(t.cache.allBodies=null,t.cache.allConstraints=null,t.cache.allComposites=null),n&&t.parent&&i.setModified(t.parent,e,n,s),s)for(var o=0;o<t.composites.length;o++){var r=t.composites[o];i.setModified(r,e,n,s)}},i.add=function(t,e){var n=[].concat(e);s.trigger(t,"beforeAdd",{object:e});for(var r=0;r<n.length;r++){var a=n[r];switch(a.type){case"body":if(a.parent!==a){o.warn("Composite.add: skipped adding a compound body part (you must add its parent instead)");break}i.addBody(t,a);break;case"constraint":i.addConstraint(t,a);break;case"composite":i.addComposite(t,a);break;case"mouseConstraint":i.addConstraint(t,a.constraint)}}return s.trigger(t,"afterAdd",{object:e}),t},i.remove=function(t,e,n){var o=[].concat(e);s.trigger(t,"beforeRemove",{object:e});for(var r=0;r<o.length;r++){var a=o[r];switch(a.type){case"body":i.removeBody(t,a,n);break;case"constraint":i.removeConstraint(t,a,n);break;case"composite":i.removeComposite(t,a,n);break;case"mouseConstraint":i.removeConstraint(t,a.constraint)}}return s.trigger(t,"afterRemove",{object:e}),t},i.addComposite=function(t,e){return t.composites.push(e),e.parent=t,i.setModified(t,!0,!0,!1),t},i.removeComposite=function(t,e,n){var s=o.indexOf(t.composites,e);if(-1!==s&&i.removeCompositeAt(t,s),n)for(var r=0;r<t.composites.length;r++)i.removeComposite(t.composites[r],e,!0);return t},i.removeCompositeAt=function(t,e){return t.composites.splice(e,1),i.setModified(t,!0,!0,!1),t},i.addBody=function(t,e){return t.bodies.push(e),i.setModified(t,!0,!0,!1),t},i.removeBody=function(t,e,n){var s=o.indexOf(t.bodies,e);if(-1!==s&&i.removeBodyAt(t,s),n)for(var r=0;r<t.composites.length;r++)i.removeBody(t.composites[r],e,!0);return t},i.removeBodyAt=function(t,e){return t.bodies.splice(e,1),i.setModified(t,!0,!0,!1),t},i.addConstraint=function(t,e){return t.constraints.push(e),i.setModified(t,!0,!0,!1),t},i.removeConstraint=function(t,e,n){var s=o.indexOf(t.constraints,e);if(-1!==s&&i.removeConstraintAt(t,s),n)for(var r=0;r<t.composites.length;r++)i.removeConstraint(t.composites[r],e,!0);return t},i.removeConstraintAt=function(t,e){return t.constraints.splice(e,1),i.setModified(t,!0,!0,!1),t},i.clear=function(t,e,n){if(n)for(var s=0;s<t.composites.length;s++)i.clear(t.composites[s],e,!0);return e?t.bodies=t.bodies.filter((function(t){return t.isStatic})):t.bodies.length=0,t.constraints.length=0,t.composites.length=0,i.setModified(t,!0,!0,!1),t},i.allBodies=function(t){if(t.cache&&t.cache.allBodies)return t.cache.allBodies;for(var e=[].concat(t.bodies),n=0;n<t.composites.length;n++)e=e.concat(i.allBodies(t.composites[n]));return t.cache&&(t.cache.allBodies=e),e},i.allConstraints=function(t){if(t.cache&&t.cache.allConstraints)return t.cache.allConstraints;for(var e=[].concat(t.constraints),n=0;n<t.composites.length;n++)e=e.concat(i.allConstraints(t.composites[n]));return t.cache&&(t.cache.allConstraints=e),e},i.allComposites=function(t){if(t.cache&&t.cache.allComposites)return t.cache.allComposites;for(var e=[].concat(t.composites),n=0;n<t.composites.length;n++)e=e.concat(i.allComposites(t.composites[n]));return t.cache&&(t.cache.allComposites=e),e},i.get=function(t,e,n){var s,o;switch(n){case"body":s=i.allBodies(t);break;case"constraint":s=i.allConstraints(t);break;case"composite":s=i.allComposites(t).concat(t)}return s?0===(o=s.filter((function(t){return t.id.toString()===e.toString()}))).length?null:o[0]:null},i.move=function(t,e,n){return i.remove(t,e),i.add(n,e),t},i.rebase=function(t){for(var e=i.allBodies(t).concat(i.allConstraints(t)).concat(i.allComposites(t)),n=0;n<e.length;n++)e[n].id=o.nextId();return t},i.translate=function(t,e,n){for(var s=n?i.allBodies(t):t.bodies,o=0;o<s.length;o++)a.translate(s[o],e);return t},i.rotate=function(t,e,n,s){for(var o=Math.cos(e),r=Math.sin(e),l=s?i.allBodies(t):t.bodies,c=0;c<l.length;c++){var u=l[c],h=u.position.x-n.x,p=u.position.y-n.y;a.setPosition(u,{x:n.x+(h*o-p*r),y:n.y+(h*r+p*o)}),a.rotate(u,e)}return t},i.scale=function(t,e,n,s,o){for(var r=o?i.allBodies(t):t.bodies,l=0;l<r.length;l++){var c=r[l],u=c.position.x-s.x,h=c.position.y-s.y;a.setPosition(c,{x:s.x+u*e,y:s.y+h*n}),a.scale(c,e,n)}return t},i.bounds=function(t){for(var e=i.allBodies(t),n=[],s=0;s<e.length;s+=1){var o=e[s];n.push(o.bounds.min,o.bounds.max)}return r.create(n)}},function(t,e,n){var i={};t.exports=i;var s=n(4),o=n(5),r=n(0);i._motionWakeThreshold=.18,i._motionSleepThreshold=.08,i._minBias=.9,i.update=function(t,e){for(var n=e/r._baseDelta,o=i._motionSleepThreshold,a=0;a<t.length;a++){var l=t[a],c=s.getSpeed(l),u=s.getAngularSpeed(l),h=c*c+u*u;if(0===l.force.x&&0===l.force.y){var p=Math.min(l.motion,h),d=Math.max(l.motion,h);l.motion=i._minBias*p+(1-i._minBias)*d,l.sleepThreshold>0&&l.motion<o?(l.sleepCounter+=1,l.sleepCounter>=l.sleepThreshold/n&&i.set(l,!0)):l.sleepCounter>0&&(l.sleepCounter-=1)}else i.set(l,!1)}},i.afterCollisions=function(t){for(var e=i._motionSleepThreshold,n=0;n<t.length;n++){var s=t[n];if(s.isActive){var o=s.collision,r=o.bodyA.parent,a=o.bodyB.parent;if(!(r.isSleeping&&a.isSleeping||r.isStatic||a.isStatic)&&(r.isSleeping||a.isSleeping)){var l=r.isSleeping&&!r.isStatic?r:a,c=l===r?a:r;!l.isStatic&&c.motion>e&&i.set(l,!1)}}}},i.set=function(t,e){var n=t.isSleeping;e?(t.isSleeping=!0,t.sleepCounter=t.sleepThreshold,t.positionImpulse.x=0,t.positionImpulse.y=0,t.positionPrev.x=t.position.x,t.positionPrev.y=t.position.y,t.anglePrev=t.angle,t.speed=0,t.angularSpeed=0,t.motion=0,n||o.trigger(t,"sleepStart")):(t.isSleeping=!1,t.sleepCounter=0,n&&o.trigger(t,"sleepEnd"))}},function(t,e,n){var i={};t.exports=i;var s,o,r,a=n(3),l=n(9);s=[],o={overlap:0,axis:null},r={overlap:0,axis:null},i.create=function(t,e){return{pair:null,collided:!1,bodyA:t,bodyB:e,parentA:t.parent,parentB:e.parent,depth:0,normal:{x:0,y:0},tangent:{x:0,y:0},penetration:{x:0,y:0},supports:[]}},i.collides=function(t,e,n){if(i._overlapAxes(o,t.vertices,e.vertices,t.axes),o.overlap<=0)return null;if(i._overlapAxes(r,e.vertices,t.vertices,e.axes),r.overlap<=0)return null;var s,c,u=n&&n.table[l.id(t,e)];u?s=u.collision:((s=i.create(t,e)).collided=!0,s.bodyA=t.id<e.id?t:e,s.bodyB=t.id<e.id?e:t,s.parentA=s.bodyA.parent,s.parentB=s.bodyB.parent),t=s.bodyA,e=s.bodyB,c=o.overlap<r.overlap?o:r;var h=s.normal,p=s.supports,d=c.axis,f=d.x,m=d.y;f*(e.position.x-t.position.x)+m*(e.position.y-t.position.y)<0?(h.x=f,h.y=m):(h.x=-f,h.y=-m),s.tangent.x=-h.y,s.tangent.y=h.x,s.depth=c.overlap,s.penetration.x=h.x*s.depth,s.penetration.y=h.y*s.depth;var g=i._findSupports(t,e,h,1),v=0;if(a.contains(t.vertices,g[0])&&(p[v++]=g[0]),a.contains(t.vertices,g[1])&&(p[v++]=g[1]),v<2){var y=i._findSupports(e,t,h,-1);a.contains(e.vertices,y[0])&&(p[v++]=y[0]),v<2&&a.contains(e.vertices,y[1])&&(p[v++]=y[1])}return 0===v&&(p[v++]=g[0]),p.length=v,s},i._overlapAxes=function(t,e,n,i){var s,o,r,a,l,c,u=e.length,h=n.length,p=e[0].x,d=e[0].y,f=n[0].x,m=n[0].y,g=i.length,v=Number.MAX_VALUE,y=0;for(l=0;l<g;l++){var _=i[l],x=_.x,b=_.y,w=p*x+d*b,T=f*x+m*b,S=w,C=T;for(c=1;c<u;c+=1)(a=e[c].x*x+e[c].y*b)>S?S=a:a<w&&(w=a);for(c=1;c<h;c+=1)(a=n[c].x*x+n[c].y*b)>C?C=a:a<T&&(T=a);if((s=(o=S-T)<(r=C-w)?o:r)<v&&(v=s,y=l,s<=0))break}t.axis=i[y],t.overlap=v},i._projectToAxis=function(t,e,n){for(var i=e[0].x*n.x+e[0].y*n.y,s=i,o=1;o<e.length;o+=1){var r=e[o].x*n.x+e[o].y*n.y;r>s?s=r:r<i&&(i=r)}t.min=i,t.max=s},i._findSupports=function(t,e,n,i){var o,r,a,l,c,u=e.vertices,h=u.length,p=t.position.x,d=t.position.y,f=n.x*i,m=n.y*i,g=Number.MAX_VALUE;for(c=0;c<h;c+=1)(l=f*(p-(r=u[c]).x)+m*(d-r.y))<g&&(g=l,o=r);return g=f*(p-(a=u[(h+o.index-1)%h]).x)+m*(d-a.y),f*(p-(r=u[(o.index+1)%h]).x)+m*(d-r.y)<g?(s[0]=o,s[1]=r,s):(s[0]=o,s[1]=a,s)}},function(t,e,n){var i={};t.exports=i;var s=n(16);i.create=function(t,e){var n=t.bodyA,s=t.bodyB,o={id:i.id(n,s),bodyA:n,bodyB:s,collision:t,contacts:[],activeContacts:[],separation:0,isActive:!0,confirmedActive:!0,isSensor:n.isSensor||s.isSensor,timeCreated:e,timeUpdated:e,inverseMass:0,friction:0,frictionStatic:0,restitution:0,slop:0};return i.update(o,t,e),o},i.update=function(t,e,n){var i=t.contacts,o=e.supports,r=t.activeContacts,a=e.parentA,l=e.parentB,c=a.vertices.length;t.isActive=!0,t.timeUpdated=n,t.collision=e,t.separation=e.depth,t.inverseMass=a.inverseMass+l.inverseMass,t.friction=a.friction<l.friction?a.friction:l.friction,t.frictionStatic=a.frictionStatic>l.frictionStatic?a.frictionStatic:l.frictionStatic,t.restitution=a.restitution>l.restitution?a.restitution:l.restitution,t.slop=a.slop>l.slop?a.slop:l.slop,e.pair=t,r.length=0;for(var u=0;u<o.length;u++){var h=o[u],p=h.body===a?h.index:c+h.index,d=i[p];d?r.push(d):r.push(i[p]=s.create(h))}},i.setActive=function(t,e,n){e?(t.isActive=!0,t.timeUpdated=n):(t.isActive=!1,t.activeContacts.length=0)},i.id=function(t,e){return t.id<e.id?"A"+t.id+"B"+e.id:"A"+e.id+"B"+t.id}},function(t,e,n){var i={};t.exports=i;var s=n(3),o=n(2),r=n(7),a=n(1),l=n(11),c=n(0);i._warming=.4,i._torqueDampen=1,i._minLength=1e-6,i.create=function(t){var e=t;e.bodyA&&!e.pointA&&(e.pointA={x:0,y:0}),e.bodyB&&!e.pointB&&(e.pointB={x:0,y:0});var n=e.bodyA?o.add(e.bodyA.position,e.pointA):e.pointA,i=e.bodyB?o.add(e.bodyB.position,e.pointB):e.pointB,s=o.magnitude(o.sub(n,i));e.length=void 0!==e.length?e.length:s,e.id=e.id||c.nextId(),e.label=e.label||"Constraint",e.type="constraint",e.stiffness=e.stiffness||(e.length>0?1:.7),e.damping=e.damping||0,e.angularStiffness=e.angularStiffness||0,e.angleA=e.bodyA?e.bodyA.angle:e.angleA,e.angleB=e.bodyB?e.bodyB.angle:e.angleB,e.plugin={};var r={visible:!0,lineWidth:2,strokeStyle:"#ffffff",type:"line",anchors:!0};return 0===e.length&&e.stiffness>.1?(r.type="pin",r.anchors=!1):e.stiffness<.9&&(r.type="spring"),e.render=c.extend(r,e.render),e},i.preSolveAll=function(t){for(var e=0;e<t.length;e+=1){var n=t[e],i=n.constraintImpulse;n.isStatic||0===i.x&&0===i.y&&0===i.angle||(n.position.x+=i.x,n.position.y+=i.y,n.angle+=i.angle)}},i.solveAll=function(t,e){for(var n=c.clamp(e/c._baseDelta,0,1),s=0;s<t.length;s+=1){var o=t[s],r=!o.bodyA||o.bodyA&&o.bodyA.isStatic,a=!o.bodyB||o.bodyB&&o.bodyB.isStatic;(r||a)&&i.solve(t[s],n)}for(s=0;s<t.length;s+=1)r=!(o=t[s]).bodyA||o.bodyA&&o.bodyA.isStatic,a=!o.bodyB||o.bodyB&&o.bodyB.isStatic,r||a||i.solve(t[s],n)},i.solve=function(t,e){var n=t.bodyA,s=t.bodyB,r=t.pointA,a=t.pointB;if(n||s){n&&!n.isStatic&&(o.rotate(r,n.angle-t.angleA,r),t.angleA=n.angle),s&&!s.isStatic&&(o.rotate(a,s.angle-t.angleB,a),t.angleB=s.angle);var l=r,c=a;if(n&&(l=o.add(n.position,r)),s&&(c=o.add(s.position,a)),l&&c){var u=o.sub(l,c),h=o.magnitude(u);h<i._minLength&&(h=i._minLength);var p,d,f,m,g,v=(h-t.length)/h,y=t.stiffness>=1||0===t.length?t.stiffness*e:t.stiffness*e*e,_=t.damping*e,x=o.mult(u,v*y),b=(n?n.inverseMass:0)+(s?s.inverseMass:0),w=b+((n?n.inverseInertia:0)+(s?s.inverseInertia:0));if(_>0){var T=o.create();f=o.div(u,h),g=o.sub(s&&o.sub(s.position,s.positionPrev)||T,n&&o.sub(n.position,n.positionPrev)||T),m=o.dot(f,g)}n&&!n.isStatic&&(d=n.inverseMass/b,n.constraintImpulse.x-=x.x*d,n.constraintImpulse.y-=x.y*d,n.position.x-=x.x*d,n.position.y-=x.y*d,_>0&&(n.positionPrev.x-=_*f.x*m*d,n.positionPrev.y-=_*f.y*m*d),p=o.cross(r,x)/w*i._torqueDampen*n.inverseInertia*(1-t.angularStiffness),n.constraintImpulse.angle-=p,n.angle-=p),s&&!s.isStatic&&(d=s.inverseMass/b,s.constraintImpulse.x+=x.x*d,s.constraintImpulse.y+=x.y*d,s.position.x+=x.x*d,s.position.y+=x.y*d,_>0&&(s.positionPrev.x+=_*f.x*m*d,s.positionPrev.y+=_*f.y*m*d),p=o.cross(a,x)/w*i._torqueDampen*s.inverseInertia*(1-t.angularStiffness),s.constraintImpulse.angle+=p,s.angle+=p)}}},i.postSolveAll=function(t){for(var e=0;e<t.length;e++){var n=t[e],c=n.constraintImpulse;if(!(n.isStatic||0===c.x&&0===c.y&&0===c.angle)){r.set(n,!1);for(var u=0;u<n.parts.length;u++){var h=n.parts[u];s.translate(h.vertices,c),u>0&&(h.position.x+=c.x,h.position.y+=c.y),0!==c.angle&&(s.rotate(h.vertices,c.angle,n.position),l.rotate(h.axes,c.angle),u>0&&o.rotateAbout(h.position,c.angle,n.position,h.position)),a.update(h.bounds,h.vertices,n.velocity)}c.angle*=i._warming,c.x*=i._warming,c.y*=i._warming}}},i.pointAWorld=function(t){return{x:(t.bodyA?t.bodyA.position.x:0)+(t.pointA?t.pointA.x:0),y:(t.bodyA?t.bodyA.position.y:0)+(t.pointA?t.pointA.y:0)}},i.pointBWorld=function(t){return{x:(t.bodyB?t.bodyB.position.x:0)+(t.pointB?t.pointB.x:0),y:(t.bodyB?t.bodyB.position.y:0)+(t.pointB?t.pointB.y:0)}}},function(t,e,n){var i={};t.exports=i;var s=n(2),o=n(0);i.fromVertices=function(t){for(var e={},n=0;n<t.length;n++){var i=(n+1)%t.length,r=s.normalise({x:t[i].y-t[n].y,y:t[n].x-t[i].x}),a=0===r.y?1/0:r.x/r.y;e[a=a.toFixed(3).toString()]=r}return o.values(e)},i.rotate=function(t,e){if(0!==e)for(var n=Math.cos(e),i=Math.sin(e),s=0;s<t.length;s++){var o,r=t[s];o=r.x*n-r.y*i,r.y=r.x*i+r.y*n,r.x=o}}},function(t,e,n){var i={};t.exports=i;var s=n(3),o=n(0),r=n(4),a=n(1),l=n(2);i.rectangle=function(t,e,n,i,a){a=a||{};var l={label:"Rectangle Body",position:{x:t,y:e},vertices:s.fromPath("L 0 0 L "+n+" 0 L "+n+" "+i+" L 0 "+i)};if(a.chamfer){var c=a.chamfer;l.vertices=s.chamfer(l.vertices,c.radius,c.quality,c.qualityMin,c.qualityMax),delete a.chamfer}return r.create(o.extend({},l,a))},i.trapezoid=function(t,e,n,i,a,l){l=l||{};var c,u=n*(a*=.5),h=u+(1-2*a)*n,p=h+u;c=a<.5?"L 0 0 L "+u+" "+-i+" L "+h+" "+-i+" L "+p+" 0":"L 0 0 L "+h+" "+-i+" L "+p+" 0";var d={label:"Trapezoid Body",position:{x:t,y:e},vertices:s.fromPath(c)};if(l.chamfer){var f=l.chamfer;d.vertices=s.chamfer(d.vertices,f.radius,f.quality,f.qualityMin,f.qualityMax),delete l.chamfer}return r.create(o.extend({},d,l))},i.circle=function(t,e,n,s,r){s=s||{};var a={label:"Circle Body",circleRadius:n};r=r||25;var l=Math.ceil(Math.max(10,Math.min(r,n)));return l%2==1&&(l+=1),i.polygon(t,e,l,n,o.extend({},a,s))},i.polygon=function(t,e,n,a,l){if(l=l||{},n<3)return i.circle(t,e,a,l);for(var c=2*Math.PI/n,u="",h=.5*c,p=0;p<n;p+=1){var d=h+p*c,f=Math.cos(d)*a,m=Math.sin(d)*a;u+="L "+f.toFixed(3)+" "+m.toFixed(3)+" "}var g={label:"Polygon Body",position:{x:t,y:e},vertices:s.fromPath(u)};if(l.chamfer){var v=l.chamfer;g.vertices=s.chamfer(g.vertices,v.radius,v.quality,v.qualityMin,v.qualityMax),delete l.chamfer}return r.create(o.extend({},g,l))},i.fromVertices=function(t,e,n,i,c,u,h,p){var d,f,m,g,v,y,_,x,b,w,T=o.getDecomp();for(d=Boolean(T&&T.quickDecomp),i=i||{},m=[],c=void 0!==c&&c,u=void 0!==u?u:.01,h=void 0!==h?h:10,p=void 0!==p?p:.01,o.isArray(n[0])||(n=[n]),b=0;b<n.length;b+=1)if(v=n[b],!(g=s.isConvex(v))&&!d&&o.warnOnce("Bodies.fromVertices: Install the 'poly-decomp' library and use Common.setDecomp or provide 'decomp' as a global to decompose concave vertices."),g||!d)v=g?s.clockwiseSort(v):s.hull(v),m.push({position:{x:t,y:e},vertices:v});else{var S=v.map((function(t){return[t.x,t.y]}));T.makeCCW(S),!1!==u&&T.removeCollinearPoints(S,u),!1!==p&&T.removeDuplicatePoints&&T.removeDuplicatePoints(S,p);var C=T.quickDecomp(S);for(y=0;y<C.length;y++){var A=C[y].map((function(t){return{x:t[0],y:t[1]}}));h>0&&s.area(A)<h||m.push({position:s.centre(A),vertices:A})}}for(y=0;y<m.length;y++)m[y]=r.create(o.extend(m[y],i));if(c)for(y=0;y<m.length;y++){var k=m[y];for(_=y+1;_<m.length;_++){var M=m[_];if(a.overlaps(k.bounds,M.bounds)){var O=k.vertices,I=M.vertices;for(x=0;x<k.vertices.length;x++)for(w=0;w<M.vertices.length;w++){var E=l.magnitudeSquared(l.sub(O[(x+1)%O.length],I[w])),P=l.magnitudeSquared(l.sub(O[x],I[(w+1)%I.length]));E<5&&P<5&&(O[x].isInternal=!0,I[w].isInternal=!0)}}}}return m.length>1?(f=r.create(o.extend({parts:m.slice(0)},i)),r.setPosition(f,{x:t,y:e}),f):m[0]}},function(t,e,n){var i={};t.exports=i;var s=n(0),o=n(8);i.create=function(t){return s.extend({bodies:[],pairs:null},t)},i.setBodies=function(t,e){t.bodies=e.slice(0)},i.clear=function(t){t.bodies=[]},i.collisions=function(t){var e,n,s=[],r=t.pairs,a=t.bodies,l=a.length,c=i.canCollide,u=o.collides;for(a.sort(i._compareBoundsX),e=0;e<l;e++){var h=a[e],p=h.bounds,d=h.bounds.max.x,f=h.bounds.max.y,m=h.bounds.min.y,g=h.isStatic||h.isSleeping,v=h.parts.length,y=1===v;for(n=e+1;n<l;n++){var _=a[n];if((k=_.bounds).min.x>d)break;if(!(f<k.min.y||m>k.max.y)&&(!g||!_.isStatic&&!_.isSleeping)&&c(h.collisionFilter,_.collisionFilter)){var x=_.parts.length;if(y&&1===x)(C=u(h,_,r))&&s.push(C);else for(var b=x>1?1:0,w=v>1?1:0;w<v;w++)for(var T=h.parts[w],S=(p=T.bounds,b);S<x;S++){var C,A=_.parts[S],k=A.bounds;p.min.x>k.max.x||p.max.x<k.min.x||p.max.y<k.min.y||p.min.y>k.max.y||(C=u(T,A,r))&&s.push(C)}}}}return s},i.canCollide=function(t,e){return t.group===e.group&&0!==t.group?t.group>0:0!=(t.mask&e.category)&&0!=(e.mask&t.category)},i._compareBoundsX=function(t,e){return t.bounds.min.x-e.bounds.min.x}},function(t,e,n){var i={};t.exports=i;var s=n(0);i.create=function(t){var e={};return t||s.log("Mouse.create: element was undefined, defaulting to document.body","warn"),e.element=t||document.body,e.absolute={x:0,y:0},e.position={x:0,y:0},e.mousedownPosition={x:0,y:0},e.mouseupPosition={x:0,y:0},e.offset={x:0,y:0},e.scale={x:1,y:1},e.wheelDelta=0,e.button=-1,e.pixelRatio=parseInt(e.element.getAttribute("data-pixel-ratio"),10)||1,e.sourceEvents={mousemove:null,mousedown:null,mouseup:null,mousewheel:null},e.mousemove=function(t){var n=i._getRelativeMousePosition(t,e.element,e.pixelRatio);t.changedTouches&&(e.button=0,t.preventDefault()),e.absolute.x=n.x,e.absolute.y=n.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y,e.sourceEvents.mousemove=t},e.mousedown=function(t){var n=i._getRelativeMousePosition(t,e.element,e.pixelRatio);t.changedTouches?(e.button=0,t.preventDefault()):e.button=t.button,e.absolute.x=n.x,e.absolute.y=n.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y,e.mousedownPosition.x=e.position.x,e.mousedownPosition.y=e.position.y,e.sourceEvents.mousedown=t},e.mouseup=function(t){var n=i._getRelativeMousePosition(t,e.element,e.pixelRatio);t.changedTouches&&t.preventDefault(),e.button=-1,e.absolute.x=n.x,e.absolute.y=n.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y,e.mouseupPosition.x=e.position.x,e.mouseupPosition.y=e.position.y,e.sourceEvents.mouseup=t},e.mousewheel=function(t){e.wheelDelta=Math.max(-1,Math.min(1,t.wheelDelta||-t.detail)),t.preventDefault()},i.setElement(e,e.element),e},i.setElement=function(t,e){t.element=e,e.addEventListener("mousemove",t.mousemove),e.addEventListener("mousedown",t.mousedown),e.addEventListener("mouseup",t.mouseup),e.addEventListener("mousewheel",t.mousewheel),e.addEventListener("DOMMouseScroll",t.mousewheel),e.addEventListener("touchmove",t.mousemove),e.addEventListener("touchstart",t.mousedown),e.addEventListener("touchend",t.mouseup)},i.clearSourceEvents=function(t){t.sourceEvents.mousemove=null,t.sourceEvents.mousedown=null,t.sourceEvents.mouseup=null,t.sourceEvents.mousewheel=null,t.wheelDelta=0},i.setOffset=function(t,e){t.offset.x=e.x,t.offset.y=e.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y},i.setScale=function(t,e){t.scale.x=e.x,t.scale.y=e.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y},i._getRelativeMousePosition=function(t,e,n){var i,s,o=e.getBoundingClientRect(),r=document.documentElement||document.body.parentNode||document.body,a=void 0!==window.pageXOffset?window.pageXOffset:r.scrollLeft,l=void 0!==window.pageYOffset?window.pageYOffset:r.scrollTop,c=t.changedTouches;return c?(i=c[0].pageX-o.left-a,s=c[0].pageY-o.top-l):(i=t.pageX-o.left-a,s=t.pageY-o.top-l),{x:i/(e.clientWidth/(e.width||e.clientWidth)*n),y:s/(e.clientHeight/(e.height||e.clientHeight)*n)}}},function(t,e,n){var i={};t.exports=i;var s=n(0);i._registry={},i.register=function(t){if(i.isPlugin(t)||s.warn("Plugin.register:",i.toString(t),"does not implement all required fields."),t.name in i._registry){var e=i._registry[t.name],n=i.versionParse(t.version).number,o=i.versionParse(e.version).number;n>o?(s.warn("Plugin.register:",i.toString(e),"was upgraded to",i.toString(t)),i._registry[t.name]=t):n<o?s.warn("Plugin.register:",i.toString(e),"can not be downgraded to",i.toString(t)):t!==e&&s.warn("Plugin.register:",i.toString(t),"is already registered to different plugin object")}else i._registry[t.name]=t;return t},i.resolve=function(t){return i._registry[i.dependencyParse(t).name]},i.toString=function(t){return"string"==typeof t?t:(t.name||"anonymous")+"@"+(t.version||t.range||"0.0.0")},i.isPlugin=function(t){return t&&t.name&&t.version&&t.install},i.isUsed=function(t,e){return t.used.indexOf(e)>-1},i.isFor=function(t,e){var n=t.for&&i.dependencyParse(t.for);return!t.for||e.name===n.name&&i.versionSatisfies(e.version,n.range)},i.use=function(t,e){if(t.uses=(t.uses||[]).concat(e||[]),0!==t.uses.length){for(var n=i.dependencies(t),o=s.topologicalSort(n),r=[],a=0;a<o.length;a+=1)if(o[a]!==t.name){var l=i.resolve(o[a]);l?i.isUsed(t,l.name)||(i.isFor(l,t)||(s.warn("Plugin.use:",i.toString(l),"is for",l.for,"but installed on",i.toString(t)+"."),l._warned=!0),l.install?l.install(t):(s.warn("Plugin.use:",i.toString(l),"does not specify an install function."),l._warned=!0),l._warned?(r.push("🔶 "+i.toString(l)),delete l._warned):r.push("✅ "+i.toString(l)),t.used.push(l.name)):r.push("❌ "+o[a])}r.length>0&&s.info(r.join("  "))}else s.warn("Plugin.use:",i.toString(t),"does not specify any dependencies to install.")},i.dependencies=function(t,e){var n=i.dependencyParse(t),o=n.name;if(!(o in(e=e||{}))){t=i.resolve(t)||t,e[o]=s.map(t.uses||[],(function(e){i.isPlugin(e)&&i.register(e);var o=i.dependencyParse(e),r=i.resolve(e);return r&&!i.versionSatisfies(r.version,o.range)?(s.warn("Plugin.dependencies:",i.toString(r),"does not satisfy",i.toString(o),"used by",i.toString(n)+"."),r._warned=!0,t._warned=!0):r||(s.warn("Plugin.dependencies:",i.toString(e),"used by",i.toString(n),"could not be resolved."),t._warned=!0),o.name}));for(var r=0;r<e[o].length;r+=1)i.dependencies(e[o][r],e);return e}},i.dependencyParse=function(t){return s.isString(t)?(/^[\w-]+(@(\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-+]+)?))?$/.test(t)||s.warn("Plugin.dependencyParse:",t,"is not a valid dependency string."),{name:t.split("@")[0],range:t.split("@")[1]||"*"}):{name:t.name,range:t.range||t.version}},i.versionParse=function(t){var e=/^(\*)|(\^|~|>=|>)?\s*((\d+)\.(\d+)\.(\d+))(-[0-9A-Za-z-+]+)?$/;e.test(t)||s.warn("Plugin.versionParse:",t,"is not a valid version or range.");var n=e.exec(t),i=Number(n[4]),o=Number(n[5]),r=Number(n[6]);return{isRange:Boolean(n[1]||n[2]),version:n[3],range:t,operator:n[1]||n[2]||"",major:i,minor:o,patch:r,parts:[i,o,r],prerelease:n[7],number:1e8*i+1e4*o+r}},i.versionSatisfies=function(t,e){e=e||"*";var n=i.versionParse(e),s=i.versionParse(t);if(n.isRange){if("*"===n.operator||"*"===t)return!0;if(">"===n.operator)return s.number>n.number;if(">="===n.operator)return s.number>=n.number;if("~"===n.operator)return s.major===n.major&&s.minor===n.minor&&s.patch>=n.patch;if("^"===n.operator)return n.major>0?s.major===n.major&&s.number>=n.number:n.minor>0?s.minor===n.minor&&s.patch>=n.patch:s.patch===n.patch}return t===e||"*"===t}},function(t,e){var n={};t.exports=n,n.create=function(t){return{vertex:t,normalImpulse:0,tangentImpulse:0}}},function(t,e,n){var i={};t.exports=i;var s=n(7),o=n(18),r=n(13),a=n(19),l=n(5),c=n(6),u=n(10),h=n(0),p=n(4);i.create=function(t){t=t||{};var e=h.extend({positionIterations:6,velocityIterations:4,constraintIterations:2,enableSleeping:!1,events:[],plugin:{},gravity:{x:0,y:1,scale:.001},timing:{timestamp:0,timeScale:1,lastDelta:0,lastElapsed:0}},t);return e.world=t.world||c.create({label:"World"}),e.pairs=t.pairs||a.create(),e.detector=t.detector||r.create(),e.grid={buckets:[]},e.world.gravity=e.gravity,e.broadphase=e.grid,e.metrics={},e},i.update=function(t,e){var n,p=h.now(),d=t.world,f=t.detector,m=t.pairs,g=t.timing,v=g.timestamp;e=void 0!==e?e:h._baseDelta,e*=g.timeScale,g.timestamp+=e,g.lastDelta=e;var y={timestamp:g.timestamp,delta:e};l.trigger(t,"beforeUpdate",y);var _=c.allBodies(d),x=c.allConstraints(d);for(d.isModified&&(r.setBodies(f,_),c.setModified(d,!1,!1,!0)),t.enableSleeping&&s.update(_,e),i._bodiesApplyGravity(_,t.gravity),e>0&&i._bodiesUpdate(_,e),u.preSolveAll(_),n=0;n<t.constraintIterations;n++)u.solveAll(x,e);u.postSolveAll(_),f.pairs=t.pairs;var b=r.collisions(f);a.update(m,b,v),t.enableSleeping&&s.afterCollisions(m.list),m.collisionStart.length>0&&l.trigger(t,"collisionStart",{pairs:m.collisionStart});var w=h.clamp(20/t.positionIterations,0,1);for(o.preSolvePosition(m.list),n=0;n<t.positionIterations;n++)o.solvePosition(m.list,e,w);for(o.postSolvePosition(_),u.preSolveAll(_),n=0;n<t.constraintIterations;n++)u.solveAll(x,e);for(u.postSolveAll(_),o.preSolveVelocity(m.list),n=0;n<t.velocityIterations;n++)o.solveVelocity(m.list,e);return i._bodiesUpdateVelocities(_),m.collisionActive.length>0&&l.trigger(t,"collisionActive",{pairs:m.collisionActive}),m.collisionEnd.length>0&&l.trigger(t,"collisionEnd",{pairs:m.collisionEnd}),i._bodiesClearForces(_),l.trigger(t,"afterUpdate",y),t.timing.lastElapsed=h.now()-p,t},i.merge=function(t,e){if(h.extend(t,e),e.world){t.world=e.world,i.clear(t);for(var n=c.allBodies(t.world),o=0;o<n.length;o++){var r=n[o];s.set(r,!1),r.id=h.nextId()}}},i.clear=function(t){a.clear(t.pairs),r.clear(t.detector)},i._bodiesClearForces=function(t){for(var e=t.length,n=0;n<e;n++){var i=t[n];i.force.x=0,i.force.y=0,i.torque=0}},i._bodiesApplyGravity=function(t,e){var n=void 0!==e.scale?e.scale:.001,i=t.length;if((0!==e.x||0!==e.y)&&0!==n)for(var s=0;s<i;s++){var o=t[s];o.isStatic||o.isSleeping||(o.force.y+=o.mass*e.y*n,o.force.x+=o.mass*e.x*n)}},i._bodiesUpdate=function(t,e){for(var n=t.length,i=0;i<n;i++){var s=t[i];s.isStatic||s.isSleeping||p.update(s,e)}},i._bodiesUpdateVelocities=function(t){for(var e=t.length,n=0;n<e;n++)p.updateVelocities(t[n])}},function(t,e,n){var i={};t.exports=i;var s=n(3),o=n(0),r=n(1);i._restingThresh=2,i._restingThreshTangent=Math.sqrt(6),i._positionDampen=.9,i._positionWarming=.8,i._frictionNormalMultiplier=5,i._frictionMaxStatic=Number.MAX_VALUE,i.preSolvePosition=function(t){var e,n,i,s=t.length;for(e=0;e<s;e++)(n=t[e]).isActive&&(i=n.activeContacts.length,n.collision.parentA.totalContacts+=i,n.collision.parentB.totalContacts+=i)},i.solvePosition=function(t,e,n){var s,r,a,l,c,u,h,p,d=i._positionDampen*(n||1),f=o.clamp(e/o._baseDelta,0,1),m=t.length;for(s=0;s<m;s++)(r=t[s]).isActive&&!r.isSensor&&(l=(a=r.collision).parentA,c=a.parentB,u=a.normal,r.separation=u.x*(c.positionImpulse.x+a.penetration.x-l.positionImpulse.x)+u.y*(c.positionImpulse.y+a.penetration.y-l.positionImpulse.y));for(s=0;s<m;s++)(r=t[s]).isActive&&!r.isSensor&&(l=(a=r.collision).parentA,c=a.parentB,u=a.normal,p=r.separation-r.slop*f,(l.isStatic||c.isStatic)&&(p*=2),l.isStatic||l.isSleeping||(h=d/l.totalContacts,l.positionImpulse.x+=u.x*p*h,l.positionImpulse.y+=u.y*p*h),c.isStatic||c.isSleeping||(h=d/c.totalContacts,c.positionImpulse.x-=u.x*p*h,c.positionImpulse.y-=u.y*p*h))},i.postSolvePosition=function(t){for(var e=i._positionWarming,n=t.length,o=s.translate,a=r.update,l=0;l<n;l++){var c=t[l],u=c.positionImpulse,h=u.x,p=u.y,d=c.velocity;if(c.totalContacts=0,0!==h||0!==p){for(var f=0;f<c.parts.length;f++){var m=c.parts[f];o(m.vertices,u),a(m.bounds,m.vertices,d),m.position.x+=h,m.position.y+=p}c.positionPrev.x+=h,c.positionPrev.y+=p,h*d.x+p*d.y<0?(u.x=0,u.y=0):(u.x*=e,u.y*=e)}}},i.preSolveVelocity=function(t){var e,n,i=t.length;for(e=0;e<i;e++){var s=t[e];if(s.isActive&&!s.isSensor){var o=s.activeContacts,r=o.length,a=s.collision,l=a.parentA,c=a.parentB,u=a.normal,h=a.tangent;for(n=0;n<r;n++){var p=o[n],d=p.vertex,f=p.normalImpulse,m=p.tangentImpulse;if(0!==f||0!==m){var g=u.x*f+h.x*m,v=u.y*f+h.y*m;l.isStatic||l.isSleeping||(l.positionPrev.x+=g*l.inverseMass,l.positionPrev.y+=v*l.inverseMass,l.anglePrev+=l.inverseInertia*((d.x-l.position.x)*v-(d.y-l.position.y)*g)),c.isStatic||c.isSleeping||(c.positionPrev.x-=g*c.inverseMass,c.positionPrev.y-=v*c.inverseMass,c.anglePrev-=c.inverseInertia*((d.x-c.position.x)*v-(d.y-c.position.y)*g))}}}}},i.solveVelocity=function(t,e){var n,s,r,a,l=e/o._baseDelta,c=l*l*l,u=-i._restingThresh*l,h=i._restingThreshTangent,p=i._frictionNormalMultiplier*l,d=i._frictionMaxStatic,f=t.length;for(r=0;r<f;r++){var m=t[r];if(m.isActive&&!m.isSensor){var g=m.collision,v=g.parentA,y=g.parentB,_=v.velocity,x=y.velocity,b=g.normal.x,w=g.normal.y,T=g.tangent.x,S=g.tangent.y,C=m.activeContacts,A=C.length,k=1/A,M=v.inverseMass+y.inverseMass,O=m.friction*m.frictionStatic*p;for(_.x=v.position.x-v.positionPrev.x,_.y=v.position.y-v.positionPrev.y,x.x=y.position.x-y.positionPrev.x,x.y=y.position.y-y.positionPrev.y,v.angularVelocity=v.angle-v.anglePrev,y.angularVelocity=y.angle-y.anglePrev,a=0;a<A;a++){var I=C[a],E=I.vertex,P=E.x-v.position.x,D=E.y-v.position.y,R=E.x-y.position.x,V=E.y-y.position.y,N=_.x-D*v.angularVelocity,B=_.y+P*v.angularVelocity,q=N-(x.x-V*y.angularVelocity),F=B-(x.y+R*y.angularVelocity),L=b*q+w*F,j=T*q+S*F,W=m.separation+L,U=Math.min(W,1),H=(U=W<0?0:U)*O;j<-H||j>H?(s=j>0?j:-j,(n=m.friction*(j>0?1:-1)*c)<-s?n=-s:n>s&&(n=s)):(n=j,s=d);var z=P*w-D*b,G=R*w-V*b,X=k/(M+v.inverseInertia*z*z+y.inverseInertia*G*G),Y=(1+m.restitution)*L*X;if(n*=X,L<u)I.normalImpulse=0;else{var Z=I.normalImpulse;I.normalImpulse+=Y,I.normalImpulse>0&&(I.normalImpulse=0),Y=I.normalImpulse-Z}if(j<-h||j>h)I.tangentImpulse=0;else{var $=I.tangentImpulse;I.tangentImpulse+=n,I.tangentImpulse<-s&&(I.tangentImpulse=-s),I.tangentImpulse>s&&(I.tangentImpulse=s),n=I.tangentImpulse-$}var Q=b*Y+T*n,J=w*Y+S*n;v.isStatic||v.isSleeping||(v.positionPrev.x+=Q*v.inverseMass,v.positionPrev.y+=J*v.inverseMass,v.anglePrev+=(P*J-D*Q)*v.inverseInertia),y.isStatic||y.isSleeping||(y.positionPrev.x-=Q*y.inverseMass,y.positionPrev.y-=J*y.inverseMass,y.anglePrev-=(R*J-V*Q)*y.inverseInertia)}}}}},function(t,e,n){var i={};t.exports=i;var s=n(9),o=n(0);i.create=function(t){return o.extend({table:{},list:[],collisionStart:[],collisionActive:[],collisionEnd:[]},t)},i.update=function(t,e,n){var i,o,r,a,l=t.list,c=l.length,u=t.table,h=e.length,p=t.collisionStart,d=t.collisionEnd,f=t.collisionActive;for(p.length=0,d.length=0,f.length=0,a=0;a<c;a++)l[a].confirmedActive=!1;for(a=0;a<h;a++)(r=(i=e[a]).pair)?(r.isActive?f.push(r):p.push(r),s.update(r,i,n),r.confirmedActive=!0):(u[(r=s.create(i,n)).id]=r,p.push(r),l.push(r));var m=[];for(c=l.length,a=0;a<c;a++)(r=l[a]).confirmedActive||(s.setActive(r,!1,n),d.push(r),r.collision.bodyA.isSleeping||r.collision.bodyB.isSleeping||m.push(a));for(a=0;a<m.length;a++)r=l[o=m[a]-a],l.splice(o,1),delete u[r.id]},i.clear=function(t){return t.table={},t.list.length=0,t.collisionStart.length=0,t.collisionActive.length=0,t.collisionEnd.length=0,t}},function(t,e,n){var i=t.exports=n(21);i.Axes=n(11),i.Bodies=n(12),i.Body=n(4),i.Bounds=n(1),i.Collision=n(8),i.Common=n(0),i.Composite=n(6),i.Composites=n(22),i.Constraint=n(10),i.Contact=n(16),i.Detector=n(13),i.Engine=n(17),i.Events=n(5),i.Grid=n(23),i.Mouse=n(14),i.MouseConstraint=n(24),i.Pair=n(9),i.Pairs=n(19),i.Plugin=n(15),i.Query=n(25),i.Render=n(26),i.Resolver=n(18),i.Runner=n(27),i.SAT=n(28),i.Sleeping=n(7),i.Svg=n(29),i.Vector=n(2),i.Vertices=n(3),i.World=n(30),i.Engine.run=i.Runner.run,i.Common.deprecated(i.Engine,"run","Engine.run ➤ use Matter.Runner.run(engine) instead")},function(t,e,n){var i={};t.exports=i;var s=n(15),o=n(0);i.name="matter-js",i.version="0.19.0",i.uses=[],i.used=[],i.use=function(){s.use(i,Array.prototype.slice.call(arguments))},i.before=function(t,e){return t=t.replace(/^Matter./,""),o.chainPathBefore(i,t,e)},i.after=function(t,e){return t=t.replace(/^Matter./,""),o.chainPathAfter(i,t,e)}},function(t,e,n){var i={};t.exports=i;var s=n(6),o=n(10),r=n(0),a=n(4),l=n(12),c=r.deprecated;i.stack=function(t,e,n,i,o,r,l){for(var c,u=s.create({label:"Stack"}),h=t,p=e,d=0,f=0;f<i;f++){for(var m=0,g=0;g<n;g++){var v=l(h,p,g,f,c,d);if(v){var y=v.bounds.max.y-v.bounds.min.y,_=v.bounds.max.x-v.bounds.min.x;y>m&&(m=y),a.translate(v,{x:.5*_,y:.5*y}),h=v.bounds.max.x+o,s.addBody(u,v),c=v,d+=1}else h+=o}p+=m+r,h=t}return u},i.chain=function(t,e,n,i,a,l){for(var c=t.bodies,u=1;u<c.length;u++){var h=c[u-1],p=c[u],d=h.bounds.max.y-h.bounds.min.y,f=h.bounds.max.x-h.bounds.min.x,m=p.bounds.max.y-p.bounds.min.y,g={bodyA:h,pointA:{x:f*e,y:d*n},bodyB:p,pointB:{x:(p.bounds.max.x-p.bounds.min.x)*i,y:m*a}},v=r.extend(g,l);s.addConstraint(t,o.create(v))}return t.label+=" Chain",t},i.mesh=function(t,e,n,i,a){var l,c,u,h,p,d=t.bodies;for(l=0;l<n;l++){for(c=1;c<e;c++)u=d[c-1+l*e],h=d[c+l*e],s.addConstraint(t,o.create(r.extend({bodyA:u,bodyB:h},a)));if(l>0)for(c=0;c<e;c++)u=d[c+(l-1)*e],h=d[c+l*e],s.addConstraint(t,o.create(r.extend({bodyA:u,bodyB:h},a))),i&&c>0&&(p=d[c-1+(l-1)*e],s.addConstraint(t,o.create(r.extend({bodyA:p,bodyB:h},a)))),i&&c<e-1&&(p=d[c+1+(l-1)*e],s.addConstraint(t,o.create(r.extend({bodyA:p,bodyB:h},a))))}return t.label+=" Mesh",t},i.pyramid=function(t,e,n,s,o,r,l){return i.stack(t,e,n,s,o,r,(function(e,i,r,c,u,h){var p=Math.min(s,Math.ceil(n/2)),d=u?u.bounds.max.x-u.bounds.min.x:0;if(!(c>p||r<(c=p-c)||r>n-1-c))return 1===h&&a.translate(u,{x:(r+(n%2==1?1:-1))*d,y:0}),l(t+(u?r*d:0)+r*o,i,r,c,u,h)}))},i.newtonsCradle=function(t,e,n,i,r){for(var a=s.create({label:"Newtons Cradle"}),c=0;c<n;c++){var u=l.circle(t+c*(1.9*i),e+r,i,{inertia:1/0,restitution:1,friction:0,frictionAir:1e-4,slop:1}),h=o.create({pointA:{x:t+c*(1.9*i),y:e},bodyB:u});s.addBody(a,u),s.addConstraint(a,h)}return a},c(i,"newtonsCradle","Composites.newtonsCradle ➤ moved to newtonsCradle example"),i.car=function(t,e,n,i,r){var c=a.nextGroup(!0),u=.5*-n+20,h=.5*n-20,p=s.create({label:"Car"}),d=l.rectangle(t,e,n,i,{collisionFilter:{group:c},chamfer:{radius:.5*i},density:2e-4}),f=l.circle(t+u,e+0,r,{collisionFilter:{group:c},friction:.8}),m=l.circle(t+h,e+0,r,{collisionFilter:{group:c},friction:.8}),g=o.create({bodyB:d,pointB:{x:u,y:0},bodyA:f,stiffness:1,length:0}),v=o.create({bodyB:d,pointB:{x:h,y:0},bodyA:m,stiffness:1,length:0});return s.addBody(p,d),s.addBody(p,f),s.addBody(p,m),s.addConstraint(p,g),s.addConstraint(p,v),p},c(i,"car","Composites.car ➤ moved to car example"),i.softBody=function(t,e,n,s,o,a,c,u,h,p){h=r.extend({inertia:1/0},h),p=r.extend({stiffness:.2,render:{type:"line",anchors:!1}},p);var d=i.stack(t,e,n,s,o,a,(function(t,e){return l.circle(t,e,u,h)}));return i.mesh(d,n,s,c,p),d.label="Soft Body",d},c(i,"softBody","Composites.softBody ➤ moved to softBody and cloth examples")},function(t,e,n){var i={};t.exports=i;var s=n(9),o=n(0),r=o.deprecated;i.create=function(t){return o.extend({buckets:{},pairs:{},pairsList:[],bucketWidth:48,bucketHeight:48},t)},i.update=function(t,e,n,s){var o,r,a,l,c,u=n.world,h=t.buckets,p=!1;for(o=0;o<e.length;o++){var d=e[o];if((!d.isSleeping||s)&&(!u.bounds||!(d.bounds.max.x<u.bounds.min.x||d.bounds.min.x>u.bounds.max.x||d.bounds.max.y<u.bounds.min.y||d.bounds.min.y>u.bounds.max.y))){var f=i._getRegion(t,d);if(!d.region||f.id!==d.region.id||s){d.region&&!s||(d.region=f);var m=i._regionUnion(f,d.region);for(r=m.startCol;r<=m.endCol;r++)for(a=m.startRow;a<=m.endRow;a++){l=h[c=i._getBucketId(r,a)];var g=r>=f.startCol&&r<=f.endCol&&a>=f.startRow&&a<=f.endRow,v=r>=d.region.startCol&&r<=d.region.endCol&&a>=d.region.startRow&&a<=d.region.endRow;!g&&v&&v&&l&&i._bucketRemoveBody(t,l,d),(d.region===f||g&&!v||s)&&(l||(l=i._createBucket(h,c)),i._bucketAddBody(t,l,d))}d.region=f,p=!0}}}p&&(t.pairsList=i._createActivePairsList(t))},r(i,"update","Grid.update ➤ replaced by Matter.Detector"),i.clear=function(t){t.buckets={},t.pairs={},t.pairsList=[]},r(i,"clear","Grid.clear ➤ replaced by Matter.Detector"),i._regionUnion=function(t,e){var n=Math.min(t.startCol,e.startCol),s=Math.max(t.endCol,e.endCol),o=Math.min(t.startRow,e.startRow),r=Math.max(t.endRow,e.endRow);return i._createRegion(n,s,o,r)},i._getRegion=function(t,e){var n=e.bounds,s=Math.floor(n.min.x/t.bucketWidth),o=Math.floor(n.max.x/t.bucketWidth),r=Math.floor(n.min.y/t.bucketHeight),a=Math.floor(n.max.y/t.bucketHeight);return i._createRegion(s,o,r,a)},i._createRegion=function(t,e,n,i){return{id:t+","+e+","+n+","+i,startCol:t,endCol:e,startRow:n,endRow:i}},i._getBucketId=function(t,e){return"C"+t+"R"+e},i._createBucket=function(t,e){return t[e]=[]},i._bucketAddBody=function(t,e,n){var i,o=t.pairs,r=s.id,a=e.length;for(i=0;i<a;i++){var l=e[i];if(!(n.id===l.id||n.isStatic&&l.isStatic)){var c=r(n,l),u=o[c];u?u[2]+=1:o[c]=[n,l,1]}}e.push(n)},i._bucketRemoveBody=function(t,e,n){var i,r=t.pairs,a=s.id;e.splice(o.indexOf(e,n),1);var l=e.length;for(i=0;i<l;i++){var c=r[a(n,e[i])];c&&(c[2]-=1)}},i._createActivePairsList=function(t){var e,n,i=t.pairs,s=o.keys(i),r=s.length,a=[];for(n=0;n<r;n++)(e=i[s[n]])[2]>0?a.push(e):delete i[s[n]];return a}},function(t,e,n){var i={};t.exports=i;var s=n(3),o=n(7),r=n(14),a=n(5),l=n(13),c=n(10),u=n(6),h=n(0),p=n(1);i.create=function(t,e){var n=(t?t.mouse:null)||(e?e.mouse:null);n||(t&&t.render&&t.render.canvas?n=r.create(t.render.canvas):e&&e.element?n=r.create(e.element):(n=r.create(),h.warn("MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected")));var s={type:"mouseConstraint",mouse:n,element:null,body:null,constraint:c.create({label:"Mouse Constraint",pointA:n.position,pointB:{x:0,y:0},length:.01,stiffness:.1,angularStiffness:1,render:{strokeStyle:"#90EE90",lineWidth:3}}),collisionFilter:{category:1,mask:4294967295,group:0}},o=h.extend(s,e);return a.on(t,"beforeUpdate",(function(){var e=u.allBodies(t.world);i.update(o,e),i._triggerEvents(o)})),o},i.update=function(t,e){var n=t.mouse,i=t.constraint,r=t.body;if(0===n.button){if(i.bodyB)o.set(i.bodyB,!1),i.pointA=n.position;else for(var c=0;c<e.length;c++)if(r=e[c],p.contains(r.bounds,n.position)&&l.canCollide(r.collisionFilter,t.collisionFilter))for(var u=r.parts.length>1?1:0;u<r.parts.length;u++){var h=r.parts[u];if(s.contains(h.vertices,n.position)){i.pointA=n.position,i.bodyB=t.body=r,i.pointB={x:n.position.x-r.position.x,y:n.position.y-r.position.y},i.angleB=r.angle,o.set(r,!1),a.trigger(t,"startdrag",{mouse:n,body:r});break}}}else i.bodyB=t.body=null,i.pointB=null,r&&a.trigger(t,"enddrag",{mouse:n,body:r})},i._triggerEvents=function(t){var e=t.mouse,n=e.sourceEvents;n.mousemove&&a.trigger(t,"mousemove",{mouse:e}),n.mousedown&&a.trigger(t,"mousedown",{mouse:e}),n.mouseup&&a.trigger(t,"mouseup",{mouse:e}),r.clearSourceEvents(e)}},function(t,e,n){var i={};t.exports=i;var s=n(2),o=n(8),r=n(1),a=n(12),l=n(3);i.collides=function(t,e){for(var n=[],i=e.length,s=t.bounds,a=o.collides,l=r.overlaps,c=0;c<i;c++){var u=e[c],h=u.parts.length,p=1===h?0:1;if(l(u.bounds,s))for(var d=p;d<h;d++){var f=u.parts[d];if(l(f.bounds,s)){var m=a(f,t);if(m){n.push(m);break}}}}return n},i.ray=function(t,e,n,o){o=o||1e-100;for(var r=s.angle(e,n),l=s.magnitude(s.sub(e,n)),c=.5*(n.x+e.x),u=.5*(n.y+e.y),h=a.rectangle(c,u,l,o,{angle:r}),p=i.collides(h,t),d=0;d<p.length;d+=1){var f=p[d];f.body=f.bodyB=f.bodyA}return p},i.region=function(t,e,n){for(var i=[],s=0;s<t.length;s++){var o=t[s],a=r.overlaps(o.bounds,e);(a&&!n||!a&&n)&&i.push(o)}return i},i.point=function(t,e){for(var n=[],i=0;i<t.length;i++){var s=t[i];if(r.contains(s.bounds,e))for(var o=1===s.parts.length?0:1;o<s.parts.length;o++){var a=s.parts[o];if(r.contains(a.bounds,e)&&l.contains(a.vertices,e)){n.push(s);break}}}return n}},function(t,e,n){var i={};t.exports=i;var s=n(4),o=n(0),r=n(6),a=n(1),l=n(5),c=n(2),u=n(14);!function(){var t,e;"undefined"!=typeof window&&(t=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(t){window.setTimeout((function(){t(o.now())}),1e3/60)},e=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),i._goodFps=30,i._goodDelta=1e3/60,i.create=function(t){var e={engine:null,element:null,canvas:null,mouse:null,frameRequestId:null,timing:{historySize:60,delta:0,deltaHistory:[],lastTime:0,lastTimestamp:0,lastElapsed:0,timestampElapsed:0,timestampElapsedHistory:[],engineDeltaHistory:[],engineElapsedHistory:[],elapsedHistory:[]},options:{width:800,height:600,pixelRatio:1,background:"#14151f",wireframeBackground:"#14151f",hasBounds:!!t.bounds,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showStats:!1,showPerformance:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showSeparations:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showVertexNumbers:!1,showConvexHulls:!1,showInternalEdges:!1,showMousePosition:!1}},n=o.extend(e,t);return n.canvas&&(n.canvas.width=n.options.width||n.canvas.width,n.canvas.height=n.options.height||n.canvas.height),n.mouse=t.mouse,n.engine=t.engine,n.canvas=n.canvas||p(n.options.width,n.options.height),n.context=n.canvas.getContext("2d"),n.textures={},n.bounds=n.bounds||{min:{x:0,y:0},max:{x:n.canvas.width,y:n.canvas.height}},n.controller=i,n.options.showBroadphase=!1,1!==n.options.pixelRatio&&i.setPixelRatio(n,n.options.pixelRatio),o.isElement(n.element)&&n.element.appendChild(n.canvas),n},i.run=function(e){!function s(o){e.frameRequestId=t(s),n(e,o),i.world(e,o),(e.options.showStats||e.options.showDebug)&&i.stats(e,e.context,o),(e.options.showPerformance||e.options.showDebug)&&i.performance(e,e.context,o)}()},i.stop=function(t){e(t.frameRequestId)},i.setPixelRatio=function(t,e){var n=t.options,i=t.canvas;"auto"===e&&(e=d(i)),n.pixelRatio=e,i.setAttribute("data-pixel-ratio",e),i.width=n.width*e,i.height=n.height*e,i.style.width=n.width+"px",i.style.height=n.height+"px"},i.lookAt=function(t,e,n,i){i=void 0===i||i,e=o.isArray(e)?e:[e],n=n||{x:0,y:0};for(var s={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}},r=0;r<e.length;r+=1){var a=e[r],l=a.bounds?a.bounds.min:a.min||a.position||a,c=a.bounds?a.bounds.max:a.max||a.position||a;l&&c&&(l.x<s.min.x&&(s.min.x=l.x),c.x>s.max.x&&(s.max.x=c.x),l.y<s.min.y&&(s.min.y=l.y),c.y>s.max.y&&(s.max.y=c.y))}var h=s.max.x-s.min.x+2*n.x,p=s.max.y-s.min.y+2*n.y,d=t.canvas.height,f=t.canvas.width/d,m=h/p,g=1,v=1;m>f?v=m/f:g=f/m,t.options.hasBounds=!0,t.bounds.min.x=s.min.x,t.bounds.max.x=s.min.x+h*g,t.bounds.min.y=s.min.y,t.bounds.max.y=s.min.y+p*v,i&&(t.bounds.min.x+=.5*h-h*g*.5,t.bounds.max.x+=.5*h-h*g*.5,t.bounds.min.y+=.5*p-p*v*.5,t.bounds.max.y+=.5*p-p*v*.5),t.bounds.min.x-=n.x,t.bounds.max.x-=n.x,t.bounds.min.y-=n.y,t.bounds.max.y-=n.y,t.mouse&&(u.setScale(t.mouse,{x:(t.bounds.max.x-t.bounds.min.x)/t.canvas.width,y:(t.bounds.max.y-t.bounds.min.y)/t.canvas.height}),u.setOffset(t.mouse,t.bounds.min))},i.startViewTransform=function(t){var e=t.bounds.max.x-t.bounds.min.x,n=t.bounds.max.y-t.bounds.min.y,i=e/t.options.width,s=n/t.options.height;t.context.setTransform(t.options.pixelRatio/i,0,0,t.options.pixelRatio/s,0,0),t.context.translate(-t.bounds.min.x,-t.bounds.min.y)},i.endViewTransform=function(t){t.context.setTransform(t.options.pixelRatio,0,0,t.options.pixelRatio,0,0)},i.world=function(t,e){var n,s=o.now(),h=t.engine,p=h.world,d=t.canvas,f=t.context,g=t.options,v=t.timing,y=r.allBodies(p),_=r.allConstraints(p),x=g.wireframes?g.wireframeBackground:g.background,b=[],w=[],T={timestamp:h.timing.timestamp};if(l.trigger(t,"beforeRender",T),t.currentBackground!==x&&m(t,x),f.globalCompositeOperation="source-in",f.fillStyle="transparent",f.fillRect(0,0,d.width,d.height),f.globalCompositeOperation="source-over",g.hasBounds){for(n=0;n<y.length;n++){var S=y[n];a.overlaps(S.bounds,t.bounds)&&b.push(S)}for(n=0;n<_.length;n++){var C=_[n],A=C.bodyA,k=C.bodyB,M=C.pointA,O=C.pointB;A&&(M=c.add(A.position,C.pointA)),k&&(O=c.add(k.position,C.pointB)),M&&O&&(a.contains(t.bounds,M)||a.contains(t.bounds,O))&&w.push(C)}i.startViewTransform(t),t.mouse&&(u.setScale(t.mouse,{x:(t.bounds.max.x-t.bounds.min.x)/t.options.width,y:(t.bounds.max.y-t.bounds.min.y)/t.options.height}),u.setOffset(t.mouse,t.bounds.min))}else w=_,b=y,1!==t.options.pixelRatio&&t.context.setTransform(t.options.pixelRatio,0,0,t.options.pixelRatio,0,0);!g.wireframes||h.enableSleeping&&g.showSleeping?i.bodies(t,b,f):(g.showConvexHulls&&i.bodyConvexHulls(t,b,f),i.bodyWireframes(t,b,f)),g.showBounds&&i.bodyBounds(t,b,f),(g.showAxes||g.showAngleIndicator)&&i.bodyAxes(t,b,f),g.showPositions&&i.bodyPositions(t,b,f),g.showVelocity&&i.bodyVelocity(t,b,f),g.showIds&&i.bodyIds(t,b,f),g.showSeparations&&i.separations(t,h.pairs.list,f),g.showCollisions&&i.collisions(t,h.pairs.list,f),g.showVertexNumbers&&i.vertexNumbers(t,b,f),g.showMousePosition&&i.mousePosition(t,t.mouse,f),i.constraints(w,f),g.hasBounds&&i.endViewTransform(t),l.trigger(t,"afterRender",T),v.lastElapsed=o.now()-s},i.stats=function(t,e,n){for(var i=t.engine,s=i.world,o=r.allBodies(s),a=0,l=0,c=0;c<o.length;c+=1)a+=o[c].parts.length;var u={Part:a,Body:o.length,Cons:r.allConstraints(s).length,Comp:r.allComposites(s).length,Pair:i.pairs.list.length};for(var h in e.fillStyle="#0e0f19",e.fillRect(l,0,302.5,44),e.font="12px Arial",e.textBaseline="top",e.textAlign="right",u){var p=u[h];e.fillStyle="#aaa",e.fillText(h,l+55,8),e.fillStyle="#eee",e.fillText(p,l+55,26),l+=55}},i.performance=function(t,e){var n=t.engine,s=t.timing,o=s.deltaHistory,r=s.elapsedHistory,a=s.timestampElapsedHistory,l=s.engineDeltaHistory,c=s.engineElapsedHistory,u=n.timing.lastDelta,p=h(o),d=h(r),f=h(l),m=h(c),g=h(a)/p||0,v=1e3/p||0;e.fillStyle="#0e0f19",e.fillRect(0,50,370,34),i.status(e,10,69,60,4,o.length,Math.round(v)+" fps",v/i._goodFps,(function(t){return o[t]/p-1})),i.status(e,82,69,60,4,l.length,u.toFixed(2)+" dt",i._goodDelta/u,(function(t){return l[t]/f-1})),i.status(e,154,69,60,4,c.length,m.toFixed(2)+" ut",1-m/i._goodFps,(function(t){return c[t]/m-1})),i.status(e,226,69,60,4,r.length,d.toFixed(2)+" rt",1-d/i._goodFps,(function(t){return r[t]/d-1})),i.status(e,298,69,60,4,a.length,g.toFixed(2)+" x",g*g*g,(function(t){return(a[t]/o[t]/g||0)-1}))},i.status=function(t,e,n,i,s,r,a,l,c){t.strokeStyle="#888",t.fillStyle="#444",t.lineWidth=1,t.fillRect(e,n+7,i,1),t.beginPath(),t.moveTo(e,n+7-s*o.clamp(.4*c(0),-2,2));for(var u=0;u<i;u+=1)t.lineTo(e+u,n+7-(u<r?s*o.clamp(.4*c(u),-2,2):0));t.stroke(),t.fillStyle="hsl("+o.clamp(25+95*l,0,120)+",100%,60%)",t.fillRect(e,n-7,4,4),t.font="12px Arial",t.textBaseline="middle",t.textAlign="right",t.fillStyle="#eee",t.fillText(a,e+i,n-5)},i.constraints=function(t,e){for(var n=e,i=0;i<t.length;i++){var s=t[i];if(s.render.visible&&s.pointA&&s.pointB){var r,a,l=s.bodyA,u=s.bodyB;if(r=l?c.add(l.position,s.pointA):s.pointA,"pin"===s.render.type)n.beginPath(),n.arc(r.x,r.y,3,0,2*Math.PI),n.closePath();else{if(a=u?c.add(u.position,s.pointB):s.pointB,n.beginPath(),n.moveTo(r.x,r.y),"spring"===s.render.type)for(var h,p=c.sub(a,r),d=c.perp(c.normalise(p)),f=Math.ceil(o.clamp(s.length/5,12,20)),m=1;m<f;m+=1)h=m%2==0?1:-1,n.lineTo(r.x+p.x*(m/f)+d.x*h*4,r.y+p.y*(m/f)+d.y*h*4);n.lineTo(a.x,a.y)}s.render.lineWidth&&(n.lineWidth=s.render.lineWidth,n.strokeStyle=s.render.strokeStyle,n.stroke()),s.render.anchors&&(n.fillStyle=s.render.strokeStyle,n.beginPath(),n.arc(r.x,r.y,3,0,2*Math.PI),n.arc(a.x,a.y,3,0,2*Math.PI),n.closePath(),n.fill())}}},i.bodies=function(t,e,n){var i,s,o,r,a=n,l=(t.engine,t.options),c=l.showInternalEdges||!l.wireframes;for(o=0;o<e.length;o++)if((i=e[o]).render.visible)for(r=i.parts.length>1?1:0;r<i.parts.length;r++)if((s=i.parts[r]).render.visible){if(l.showSleeping&&i.isSleeping?a.globalAlpha=.5*s.render.opacity:1!==s.render.opacity&&(a.globalAlpha=s.render.opacity),s.render.sprite&&s.render.sprite.texture&&!l.wireframes){var u=s.render.sprite,h=f(t,u.texture);a.translate(s.position.x,s.position.y),a.rotate(s.angle),a.drawImage(h,h.width*-u.xOffset*u.xScale,h.height*-u.yOffset*u.yScale,h.width*u.xScale,h.height*u.yScale),a.rotate(-s.angle),a.translate(-s.position.x,-s.position.y)}else{if(s.circleRadius)a.beginPath(),a.arc(s.position.x,s.position.y,s.circleRadius,0,2*Math.PI);else{a.beginPath(),a.moveTo(s.vertices[0].x,s.vertices[0].y);for(var p=1;p<s.vertices.length;p++)!s.vertices[p-1].isInternal||c?a.lineTo(s.vertices[p].x,s.vertices[p].y):a.moveTo(s.vertices[p].x,s.vertices[p].y),s.vertices[p].isInternal&&!c&&a.moveTo(s.vertices[(p+1)%s.vertices.length].x,s.vertices[(p+1)%s.vertices.length].y);a.lineTo(s.vertices[0].x,s.vertices[0].y),a.closePath()}l.wireframes?(a.lineWidth=1,a.strokeStyle="#bbb",a.stroke()):(a.fillStyle=s.render.fillStyle,s.render.lineWidth&&(a.lineWidth=s.render.lineWidth,a.strokeStyle=s.render.strokeStyle,a.stroke()),a.fill())}a.globalAlpha=1}},i.bodyWireframes=function(t,e,n){var i,s,o,r,a,l=n,c=t.options.showInternalEdges;for(l.beginPath(),o=0;o<e.length;o++)if((i=e[o]).render.visible)for(a=i.parts.length>1?1:0;a<i.parts.length;a++){for(s=i.parts[a],l.moveTo(s.vertices[0].x,s.vertices[0].y),r=1;r<s.vertices.length;r++)!s.vertices[r-1].isInternal||c?l.lineTo(s.vertices[r].x,s.vertices[r].y):l.moveTo(s.vertices[r].x,s.vertices[r].y),s.vertices[r].isInternal&&!c&&l.moveTo(s.vertices[(r+1)%s.vertices.length].x,s.vertices[(r+1)%s.vertices.length].y);l.lineTo(s.vertices[0].x,s.vertices[0].y)}l.lineWidth=1,l.strokeStyle="#bbb",l.stroke()},i.bodyConvexHulls=function(t,e,n){var i,s,o,r=n;for(r.beginPath(),s=0;s<e.length;s++)if((i=e[s]).render.visible&&1!==i.parts.length){for(r.moveTo(i.vertices[0].x,i.vertices[0].y),o=1;o<i.vertices.length;o++)r.lineTo(i.vertices[o].x,i.vertices[o].y);r.lineTo(i.vertices[0].x,i.vertices[0].y)}r.lineWidth=1,r.strokeStyle="rgba(255,255,255,0.2)",r.stroke()},i.vertexNumbers=function(t,e,n){var i,s,o,r=n;for(i=0;i<e.length;i++){var a=e[i].parts;for(o=a.length>1?1:0;o<a.length;o++){var l=a[o];for(s=0;s<l.vertices.length;s++)r.fillStyle="rgba(255,255,255,0.2)",r.fillText(i+"_"+s,l.position.x+.8*(l.vertices[s].x-l.position.x),l.position.y+.8*(l.vertices[s].y-l.position.y))}}},i.mousePosition=function(t,e,n){var i=n;i.fillStyle="rgba(255,255,255,0.8)",i.fillText(e.position.x+"  "+e.position.y,e.position.x+5,e.position.y-5)},i.bodyBounds=function(t,e,n){var i=n,s=(t.engine,t.options);i.beginPath();for(var o=0;o<e.length;o++)if(e[o].render.visible)for(var r=e[o].parts,a=r.length>1?1:0;a<r.length;a++){var l=r[a];i.rect(l.bounds.min.x,l.bounds.min.y,l.bounds.max.x-l.bounds.min.x,l.bounds.max.y-l.bounds.min.y)}s.wireframes?i.strokeStyle="rgba(255,255,255,0.08)":i.strokeStyle="rgba(0,0,0,0.1)",i.lineWidth=1,i.stroke()},i.bodyAxes=function(t,e,n){var i,s,o,r,a=n,l=(t.engine,t.options);for(a.beginPath(),s=0;s<e.length;s++){var c=e[s],u=c.parts;if(c.render.visible)if(l.showAxes)for(o=u.length>1?1:0;o<u.length;o++)for(i=u[o],r=0;r<i.axes.length;r++){var h=i.axes[r];a.moveTo(i.position.x,i.position.y),a.lineTo(i.position.x+20*h.x,i.position.y+20*h.y)}else for(o=u.length>1?1:0;o<u.length;o++)for(i=u[o],r=0;r<i.axes.length;r++)a.moveTo(i.position.x,i.position.y),a.lineTo((i.vertices[0].x+i.vertices[i.vertices.length-1].x)/2,(i.vertices[0].y+i.vertices[i.vertices.length-1].y)/2)}l.wireframes?(a.strokeStyle="indianred",a.lineWidth=1):(a.strokeStyle="rgba(255, 255, 255, 0.4)",a.globalCompositeOperation="overlay",a.lineWidth=2),a.stroke(),a.globalCompositeOperation="source-over"},i.bodyPositions=function(t,e,n){var i,s,o,r,a=n,l=(t.engine,t.options);for(a.beginPath(),o=0;o<e.length;o++)if((i=e[o]).render.visible)for(r=0;r<i.parts.length;r++)s=i.parts[r],a.arc(s.position.x,s.position.y,3,0,2*Math.PI,!1),a.closePath();for(l.wireframes?a.fillStyle="indianred":a.fillStyle="rgba(0,0,0,0.5)",a.fill(),a.beginPath(),o=0;o<e.length;o++)(i=e[o]).render.visible&&(a.arc(i.positionPrev.x,i.positionPrev.y,2,0,2*Math.PI,!1),a.closePath());a.fillStyle="rgba(255,165,0,0.8)",a.fill()},i.bodyVelocity=function(t,e,n){var i=n;i.beginPath();for(var o=0;o<e.length;o++){var r=e[o];if(r.render.visible){var a=s.getVelocity(r);i.moveTo(r.position.x,r.position.y),i.lineTo(r.position.x+a.x,r.position.y+a.y)}}i.lineWidth=3,i.strokeStyle="cornflowerblue",i.stroke()},i.bodyIds=function(t,e,n){var i,s,o=n;for(i=0;i<e.length;i++)if(e[i].render.visible){var r=e[i].parts;for(s=r.length>1?1:0;s<r.length;s++){var a=r[s];o.font="12px Arial",o.fillStyle="rgba(255,255,255,0.5)",o.fillText(a.id,a.position.x+10,a.position.y-10)}}},i.collisions=function(t,e,n){var i,s,o,r,a=n,l=t.options;for(a.beginPath(),o=0;o<e.length;o++)if((i=e[o]).isActive)for(s=i.collision,r=0;r<i.activeContacts.length;r++){var c=i.activeContacts[r].vertex;a.rect(c.x-1.5,c.y-1.5,3.5,3.5)}for(l.wireframes?a.fillStyle="rgba(255,255,255,0.7)":a.fillStyle="orange",a.fill(),a.beginPath(),o=0;o<e.length;o++)if((i=e[o]).isActive&&(s=i.collision,i.activeContacts.length>0)){var u=i.activeContacts[0].vertex.x,h=i.activeContacts[0].vertex.y;2===i.activeContacts.length&&(u=(i.activeContacts[0].vertex.x+i.activeContacts[1].vertex.x)/2,h=(i.activeContacts[0].vertex.y+i.activeContacts[1].vertex.y)/2),s.bodyB===s.supports[0].body||!0===s.bodyA.isStatic?a.moveTo(u-8*s.normal.x,h-8*s.normal.y):a.moveTo(u+8*s.normal.x,h+8*s.normal.y),a.lineTo(u,h)}l.wireframes?a.strokeStyle="rgba(255,165,0,0.7)":a.strokeStyle="orange",a.lineWidth=1,a.stroke()},i.separations=function(t,e,n){var i,s,o,r,a,l=n,c=t.options;for(l.beginPath(),a=0;a<e.length;a++)if((i=e[a]).isActive){o=(s=i.collision).bodyA;var u=1;(r=s.bodyB).isStatic||o.isStatic||(u=.5),r.isStatic&&(u=0),l.moveTo(r.position.x,r.position.y),l.lineTo(r.position.x-s.penetration.x*u,r.position.y-s.penetration.y*u),u=1,r.isStatic||o.isStatic||(u=.5),o.isStatic&&(u=0),l.moveTo(o.position.x,o.position.y),l.lineTo(o.position.x+s.penetration.x*u,o.position.y+s.penetration.y*u)}c.wireframes?l.strokeStyle="rgba(255,165,0,0.5)":l.strokeStyle="orange",l.stroke()},i.inspector=function(t,e){t.engine;var n,i=t.selected,s=t.render,o=s.options;if(o.hasBounds){var r=s.bounds.max.x-s.bounds.min.x,a=s.bounds.max.y-s.bounds.min.y,l=r/s.options.width,c=a/s.options.height;e.scale(1/l,1/c),e.translate(-s.bounds.min.x,-s.bounds.min.y)}for(var u=0;u<i.length;u++){var h=i[u].data;switch(e.translate(.5,.5),e.lineWidth=1,e.strokeStyle="rgba(255,165,0,0.9)",e.setLineDash([1,2]),h.type){case"body":n=h.bounds,e.beginPath(),e.rect(Math.floor(n.min.x-3),Math.floor(n.min.y-3),Math.floor(n.max.x-n.min.x+6),Math.floor(n.max.y-n.min.y+6)),e.closePath(),e.stroke();break;case"constraint":var p=h.pointA;h.bodyA&&(p=h.pointB),e.beginPath(),e.arc(p.x,p.y,10,0,2*Math.PI),e.closePath(),e.stroke()}e.setLineDash([]),e.translate(-.5,-.5)}null!==t.selectStart&&(e.translate(.5,.5),e.lineWidth=1,e.strokeStyle="rgba(255,165,0,0.6)",e.fillStyle="rgba(255,165,0,0.1)",n=t.selectBounds,e.beginPath(),e.rect(Math.floor(n.min.x),Math.floor(n.min.y),Math.floor(n.max.x-n.min.x),Math.floor(n.max.y-n.min.y)),e.closePath(),e.stroke(),e.fill(),e.translate(-.5,-.5)),o.hasBounds&&e.setTransform(1,0,0,1,0,0)};var n=function(t,e){var n=t.engine,s=t.timing,o=s.historySize,r=n.timing.timestamp;s.delta=e-s.lastTime||i._goodDelta,s.lastTime=e,s.timestampElapsed=r-s.lastTimestamp||0,s.lastTimestamp=r,s.deltaHistory.unshift(s.delta),s.deltaHistory.length=Math.min(s.deltaHistory.length,o),s.engineDeltaHistory.unshift(n.timing.lastDelta),s.engineDeltaHistory.length=Math.min(s.engineDeltaHistory.length,o),s.timestampElapsedHistory.unshift(s.timestampElapsed),s.timestampElapsedHistory.length=Math.min(s.timestampElapsedHistory.length,o),s.engineElapsedHistory.unshift(n.timing.lastElapsed),s.engineElapsedHistory.length=Math.min(s.engineElapsedHistory.length,o),s.elapsedHistory.unshift(s.lastElapsed),s.elapsedHistory.length=Math.min(s.elapsedHistory.length,o)},h=function(t){for(var e=0,n=0;n<t.length;n+=1)e+=t[n];return e/t.length||0},p=function(t,e){var n=document.createElement("canvas");return n.width=t,n.height=e,n.oncontextmenu=function(){return!1},n.onselectstart=function(){return!1},n},d=function(t){var e=t.getContext("2d");return(window.devicePixelRatio||1)/(e.webkitBackingStorePixelRatio||e.mozBackingStorePixelRatio||e.msBackingStorePixelRatio||e.oBackingStorePixelRatio||e.backingStorePixelRatio||1)},f=function(t,e){var n=t.textures[e];return n||((n=t.textures[e]=new Image).src=e,n)},m=function(t,e){var n=e;/(jpg|gif|png)$/.test(e)&&(n="url("+e+")"),t.canvas.style.background=n,t.canvas.style.backgroundSize="contain",t.currentBackground=e}}()},function(t,e,n){var i={};t.exports=i;var s,o,r,a=n(5),l=n(17),c=n(0);"undefined"!=typeof window&&(s=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame,o=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),s||(s=function(t){r=setTimeout((function(){t(c.now())}),1e3/60)},o=function(){clearTimeout(r)}),i.create=function(t){var e=c.extend({fps:60,deltaSampleSize:60,counterTimestamp:0,frameCounter:0,deltaHistory:[],timePrev:null,frameRequestId:null,isFixed:!1,enabled:!0},t);return e.delta=e.delta||1e3/e.fps,e.deltaMin=e.deltaMin||1e3/e.fps,e.deltaMax=e.deltaMax||1e3/(.5*e.fps),e.fps=1e3/e.delta,e},i.run=function(t,e){return void 0!==t.positionIterations&&(e=t,t=i.create()),function n(o){t.frameRequestId=s(n),o&&t.enabled&&i.tick(t,e,o)}(),t},i.tick=function(t,e,n){var i,s=e.timing;t.isFixed?i=t.delta:(i=n-t.timePrev||t.delta,t.timePrev=n,t.deltaHistory.push(i),t.deltaHistory=t.deltaHistory.slice(-t.deltaSampleSize),i=(i=(i=Math.min.apply(null,t.deltaHistory))<t.deltaMin?t.deltaMin:i)>t.deltaMax?t.deltaMax:i,t.delta=i);var o={timestamp:s.timestamp};a.trigger(t,"beforeTick",o),t.frameCounter+=1,n-t.counterTimestamp>=1e3&&(t.fps=t.frameCounter*((n-t.counterTimestamp)/1e3),t.counterTimestamp=n,t.frameCounter=0),a.trigger(t,"tick",o),a.trigger(t,"beforeUpdate",o),l.update(e,i),a.trigger(t,"afterUpdate",o),a.trigger(t,"afterTick",o)},i.stop=function(t){o(t.frameRequestId)},i.start=function(t,e){i.run(t,e)}},function(t,e,n){var i={};t.exports=i;var s=n(8),o=n(0).deprecated;i.collides=function(t,e){return s.collides(t,e)},o(i,"collides","SAT.collides ➤ replaced by Collision.collides")},function(t,e,n){var i={};t.exports=i,n(1);var s=n(0);i.pathToVertices=function(t,e){"undefined"==typeof window||"SVGPathSeg"in window||s.warn("Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.");var n,o,r,a,l,c,u,h,p,d,f,m=[],g=0,v=0,y=0;e=e||15;var _=function(t,e,n){var i=n%2==1&&n>1;if(!p||t!=p.x||e!=p.y){p&&i?(d=p.x,f=p.y):(d=0,f=0);var s={x:d+t,y:f+e};!i&&p||(p=s),m.push(s),v=d+t,y=f+e}},x=function(t){var e=t.pathSegTypeAsLetter.toUpperCase();if("Z"!==e){switch(e){case"M":case"L":case"T":case"C":case"S":case"Q":v=t.x,y=t.y;break;case"H":v=t.x;break;case"V":y=t.y}_(v,y,t.pathSegType)}};for(i._svgPathToAbsolute(t),r=t.getTotalLength(),c=[],n=0;n<t.pathSegList.numberOfItems;n+=1)c.push(t.pathSegList.getItem(n));for(u=c.concat();g<r;){if((l=c[t.getPathSegAtLength(g)])!=h){for(;u.length&&u[0]!=l;)x(u.shift());h=l}switch(l.pathSegTypeAsLetter.toUpperCase()){case"C":case"T":case"S":case"Q":case"A":a=t.getPointAtLength(g),_(a.x,a.y,0)}g+=e}for(n=0,o=u.length;n<o;++n)x(u[n]);return m},i._svgPathToAbsolute=function(t){for(var e,n,i,s,o,r,a=t.pathSegList,l=0,c=0,u=a.numberOfItems,h=0;h<u;++h){var p=a.getItem(h),d=p.pathSegTypeAsLetter;if(/[MLHVCSQTA]/.test(d))"x"in p&&(l=p.x),"y"in p&&(c=p.y);else switch("x1"in p&&(i=l+p.x1),"x2"in p&&(o=l+p.x2),"y1"in p&&(s=c+p.y1),"y2"in p&&(r=c+p.y2),"x"in p&&(l+=p.x),"y"in p&&(c+=p.y),d){case"m":a.replaceItem(t.createSVGPathSegMovetoAbs(l,c),h);break;case"l":a.replaceItem(t.createSVGPathSegLinetoAbs(l,c),h);break;case"h":a.replaceItem(t.createSVGPathSegLinetoHorizontalAbs(l),h);break;case"v":a.replaceItem(t.createSVGPathSegLinetoVerticalAbs(c),h);break;case"c":a.replaceItem(t.createSVGPathSegCurvetoCubicAbs(l,c,i,s,o,r),h);break;case"s":a.replaceItem(t.createSVGPathSegCurvetoCubicSmoothAbs(l,c,o,r),h);break;case"q":a.replaceItem(t.createSVGPathSegCurvetoQuadraticAbs(l,c,i,s),h);break;case"t":a.replaceItem(t.createSVGPathSegCurvetoQuadraticSmoothAbs(l,c),h);break;case"a":a.replaceItem(t.createSVGPathSegArcAbs(l,c,p.r1,p.r2,p.angle,p.largeArcFlag,p.sweepFlag),h);break;case"z":case"Z":l=e,c=n}"M"!=d&&"m"!=d||(e=l,n=c)}}},function(t,e,n){var i={};t.exports=i;var s=n(6);n(0),i.create=s.create,i.add=s.add,i.remove=s.remove,i.clear=s.clear,i.addComposite=s.addComposite,i.addBody=s.addBody,i.addConstraint=s.addConstraint}])},t.exports=i()},897:t=>{t.exports=function(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i},t.exports.__esModule=!0,t.exports.default=t.exports},372:t=>{t.exports=function(t){if(Array.isArray(t))return t},t.exports.__esModule=!0,t.exports.default=t.exports},690:t=>{t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},t.exports.__esModule=!0,t.exports.default=t.exports},728:(t,e,n)=>{var i=n(62);function s(t,e){for(var n=0;n<e.length;n++){var s=e[n];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(t,i(s.key),s)}}t.exports=function(t,e,n){return e&&s(t.prototype,e),n&&s(t,n),Object.defineProperty(t,"prototype",{writable:!1}),t},t.exports.__esModule=!0,t.exports.default=t.exports},872:t=>{t.exports=function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var i,s,o,r,a=[],l=!0,c=!1;try{if(o=(n=n.call(t)).next,0===e){if(Object(n)!==n)return;l=!1}else for(;!(l=(i=o.call(n)).done)&&(a.push(i.value),a.length!==e);l=!0);}catch(t){c=!0,s=t}finally{try{if(!l&&null!=n.return&&(r=n.return(),Object(r)!==r))return}finally{if(c)throw s}}return a}},t.exports.__esModule=!0,t.exports.default=t.exports},218:t=>{t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")},t.exports.__esModule=!0,t.exports.default=t.exports},424:(t,e,n)=>{var i=n(372),s=n(872),o=n(116),r=n(218);t.exports=function(t,e){return i(t)||s(t,e)||o(t,e)||r()},t.exports.__esModule=!0,t.exports.default=t.exports},36:(t,e,n)=>{var i=n(698).default;t.exports=function(t,e){if("object"!=i(t)||!t)return t;var n=t[Symbol.toPrimitive];if(void 0!==n){var s=n.call(t,e||"default");if("object"!=i(s))return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)},t.exports.__esModule=!0,t.exports.default=t.exports},62:(t,e,n)=>{var i=n(698).default,s=n(36);t.exports=function(t){var e=s(t,"string");return"symbol"==i(e)?e:String(e)},t.exports.__esModule=!0,t.exports.default=t.exports},698:t=>{function e(n){return t.exports=e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t.exports.__esModule=!0,t.exports.default=t.exports,e(n)}t.exports=e,t.exports.__esModule=!0,t.exports.default=t.exports},116:(t,e,n)=>{var i=n(897);t.exports=function(t,e){if(t){if("string"==typeof t)return i(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?i(t,e):void 0}},t.exports.__esModule=!0,t.exports.default=t.exports}},e={};function n(i){var s=e[i];if(void 0!==s)return s.exports;var o=e[i]={exports:{}};return t[i].call(o.exports,o,o.exports,n),o.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{"use strict";let t=0,e=0,i=0;function s(n){t=n.accelerationIncludingGravity.x+n.acceleration.x,e=-1*(n.accelerationIncludingGravity.y+n.acceleration.y),i=n.accelerationIncludingGravity.z+n.acceleration.z}window.addEventListener("keydown",(function(n){window.location.href.includes("localhost")&&("ArrowUp"===n.key&&(e=9.8,t=0),"ArrowDown"===n.key&&(e=-9.8,t=0),"ArrowLeft"===n.key&&(t=-9.8,e=0),"ArrowRight"===n.key&&(t=9.8,e=0))}));var o=n(842);const r="14.7.77";var a=n(382);const l=new WeakSet,c=new WeakMap,u=new WeakMap,h=new WeakMap,p=new WeakMap,d=new WeakMap,f=new WeakMap,m=new WeakMap,g=new WeakMap,v=new WeakMap,y={construct:()=>y},_=/^import(?:(?:[\s]+[\w]+|(?:[\s]+[\w]+[\s]*,)?[\s]*\{[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?(?:[\s]*,[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?)*[\s]*}|(?:[\s]+[\w]+[\s]*,)?[\s]*\*[\s]+as[\s]+[\w]+)[\s]+from)?(?:[\s]*)("([^"\\]|\\.)+"|'([^'\\]|\\.)+')(?:[\s]*);?/,x=(t,e)=>{const n=[];let i=t.replace(/^[\s]+/,""),s=i.match(_);for(;null!==s;){const t=s[1].slice(1,-1),o=s[0].replace(/([\s]+)?;?$/,"").replace(t,new URL(t,e).toString());n.push(o),i=i.slice(s[0].length).replace(/^[\s]+/,""),s=i.match(_)}return[n.join(";"),i]},b=t=>{if(void 0!==t&&!Array.isArray(t))throw new TypeError("The parameterDescriptors property of given value for processorCtor is not an array.")},w=t=>{if(!(t=>{try{new new Proxy(t,y)}catch{return!1}return!0})(t))throw new TypeError("The given value for processorCtor should be a constructor.");if(null===t.prototype||"object"!=typeof t.prototype)throw new TypeError("The given value for processorCtor should have a prototype.")},T=(t,e)=>{const n=t.get(e);if(void 0===n)throw new Error("A value with the given key could not be found.");return n},S=(t,e)=>{const n=Array.from(t).filter(e);if(n.length>1)throw Error("More than one element was found.");if(0===n.length)throw Error("No element was found.");const[i]=n;return t.delete(i),i},C=(t,e,n,i)=>{const s=T(t,e),o=S(s,(t=>t[0]===n&&t[1]===i));return 0===s.size&&t.delete(e),o},A=t=>T(f,t),k=t=>{if(l.has(t))throw new Error("The AudioNode is already stored.");l.add(t),A(t).forEach((t=>t(!0)))},M=t=>"port"in t,O=t=>{if(!l.has(t))throw new Error("The AudioNode is not stored.");l.delete(t),A(t).forEach((t=>t(!1)))},I=(t,e)=>{!M(t)&&e.every((t=>0===t.size))&&O(t)},E={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",fftSize:2048,maxDecibels:-30,minDecibels:-100,smoothingTimeConstant:.8},P=(t,e)=>t.context===e,D=t=>{try{t.copyToChannel(new Float32Array(1),0,-1)}catch{return!1}return!0},R=()=>new DOMException("","IndexSizeError"),V=t=>{var e;t.getChannelData=(e=t.getChannelData,n=>{try{return e.call(t,n)}catch(t){if(12===t.code)throw R();throw t}})},N={numberOfChannels:1},B=-34028234663852886e22,q=-B,F=t=>l.has(t),L={buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1},j=t=>T(c,t),W=t=>T(h,t),U=(t,e)=>{const{activeInputs:n}=j(t);n.forEach((n=>n.forEach((([n])=>{e.includes(t)||U(n,[...e,t])}))));const i=(t=>"playbackRate"in t)(t)?[t.playbackRate]:M(t)?Array.from(t.parameters.values()):(t=>"frequency"in t&&"gain"in t)(t)?[t.Q,t.detune,t.frequency,t.gain]:(t=>"offset"in t)(t)?[t.offset]:(t=>!("frequency"in t)&&"gain"in t)(t)?[t.gain]:(t=>"detune"in t&&"frequency"in t)(t)?[t.detune,t.frequency]:(t=>"pan"in t)(t)?[t.pan]:[];for(const t of i){const n=W(t);void 0!==n&&n.activeInputs.forEach((([t])=>U(t,e)))}F(t)&&O(t)},H=t=>{U(t.destination,[])},z=t=>"context"in t,G=t=>z(t[0]),X=(t,e,n,i)=>{for(const e of t)if(n(e)){if(i)return!1;throw Error("The set contains at least one similar element.")}return t.add(e),!0},Y=(t,e,[n,i],s)=>{X(t,[e,n,i],(t=>t[0]===e&&t[1]===n),s)},Z=(t,[e,n,i],s)=>{const o=t.get(e);void 0===o?t.set(e,new Set([[n,i]])):X(o,[n,i],(t=>t[0]===n),s)},$=t=>"inputs"in t,Q=(t,e,n,i)=>{if($(e)){const s=e.inputs[i];return t.connect(s,n,0),[s,n,0]}return t.connect(e,n,i),[e,n,i]},J=(t,e,n)=>{for(const i of t)if(i[0]===e&&i[1]===n)return t.delete(i),i;return null},K=(t,e)=>{if(!A(t).delete(e))throw new Error("Missing the expected event listener.")},tt=(t,e,n)=>{const i=T(t,e),s=S(i,(t=>t[0]===n));return 0===i.size&&t.delete(e),s},et=(t,e,n,i)=>{$(e)?t.disconnect(e.inputs[i],n,0):t.disconnect(e,n,i)},nt=t=>T(u,t),it=t=>T(p,t),st=t=>m.has(t),ot=t=>!l.has(t),rt=(t,e)=>new Promise((n=>{if(null!==e)n(!0);else{const e=t.createScriptProcessor(256,1,1),i=t.createGain(),s=t.createBuffer(1,2,44100),o=s.getChannelData(0);o[0]=1,o[1]=1;const r=t.createBufferSource();r.buffer=s,r.loop=!0,r.connect(e).connect(t.destination),r.connect(i),r.disconnect(i),e.onaudioprocess=i=>{const s=i.inputBuffer.getChannelData(0);Array.prototype.some.call(s,(t=>1===t))?n(!0):n(!1),r.stop(),e.onaudioprocess=null,r.disconnect(e),e.disconnect(t.destination)},r.start()}})),at=(t,e)=>{const n=new Map;for(const e of t)for(const t of e){const e=n.get(t);n.set(t,void 0===e?1:e+1)}n.forEach(((t,n)=>e(n,t)))},lt=t=>"context"in t,ct=t=>{const e=new Map;var n,i;t.connect=(i=t.connect.bind(t),(t,n=0,s=0)=>{const o=lt(t)?i(t,n,s):i(t,n),r=e.get(t);return void 0===r?e.set(t,[{input:s,output:n}]):r.every((t=>t.input!==s||t.output!==n))&&r.push({input:s,output:n}),o}),t.disconnect=(n=t.disconnect,(i,s,o)=>{if(n.apply(t),void 0===i)e.clear();else if("number"==typeof i)for(const[t,n]of e){const s=n.filter((t=>t.output!==i));0===s.length?e.delete(t):e.set(t,s)}else if(e.has(i))if(void 0===s)e.delete(i);else{const t=e.get(i);if(void 0!==t){const n=t.filter((t=>t.output!==s&&(t.input!==o||void 0===o)));0===n.length?e.delete(i):e.set(i,n)}}for(const[n,i]of e)i.forEach((e=>{lt(n)?t.connect(n,e.output,e.input):t.connect(n,e.output)}))})},ut=(t,e,n,i,s)=>{const[o,r]=((t,e,n,i)=>{const{activeInputs:s,passiveInputs:o}=j(e),r=J(s[i],t,n);return null===r?[C(o,t,n,i)[2],!1]:[r[2],!0]})(t,n,i,s);if(null!==o&&(K(t,o),!r||e||st(t)||et(nt(t),nt(n),i,s)),F(n)){const{activeInputs:t}=j(n);I(n,t)}},ht=(t,e,n,i)=>{const[s,o]=((t,e,n)=>{const{activeInputs:i,passiveInputs:s}=W(e),o=J(i,t,n);return null===o?[tt(s,t,n)[1],!1]:[o[2],!0]})(t,n,i);null!==s&&(K(t,s),!o||e||st(t)||nt(t).disconnect(it(n),i))};class pt{constructor(t){this._map=new Map(t)}get size(){return this._map.size}entries(){return this._map.entries()}forEach(t,e=null){return this._map.forEach(((n,i)=>t.call(e,n,i,this)))}get(t){return this._map.get(t)}has(t){return this._map.has(t)}keys(){return this._map.keys()}values(){return this._map.values()}}const dt={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:1,numberOfOutputs:1,parameterData:{},processorOptions:{}};function ft(t,e,n,i,s){if("function"==typeof t.copyFromChannel)0===e[n].byteLength&&(e[n]=new Float32Array(128)),t.copyFromChannel(e[n],i,s);else{const o=t.getChannelData(i);if(0===e[n].byteLength)e[n]=o.slice(s,s+128);else{const t=new Float32Array(o.buffer,s*Float32Array.BYTES_PER_ELEMENT,128);e[n].set(t)}}}const mt=(t,e,n,i,s)=>{"function"==typeof t.copyToChannel?0!==e[n].byteLength&&t.copyToChannel(e[n],i,s):0!==e[n].byteLength&&t.getChannelData(i).set(e[n],s)},gt=(t,e)=>{const n=[];for(let i=0;i<t;i+=1){const t=[],s="number"==typeof e?e:e[i];for(let e=0;e<s;e+=1)t.push(new Float32Array(128));n.push(t)}return n},vt=async(t,e,n,i,s,o,r)=>{const a=null===e?128*Math.ceil(t.context.length/128):e.length,l=i.channelCount*i.numberOfInputs,c=s.reduce(((t,e)=>t+e),0),u=0===c?null:n.createBuffer(c,a,n.sampleRate);if(void 0===o)throw new Error("Missing the processor constructor.");const h=j(t),p=await((t,e)=>{const n=T(v,t),i=nt(e);return T(n,i)})(n,t),d=gt(i.numberOfInputs,i.channelCount),f=gt(i.numberOfOutputs,s),m=Array.from(t.parameters.keys()).reduce(((t,e)=>({...t,[e]:new Float32Array(128)})),{});for(let c=0;c<a;c+=128){if(i.numberOfInputs>0&&null!==e)for(let t=0;t<i.numberOfInputs;t+=1)for(let n=0;n<i.channelCount;n+=1)ft(e,d[t],n,n,c);void 0!==o.parameterDescriptors&&null!==e&&o.parameterDescriptors.forEach((({name:t},n)=>{ft(e,m,t,l+n,c)}));for(let t=0;t<i.numberOfInputs;t+=1)for(let e=0;e<s[t];e+=1)0===f[t][e].byteLength&&(f[t][e]=new Float32Array(128));try{const t=d.map(((t,e)=>0===h.activeInputs[e].size?[]:t)),e=r(c/n.sampleRate,n.sampleRate,(()=>p.process(t,f,m)));if(null!==u)for(let t=0,e=0;t<i.numberOfOutputs;t+=1){for(let n=0;n<s[t];n+=1)mt(u,f[t],n,e+n,c);e+=s[t]}if(!e)break}catch(e){t.dispatchEvent(new ErrorEvent("processorerror",{colno:e.colno,filename:e.filename,lineno:e.lineno,message:e.message}));break}}return u},yt={Q:1,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",detune:0,frequency:350,gain:0,type:"lowpass"},_t={channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:6},xt={channelCount:6,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:6},bt={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",offset:1},wt={buffer:null,channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",disableNormalization:!1},Tt=t=>{const{port1:e,port2:n}=new MessageChannel;return new Promise((i=>{const s=()=>{n.onmessage=null,e.close(),n.close(),i()};n.onmessage=()=>s();try{e.postMessage(t,[t])}catch{}finally{s()}}))},St={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",delayTime:0,maxDelayTime:1},Ct=(t,e,n)=>{const i=e[n];if(void 0===i)throw t();return i},At={attack:.003,channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",knee:30,ratio:12,release:.25,threshold:-24},kt={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",gain:1},Mt=()=>new DOMException("","InvalidStateError"),Ot=()=>new DOMException("","InvalidAccessError"),It={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers"},Et=(t,e,n,i,s,o,r,a,l,c,u)=>{const h=c.length;let p=a;for(let a=0;a<h;a+=1){let h=n[0]*c[a];for(let e=1;e<s;e+=1){const i=p-e&l-1;h+=n[e]*o[i],h-=t[e]*r[i]}for(let t=s;t<i;t+=1)h+=n[t]*o[p-t&l-1];for(let n=s;n<e;n+=1)h-=t[n]*r[p-n&l-1];o[p]=c[a],r[p]=h,p=p+1&l-1,u[a]=h}return p},Pt={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers"},Dt=t=>{const e=new Uint32Array([1179011410,40,1163280727,544501094,16,131073,44100,176400,1048580,1635017060,4,0]);try{const n=t.decodeAudioData(e.buffer,(()=>{}));return void 0!==n&&(n.catch((()=>{})),!0)}catch{}return!1},Rt=(t,e,n)=>{const i=e[n];void 0!==i&&i!==t[n]&&(t[n]=i)},Vt=(t,e)=>{Rt(t,e,"channelCount"),Rt(t,e,"channelCountMode"),Rt(t,e,"channelInterpretation")},Nt=t=>"function"==typeof t.getFloatTimeDomainData,Bt=(t,e,n)=>{const i=e[n];void 0!==i&&i!==t[n].value&&(t[n].value=i)},qt=t=>{var e;t.start=(e=t.start,(n=0,i=0,s)=>{if("number"==typeof s&&s<0||i<0||n<0)throw new RangeError("The parameters can't be negative.");e.call(t,n,i,s)})},Ft=t=>{var e;t.stop=(e=t.stop,(n=0)=>{if(n<0)throw new RangeError("The parameter can't be negative.");e.call(t,n)})},Lt=(t,e)=>null===t?512:Math.max(512,Math.min(16384,Math.pow(2,Math.round(Math.log2(t*e))))),jt=(t,e)=>{const n=t.createBiquadFilter();return Vt(n,e),Bt(n,e,"Q"),Bt(n,e,"detune"),Bt(n,e,"frequency"),Bt(n,e,"gain"),Rt(n,e,"type"),n},Wt=(t,e)=>{const n=t.createChannelSplitter(e.numberOfOutputs);return Vt(n,e),(t=>{const e=t.numberOfOutputs;Object.defineProperty(t,"channelCount",{get:()=>e,set:t=>{if(t!==e)throw Mt()}}),Object.defineProperty(t,"channelCountMode",{get:()=>"explicit",set:t=>{if("explicit"!==t)throw Mt()}}),Object.defineProperty(t,"channelInterpretation",{get:()=>"discrete",set:t=>{if("discrete"!==t)throw Mt()}})})(n),n},Ut=(t,e)=>(t.connect=e.connect.bind(e),t.disconnect=e.disconnect.bind(e),t),Ht=(t,e)=>{const n=t.createDelay(e.maxDelayTime);return Vt(n,e),Bt(n,e,"delayTime"),n},zt=(t,e)=>{const n=t.createGain();return Vt(n,e),Bt(n,e,"gain"),n};function Gt(t,e){const n=e[0]*e[0]+e[1]*e[1];return[(t[0]*e[0]+t[1]*e[1])/n,(t[1]*e[0]-t[0]*e[1])/n]}function Xt(t,e){let n=[0,0];for(let o=t.length-1;o>=0;o-=1)s=e,n=[(i=n)[0]*s[0]-i[1]*s[1],i[0]*s[1]+i[1]*s[0]],n[0]+=t[o];var i,s;return n}const Yt=(t,e,n,i)=>t.createScriptProcessor(e,n,i),Zt=()=>new DOMException("","NotSupportedError"),$t={numberOfChannels:1},Qt={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",detune:0,frequency:440,periodicWave:void 0,type:"sine"},Jt={channelCount:2,channelCountMode:"clamped-max",channelInterpretation:"speakers",coneInnerAngle:360,coneOuterAngle:360,coneOuterGain:0,distanceModel:"inverse",maxDistance:1e4,orientationX:1,orientationY:0,orientationZ:0,panningModel:"equalpower",positionX:0,positionY:0,positionZ:0,refDistance:1,rolloffFactor:1},Kt={disableNormalization:!1},te={channelCount:2,channelCountMode:"explicit",channelInterpretation:"speakers",pan:0},ee=()=>new DOMException("","UnknownError"),ne={channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",curve:null,oversample:"none"},ie=(t,e,n)=>void 0===t.copyFromChannel?t.getChannelData(n)[0]:(t.copyFromChannel(e,n),e[0]),se=t=>{if(null===t)return!1;const e=t.length;return e%2!=0?0!==t[Math.floor(e/2)]:t[e/2-1]+t[e/2]!==0},oe=(t,e,n,i)=>{let s=t;for(;!s.hasOwnProperty(e);)s=Object.getPrototypeOf(s);const{get:o,set:r}=Object.getOwnPropertyDescriptor(s,e);Object.defineProperty(t,e,{get:n(o),set:i(r)})},re=(t,e,n)=>{try{t.setValueAtTime(e,n)}catch(i){if(9!==i.code)throw i;re(t,e,n+1e-7)}},ae=t=>{const e=t.createOscillator();try{e.start(-1)}catch(t){return t instanceof RangeError}return!1},le=t=>{const e=t.createBuffer(1,1,44100),n=t.createBufferSource();n.buffer=e,n.start(),n.stop();try{return n.stop(),!0}catch{return!1}},ce=t=>{const e=t.createOscillator();try{e.stop(-1)}catch(t){return t instanceof RangeError}return!1},ue=(t,e)=>{const n=e.createGain();t.connect(n);const i=(s=t.disconnect,()=>{s.call(t,n),t.removeEventListener("ended",i)});var s;t.addEventListener("ended",i),Ut(t,n),t.stop=(e=>{let i=!1;return(s=0)=>{if(i)try{e.call(t,s)}catch{n.gain.setValueAtTime(0,s)}else e.call(t,s),i=!0}})(t.stop)},he=(t,e)=>n=>{const i={value:t};return Object.defineProperties(n,{currentTarget:i,target:i}),"function"==typeof e?e.call(t,n):e.handleEvent.call(t,n)},pe=(t=>(e,n,[i,s,o],r)=>{t(e[s],[n,i,o],(t=>t[0]===n&&t[1]===i),r)})(X),de=(t=>(e,n,[i,s,o],r)=>{const a=e.get(i);void 0===a?e.set(i,new Set([[s,n,o]])):t(a,[s,n,o],(t=>t[0]===s&&t[1]===n),r)})(X),fe=(t=>(e,n,i,s)=>t(e[s],(t=>t[0]===n&&t[1]===i)))(S),me=new WeakMap,ge=(t=>e=>{var n;return null!==(n=t.get(e))&&void 0!==n?n:0})(me),ve=(ye=new Map,_e=new WeakMap,(t,e)=>{const n=_e.get(t);if(void 0!==n)return n;const i=ye.get(t);if(void 0!==i)return i;try{const n=e();return n instanceof Promise?(ye.set(t,n),n.catch((()=>!1)).then((e=>(ye.delete(t),_e.set(t,e),e)))):(_e.set(t,n),n)}catch{return _e.set(t,!1),!1}});var ye,_e;const xe="undefined"==typeof window?null:window,be=((t,e)=>(n,i)=>{const s=n.createAnalyser();if(Vt(s,i),!(i.maxDecibels>i.minDecibels))throw e();return Rt(s,i,"fftSize"),Rt(s,i,"maxDecibels"),Rt(s,i,"minDecibels"),Rt(s,i,"smoothingTimeConstant"),t(Nt,(()=>Nt(s)))||(t=>{t.getFloatTimeDomainData=e=>{const n=new Uint8Array(e.length);t.getByteTimeDomainData(n);const i=Math.max(n.length,t.fftSize);for(let t=0;t<i;t+=1)e[t]=.0078125*(n[t]-128);return e}})(s),s})(ve,R),we=(t=>e=>{const n=t(e);if(null===n.renderer)throw new Error("Missing the renderer of the given AudioNode in the audio graph.");return n.renderer})(j),Te=((t,e,n)=>async(i,s,o)=>{const r=t(i);await Promise.all(r.activeInputs.map(((t,r)=>Array.from(t).map((async([t,a])=>{const l=e(t),c=await l.render(t,s),u=i.context.destination;n(t)||i===u&&n(i)||c.connect(o,a,r)})))).reduce(((t,e)=>[...t,...e]),[]))})(j,we,st),Se=((t,e,n)=>()=>{const i=new WeakMap;return{render(s,o){const r=i.get(o);return void 0!==r?Promise.resolve(r):(async(s,o)=>{let r=e(s);if(!P(r,o)){const e={channelCount:r.channelCount,channelCountMode:r.channelCountMode,channelInterpretation:r.channelInterpretation,fftSize:r.fftSize,maxDecibels:r.maxDecibels,minDecibels:r.minDecibels,smoothingTimeConstant:r.smoothingTimeConstant};r=t(o,e)}return i.set(o,r),await n(s,o,r),r})(s,o)}}})(be,nt,Te),Ce=(Ae=d,t=>{const e=Ae.get(t);if(void 0===e)throw Mt();return e});var Ae;const ke=(t=>null===t?null:t.hasOwnProperty("OfflineAudioContext")?t.OfflineAudioContext:t.hasOwnProperty("webkitOfflineAudioContext")?t.webkitOfflineAudioContext:null)(xe),Me=(t=>e=>null!==t&&e instanceof t)(ke),Oe=new WeakMap,Ie=(t=>class{constructor(t){this._nativeEventTarget=t,this._listeners=new WeakMap}addEventListener(e,n,i){if(null!==n){let s=this._listeners.get(n);void 0===s&&(s=t(this,n),"function"==typeof n&&this._listeners.set(n,s)),this._nativeEventTarget.addEventListener(e,s,i)}}dispatchEvent(t){return this._nativeEventTarget.dispatchEvent(t)}removeEventListener(t,e,n){const i=null===e?void 0:this._listeners.get(e);this._nativeEventTarget.removeEventListener(t,void 0===i?null:i,n)}})(he),Ee=(t=>null===t?null:t.hasOwnProperty("AudioContext")?t.AudioContext:t.hasOwnProperty("webkitAudioContext")?t.webkitAudioContext:null)(xe),Pe=(t=>e=>null!==t&&e instanceof t)(Ee),De=(t=>e=>null!==t&&"function"==typeof t.AudioNode&&e instanceof t.AudioNode)(xe),Re=(t=>e=>null!==t&&"function"==typeof t.AudioParam&&e instanceof t.AudioParam)(xe),Ve=(t=>null===t?null:t.hasOwnProperty("AudioWorkletNode")?t.AudioWorkletNode:null)(xe),Ne=((t,e,n,i,s,o,r,a,l,c,h,p,d,m,g,v)=>class extends c{constructor(e,i,s,o){super(s),this._context=e,this._nativeAudioNode=s;const r=h(e);p(r)&&!0!==n(rt,(()=>rt(r,v)))&&ct(s),u.set(this,s),f.set(this,new Set),"closed"!==e.state&&i&&k(this),t(this,o,s)}get channelCount(){return this._nativeAudioNode.channelCount}set channelCount(t){this._nativeAudioNode.channelCount=t}get channelCountMode(){return this._nativeAudioNode.channelCountMode}set channelCountMode(t){this._nativeAudioNode.channelCountMode=t}get channelInterpretation(){return this._nativeAudioNode.channelInterpretation}set channelInterpretation(t){this._nativeAudioNode.channelInterpretation=t}get context(){return this._context}get numberOfInputs(){return this._nativeAudioNode.numberOfInputs}get numberOfOutputs(){return this._nativeAudioNode.numberOfOutputs}connect(t,n=0,a=0){if(n<0||n>=this._nativeAudioNode.numberOfOutputs)throw s();const c=h(this._context),u=g(c);if(d(t)||m(t))throw o();if(z(t)){const s=nt(t);try{const e=Q(this._nativeAudioNode,s,n,a),i=ot(this);(u||i)&&this._nativeAudioNode.disconnect(...e),"closed"!==this.context.state&&!i&&ot(t)&&k(t)}catch(t){if(12===t.code)throw o();throw t}if(e(this,t,n,a,u)){const e=l([this],t);at(e,i(u))}return t}const p=it(t);if("playbackRate"===p.name&&1024===p.maxValue)throw r();try{this._nativeAudioNode.connect(p,n),(u||ot(this))&&this._nativeAudioNode.disconnect(p,n)}catch(t){if(12===t.code)throw o();throw t}if(((t,e,n,i)=>{const{activeInputs:s,passiveInputs:o}=W(e),{outputs:r}=j(t),a=A(t),l=r=>{const a=nt(t),l=it(e);if(r){const e=tt(o,t,n);Y(s,t,e,!1),i||st(t)||a.connect(l,n)}else{const e=((t,e,n)=>S(t,(t=>t[0]===e&&t[1]===n)))(s,t,n);Z(o,e,!1),i||st(t)||a.disconnect(l,n)}};return!!X(r,[e,n],(t=>t[0]===e&&t[1]===n),!0)&&(a.add(l),F(t)?Y(s,t,[n,l],!0):Z(o,[t,n,l],!0),!0)})(this,t,n,u)){const e=l([this],t);at(e,i(u))}}disconnect(t,e,n){let i;const r=h(this._context),c=g(r);if(void 0===t)i=((t,e)=>{const n=j(t),i=[];for(const s of n.outputs)G(s)?ut(t,e,...s):ht(t,e,...s),i.push(s[0]);return n.outputs.clear(),i})(this,c);else if("number"==typeof t){if(t<0||t>=this.numberOfOutputs)throw s();i=((t,e,n)=>{const i=j(t),s=[];for(const o of i.outputs)o[1]===n&&(G(o)?ut(t,e,...o):ht(t,e,...o),s.push(o[0]),i.outputs.delete(o));return s})(this,c,t)}else{if(void 0!==e&&(e<0||e>=this.numberOfOutputs))throw s();if(z(t)&&void 0!==n&&(n<0||n>=t.numberOfInputs))throw s();if(i=((t,e,n,i,s)=>{const o=j(t);return Array.from(o.outputs).filter((t=>!(t[0]!==n||void 0!==i&&t[1]!==i||void 0!==s&&t[2]!==s))).map((n=>(G(n)?ut(t,e,...n):ht(t,e,...n),o.outputs.delete(n),n[0])))})(this,c,t,e,n),0===i.length)throw o()}for(const t of i){const e=l([this],t);at(e,a)}}})((Be=c,(t,e,n)=>{const i=[];for(let t=0;t<n.numberOfInputs;t+=1)i.push(new Set);Be.set(t,{activeInputs:i,outputs:new Set,passiveInputs:new WeakMap,renderer:e})}),((t,e,n,i,s,o,r,a,l,c,u,h,p)=>{const d=new WeakMap;return(f,m,g,v,y)=>{const{activeInputs:_,passiveInputs:x}=o(m),{outputs:b}=o(f),w=a(f),T=o=>{const a=l(m),c=l(f);if(o){const e=C(x,f,g,v);t(_,f,e,!1),y||h(f)||n(c,a,g,v),p(m)&&k(m)}else{const t=i(_,f,g,v);e(x,v,t,!1),y||h(f)||s(c,a,g,v);const n=r(m);if(0===n)u(m)&&I(m,_);else{const t=d.get(m);void 0!==t&&clearTimeout(t),d.set(m,setTimeout((()=>{u(m)&&I(m,_)}),1e3*n))}}};return!!c(b,[m,g,v],(t=>t[0]===m&&t[1]===g&&t[2]===v),!0)&&(w.add(T),u(f)?t(_,f,[g,v,T],!0):e(x,v,[f,g,T],!0),!0)}})(pe,de,Q,fe,et,j,ge,A,nt,X,F,st,ot),ve,((t,e,n,i,s,o)=>r=>(a,l)=>{const c=t.get(a);if(void 0===c){if(!r&&o(a)){const t=i(a),{outputs:o}=n(a);for(const n of o)if(G(n)){const s=i(n[0]);e(t,s,n[1],n[2])}else{const e=s(n[0]);t.disconnect(e,n[1])}}t.set(a,l)}else t.set(a,c+l)})(m,et,j,nt,it,F),R,Ot,Zt,((t,e,n,i,s,o,r,a)=>(l,c)=>{const u=e.get(l);if(void 0===u)throw new Error("Missing the expected cycle count.");const h=o(l.context),p=a(h);if(u===c){if(e.delete(l),!p&&r(l)){const e=i(l),{outputs:o}=n(l);for(const n of o)if(G(n)){const s=i(n[0]);t(e,s,n[1],n[2])}else{const t=s(n[0]);e.connect(t,n[1])}}}else e.set(l,u-c)})(Q,m,j,nt,it,Ce,F,Me),((t,e,n)=>function i(s,o){const r=z(o)?o:n(t,o);if((t=>"delayTime"in t)(r))return[];if(s[0]===r)return[s];if(s.includes(r))return[];const{outputs:a}=e(r);return Array.from(a).map((t=>i([...s,r],t[0]))).reduce(((t,e)=>t.concat(e)),[])})(Oe,j,T),Ie,Ce,Pe,De,Re,Me,Ve);var Be;const qe=((t,e,n,i,s,o)=>class extends t{constructor(t,n){const r=s(t),a={...E,...n},l=i(r,a);super(t,!1,l,o(r)?e():null),this._nativeAnalyserNode=l}get fftSize(){return this._nativeAnalyserNode.fftSize}set fftSize(t){this._nativeAnalyserNode.fftSize=t}get frequencyBinCount(){return this._nativeAnalyserNode.frequencyBinCount}get maxDecibels(){return this._nativeAnalyserNode.maxDecibels}set maxDecibels(t){const e=this._nativeAnalyserNode.maxDecibels;if(this._nativeAnalyserNode.maxDecibels=t,!(t>this._nativeAnalyserNode.minDecibels))throw this._nativeAnalyserNode.maxDecibels=e,n()}get minDecibels(){return this._nativeAnalyserNode.minDecibels}set minDecibels(t){const e=this._nativeAnalyserNode.minDecibels;if(this._nativeAnalyserNode.minDecibels=t,!(this._nativeAnalyserNode.maxDecibels>t))throw this._nativeAnalyserNode.minDecibels=e,n()}get smoothingTimeConstant(){return this._nativeAnalyserNode.smoothingTimeConstant}set smoothingTimeConstant(t){this._nativeAnalyserNode.smoothingTimeConstant=t}getByteFrequencyData(t){this._nativeAnalyserNode.getByteFrequencyData(t)}getByteTimeDomainData(t){this._nativeAnalyserNode.getByteTimeDomainData(t)}getFloatFrequencyData(t){this._nativeAnalyserNode.getFloatFrequencyData(t)}getFloatTimeDomainData(t){this._nativeAnalyserNode.getFloatTimeDomainData(t)}})(Ne,Se,R,be,Ce,Me),Fe=new WeakSet,Le=(t=>null===t?null:t.hasOwnProperty("AudioBuffer")?t.AudioBuffer:null)(xe),je=(We=new Uint32Array(1),t=>(We[0]=t,We[0]));var We;const Ue=((t,e)=>n=>{n.copyFromChannel=(i,s,o=0)=>{const r=t(o),a=t(s);if(a>=n.numberOfChannels)throw e();const l=n.length,c=n.getChannelData(a),u=i.length;for(let t=r<0?-r:0;t+r<l&&t<u;t+=1)i[t]=c[t+r]},n.copyToChannel=(i,s,o=0)=>{const r=t(o),a=t(s);if(a>=n.numberOfChannels)throw e();const l=n.length,c=n.getChannelData(a),u=i.length;for(let t=r<0?-r:0;t+r<l&&t<u;t+=1)c[t+r]=i[t]}})(je,R),He=(t=>e=>{e.copyFromChannel=(n=>(i,s,o=0)=>{const r=t(o),a=t(s);if(r<e.length)return n.call(e,i,a,r)})(e.copyFromChannel),e.copyToChannel=(n=>(i,s,o=0)=>{const r=t(o),a=t(s);if(r<e.length)return n.call(e,i,a,r)})(e.copyToChannel)})(je),ze=((t,e,n,i,s,o,r,a)=>{let l=null;return class c{constructor(c){if(null===s)throw new Error("Missing the native OfflineAudioContext constructor.");const{length:u,numberOfChannels:h,sampleRate:p}={...N,...c};null===l&&(l=new s(1,1,44100));const d=null!==i&&e(o,o)?new i({length:u,numberOfChannels:h,sampleRate:p}):l.createBuffer(h,u,p);if(0===d.numberOfChannels)throw n();return"function"!=typeof d.copyFromChannel?(r(d),V(d)):e(D,(()=>D(d)))||a(d),t.add(d),d}static[Symbol.hasInstance](e){return null!==e&&"object"==typeof e&&Object.getPrototypeOf(e)===c.prototype||t.has(e)}}})(Fe,ve,Zt,Le,ke,(t=>()=>{if(null===t)return!1;try{new t({length:1,sampleRate:44100})}catch{return!1}return!0})(Le),Ue,He),Ge=(t=>(e,n)=>{const i=t(e,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});n.connect(i).connect(e.destination);const s=()=>{n.removeEventListener("ended",s),n.disconnect(i),i.disconnect()};n.addEventListener("ended",s)})(zt),Xe=((t,e,n)=>async(i,s,o)=>{const r=e(i);await Promise.all(Array.from(r.activeInputs).map((async([e,i])=>{const r=t(e),a=await r.render(e,s);n(e)||a.connect(o,i)})))})(we,W,st),Ye=(t=>(e,n,i)=>t(n,e,i))(Xe),Ze=((t,e,n,i,s,o,r,a,l,c,u)=>(l,h)=>{const p=l.createBufferSource();return Vt(p,h),Bt(p,h,"playbackRate"),Rt(p,h,"buffer"),Rt(p,h,"loop"),Rt(p,h,"loopEnd"),Rt(p,h,"loopStart"),e(n,(()=>n(l)))||(t=>{t.start=(e=>{let n=!1;return(i=0,s=0,o)=>{if(n)throw Mt();e.call(t,i,s,o),n=!0}})(t.start)})(p),e(i,(()=>i(l)))||(t=>{t.start=(e=t.start,(n=0,i=0,s)=>{const o=t.buffer,r=null===o?i:Math.min(o.duration,i);null!==o&&r>o.duration-.5/t.context.sampleRate?e.call(t,n,0,0):e.call(t,n,r,s)});var e})(p),e(s,(()=>s(l)))||c(p,l),e(o,(()=>o(l)))||qt(p),e(r,(()=>r(l)))||u(p,l),e(a,(()=>a(l)))||Ft(p),t(l,p),p})(Ge,ve,(t=>{const e=t.createBufferSource();e.start();try{e.start()}catch{return!0}return!1}),(t=>{const e=t.createBufferSource(),n=t.createBuffer(1,1,44100);e.buffer=n;try{e.start(0,1)}catch{return!1}return!0}),(t=>{const e=t.createBufferSource();e.start();try{e.stop()}catch{return!1}return!0}),ae,le,ce,0,(t=>(e,n)=>{const i=n.createBuffer(1,1,44100);null===e.buffer&&(e.buffer=i),t(e,"buffer",(t=>()=>{const n=t.call(e);return n===i?null:n}),(t=>n=>t.call(e,null===n?i:n)))})(oe),ue),$e=((t,e)=>(n,i,s)=>(t(i).replay(s),e(i,n,s)))((t=>e=>{const n=t(e);if(null===n.renderer)throw new Error("Missing the renderer of the given AudioParam in the audio graph.");return n.renderer})(W),Xe),Qe=((t,e,n,i,s)=>()=>{const o=new WeakMap;let r=null,a=null;return{set start(t){r=t},set stop(t){a=t},render(l,c){const u=o.get(c);return void 0!==u?Promise.resolve(u):(async(l,c)=>{let u=n(l);const h=P(u,c);if(!h){const t={buffer:u.buffer,channelCount:u.channelCount,channelCountMode:u.channelCountMode,channelInterpretation:u.channelInterpretation,loop:u.loop,loopEnd:u.loopEnd,loopStart:u.loopStart,playbackRate:u.playbackRate.value};u=e(c,t),null!==r&&u.start(...r),null!==a&&u.stop(a)}return o.set(c,u),h?await t(c,l.playbackRate,u.playbackRate):await i(c,l.playbackRate,u.playbackRate),await s(l,c,u),u})(l,c)}}})(Ye,Ze,nt,$e,Te),Je=((t,e,n,i,s,o,r,l,c,u,h,p,d)=>(i,f,m,g=null,v=null)=>{const y=m.value,_=new a.AutomationEventList(y),x=f?(t=>({replay(e){for(const n of t)if("exponentialRampToValue"===n.type){const{endTime:t,value:i}=n;e.exponentialRampToValueAtTime(i,t)}else if("linearRampToValue"===n.type){const{endTime:t,value:i}=n;e.linearRampToValueAtTime(i,t)}else if("setTarget"===n.type){const{startTime:t,target:i,timeConstant:s}=n;e.setTargetAtTime(i,t,s)}else if("setValue"===n.type){const{startTime:t,value:i}=n;e.setValueAtTime(i,t)}else{if("setValueCurve"!==n.type)throw new Error("Can't apply an unknown automation.");{const{duration:t,startTime:i,values:s}=n;e.setValueCurveAtTime(s,i,t)}}}}))(_):null,b={get defaultValue(){return y},get maxValue(){return null===g?m.maxValue:g},get minValue(){return null===v?m.minValue:v},get value(){return m.value},set value(t){m.value=t,b.setValueAtTime(t,i.context.currentTime)},cancelAndHoldAtTime(t){if("function"==typeof m.cancelAndHoldAtTime)null===x&&_.flush(i.context.currentTime),_.add(s(t)),m.cancelAndHoldAtTime(t);else{const e=Array.from(_).pop();null===x&&_.flush(i.context.currentTime),_.add(s(t));const n=Array.from(_).pop();m.cancelScheduledValues(t),e!==n&&void 0!==n&&("exponentialRampToValue"===n.type?m.exponentialRampToValueAtTime(n.value,n.endTime):"linearRampToValue"===n.type?m.linearRampToValueAtTime(n.value,n.endTime):"setValue"===n.type?m.setValueAtTime(n.value,n.startTime):"setValueCurve"===n.type&&m.setValueCurveAtTime(n.values,n.startTime,n.duration))}return b},cancelScheduledValues:t=>(null===x&&_.flush(i.context.currentTime),_.add(o(t)),m.cancelScheduledValues(t),b),exponentialRampToValueAtTime(t,e){if(0===t)throw new RangeError;if(!Number.isFinite(e)||e<0)throw new RangeError;const n=i.context.currentTime;return null===x&&_.flush(n),0===Array.from(_).length&&(_.add(u(y,n)),m.setValueAtTime(y,n)),_.add(r(t,e)),m.exponentialRampToValueAtTime(t,e),b},linearRampToValueAtTime(t,e){const n=i.context.currentTime;return null===x&&_.flush(n),0===Array.from(_).length&&(_.add(u(y,n)),m.setValueAtTime(y,n)),_.add(l(t,e)),m.linearRampToValueAtTime(t,e),b},setTargetAtTime:(t,e,n)=>(null===x&&_.flush(i.context.currentTime),_.add(c(t,e,n)),m.setTargetAtTime(t,e,n),b),setValueAtTime:(t,e)=>(null===x&&_.flush(i.context.currentTime),_.add(u(t,e)),m.setValueAtTime(t,e),b),setValueCurveAtTime(t,e,n){const s=t instanceof Float32Array?t:new Float32Array(t);if(null!==p&&"webkitAudioContext"===p.name){const t=e+n,o=i.context.sampleRate,r=Math.ceil(e*o),a=Math.floor(t*o),l=a-r,c=new Float32Array(l);for(let t=0;t<l;t+=1){const i=(s.length-1)/n*((r+t)/o-e),a=Math.floor(i),l=Math.ceil(i);c[t]=a===l?s[a]:(1-(i-a))*s[a]+(1-(l-i))*s[l]}null===x&&_.flush(i.context.currentTime),_.add(h(c,e,n)),m.setValueCurveAtTime(c,e,n);const u=a/o;u<t&&d(b,c[c.length-1],u),d(b,s[s.length-1],t)}else null===x&&_.flush(i.context.currentTime),_.add(h(s,e,n)),m.setValueCurveAtTime(s,e,n);return b}};return n.set(b,m),e.set(b,i),t(b,x),b})((Ke=h,(t,e)=>{Ke.set(t,{activeInputs:new Set,passiveInputs:new WeakMap,renderer:e})}),Oe,p,0,a.createCancelAndHoldAutomationEvent,a.createCancelScheduledValuesAutomationEvent,a.createExponentialRampToValueAutomationEvent,a.createLinearRampToValueAutomationEvent,a.createSetTargetAutomationEvent,a.createSetValueAutomationEvent,a.createSetValueCurveAutomationEvent,Ee,re);var Ke;const tn=((t,e,n,i,s,o,r,a)=>class extends t{constructor(t,i){const a=o(t),l={...L,...i},c=s(a,l),u=r(a),h=u?e():null;super(t,!1,c,h),this._audioBufferSourceNodeRenderer=h,this._isBufferNullified=!1,this._isBufferSet=null!==l.buffer,this._nativeAudioBufferSourceNode=c,this._onended=null,this._playbackRate=n(this,u,c.playbackRate,q,B)}get buffer(){return this._isBufferNullified?null:this._nativeAudioBufferSourceNode.buffer}set buffer(t){if(this._nativeAudioBufferSourceNode.buffer=t,null!==t){if(this._isBufferSet)throw i();this._isBufferSet=!0}}get loop(){return this._nativeAudioBufferSourceNode.loop}set loop(t){this._nativeAudioBufferSourceNode.loop=t}get loopEnd(){return this._nativeAudioBufferSourceNode.loopEnd}set loopEnd(t){this._nativeAudioBufferSourceNode.loopEnd=t}get loopStart(){return this._nativeAudioBufferSourceNode.loopStart}set loopStart(t){this._nativeAudioBufferSourceNode.loopStart=t}get onended(){return this._onended}set onended(t){const e="function"==typeof t?a(this,t):null;this._nativeAudioBufferSourceNode.onended=e;const n=this._nativeAudioBufferSourceNode.onended;this._onended=null!==n&&n===e?t:n}get playbackRate(){return this._playbackRate}start(t=0,e=0,n){if(this._nativeAudioBufferSourceNode.start(t,e,n),null!==this._audioBufferSourceNodeRenderer&&(this._audioBufferSourceNodeRenderer.start=void 0===n?[t,e]:[t,e,n]),"closed"!==this.context.state){k(this);const t=()=>{this._nativeAudioBufferSourceNode.removeEventListener("ended",t),F(this)&&O(this)};this._nativeAudioBufferSourceNode.addEventListener("ended",t)}}stop(t=0){this._nativeAudioBufferSourceNode.stop(t),null!==this._audioBufferSourceNodeRenderer&&(this._audioBufferSourceNodeRenderer.stop=t)}})(Ne,Qe,Je,Mt,Ze,Ce,Me,he),en=((t,e,n,i,s,o,r,a)=>class extends t{constructor(t,e){const n=o(t),i=r(n),l=s(n,e,i);super(t,!1,l,i?(t=>{const e=new WeakMap;return{render(n,i){const s=e.get(i);return void 0!==s?Promise.resolve(s):(async(n,i)=>{const s=i.destination;return e.set(i,s),await t(n,i,s),s})(n,i)}}})(a):null),this._isNodeOfNativeOfflineAudioContext=i,this._nativeAudioDestinationNode=l}get channelCount(){return this._nativeAudioDestinationNode.channelCount}set channelCount(t){if(this._isNodeOfNativeOfflineAudioContext)throw i();if(t>this._nativeAudioDestinationNode.maxChannelCount)throw n();this._nativeAudioDestinationNode.channelCount=t}get channelCountMode(){return this._nativeAudioDestinationNode.channelCountMode}set channelCountMode(t){if(this._isNodeOfNativeOfflineAudioContext)throw i();this._nativeAudioDestinationNode.channelCountMode=t}get maxChannelCount(){return this._nativeAudioDestinationNode.maxChannelCount}})(Ne,0,R,Mt,((t,e)=>(n,i,s)=>{const o=n.destination;if(o.channelCount!==i)try{o.channelCount=i}catch{}s&&"explicit"!==o.channelCountMode&&(o.channelCountMode="explicit"),0===o.maxChannelCount&&Object.defineProperty(o,"maxChannelCount",{value:i});const r=t(n,{channelCount:i,channelCountMode:o.channelCountMode,channelInterpretation:o.channelInterpretation,gain:1});return e(r,"channelCount",(t=>()=>t.call(r)),(t=>e=>{t.call(r,e);try{o.channelCount=e}catch(t){if(e>o.maxChannelCount)throw t}})),e(r,"channelCountMode",(t=>()=>t.call(r)),(t=>e=>{t.call(r,e),o.channelCountMode=e})),e(r,"channelInterpretation",(t=>()=>t.call(r)),(t=>e=>{t.call(r,e),o.channelInterpretation=e})),Object.defineProperty(r,"maxChannelCount",{get:()=>o.maxChannelCount}),r.connect(o),r})(zt,oe),Ce,Me,Te),nn=((t,e,n,i,s)=>()=>{const o=new WeakMap;return{render(r,a){const l=o.get(a);return void 0!==l?Promise.resolve(l):(async(r,a)=>{let l=n(r);const c=P(l,a);if(!c){const t={Q:l.Q.value,channelCount:l.channelCount,channelCountMode:l.channelCountMode,channelInterpretation:l.channelInterpretation,detune:l.detune.value,frequency:l.frequency.value,gain:l.gain.value,type:l.type};l=e(a,t)}return o.set(a,l),c?(await t(a,r.Q,l.Q),await t(a,r.detune,l.detune),await t(a,r.frequency,l.frequency),await t(a,r.gain,l.gain)):(await i(a,r.Q,l.Q),await i(a,r.detune,l.detune),await i(a,r.frequency,l.frequency),await i(a,r.gain,l.gain)),await s(r,a,l),l})(r,a)}}})(Ye,jt,nt,$e,Te),sn=(t=>(e,n)=>t.set(e,n))(me),on=((t,e,n,i,s,o,r,a)=>class extends t{constructor(t,i){const l=o(t),c={...yt,...i},u=s(l,c),h=r(l);super(t,!1,u,h?n():null),this._Q=e(this,h,u.Q,q,B),this._detune=e(this,h,u.detune,1200*Math.log2(q),-1200*Math.log2(q)),this._frequency=e(this,h,u.frequency,t.sampleRate/2,0),this._gain=e(this,h,u.gain,40*Math.log10(q),B),this._nativeBiquadFilterNode=u,a(this,1)}get detune(){return this._detune}get frequency(){return this._frequency}get gain(){return this._gain}get Q(){return this._Q}get type(){return this._nativeBiquadFilterNode.type}set type(t){this._nativeBiquadFilterNode.type=t}getFrequencyResponse(t,e,n){try{this._nativeBiquadFilterNode.getFrequencyResponse(t,e,n)}catch(t){if(11===t.code)throw i();throw t}if(t.length!==e.length||e.length!==n.length)throw i()}})(Ne,Je,nn,Ot,jt,Ce,Me,sn),rn=((t,e)=>(n,i,s)=>{const o=new Set;return n.connect=(a=n.connect,(s,r=0,l=0)=>{const c=0===o.size;if(e(s))return a.call(n,s,r,l),t(o,[s,r,l],(t=>t[0]===s&&t[1]===r&&t[2]===l),!0),c&&i(),s;a.call(n,s,r),t(o,[s,r],(t=>t[0]===s&&t[1]===r),!0),c&&i()}),n.disconnect=(r=n.disconnect,(t,i,a)=>{const l=o.size>0;if(void 0===t)r.apply(n),o.clear();else if("number"==typeof t){r.call(n,t);for(const e of o)e[1]===t&&o.delete(e)}else{e(t)?r.call(n,t,i,a):r.call(n,t,i);for(const e of o)e[0]!==t||void 0!==i&&e[1]!==i||void 0!==a&&e[2]!==a||o.delete(e)}const c=0===o.size;l&&c&&s()}),n;var r,a})(X,De),an=((t,e)=>(n,i)=>{i.channelCount=1,i.channelCountMode="explicit",Object.defineProperty(i,"channelCount",{get:()=>1,set:()=>{throw t()}}),Object.defineProperty(i,"channelCountMode",{get:()=>"explicit",set:()=>{throw t()}});const s=n.createBufferSource();e(i,(()=>{const t=i.numberOfInputs;for(let e=0;e<t;e+=1)s.connect(i,0,e)}),(()=>s.disconnect(i)))})(Mt,rn),ln=((t,e)=>(n,i)=>{const s=n.createChannelMerger(i.numberOfInputs);return null!==t&&"webkitAudioContext"===t.name&&e(n,s),Vt(s,i),s})(Ee,an),cn=((t,e,n)=>()=>{const i=new WeakMap;return{render(s,o){const r=i.get(o);return void 0!==r?Promise.resolve(r):(async(s,o)=>{let r=e(s);if(!P(r,o)){const e={channelCount:r.channelCount,channelCountMode:r.channelCountMode,channelInterpretation:r.channelInterpretation,numberOfInputs:r.numberOfInputs};r=t(o,e)}return i.set(o,r),await n(s,o,r),r})(s,o)}}})(ln,nt,Te),un=((t,e,n,i,s)=>class extends t{constructor(t,o){const r=i(t),a={..._t,...o};super(t,!1,n(r,a),s(r)?e():null)}})(Ne,cn,ln,Ce,Me),hn=((t,e,n)=>()=>{const i=new WeakMap;return{render(s,o){const r=i.get(o);return void 0!==r?Promise.resolve(r):(async(s,o)=>{let r=e(s);if(!P(r,o)){const e={channelCount:r.channelCount,channelCountMode:r.channelCountMode,channelInterpretation:r.channelInterpretation,numberOfOutputs:r.numberOfOutputs};r=t(o,e)}return i.set(o,r),await n(s,o,r),r})(s,o)}}})(Wt,nt,Te),pn=((t,e,n,i,s,o)=>class extends t{constructor(t,o){const r=i(t),a=(t=>({...t,channelCount:t.numberOfOutputs}))({...xt,...o});super(t,!1,n(r,a),s(r)?e():null)}})(Ne,hn,Wt,Ce,Me),dn=((t,e,n,i)=>(s,{offset:o,...r})=>{const a=s.createBuffer(1,2,44100),l=e(s,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),c=n(s,{...r,gain:o}),u=a.getChannelData(0);u[0]=1,u[1]=1,l.buffer=a,l.loop=!0;const h={get bufferSize(){},get channelCount(){return c.channelCount},set channelCount(t){c.channelCount=t},get channelCountMode(){return c.channelCountMode},set channelCountMode(t){c.channelCountMode=t},get channelInterpretation(){return c.channelInterpretation},set channelInterpretation(t){c.channelInterpretation=t},get context(){return c.context},get inputs(){return[]},get numberOfInputs(){return l.numberOfInputs},get numberOfOutputs(){return c.numberOfOutputs},get offset(){return c.gain},get onended(){return l.onended},set onended(t){l.onended=t},addEventListener:(...t)=>l.addEventListener(t[0],t[1],t[2]),dispatchEvent:(...t)=>l.dispatchEvent(t[0]),removeEventListener:(...t)=>l.removeEventListener(t[0],t[1],t[2]),start(t=0){l.start.call(l,t)},stop(t=0){l.stop.call(l,t)}};return t(s,l),i(Ut(h,c),(()=>l.connect(c)),(()=>l.disconnect(c)))})(Ge,Ze,zt,rn),fn=((t,e,n,i,s)=>(o,r)=>{if(void 0===o.createConstantSource)return n(o,r);const a=o.createConstantSource();return Vt(a,r),Bt(a,r,"offset"),e(i,(()=>i(o)))||qt(a),e(s,(()=>s(o)))||Ft(a),t(o,a),a})(Ge,ve,dn,ae,ce),mn=((t,e,n,i,s)=>()=>{const o=new WeakMap;let r=null,a=null;return{set start(t){r=t},set stop(t){a=t},render(l,c){const u=o.get(c);return void 0!==u?Promise.resolve(u):(async(l,c)=>{let u=n(l);const h=P(u,c);if(!h){const t={channelCount:u.channelCount,channelCountMode:u.channelCountMode,channelInterpretation:u.channelInterpretation,offset:u.offset.value};u=e(c,t),null!==r&&u.start(r),null!==a&&u.stop(a)}return o.set(c,u),h?await t(c,l.offset,u.offset):await i(c,l.offset,u.offset),await s(l,c,u),u})(l,c)}}})(Ye,fn,nt,$e,Te),gn=((t,e,n,i,s,o,r)=>class extends t{constructor(t,r){const a=s(t),l={...bt,...r},c=i(a,l),u=o(a),h=u?n():null;super(t,!1,c,h),this._constantSourceNodeRenderer=h,this._nativeConstantSourceNode=c,this._offset=e(this,u,c.offset,q,B),this._onended=null}get offset(){return this._offset}get onended(){return this._onended}set onended(t){const e="function"==typeof t?r(this,t):null;this._nativeConstantSourceNode.onended=e;const n=this._nativeConstantSourceNode.onended;this._onended=null!==n&&n===e?t:n}start(t=0){if(this._nativeConstantSourceNode.start(t),null!==this._constantSourceNodeRenderer&&(this._constantSourceNodeRenderer.start=t),"closed"!==this.context.state){k(this);const t=()=>{this._nativeConstantSourceNode.removeEventListener("ended",t),F(this)&&O(this)};this._nativeConstantSourceNode.addEventListener("ended",t)}}stop(t=0){this._nativeConstantSourceNode.stop(t),null!==this._constantSourceNodeRenderer&&(this._constantSourceNodeRenderer.stop=t)}})(Ne,Je,mn,fn,Ce,Me,he),vn=((t,e)=>(n,i)=>{const s=n.createConvolver();if(Vt(s,i),i.disableNormalization===s.normalize&&(s.normalize=!i.disableNormalization),Rt(s,i,"buffer"),i.channelCount>2)throw t();if(e(s,"channelCount",(t=>()=>t.call(s)),(e=>n=>{if(n>2)throw t();return e.call(s,n)})),"max"===i.channelCountMode)throw t();return e(s,"channelCountMode",(t=>()=>t.call(s)),(e=>n=>{if("max"===n)throw t();return e.call(s,n)})),s})(Zt,oe),yn=((t,e,n)=>()=>{const i=new WeakMap;return{render(s,o){const r=i.get(o);return void 0!==r?Promise.resolve(r):(async(s,o)=>{let r=e(s);if(!P(r,o)){const e={buffer:r.buffer,channelCount:r.channelCount,channelCountMode:r.channelCountMode,channelInterpretation:r.channelInterpretation,disableNormalization:!r.normalize};r=t(o,e)}return i.set(o,r),$(r)?await n(s,o,r.inputs[0]):await n(s,o,r),r})(s,o)}}})(vn,nt,Te),_n=((t,e,n,i,s,o)=>class extends t{constructor(t,r){const a=i(t),l={...wt,...r},c=n(a,l);super(t,!1,c,s(a)?e():null),this._isBufferNullified=!1,this._nativeConvolverNode=c,null!==l.buffer&&o(this,l.buffer.duration)}get buffer(){return this._isBufferNullified?null:this._nativeConvolverNode.buffer}set buffer(t){if(this._nativeConvolverNode.buffer=t,null===t&&null!==this._nativeConvolverNode.buffer){const t=this._nativeConvolverNode.context;this._nativeConvolverNode.buffer=t.createBuffer(1,1,t.sampleRate),this._isBufferNullified=!0,o(this,0)}else this._isBufferNullified=!1,o(this,null===this._nativeConvolverNode.buffer?0:this._nativeConvolverNode.buffer.duration)}get normalize(){return this._nativeConvolverNode.normalize}set normalize(t){this._nativeConvolverNode.normalize=t}})(Ne,yn,vn,Ce,Me,sn),xn=((t,e,n,i,s)=>o=>{const r=new WeakMap;return{render(a,l){const c=r.get(l);return void 0!==c?Promise.resolve(c):(async(a,l)=>{let c=n(a);const u=P(c,l);if(!u){const t={channelCount:c.channelCount,channelCountMode:c.channelCountMode,channelInterpretation:c.channelInterpretation,delayTime:c.delayTime.value,maxDelayTime:o};c=e(l,t)}return r.set(l,c),u?await t(l,a.delayTime,c.delayTime):await i(l,a.delayTime,c.delayTime),await s(a,l,c),c})(a,l)}}})(Ye,Ht,nt,$e,Te),bn=((t,e,n,i,s,o,r)=>class extends t{constructor(t,a){const l=s(t),c={...St,...a},u=i(l,c),h=o(l);super(t,!1,u,h?n(c.maxDelayTime):null),this._delayTime=e(this,h,u.delayTime),r(this,c.maxDelayTime)}get delayTime(){return this._delayTime}})(Ne,Je,xn,Ht,Ce,Me,sn),wn=(t=>(e,n)=>{const i=e.createDynamicsCompressor();if(Vt(i,n),n.channelCount>2)throw t();if("max"===n.channelCountMode)throw t();return Bt(i,n,"attack"),Bt(i,n,"knee"),Bt(i,n,"ratio"),Bt(i,n,"release"),Bt(i,n,"threshold"),i})(Zt),Tn=((t,e,n,i,s)=>()=>{const o=new WeakMap;return{render(r,a){const l=o.get(a);return void 0!==l?Promise.resolve(l):(async(r,a)=>{let l=n(r);const c=P(l,a);if(!c){const t={attack:l.attack.value,channelCount:l.channelCount,channelCountMode:l.channelCountMode,channelInterpretation:l.channelInterpretation,knee:l.knee.value,ratio:l.ratio.value,release:l.release.value,threshold:l.threshold.value};l=e(a,t)}return o.set(a,l),c?(await t(a,r.attack,l.attack),await t(a,r.knee,l.knee),await t(a,r.ratio,l.ratio),await t(a,r.release,l.release),await t(a,r.threshold,l.threshold)):(await i(a,r.attack,l.attack),await i(a,r.knee,l.knee),await i(a,r.ratio,l.ratio),await i(a,r.release,l.release),await i(a,r.threshold,l.threshold)),await s(r,a,l),l})(r,a)}}})(Ye,wn,nt,$e,Te),Sn=((t,e,n,i,s,o,r,a)=>class extends t{constructor(t,s){const l=o(t),c={...At,...s},u=i(l,c),h=r(l);super(t,!1,u,h?n():null),this._attack=e(this,h,u.attack),this._knee=e(this,h,u.knee),this._nativeDynamicsCompressorNode=u,this._ratio=e(this,h,u.ratio),this._release=e(this,h,u.release),this._threshold=e(this,h,u.threshold),a(this,.006)}get attack(){return this._attack}get channelCount(){return this._nativeDynamicsCompressorNode.channelCount}set channelCount(t){const e=this._nativeDynamicsCompressorNode.channelCount;if(this._nativeDynamicsCompressorNode.channelCount=t,t>2)throw this._nativeDynamicsCompressorNode.channelCount=e,s()}get channelCountMode(){return this._nativeDynamicsCompressorNode.channelCountMode}set channelCountMode(t){const e=this._nativeDynamicsCompressorNode.channelCountMode;if(this._nativeDynamicsCompressorNode.channelCountMode=t,"max"===t)throw this._nativeDynamicsCompressorNode.channelCountMode=e,s()}get knee(){return this._knee}get ratio(){return this._ratio}get reduction(){return"number"==typeof this._nativeDynamicsCompressorNode.reduction.value?this._nativeDynamicsCompressorNode.reduction.value:this._nativeDynamicsCompressorNode.reduction}get release(){return this._release}get threshold(){return this._threshold}})(Ne,Je,Tn,wn,Zt,Ce,Me,sn),Cn=((t,e,n,i,s)=>()=>{const o=new WeakMap;return{render(r,a){const l=o.get(a);return void 0!==l?Promise.resolve(l):(async(r,a)=>{let l=n(r);const c=P(l,a);if(!c){const t={channelCount:l.channelCount,channelCountMode:l.channelCountMode,channelInterpretation:l.channelInterpretation,gain:l.gain.value};l=e(a,t)}return o.set(a,l),c?await t(a,r.gain,l.gain):await i(a,r.gain,l.gain),await s(r,a,l),l})(r,a)}}})(Ye,zt,nt,$e,Te),An=((t,e,n,i,s,o)=>class extends t{constructor(t,r){const a=s(t),l={...kt,...r},c=i(a,l),u=o(a);super(t,!1,c,u?n():null),this._gain=e(this,u,c.gain,q,B)}get gain(){return this._gain}})(Ne,Je,Cn,zt,Ce,Me),kn=((t,e,n,i)=>(s,o,{channelCount:r,channelCountMode:a,channelInterpretation:l,feedback:c,feedforward:u})=>{const h=Lt(o,s.sampleRate),p=c instanceof Float64Array?c:new Float64Array(c),d=u instanceof Float64Array?u:new Float64Array(u),f=p.length,m=d.length,g=Math.min(f,m);if(0===f||f>20)throw i();if(0===p[0])throw e();if(0===m||m>20)throw i();if(0===d[0])throw e();if(1!==p[0]){for(let t=0;t<m;t+=1)d[t]/=p[0];for(let t=1;t<f;t+=1)p[t]/=p[0]}const v=n(s,h,r,r);v.channelCount=r,v.channelCountMode=a,v.channelInterpretation=l;const y=[],_=[],x=[];for(let t=0;t<r;t+=1){y.push(0);const t=new Float32Array(32),e=new Float32Array(32);t.fill(0),e.fill(0),_.push(t),x.push(e)}v.onaudioprocess=t=>{const e=t.inputBuffer,n=t.outputBuffer,i=e.numberOfChannels;for(let t=0;t<i;t+=1){const i=e.getChannelData(t),s=n.getChannelData(t);y[t]=Et(p,f,d,m,g,_[t],x[t],y[t],32,i,s)}};const b=s.sampleRate/2,w={get bufferSize(){return h},get channelCount(){return v.channelCount},set channelCount(t){v.channelCount=t},get channelCountMode(){return v.channelCountMode},set channelCountMode(t){v.channelCountMode=t},get channelInterpretation(){return v.channelInterpretation},set channelInterpretation(t){v.channelInterpretation=t},get context(){return v.context},get inputs(){return[v]},get numberOfInputs(){return v.numberOfInputs},get numberOfOutputs(){return v.numberOfOutputs},addEventListener:(...t)=>v.addEventListener(t[0],t[1],t[2]),dispatchEvent:(...t)=>v.dispatchEvent(t[0]),getFrequencyResponse(e,n,i){if(e.length!==n.length||n.length!==i.length)throw t();const s=e.length;for(let t=0;t<s;t+=1){const s=-Math.PI*(e[t]/b),o=[Math.cos(s),Math.sin(s)],r=Gt(Xt(d,o),Xt(p,o));n[t]=Math.sqrt(r[0]*r[0]+r[1]*r[1]),i[t]=Math.atan2(r[1],r[0])}},removeEventListener:(...t)=>v.removeEventListener(t[0],t[1],t[2])};return Ut(w,v)})(Ot,Mt,Yt,Zt),Mn=((t,e,n,i)=>s=>t(Dt,(()=>Dt(s)))?Promise.resolve(t(i,i)).then((t=>{if(!t){const t=n(s,512,0,1);s.oncomplete=()=>{t.onaudioprocess=null,t.disconnect()},t.onaudioprocess=()=>s.currentTime,t.connect(s.destination)}return s.startRendering()})):new Promise((t=>{const n=e(s,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});s.oncomplete=e=>{n.disconnect(),t(e.renderedBuffer)},n.connect(s.destination),s.startRendering()})))(ve,zt,Yt,((t,e)=>()=>{if(null===e)return Promise.resolve(!1);const n=new e(1,1,44100),i=t(n,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});return new Promise((t=>{n.oncomplete=()=>{i.disconnect(),t(0!==n.currentTime)},n.startRendering()}))})(zt,ke)),On=((t,e,n,i,s)=>(o,r)=>{const a=new WeakMap;let l=null;return{render(c,u){const h=a.get(u);return void 0!==h?Promise.resolve(h):(async(c,u)=>{let h=null,p=e(c);const d=P(p,u);if(void 0===u.createIIRFilter?h=t(u,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}):d||(p=u.createIIRFilter(r,o)),a.set(u,null===h?p:h),null!==h){if(null===l){if(null===n)throw new Error("Missing the native OfflineAudioContext constructor.");const t=new n(c.context.destination.channelCount,c.context.length,u.sampleRate);l=(async()=>(await i(c,t,t.destination),((t,e,n,i)=>{const s=n instanceof Float64Array?n:new Float64Array(n),o=i instanceof Float64Array?i:new Float64Array(i),r=s.length,a=o.length,l=Math.min(r,a);if(1!==s[0]){for(let t=0;t<r;t+=1)o[t]/=s[0];for(let t=1;t<a;t+=1)s[t]/=s[0]}const c=new Float32Array(32),u=new Float32Array(32),h=e.createBuffer(t.numberOfChannels,t.length,t.sampleRate),p=t.numberOfChannels;for(let e=0;e<p;e+=1){const n=t.getChannelData(e),i=h.getChannelData(e);c.fill(0),u.fill(0),Et(s,r,o,a,l,c,u,0,32,n,i)}return h})(await s(t),u,o,r)))()}const t=await l;return h.buffer=t,h.start(0),h}return await i(c,u,p),p})(c,u)}}})(Ze,nt,ke,Te,Mn),In=(t=>(e,n,i)=>{if(void 0===e.createIIRFilter)return t(e,n,i);const s=e.createIIRFilter(i.feedforward,i.feedback);return Vt(s,i),s})(kn),En=((t,e,n,i,s,o)=>class extends t{constructor(t,r){const a=i(t),l=s(a),c={...It,...r},u=e(a,l?null:t.baseLatency,c);super(t,!1,u,l?n(c.feedback,c.feedforward):null),(t=>{var e;t.getFrequencyResponse=(e=t.getFrequencyResponse,(n,i,s)=>{if(n.length!==i.length||i.length!==s.length)throw Ot();return e.call(t,n,i,s)})})(u),this._nativeIIRFilterNode=u,o(this,1)}getFrequencyResponse(t,e,n){return this._nativeIIRFilterNode.getFrequencyResponse(t,e,n)}})(Ne,In,On,Ce,Me,sn),Pn=((t,e,n,i,s,o,r,a)=>(l,c)=>{const u=c.listener,{forwardX:h,forwardY:p,forwardZ:d,positionX:f,positionY:m,positionZ:g,upX:v,upY:y,upZ:_}=void 0===u.forwardX?(()=>{const h=new Float32Array(1),p=e(c,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:9}),d=r(c);let f=!1,m=[0,0,-1,0,1,0],g=[0,0,0];const v=()=>{if(f)return;f=!0;const t=i(c,256,9,0);t.onaudioprocess=({inputBuffer:t})=>{const e=[o(t,h,0),o(t,h,1),o(t,h,2),o(t,h,3),o(t,h,4),o(t,h,5)];e.some(((t,e)=>t!==m[e]))&&(u.setOrientation(...e),m=e);const n=[o(t,h,6),o(t,h,7),o(t,h,8)];n.some(((t,e)=>t!==g[e]))&&(u.setPosition(...n),g=n)},p.connect(t)},y=t=>e=>{e!==m[t]&&(m[t]=e,u.setOrientation(...m))},_=t=>e=>{e!==g[t]&&(g[t]=e,u.setPosition(...g))},x=(e,i,o)=>{const r=n(c,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:i});r.connect(p,0,e),r.start(),Object.defineProperty(r.offset,"defaultValue",{get:()=>i});const u=t({context:l},d,r.offset,q,B);var h,f,m,g,y,_,x;return a(u,"value",(t=>()=>t.call(u)),(t=>e=>{try{t.call(u,e)}catch(t){if(9!==t.code)throw t}v(),d&&o(e)})),u.cancelAndHoldAtTime=(h=u.cancelAndHoldAtTime,d?()=>{throw s()}:(...t)=>{const e=h.apply(u,t);return v(),e}),u.cancelScheduledValues=(f=u.cancelScheduledValues,d?()=>{throw s()}:(...t)=>{const e=f.apply(u,t);return v(),e}),u.exponentialRampToValueAtTime=(m=u.exponentialRampToValueAtTime,d?()=>{throw s()}:(...t)=>{const e=m.apply(u,t);return v(),e}),u.linearRampToValueAtTime=(g=u.linearRampToValueAtTime,d?()=>{throw s()}:(...t)=>{const e=g.apply(u,t);return v(),e}),u.setTargetAtTime=(y=u.setTargetAtTime,d?()=>{throw s()}:(...t)=>{const e=y.apply(u,t);return v(),e}),u.setValueAtTime=(_=u.setValueAtTime,d?()=>{throw s()}:(...t)=>{const e=_.apply(u,t);return v(),e}),u.setValueCurveAtTime=(x=u.setValueCurveAtTime,d?()=>{throw s()}:(...t)=>{const e=x.apply(u,t);return v(),e}),u};return{forwardX:x(0,0,y(0)),forwardY:x(1,0,y(1)),forwardZ:x(2,-1,y(2)),positionX:x(6,0,_(0)),positionY:x(7,0,_(1)),positionZ:x(8,0,_(2)),upX:x(3,0,y(3)),upY:x(4,1,y(4)),upZ:x(5,0,y(5))}})():u;return{get forwardX(){return h},get forwardY(){return p},get forwardZ(){return d},get positionX(){return f},get positionY(){return m},get positionZ(){return g},get upX(){return v},get upY(){return y},get upZ(){return _}}})(Je,ln,fn,Yt,Zt,ie,Me,oe),Dn=new WeakMap,Rn=((t,e,n,i,s,o)=>class extends n{constructor(n,o){super(n),this._nativeContext=n,d.set(this,n),i(n)&&s.set(n,new Set),this._destination=new t(this,o),this._listener=e(this,n),this._onstatechange=null}get currentTime(){return this._nativeContext.currentTime}get destination(){return this._destination}get listener(){return this._listener}get onstatechange(){return this._onstatechange}set onstatechange(t){const e="function"==typeof t?o(this,t):null;this._nativeContext.onstatechange=e;const n=this._nativeContext.onstatechange;this._onstatechange=null!==n&&n===e?t:n}get sampleRate(){return this._nativeContext.sampleRate}get state(){return this._nativeContext.state}})(en,Pn,Ie,Me,Dn,he),Vn=((t,e,n,i,s,o)=>(r,a)=>{const l=r.createOscillator();return Vt(l,a),Bt(l,a,"detune"),Bt(l,a,"frequency"),void 0!==a.periodicWave?l.setPeriodicWave(a.periodicWave):Rt(l,a,"type"),e(n,(()=>n(r)))||qt(l),e(i,(()=>i(r)))||o(l,r),e(s,(()=>s(r)))||Ft(l),t(r,l),l})(Ge,ve,ae,le,ce,ue),Nn=((t,e,n,i,s)=>()=>{const o=new WeakMap;let r=null,a=null,l=null;return{set periodicWave(t){r=t},set start(t){a=t},set stop(t){l=t},render(c,u){const h=o.get(u);return void 0!==h?Promise.resolve(h):(async(c,u)=>{let h=n(c);const p=P(h,u);if(!p){const t={channelCount:h.channelCount,channelCountMode:h.channelCountMode,channelInterpretation:h.channelInterpretation,detune:h.detune.value,frequency:h.frequency.value,periodicWave:null===r?void 0:r,type:h.type};h=e(u,t),null!==a&&h.start(a),null!==l&&h.stop(l)}return o.set(u,h),p?(await t(u,c.detune,h.detune),await t(u,c.frequency,h.frequency)):(await i(u,c.detune,h.detune),await i(u,c.frequency,h.frequency)),await s(c,u,h),h})(c,u)}}})(Ye,Vn,nt,$e,Te),Bn=((t,e,n,i,s,o,r)=>class extends t{constructor(t,r){const a=s(t),l={...Qt,...r},c=n(a,l),u=o(a),h=u?i():null,p=t.sampleRate/2;super(t,!1,c,h),this._detune=e(this,u,c.detune,153600,-153600),this._frequency=e(this,u,c.frequency,p,-p),this._nativeOscillatorNode=c,this._onended=null,this._oscillatorNodeRenderer=h,null!==this._oscillatorNodeRenderer&&void 0!==l.periodicWave&&(this._oscillatorNodeRenderer.periodicWave=l.periodicWave)}get detune(){return this._detune}get frequency(){return this._frequency}get onended(){return this._onended}set onended(t){const e="function"==typeof t?r(this,t):null;this._nativeOscillatorNode.onended=e;const n=this._nativeOscillatorNode.onended;this._onended=null!==n&&n===e?t:n}get type(){return this._nativeOscillatorNode.type}set type(t){this._nativeOscillatorNode.type=t,null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.periodicWave=null)}setPeriodicWave(t){this._nativeOscillatorNode.setPeriodicWave(t),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.periodicWave=t)}start(t=0){if(this._nativeOscillatorNode.start(t),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.start=t),"closed"!==this.context.state){k(this);const t=()=>{this._nativeOscillatorNode.removeEventListener("ended",t),F(this)&&O(this)};this._nativeOscillatorNode.addEventListener("ended",t)}}stop(t=0){this._nativeOscillatorNode.stop(t),null!==this._oscillatorNodeRenderer&&(this._oscillatorNodeRenderer.stop=t)}})(Ne,Je,Vn,Nn,Ce,Me,he),qn=(t=>(e,n)=>{const i=t(e,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),s=e.createBuffer(1,2,44100);return i.buffer=s,i.loop=!0,i.connect(n),i.start(),()=>{i.stop(),i.disconnect(n)}})(Ze),Fn=((t,e,n,i,s)=>(o,{curve:r,oversample:a,...l})=>{const c=o.createWaveShaper(),u=o.createWaveShaper();Vt(c,l),Vt(u,l);const h=n(o,{...l,gain:1}),p=n(o,{...l,gain:-1}),d=n(o,{...l,gain:1}),f=n(o,{...l,gain:-1});let m=null,g=!1,v=null;const y={get bufferSize(){},get channelCount(){return c.channelCount},set channelCount(t){h.channelCount=t,p.channelCount=t,c.channelCount=t,d.channelCount=t,u.channelCount=t,f.channelCount=t},get channelCountMode(){return c.channelCountMode},set channelCountMode(t){h.channelCountMode=t,p.channelCountMode=t,c.channelCountMode=t,d.channelCountMode=t,u.channelCountMode=t,f.channelCountMode=t},get channelInterpretation(){return c.channelInterpretation},set channelInterpretation(t){h.channelInterpretation=t,p.channelInterpretation=t,c.channelInterpretation=t,d.channelInterpretation=t,u.channelInterpretation=t,f.channelInterpretation=t},get context(){return c.context},get curve(){return v},set curve(n){if(null!==n&&n.length<2)throw e();if(null===n)c.curve=n,u.curve=n;else{const t=n.length,e=new Float32Array(t+2-t%2),i=new Float32Array(t+2-t%2);e[0]=n[0],i[0]=-n[t-1];const s=Math.ceil((t+1)/2),o=(t+1)/2-1;for(let r=1;r<s;r+=1){const a=r/s*o,l=Math.floor(a),c=Math.ceil(a);e[r]=l===c?n[l]:(1-(a-l))*n[l]+(1-(c-a))*n[c],i[r]=l===c?-n[t-1-l]:-(1-(a-l))*n[t-1-l]-(1-(c-a))*n[t-1-c]}e[s]=t%2==1?n[s-1]:(n[s-2]+n[s-1])/2,c.curve=e,u.curve=i}v=n,g&&(i(v)&&null===m?m=t(o,h):null!==m&&(m(),m=null))},get inputs(){return[h]},get numberOfInputs(){return c.numberOfInputs},get numberOfOutputs(){return c.numberOfOutputs},get oversample(){return c.oversample},set oversample(t){c.oversample=t,u.oversample=t},addEventListener:(...t)=>h.addEventListener(t[0],t[1],t[2]),dispatchEvent:(...t)=>h.dispatchEvent(t[0]),removeEventListener:(...t)=>h.removeEventListener(t[0],t[1],t[2])};return null!==r&&(y.curve=r instanceof Float32Array?r:new Float32Array(r)),a!==y.oversample&&(y.oversample=a),s(Ut(y,d),(()=>{h.connect(c).connect(d),h.connect(p).connect(u).connect(f).connect(d),g=!0,i(v)&&(m=t(o,h))}),(()=>{h.disconnect(c),c.disconnect(d),h.disconnect(p),p.disconnect(u),u.disconnect(f),f.disconnect(d),g=!1,null!==m&&(m(),m=null)}))})(qn,Mt,zt,se,rn),Ln=((t,e,n,i,s,o,r)=>(a,l)=>{const c=a.createWaveShaper();if(null!==o&&"webkitAudioContext"===o.name&&void 0===a.createGain().gain.automationRate)return n(a,l);Vt(c,l);const u=null===l.curve||l.curve instanceof Float32Array?l.curve:new Float32Array(l.curve);if(null!==u&&u.length<2)throw e();Rt(c,{curve:u},"curve"),Rt(c,l,"oversample");let h=null,p=!1;return r(c,"curve",(t=>()=>t.call(c)),(e=>n=>(e.call(c,n),p&&(i(n)&&null===h?h=t(a,c):i(n)||null===h||(h(),h=null)),n))),s(c,(()=>{p=!0,i(c.curve)&&(h=t(a,c))}),(()=>{p=!1,null!==h&&(h(),h=null)}))})(qn,Mt,Fn,se,rn,Ee,oe),jn=((t,e,n,i,s,o,r,a,l,c)=>(u,{coneInnerAngle:h,coneOuterAngle:p,coneOuterGain:d,distanceModel:f,maxDistance:m,orientationX:g,orientationY:v,orientationZ:y,panningModel:_,positionX:x,positionY:b,positionZ:w,refDistance:T,rolloffFactor:S,...C})=>{const A=u.createPanner();if(C.channelCount>2)throw r();if("max"===C.channelCountMode)throw r();Vt(A,C);const k={channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete"},M=n(u,{...k,channelInterpretation:"speakers",numberOfInputs:6}),O=i(u,{...C,gain:1}),I=i(u,{...k,gain:1}),E=i(u,{...k,gain:0}),P=i(u,{...k,gain:0}),D=i(u,{...k,gain:0}),R=i(u,{...k,gain:0}),V=i(u,{...k,gain:0}),N=s(u,256,6,1),B=o(u,{...k,curve:new Float32Array([1,1]),oversample:"none"});let q=[g,v,y],F=[x,b,w];const L=new Float32Array(1);N.onaudioprocess=({inputBuffer:t})=>{const e=[l(t,L,0),l(t,L,1),l(t,L,2)];e.some(((t,e)=>t!==q[e]))&&(A.setOrientation(...e),q=e);const n=[l(t,L,3),l(t,L,4),l(t,L,5)];n.some(((t,e)=>t!==F[e]))&&(A.setPosition(...n),F=n)},Object.defineProperty(E.gain,"defaultValue",{get:()=>0}),Object.defineProperty(P.gain,"defaultValue",{get:()=>0}),Object.defineProperty(D.gain,"defaultValue",{get:()=>0}),Object.defineProperty(R.gain,"defaultValue",{get:()=>0}),Object.defineProperty(V.gain,"defaultValue",{get:()=>0});const j={get bufferSize(){},get channelCount(){return A.channelCount},set channelCount(t){if(t>2)throw r();O.channelCount=t,A.channelCount=t},get channelCountMode(){return A.channelCountMode},set channelCountMode(t){if("max"===t)throw r();O.channelCountMode=t,A.channelCountMode=t},get channelInterpretation(){return A.channelInterpretation},set channelInterpretation(t){O.channelInterpretation=t,A.channelInterpretation=t},get coneInnerAngle(){return A.coneInnerAngle},set coneInnerAngle(t){A.coneInnerAngle=t},get coneOuterAngle(){return A.coneOuterAngle},set coneOuterAngle(t){A.coneOuterAngle=t},get coneOuterGain(){return A.coneOuterGain},set coneOuterGain(t){if(t<0||t>1)throw e();A.coneOuterGain=t},get context(){return A.context},get distanceModel(){return A.distanceModel},set distanceModel(t){A.distanceModel=t},get inputs(){return[O]},get maxDistance(){return A.maxDistance},set maxDistance(t){if(t<0)throw new RangeError;A.maxDistance=t},get numberOfInputs(){return A.numberOfInputs},get numberOfOutputs(){return A.numberOfOutputs},get orientationX(){return I.gain},get orientationY(){return E.gain},get orientationZ(){return P.gain},get panningModel(){return A.panningModel},set panningModel(t){A.panningModel=t},get positionX(){return D.gain},get positionY(){return R.gain},get positionZ(){return V.gain},get refDistance(){return A.refDistance},set refDistance(t){if(t<0)throw new RangeError;A.refDistance=t},get rolloffFactor(){return A.rolloffFactor},set rolloffFactor(t){if(t<0)throw new RangeError;A.rolloffFactor=t},addEventListener:(...t)=>O.addEventListener(t[0],t[1],t[2]),dispatchEvent:(...t)=>O.dispatchEvent(t[0]),removeEventListener:(...t)=>O.removeEventListener(t[0],t[1],t[2])};return h!==j.coneInnerAngle&&(j.coneInnerAngle=h),p!==j.coneOuterAngle&&(j.coneOuterAngle=p),d!==j.coneOuterGain&&(j.coneOuterGain=d),f!==j.distanceModel&&(j.distanceModel=f),m!==j.maxDistance&&(j.maxDistance=m),g!==j.orientationX.value&&(j.orientationX.value=g),v!==j.orientationY.value&&(j.orientationY.value=v),y!==j.orientationZ.value&&(j.orientationZ.value=y),_!==j.panningModel&&(j.panningModel=_),x!==j.positionX.value&&(j.positionX.value=x),b!==j.positionY.value&&(j.positionY.value=b),w!==j.positionZ.value&&(j.positionZ.value=w),T!==j.refDistance&&(j.refDistance=T),S!==j.rolloffFactor&&(j.rolloffFactor=S),1===q[0]&&0===q[1]&&0===q[2]||A.setOrientation(...q),0===F[0]&&0===F[1]&&0===F[2]||A.setPosition(...F),c(Ut(j,A),(()=>{O.connect(A),t(O,B,0,0),B.connect(I).connect(M,0,0),B.connect(E).connect(M,0,1),B.connect(P).connect(M,0,2),B.connect(D).connect(M,0,3),B.connect(R).connect(M,0,4),B.connect(V).connect(M,0,5),M.connect(N).connect(u.destination)}),(()=>{O.disconnect(A),a(O,B,0,0),B.disconnect(I),I.disconnect(M),B.disconnect(E),E.disconnect(M),B.disconnect(P),P.disconnect(M),B.disconnect(D),D.disconnect(M),B.disconnect(R),R.disconnect(M),B.disconnect(V),V.disconnect(M),M.disconnect(N),N.disconnect(u.destination)}))})(Q,Mt,ln,zt,Yt,Ln,Zt,et,ie,rn),Wn=(t=>(e,n)=>{const i=e.createPanner();return void 0===i.orientationX?t(e,n):(Vt(i,n),Bt(i,n,"orientationX"),Bt(i,n,"orientationY"),Bt(i,n,"orientationZ"),Bt(i,n,"positionX"),Bt(i,n,"positionY"),Bt(i,n,"positionZ"),Rt(i,n,"coneInnerAngle"),Rt(i,n,"coneOuterAngle"),Rt(i,n,"coneOuterGain"),Rt(i,n,"distanceModel"),Rt(i,n,"maxDistance"),Rt(i,n,"panningModel"),Rt(i,n,"refDistance"),Rt(i,n,"rolloffFactor"),i)})(jn),Un=((t,e,n,i,s,o,r,a,l,c)=>()=>{const u=new WeakMap;let h=null;return{render(p,d){const f=u.get(d);return void 0!==f?Promise.resolve(f):(async(p,d)=>{let f=null,m=o(p);const g={channelCount:m.channelCount,channelCountMode:m.channelCountMode,channelInterpretation:m.channelInterpretation},v={...g,coneInnerAngle:m.coneInnerAngle,coneOuterAngle:m.coneOuterAngle,coneOuterGain:m.coneOuterGain,distanceModel:m.distanceModel,maxDistance:m.maxDistance,panningModel:m.panningModel,refDistance:m.refDistance,rolloffFactor:m.rolloffFactor},y=P(m,d);if("bufferSize"in m)f=i(d,{...g,gain:1});else if(!y){const t={...v,orientationX:m.orientationX.value,orientationY:m.orientationY.value,orientationZ:m.orientationZ.value,positionX:m.positionX.value,positionY:m.positionY.value,positionZ:m.positionZ.value};m=s(d,t)}if(u.set(d,null===f?m:f),null!==f){if(null===h){if(null===r)throw new Error("Missing the native OfflineAudioContext constructor.");const t=new r(6,p.context.length,d.sampleRate),i=e(t,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:6});i.connect(t.destination),h=(async()=>{const e=await Promise.all([p.orientationX,p.orientationY,p.orientationZ,p.positionX,p.positionY,p.positionZ].map((async(e,i)=>{const s=n(t,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:0===i?1:0});return await a(t,e,s.offset),s})));for(let t=0;t<6;t+=1)e[t].connect(i,0,t),e[t].start(0);return c(t)})()}const t=await h,o=i(d,{...g,gain:1});await l(p,d,o);const u=[];for(let e=0;e<t.numberOfChannels;e+=1)u.push(t.getChannelData(e));let m=[u[0][0],u[1][0],u[2][0]],y=[u[3][0],u[4][0],u[5][0]],_=i(d,{...g,gain:1}),x=s(d,{...v,orientationX:m[0],orientationY:m[1],orientationZ:m[2],positionX:y[0],positionY:y[1],positionZ:y[2]});o.connect(_).connect(x.inputs[0]),x.connect(f);for(let e=128;e<t.length;e+=128){const t=[u[0][e],u[1][e],u[2][e]],n=[u[3][e],u[4][e],u[5][e]];if(t.some(((t,e)=>t!==m[e]))||n.some(((t,e)=>t!==y[e]))){m=t,y=n;const r=e/d.sampleRate;_.gain.setValueAtTime(0,r),_=i(d,{...g,gain:0}),x=s(d,{...v,orientationX:m[0],orientationY:m[1],orientationZ:m[2],positionX:y[0],positionY:y[1],positionZ:y[2]}),_.gain.setValueAtTime(1,r),o.connect(_).connect(x.inputs[0]),x.connect(f)}}return f}return y?(await t(d,p.orientationX,m.orientationX),await t(d,p.orientationY,m.orientationY),await t(d,p.orientationZ,m.orientationZ),await t(d,p.positionX,m.positionX),await t(d,p.positionY,m.positionY),await t(d,p.positionZ,m.positionZ)):(await a(d,p.orientationX,m.orientationX),await a(d,p.orientationY,m.orientationY),await a(d,p.orientationZ,m.orientationZ),await a(d,p.positionX,m.positionX),await a(d,p.positionY,m.positionY),await a(d,p.positionZ,m.positionZ)),$(m)?await l(p,d,m.inputs[0]):await l(p,d,m),m})(p,d)}}})(Ye,ln,fn,zt,Wn,nt,ke,$e,Te,Mn),Hn=((t,e,n,i,s,o,r)=>class extends t{constructor(t,a){const l=s(t),c={...Jt,...a},u=n(l,c),h=o(l);super(t,!1,u,h?i():null),this._nativePannerNode=u,this._orientationX=e(this,h,u.orientationX,q,B),this._orientationY=e(this,h,u.orientationY,q,B),this._orientationZ=e(this,h,u.orientationZ,q,B),this._positionX=e(this,h,u.positionX,q,B),this._positionY=e(this,h,u.positionY,q,B),this._positionZ=e(this,h,u.positionZ,q,B),r(this,1)}get coneInnerAngle(){return this._nativePannerNode.coneInnerAngle}set coneInnerAngle(t){this._nativePannerNode.coneInnerAngle=t}get coneOuterAngle(){return this._nativePannerNode.coneOuterAngle}set coneOuterAngle(t){this._nativePannerNode.coneOuterAngle=t}get coneOuterGain(){return this._nativePannerNode.coneOuterGain}set coneOuterGain(t){this._nativePannerNode.coneOuterGain=t}get distanceModel(){return this._nativePannerNode.distanceModel}set distanceModel(t){this._nativePannerNode.distanceModel=t}get maxDistance(){return this._nativePannerNode.maxDistance}set maxDistance(t){this._nativePannerNode.maxDistance=t}get orientationX(){return this._orientationX}get orientationY(){return this._orientationY}get orientationZ(){return this._orientationZ}get panningModel(){return this._nativePannerNode.panningModel}set panningModel(t){this._nativePannerNode.panningModel=t}get positionX(){return this._positionX}get positionY(){return this._positionY}get positionZ(){return this._positionZ}get refDistance(){return this._nativePannerNode.refDistance}set refDistance(t){this._nativePannerNode.refDistance=t}get rolloffFactor(){return this._nativePannerNode.rolloffFactor}set rolloffFactor(t){this._nativePannerNode.rolloffFactor=t}})(Ne,Je,Wn,Un,Ce,Me,sn),zn=(t=>(e,{disableNormalization:n,imag:i,real:s})=>{const o=i instanceof Float32Array?i:new Float32Array(i),r=s instanceof Float32Array?s:new Float32Array(s),a=e.createPeriodicWave(r,o,{disableNormalization:n});if(Array.from(i).length<2)throw t();return a})(R),Gn=((t,e,n,i)=>class i{constructor(i,s){const o=e(i),r=(t=>{const{imag:e,real:n}=t;return void 0===e?void 0===n?{...t,imag:[0,0],real:[0,0]}:{...t,imag:Array.from(n,(()=>0)),real:n}:void 0===n?{...t,imag:e,real:Array.from(e,(()=>0))}:{...t,imag:e,real:n}})({...Kt,...s}),a=t(o,r);return n.add(a),a}static[Symbol.hasInstance](t){return null!==t&&"object"==typeof t&&Object.getPrototypeOf(t)===i.prototype||n.has(t)}})(zn,Ce,new WeakSet),Xn=((t,e,n,i,s,o)=>{const r=16385,a=new Float32Array([1,1]),l=Math.PI/2,c={channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete"},u={...c,oversample:"none"},h=(t,o,h,p,d)=>{if(1===o)return((t,e,s,o)=>{const h=new Float32Array(r),p=new Float32Array(r);for(let t=0;t<r;t+=1){const e=t/16384*l;h[t]=Math.cos(e),p[t]=Math.sin(e)}const d=n(t,{...c,gain:0}),f=i(t,{...u,curve:h}),m=i(t,{...u,curve:a}),g=n(t,{...c,gain:0}),v=i(t,{...u,curve:p});return{connectGraph(){e.connect(d),e.connect(void 0===m.inputs?m:m.inputs[0]),e.connect(g),m.connect(s),s.connect(void 0===f.inputs?f:f.inputs[0]),s.connect(void 0===v.inputs?v:v.inputs[0]),f.connect(d.gain),v.connect(g.gain),d.connect(o,0,0),g.connect(o,0,1)},disconnectGraph(){e.disconnect(d),e.disconnect(void 0===m.inputs?m:m.inputs[0]),e.disconnect(g),m.disconnect(s),s.disconnect(void 0===f.inputs?f:f.inputs[0]),s.disconnect(void 0===v.inputs?v:v.inputs[0]),f.disconnect(d.gain),v.disconnect(g.gain),d.disconnect(o,0,0),g.disconnect(o,0,1)}}})(t,h,p,d);if(2===o)return((t,s,o,h)=>{const p=new Float32Array(r),d=new Float32Array(r),f=new Float32Array(r),m=new Float32Array(r),g=Math.floor(8192.5);for(let t=0;t<r;t+=1)if(t>g){const e=(t-g)/(16384-g)*l;p[t]=Math.cos(e),d[t]=Math.sin(e),f[t]=0,m[t]=1}else{const e=t/(16384-g)*l;p[t]=1,d[t]=0,f[t]=Math.cos(e),m[t]=Math.sin(e)}const v=e(t,{channelCount:2,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:2}),y=n(t,{...c,gain:0}),_=i(t,{...u,curve:p}),x=n(t,{...c,gain:0}),b=i(t,{...u,curve:d}),w=i(t,{...u,curve:a}),T=n(t,{...c,gain:0}),S=i(t,{...u,curve:f}),C=n(t,{...c,gain:0}),A=i(t,{...u,curve:m});return{connectGraph(){s.connect(v),s.connect(void 0===w.inputs?w:w.inputs[0]),v.connect(y,0),v.connect(x,0),v.connect(T,1),v.connect(C,1),w.connect(o),o.connect(void 0===_.inputs?_:_.inputs[0]),o.connect(void 0===b.inputs?b:b.inputs[0]),o.connect(void 0===S.inputs?S:S.inputs[0]),o.connect(void 0===A.inputs?A:A.inputs[0]),_.connect(y.gain),b.connect(x.gain),S.connect(T.gain),A.connect(C.gain),y.connect(h,0,0),T.connect(h,0,0),x.connect(h,0,1),C.connect(h,0,1)},disconnectGraph(){s.disconnect(v),s.disconnect(void 0===w.inputs?w:w.inputs[0]),v.disconnect(y,0),v.disconnect(x,0),v.disconnect(T,1),v.disconnect(C,1),w.disconnect(o),o.disconnect(void 0===_.inputs?_:_.inputs[0]),o.disconnect(void 0===b.inputs?b:b.inputs[0]),o.disconnect(void 0===S.inputs?S:S.inputs[0]),o.disconnect(void 0===A.inputs?A:A.inputs[0]),_.disconnect(y.gain),b.disconnect(x.gain),S.disconnect(T.gain),A.disconnect(C.gain),y.disconnect(h,0,0),T.disconnect(h,0,0),x.disconnect(h,0,1),C.disconnect(h,0,1)}}})(t,h,p,d);throw s()};return(e,{channelCount:i,channelCountMode:r,pan:a,...l})=>{if("max"===r)throw s();const c=t(e,{...l,channelCount:1,channelCountMode:r,numberOfInputs:2}),u=n(e,{...l,channelCount:i,channelCountMode:r,gain:1}),p=n(e,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:a});let{connectGraph:d,disconnectGraph:f}=h(e,i,u,p,c);Object.defineProperty(p.gain,"defaultValue",{get:()=>0}),Object.defineProperty(p.gain,"maxValue",{get:()=>1}),Object.defineProperty(p.gain,"minValue",{get:()=>-1});const m={get bufferSize(){},get channelCount(){return u.channelCount},set channelCount(t){u.channelCount!==t&&(g&&f(),({connectGraph:d,disconnectGraph:f}=h(e,t,u,p,c)),g&&d()),u.channelCount=t},get channelCountMode(){return u.channelCountMode},set channelCountMode(t){if("clamped-max"===t||"max"===t)throw s();u.channelCountMode=t},get channelInterpretation(){return u.channelInterpretation},set channelInterpretation(t){u.channelInterpretation=t},get context(){return u.context},get inputs(){return[u]},get numberOfInputs(){return u.numberOfInputs},get numberOfOutputs(){return u.numberOfOutputs},get pan(){return p.gain},addEventListener:(...t)=>u.addEventListener(t[0],t[1],t[2]),dispatchEvent:(...t)=>u.dispatchEvent(t[0]),removeEventListener:(...t)=>u.removeEventListener(t[0],t[1],t[2])};let g=!1;return o(Ut(m,c),(()=>{d(),g=!0}),(()=>{f(),g=!1}))}})(ln,Wt,zt,Ln,Zt,rn),Yn=((t,e)=>(n,i)=>{const s=i.channelCountMode;if("clamped-max"===s)throw e();if(void 0===n.createStereoPanner)return t(n,i);const o=n.createStereoPanner();return Vt(o,i),Bt(o,i,"pan"),Object.defineProperty(o,"channelCountMode",{get:()=>s,set:t=>{if(t!==s)throw e()}}),o})(Xn,Zt),Zn=((t,e,n,i,s)=>()=>{const o=new WeakMap;return{render(r,a){const l=o.get(a);return void 0!==l?Promise.resolve(l):(async(r,a)=>{let l=n(r);const c=P(l,a);if(!c){const t={channelCount:l.channelCount,channelCountMode:l.channelCountMode,channelInterpretation:l.channelInterpretation,pan:l.pan.value};l=e(a,t)}return o.set(a,l),c?await t(a,r.pan,l.pan):await i(a,r.pan,l.pan),$(l)?await s(r,a,l.inputs[0]):await s(r,a,l),l})(r,a)}}})(Ye,Yn,nt,$e,Te),$n=((t,e,n,i,s,o)=>class extends t{constructor(t,r){const a=s(t),l={...te,...r},c=n(a,l),u=o(a);super(t,!1,c,u?i():null),this._pan=e(this,u,c.pan)}get pan(){return this._pan}})(Ne,Je,Yn,Zn,Ce,Me),Qn=((t,e,n)=>()=>{const i=new WeakMap;return{render(s,o){const r=i.get(o);return void 0!==r?Promise.resolve(r):(async(s,o)=>{let r=e(s);if(!P(r,o)){const e={channelCount:r.channelCount,channelCountMode:r.channelCountMode,channelInterpretation:r.channelInterpretation,curve:r.curve,oversample:r.oversample};r=t(o,e)}return i.set(o,r),$(r)?await n(s,o,r.inputs[0]):await n(s,o,r),r})(s,o)}}})(Ln,nt,Te),Jn=((t,e,n,i,s,o,r)=>class extends t{constructor(t,e){const a=s(t),l={...ne,...e},c=n(a,l);super(t,!0,c,o(a)?i():null),this._isCurveNullified=!1,this._nativeWaveShaperNode=c,r(this,1)}get curve(){return this._isCurveNullified?null:this._nativeWaveShaperNode.curve}set curve(t){if(null===t)this._isCurveNullified=!0,this._nativeWaveShaperNode.curve=new Float32Array([0,0]);else{if(t.length<2)throw e();this._isCurveNullified=!1,this._nativeWaveShaperNode.curve=t}}get oversample(){return this._nativeWaveShaperNode.oversample}set oversample(t){this._nativeWaveShaperNode.oversample=t}})(Ne,Mt,Ln,Qn,Ce,Me,sn),Kn=(t=>null!==t&&t.isSecureContext)(xe),ti=(t=>(e,n,i)=>{Object.defineProperties(t,{currentFrame:{configurable:!0,get:()=>Math.round(e*n)},currentTime:{configurable:!0,get:()=>e}});try{return i()}finally{null!==t&&(delete t.currentFrame,delete t.currentTime)}})(xe),ei=new WeakMap,ni=((t,e)=>n=>{let i=t.get(n);if(void 0!==i)return i;if(null===e)throw new Error("Missing the native OfflineAudioContext constructor.");return i=new e(1,1,44100),t.set(n,i),i})(ei,ke),ii=Kn?((t,e,n,i,s,o,r,a,l,c,u,h,p)=>{let d=0;return(f,m,v={credentials:"omit"})=>{const y=u.get(f);if(void 0!==y&&y.has(m))return Promise.resolve();const _=c.get(f);if(void 0!==_){const t=_.get(m);if(void 0!==t)return t}const T=o(f),S=void 0===T.audioWorklet?s(m).then((([t,e])=>{const[i,s]=x(t,e);return n(`${i};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${s}\n})})(window,'_AWGS')`)})).then((()=>{const t=p._AWGS.pop();if(void 0===t)throw new SyntaxError;i(T.currentTime,T.sampleRate,(()=>t(class{},void 0,((t,n)=>{if(""===t.trim())throw e();const i=g.get(T);if(void 0!==i){if(i.has(t))throw e();w(n),b(n.parameterDescriptors),i.set(t,n)}else w(n),b(n.parameterDescriptors),g.set(T,new Map([[t,n]]))}),T.sampleRate,void 0,void 0)))})):Promise.all([s(m),Promise.resolve(t(h,h))]).then((([[t,e],n])=>{const i=d+1;d=i;const[s,o]=x(t,e),c=new Blob([`${s};((AudioWorkletProcessor,registerProcessor)=>{${o}\n})(${n?"AudioWorkletProcessor":"class extends AudioWorkletProcessor {__b=new WeakSet();constructor(){super();(p=>p.postMessage=(q=>(m,t)=>q.call(p,m,t?t.filter(u=>!this.__b.has(u)):t))(p.postMessage))(this.port)}}"},(n,p)=>registerProcessor(n,class extends p{${n?"":"__c = (a) => a.forEach(e=>this.__b.add(e.buffer));"}process(i,o,p){${n?"":"i.forEach(this.__c);o.forEach(this.__c);this.__c(Object.values(p));"}return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}));registerProcessor('__sac${i}',class extends AudioWorkletProcessor{process(){return !1}})`],{type:"application/javascript; charset=utf-8"}),u=URL.createObjectURL(c);return T.audioWorklet.addModule(u,v).then((()=>{if(a(T))return T;const t=r(T);return t.audioWorklet.addModule(u,v).then((()=>t))})).then((t=>{if(null===l)throw new SyntaxError;try{new l(t,`__sac${i}`)}catch{throw new SyntaxError}})).finally((()=>URL.revokeObjectURL(u)))}));return void 0===_?c.set(f,new Map([[m,S]])):_.set(m,S),S.then((()=>{const t=u.get(f);void 0===t?u.set(f,new Set([m])):t.add(m)})).finally((()=>{const t=c.get(f);void 0!==t&&t.delete(m)})),S}})(ve,Zt,(t=>e=>new Promise(((n,i)=>{if(null===t)return void i(new SyntaxError);const s=t.document.head;if(null===s)i(new SyntaxError);else{const o=t.document.createElement("script"),r=new Blob([e],{type:"application/javascript"}),a=URL.createObjectURL(r),l=t.onerror,c=()=>{t.onerror=l,URL.revokeObjectURL(a)};t.onerror=(e,n,s,o,r)=>n===a||n===t.location.href&&1===s&&1===o?(c(),i(r),!1):null!==l?l(e,n,s,o,r):void 0,o.onerror=()=>{c(),i(new SyntaxError)},o.onload=()=>{c(),n()},o.src=a,o.type="module",s.appendChild(o)}})))(xe),ti,(async t=>{try{const e=await fetch(t);if(e.ok)return[await e.text(),e.url]}catch{}throw new DOMException("","AbortError")}),Ce,ni,Me,Ve,new WeakMap,new WeakMap,((t,e)=>async()=>{if(null===t)return!0;if(null===e)return!1;const n=new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor("a",A)'],{type:"application/javascript; charset=utf-8"}),i=new e(1,128,44100),s=URL.createObjectURL(n);let o=!1,r=!1;try{await i.audioWorklet.addModule(s);const e=new t(i,"a",{numberOfOutputs:0}),n=i.createOscillator();e.port.onmessage=()=>o=!0,e.onprocessorerror=()=>r=!0,n.connect(e),n.start(0),await i.startRendering(),await new Promise((t=>setTimeout(t)))}catch{}finally{URL.revokeObjectURL(s)}return o&&!r})(Ve,ke),xe):void 0,si=((t,e)=>n=>t(n)||e(n))(Pe,Me),oi=((t,e,n,i,s,o,r,a,l,c,u)=>(n,i)=>{const h=r(n)?n:o(n);if(s.has(i)){const t=new DOMException("","DataCloneError");return Promise.reject(t)}try{s.add(i)}catch{}return e(l,(()=>l(h)))?h.decodeAudioData(i).then((n=>(Tt(i).catch((()=>{})),e(a,(()=>a(n)))||u(n),t.add(n),n))):new Promise(((e,n)=>{const s=async()=>{try{await Tt(i)}catch{}},o=t=>{n(t),s()};try{h.decodeAudioData(i,(n=>{"function"!=typeof n.copyFromChannel&&(c(n),V(n)),t.add(n),s().then((()=>e(n)))}),(t=>{o(null===t?new DOMException("","EncodingError"):t)}))}catch(t){o(t)}}))})(Fe,ve,0,0,new WeakSet,Ce,si,D,Dt,Ue,He),ri=((t,e,n,i,s,o,r,a,l,c,u,h,p,d,f,m,g,v,y,_)=>class extends f{constructor(e,n){super(e,n),this._nativeContext=e,this._audioWorklet=void 0===t?void 0:{addModule:(e,n)=>t(this,e,n)}}get audioWorklet(){return this._audioWorklet}createAnalyser(){return new e(this)}createBiquadFilter(){return new s(this)}createBuffer(t,e,i){return new n({length:e,numberOfChannels:t,sampleRate:i})}createBufferSource(){return new i(this)}createChannelMerger(t=6){return new o(this,{numberOfInputs:t})}createChannelSplitter(t=6){return new r(this,{numberOfOutputs:t})}createConstantSource(){return new a(this)}createConvolver(){return new l(this)}createDelay(t=1){return new u(this,{maxDelayTime:t})}createDynamicsCompressor(){return new h(this)}createGain(){return new p(this)}createIIRFilter(t,e){return new d(this,{feedback:e,feedforward:t})}createOscillator(){return new m(this)}createPanner(){return new g(this)}createPeriodicWave(t,e,n={disableNormalization:!1}){return new v(this,{...n,imag:e,real:t})}createStereoPanner(){return new y(this)}createWaveShaper(){return new _(this)}decodeAudioData(t,e,n){return c(this._nativeContext,t).then((t=>("function"==typeof e&&e(t),t)),(t=>{throw"function"==typeof n&&n(t),t}))}})(ii,qe,ze,tn,on,un,pn,gn,_n,oi,bn,Sn,An,En,Rn,Bn,Hn,Gn,$n,Jn),ai=((t,e,n,i)=>class extends t{constructor(t,e){const s=n(t),o=((t,e)=>t.createMediaElementSource(e.mediaElement))(s,e);if(i(s))throw TypeError();super(t,!0,o,null),this._nativeMediaElementAudioSourceNode=o}get mediaElement(){return this._nativeMediaElementAudioSourceNode.mediaElement}})(Ne,0,Ce,Me),li=((t,e,n,i)=>class extends t{constructor(t,e){const s=n(t);if(i(s))throw new TypeError;const o=((t,e)=>{const n=t.createMediaStreamDestination();return Vt(n,e),1===n.numberOfOutputs&&Object.defineProperty(n,"numberOfOutputs",{get:()=>0}),n})(s,{...Pt,...e});super(t,!1,o,null),this._nativeMediaStreamAudioDestinationNode=o}get stream(){return this._nativeMediaStreamAudioDestinationNode.stream}})(Ne,0,Ce,Me),ci=((t,e,n,i)=>class extends t{constructor(t,e){const s=n(t),o=((t,{mediaStream:e})=>{const n=e.getAudioTracks();n.sort(((t,e)=>t.id<e.id?-1:t.id>e.id?1:0));const i=n.slice(0,1),s=t.createMediaStreamSource(new MediaStream(i));return Object.defineProperty(s,"mediaStream",{value:e}),s})(s,e);if(i(s))throw new TypeError;super(t,!0,o,null),this._nativeMediaStreamAudioSourceNode=o}get mediaStream(){return this._nativeMediaStreamAudioSourceNode.mediaStream}})(Ne,0,Ce,Me),ui=((t,e)=>(n,{mediaStreamTrack:i})=>{if("function"==typeof n.createMediaStreamTrackSource)return n.createMediaStreamTrackSource(i);const s=new MediaStream([i]),o=n.createMediaStreamSource(s);if("audio"!==i.kind)throw t();if(e(n))throw new TypeError;return o})(Mt,Me),hi=((t,e,n)=>class extends t{constructor(t,i){const s=n(t);super(t,!0,e(s,i),null)}})(Ne,ui,Ce),pi=((t,e,n,i,s,o,r,a,l)=>class extends t{constructor(t={}){if(null===l)throw new Error("Missing the native AudioContext constructor.");let e;try{e=new l(t)}catch(t){if(12===t.code&&"sampleRate is not in range"===t.message)throw n();throw t}if(null===e)throw i();if(!(t=>void 0===t||"number"==typeof t||"string"==typeof t&&("balanced"===t||"interactive"===t||"playback"===t))(t.latencyHint))throw new TypeError(`The provided value '${t.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);if(void 0!==t.sampleRate&&e.sampleRate!==t.sampleRate)throw n();super(e,2);const{latencyHint:s}=t,{sampleRate:o}=e;if(this._baseLatency="number"==typeof e.baseLatency?e.baseLatency:"balanced"===s?512/o:"interactive"===s||void 0===s?256/o:"playback"===s?1024/o:128*Math.max(2,Math.min(128,Math.round(s*o/128)))/o,this._nativeAudioContext=e,"webkitAudioContext"===l.name?(this._nativeGainNode=e.createGain(),this._nativeOscillatorNode=e.createOscillator(),this._nativeGainNode.gain.value=1e-37,this._nativeOscillatorNode.connect(this._nativeGainNode).connect(e.destination),this._nativeOscillatorNode.start()):(this._nativeGainNode=null,this._nativeOscillatorNode=null),this._state=null,"running"===e.state){this._state="suspended";const t=()=>{"suspended"===this._state&&(this._state=null),e.removeEventListener("statechange",t)};e.addEventListener("statechange",t)}}get baseLatency(){return this._baseLatency}get state(){return null!==this._state?this._state:this._nativeAudioContext.state}close(){return"closed"===this.state?this._nativeAudioContext.close().then((()=>{throw e()})):("suspended"===this._state&&(this._state=null),this._nativeAudioContext.close().then((()=>{null!==this._nativeGainNode&&null!==this._nativeOscillatorNode&&(this._nativeOscillatorNode.stop(),this._nativeGainNode.disconnect(),this._nativeOscillatorNode.disconnect()),H(this)})))}createMediaElementSource(t){return new s(this,{mediaElement:t})}createMediaStreamDestination(){return new o(this)}createMediaStreamSource(t){return new r(this,{mediaStream:t})}createMediaStreamTrackSource(t){return new a(this,{mediaStreamTrack:t})}resume(){return"suspended"===this._state?new Promise(((t,e)=>{const n=()=>{this._nativeAudioContext.removeEventListener("statechange",n),"running"===this._nativeAudioContext.state?t():this.resume().then(t,e)};this._nativeAudioContext.addEventListener("statechange",n)})):this._nativeAudioContext.resume().catch((t=>{if(void 0===t||15===t.code)throw e();throw t}))}suspend(){return this._nativeAudioContext.suspend().catch((t=>{if(void 0===t)throw e();throw t}))}})(ri,Mt,Zt,ee,ai,li,ci,hi,Ee),di=(t=>e=>{const n=t.get(e);if(void 0===n)throw new Error("The context has no set of AudioWorkletNodes.");return n})(Dn),fi=(t=>(e,n)=>{t(e).add(n)})(di),mi=(t=>(e,n,i=0,s=0)=>{const o=e[i];if(void 0===o)throw t();return lt(n)?o.connect(n,0,s):o.connect(n,0)})(R),gi=(t=>(e,n)=>{t(e).delete(n)})(di),vi=(t=>(e,n=void 0,i=void 0,s=0)=>void 0===n?e.forEach((t=>t.disconnect())):"number"==typeof n?Ct(t,e,n).disconnect():lt(n)?void 0===i?e.forEach((t=>t.disconnect(n))):void 0===s?Ct(t,e,i).disconnect(n,0):Ct(t,e,i).disconnect(n,0,s):void 0===i?e.forEach((t=>t.disconnect(n))):Ct(t,e,i).disconnect(n,0))(R),yi=new WeakMap,_i=((t,e)=>n=>e(t,n))(yi,T),xi=((t,e,n,i,s,o,r,a,l,c,u,h,p)=>(d,f,m,g)=>{if(0===g.numberOfInputs&&0===g.numberOfOutputs)throw l();const y=Array.isArray(g.outputChannelCount)?g.outputChannelCount:Array.from(g.outputChannelCount);if(y.some((t=>t<1)))throw l();if(y.length!==g.numberOfOutputs)throw e();if("explicit"!==g.channelCountMode)throw l();const _=g.channelCount*g.numberOfInputs,x=y.reduce(((t,e)=>t+e),0),b=void 0===m.parameterDescriptors?0:m.parameterDescriptors.length;if(_+b>6||x>6)throw l();const w=new MessageChannel,T=[],S=[];for(let t=0;t<g.numberOfInputs;t+=1)T.push(r(d,{channelCount:g.channelCount,channelCountMode:g.channelCountMode,channelInterpretation:g.channelInterpretation,gain:1})),S.push(s(d,{channelCount:g.channelCount,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:g.channelCount}));const C=[];if(void 0!==m.parameterDescriptors)for(const{defaultValue:t,maxValue:e,minValue:n,name:i}of m.parameterDescriptors){const s=o(d,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:void 0!==g.parameterData[i]?g.parameterData[i]:void 0===t?0:t});Object.defineProperties(s.offset,{defaultValue:{get:()=>void 0===t?0:t},maxValue:{get:()=>void 0===e?q:e},minValue:{get:()=>void 0===n?B:n}}),C.push(s)}const A=i(d,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:Math.max(1,_+b)}),k=Lt(f,d.sampleRate),M=a(d,k,_+b,Math.max(1,x)),O=s(d,{channelCount:Math.max(1,x),channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:Math.max(1,x)}),I=[];for(let t=0;t<g.numberOfOutputs;t+=1)I.push(i(d,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:y[t]}));for(let t=0;t<g.numberOfInputs;t+=1){T[t].connect(S[t]);for(let e=0;e<g.channelCount;e+=1)S[t].connect(A,e,t*g.channelCount+e)}const E=new pt(void 0===m.parameterDescriptors?[]:m.parameterDescriptors.map((({name:t},e)=>{const n=C[e];return n.connect(A,0,_+e),n.start(0),[t,n.offset]})));A.connect(M);let P=g.channelInterpretation,D=null;const R=0===g.numberOfOutputs?[M]:I,V={get bufferSize(){return k},get channelCount(){return g.channelCount},set channelCount(t){throw n()},get channelCountMode(){return g.channelCountMode},set channelCountMode(t){throw n()},get channelInterpretation(){return P},set channelInterpretation(t){for(const e of T)e.channelInterpretation=t;P=t},get context(){return M.context},get inputs(){return T},get numberOfInputs(){return g.numberOfInputs},get numberOfOutputs(){return g.numberOfOutputs},get onprocessorerror(){return D},set onprocessorerror(t){"function"==typeof D&&V.removeEventListener("processorerror",D),D="function"==typeof t?t:null,"function"==typeof D&&V.addEventListener("processorerror",D)},get parameters(){return E},get port(){return w.port2},addEventListener:(...t)=>M.addEventListener(t[0],t[1],t[2]),connect:t.bind(null,R),disconnect:c.bind(null,R),dispatchEvent:(...t)=>M.dispatchEvent(t[0]),removeEventListener:(...t)=>M.removeEventListener(t[0],t[1],t[2])},N=new Map;var F,L;w.port1.addEventListener=(F=w.port1.addEventListener,(...t)=>{if("message"===t[0]){const e="function"==typeof t[1]?t[1]:"object"==typeof t[1]&&null!==t[1]&&"function"==typeof t[1].handleEvent?t[1].handleEvent:null;if(null!==e){const n=N.get(t[1]);void 0!==n?t[1]=n:(t[1]=t=>{u(d.currentTime,d.sampleRate,(()=>e(t)))},N.set(e,t[1]))}}return F.call(w.port1,t[0],t[1],t[2])}),w.port1.removeEventListener=(L=w.port1.removeEventListener,(...t)=>{if("message"===t[0]){const e=N.get(t[1]);void 0!==e&&(N.delete(t[1]),t[1]=e)}return L.call(w.port1,t[0],t[1],t[2])});let j=null;Object.defineProperty(w.port1,"onmessage",{get:()=>j,set:t=>{"function"==typeof j&&w.port1.removeEventListener("message",j),j="function"==typeof t?t:null,"function"==typeof j&&(w.port1.addEventListener("message",j),w.port1.start())}}),m.prototype.port=w.port1;let W=null;const U=((t,e,n,i)=>{let s=v.get(t);void 0===s&&(s=new WeakMap,v.set(t,s));const o=(async(t,e)=>{const n=await(t=>new Promise(((e,n)=>{const{port1:i,port2:s}=new MessageChannel;i.onmessage=({data:t})=>{i.close(),s.close(),e(t)},i.onmessageerror=({data:t})=>{i.close(),s.close(),n(t)},s.postMessage(t)})))(e);return new t(n)})(n,i);return s.set(e,o),o})(d,V,m,g);U.then((t=>W=t));const H=gt(g.numberOfInputs,g.channelCount),z=gt(g.numberOfOutputs,y),G=void 0===m.parameterDescriptors?[]:m.parameterDescriptors.reduce(((t,{name:e})=>({...t,[e]:new Float32Array(128)})),{});let X=!0;const Y=()=>{g.numberOfOutputs>0&&M.disconnect(O);for(let t=0,e=0;t<g.numberOfOutputs;t+=1){const n=I[t];for(let i=0;i<y[t];i+=1)O.disconnect(n,e+i,i);e+=y[t]}},Z=new Map;M.onaudioprocess=({inputBuffer:t,outputBuffer:e})=>{if(null!==W){const n=h(V);for(let i=0;i<k;i+=128){for(let e=0;e<g.numberOfInputs;e+=1)for(let n=0;n<g.channelCount;n+=1)ft(t,H[e],n,n,i);void 0!==m.parameterDescriptors&&m.parameterDescriptors.forEach((({name:e},n)=>{ft(t,G,e,_+n,i)}));for(let t=0;t<g.numberOfInputs;t+=1)for(let e=0;e<y[t];e+=1)0===z[t][e].byteLength&&(z[t][e]=new Float32Array(128));try{const t=H.map(((t,e)=>{if(n[e].size>0)return Z.set(e,k/128),t;const i=Z.get(e);return void 0===i?[]:(t.every((t=>t.every((t=>0===t))))&&(1===i?Z.delete(e):Z.set(e,i-1)),t)})),s=u(d.currentTime+i/d.sampleRate,d.sampleRate,(()=>W.process(t,z,G)));X=s;for(let t=0,n=0;t<g.numberOfOutputs;t+=1){for(let s=0;s<y[t];s+=1)mt(e,z[t],s,n+s,i);n+=y[t]}}catch(t){X=!1,V.dispatchEvent(new ErrorEvent("processorerror",{colno:t.colno,filename:t.filename,lineno:t.lineno,message:t.message}))}if(!X){for(let t=0;t<g.numberOfInputs;t+=1){T[t].disconnect(S[t]);for(let e=0;e<g.channelCount;e+=1)S[i].disconnect(A,e,t*g.channelCount+e)}if(void 0!==m.parameterDescriptors){const t=m.parameterDescriptors.length;for(let e=0;e<t;e+=1){const t=C[e];t.disconnect(A,0,_+e),t.stop()}}A.disconnect(M),M.onaudioprocess=null,$?Y():K();break}}}};let $=!1;const Q=r(d,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0}),J=()=>M.connect(Q).connect(d.destination),K=()=>{M.disconnect(Q),Q.disconnect()};return J(),p(V,(()=>{if(X){K(),g.numberOfOutputs>0&&M.connect(O);for(let t=0,e=0;t<g.numberOfOutputs;t+=1){const n=I[t];for(let i=0;i<y[t];i+=1)O.connect(n,e+i,i);e+=y[t]}}$=!0}),(()=>{X&&(J(),Y()),$=!1}))})(mi,R,Mt,ln,Wt,fn,zt,Yt,Zt,vi,ti,_i,rn),bi=((t,e,n,i,s)=>(o,r,a,l,c,u)=>{if(null!==a)try{const e=new a(o,l,u),i=new Map;let r=null;if(Object.defineProperties(e,{channelCount:{get:()=>u.channelCount,set:()=>{throw t()}},channelCountMode:{get:()=>"explicit",set:()=>{throw t()}},onprocessorerror:{get:()=>r,set:t=>{"function"==typeof r&&e.removeEventListener("processorerror",r),r="function"==typeof t?t:null,"function"==typeof r&&e.addEventListener("processorerror",r)}}}),e.addEventListener=(p=e.addEventListener,(...t)=>{if("processorerror"===t[0]){const e="function"==typeof t[1]?t[1]:"object"==typeof t[1]&&null!==t[1]&&"function"==typeof t[1].handleEvent?t[1].handleEvent:null;if(null!==e){const n=i.get(t[1]);void 0!==n?t[1]=n:(t[1]=n=>{"error"===n.type?(Object.defineProperties(n,{type:{value:"processorerror"}}),e(n)):e(new ErrorEvent(t[0],{...n}))},i.set(e,t[1]))}}return p.call(e,"error",t[1],t[2]),p.call(e,...t)}),e.removeEventListener=(h=e.removeEventListener,(...t)=>{if("processorerror"===t[0]){const e=i.get(t[1]);void 0!==e&&(i.delete(t[1]),t[1]=e)}return h.call(e,"error",t[1],t[2]),h.call(e,t[0],t[1],t[2])}),0!==u.numberOfOutputs){const t=n(o,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",gain:0});return e.connect(t).connect(o.destination),s(e,(()=>t.disconnect()),(()=>t.connect(o.destination)))}return e}catch(t){if(11===t.code)throw i();throw t}var h,p;if(void 0===c)throw i();return(t=>{const{port1:e}=new MessageChannel;try{e.postMessage(t)}finally{e.close()}})(u),e(o,r,c,u)})(Mt,xi,zt,Zt,rn),wi=((t,e,n,i,s,o,r,a,l,c,u,h,p,d,f,m)=>(g,v,y)=>{const _=new WeakMap;let x=null;return{render(b,w){a(w,b);const T=_.get(w);return void 0!==T?Promise.resolve(T):(async(a,b)=>{let w=u(a),T=null;const S=P(w,b),C=Array.isArray(v.outputChannelCount)?v.outputChannelCount:Array.from(v.outputChannelCount);if(null===h){const t=C.reduce(((t,e)=>t+e),0),n=s(b,{channelCount:Math.max(1,t),channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:Math.max(1,t)}),o=[];for(let t=0;t<a.numberOfOutputs;t+=1)o.push(i(b,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:C[t]}));const c=r(b,{channelCount:v.channelCount,channelCountMode:v.channelCountMode,channelInterpretation:v.channelInterpretation,gain:1});c.connect=e.bind(null,o),c.disconnect=l.bind(null,o),T=[n,o,c]}else S||(w=new h(b,g));if(_.set(b,null===T?w:T[2]),null!==T){if(null===x){if(void 0===y)throw new Error("Missing the processor constructor.");if(null===p)throw new Error("Missing the native OfflineAudioContext constructor.");const t=a.channelCount*a.numberOfInputs,e=void 0===y.parameterDescriptors?0:y.parameterDescriptors.length,n=t+e,l=async()=>{const l=new p(n,128*Math.ceil(a.context.length/128),b.sampleRate),c=[],u=[];for(let t=0;t<v.numberOfInputs;t+=1)c.push(r(l,{channelCount:v.channelCount,channelCountMode:v.channelCountMode,channelInterpretation:v.channelInterpretation,gain:1})),u.push(s(l,{channelCount:v.channelCount,channelCountMode:"explicit",channelInterpretation:"discrete",numberOfOutputs:v.channelCount}));const h=await Promise.all(Array.from(a.parameters.values()).map((async t=>{const e=o(l,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"discrete",offset:t.value});return await d(l,t,e.offset),e}))),g=i(l,{channelCount:1,channelCountMode:"explicit",channelInterpretation:"speakers",numberOfInputs:Math.max(1,t+e)});for(let t=0;t<v.numberOfInputs;t+=1){c[t].connect(u[t]);for(let e=0;e<v.channelCount;e+=1)u[t].connect(g,e,t*v.channelCount+e)}for(const[e,n]of h.entries())n.connect(g,0,t+e),n.start(0);return g.connect(l.destination),await Promise.all(c.map((t=>f(a,l,t)))),m(l)};x=vt(a,0===n?null:await l(),b,v,C,y,c)}const t=await x,e=n(b,{buffer:null,channelCount:2,channelCountMode:"max",channelInterpretation:"speakers",loop:!1,loopEnd:0,loopStart:0,playbackRate:1}),[l,u,h]=T;null!==t&&(e.buffer=t,e.start(0)),e.connect(l);for(let t=0,e=0;t<a.numberOfOutputs;t+=1){const n=u[t];for(let i=0;i<C[t];i+=1)l.connect(n,e+i,i);e+=C[t]}return h}if(S)for(const[e,n]of a.parameters.entries())await t(b,n,w.parameters.get(e));else for(const[t,e]of a.parameters.entries())await d(b,e,w.parameters.get(t));return await f(a,b,w),w})(b,w)}}})(Ye,mi,Ze,ln,Wt,fn,zt,gi,vi,ti,nt,Ve,ke,$e,Te,Mn),Ti=(t=>e=>t.get(e))(ei),Si=(t=>(e,n)=>{t.set(e,n)})(yi),Ci=Kn?((t,e,n,i,s,o,r,a,l,c,u,h,p,d)=>class extends e{constructor(e,u,p){var d;const f=a(e),m=l(f),v=(t=>({...t,outputChannelCount:void 0!==t.outputChannelCount?t.outputChannelCount:1===t.numberOfInputs&&1===t.numberOfOutputs?[t.channelCount]:Array.from({length:t.numberOfOutputs},(()=>1))}))({...dt,...p});(t=>{const{port1:e,port2:n}=new MessageChannel;try{e.postMessage(t)}finally{e.close(),n.close()}})(v);const y=g.get(f),_=null==y?void 0:y.get(u),x=m||"closed"!==f.state?f:null!==(d=r(f))&&void 0!==d?d:f,b=s(x,m?null:e.baseLatency,c,u,_,v);super(e,!0,b,m?i(u,v,_):null);const w=[];b.parameters.forEach(((t,e)=>{const i=n(this,m,t);w.push([e,i])})),this._nativeAudioWorkletNode=b,this._onprocessorerror=null,this._parameters=new pt(w),m&&t(f,this);const{activeInputs:T}=o(this);h(b,T)}get onprocessorerror(){return this._onprocessorerror}set onprocessorerror(t){const e="function"==typeof t?d(this,t):null;this._nativeAudioWorkletNode.onprocessorerror=e;const n=this._nativeAudioWorkletNode.onprocessorerror;this._onprocessorerror=null!==n&&n===e?t:n}get parameters(){return null===this._parameters?this._nativeAudioWorkletNode.parameters:this._parameters}get port(){return this._nativeAudioWorkletNode.port}})(fi,Ne,Je,wi,bi,j,Ti,Ce,Me,Ve,0,Si,0,he):void 0,Ai=((t,e)=>(n,i,s)=>{if(null===e)throw new Error("Missing the native OfflineAudioContext constructor.");try{return new e(n,i,s)}catch(e){if("SyntaxError"===e.name)throw t();throw e}})(Zt,ke),ki=((t,e,n,i,s,o,r,a)=>(l,c)=>n(l).render(l,c).then((()=>Promise.all(Array.from(i(c)).map((t=>n(t).render(t,c)))))).then((()=>s(c))).then((n=>("function"!=typeof n.copyFromChannel?(r(n),V(n)):e(o,(()=>o(n)))||a(n),t.add(n),n))))(Fe,ve,we,di,Mn,D,Ue,He),Mi=((t,e,n,i,s)=>class extends t{constructor(t,n,s){let o;if("number"==typeof t&&void 0!==n&&void 0!==s)o={length:n,numberOfChannels:t,sampleRate:s};else{if("object"!=typeof t)throw new Error("The given parameters are not valid.");o=t}const{length:r,numberOfChannels:a,sampleRate:l}={...$t,...o},c=i(a,r,l);e(Dt,(()=>Dt(c)))||c.addEventListener("statechange",(()=>{let t=0;const e=n=>{"running"===this._state&&(t>0?(c.removeEventListener("statechange",e),n.stopImmediatePropagation(),this._waitForThePromiseToSettle(n)):t+=1)};return e})()),super(c,a),this._length=r,this._nativeOfflineAudioContext=c,this._state=null}get length(){return void 0===this._nativeOfflineAudioContext.length?this._length:this._nativeOfflineAudioContext.length}get state(){return null===this._state?this._nativeOfflineAudioContext.state:this._state}startRendering(){return"running"===this._state?Promise.reject(n()):(this._state="running",s(this.destination,this._nativeOfflineAudioContext).finally((()=>{this._state=null,H(this)})))}_waitForThePromiseToSettle(t){null===this._state?this._nativeOfflineAudioContext.dispatchEvent(t):setTimeout((()=>this._waitForThePromiseToSettle(t)))}})(ri,ve,Mt,Ai,ki),Oi=((t,e)=>n=>{const i=t.get(n);return e(i)||e(n)})(d,Pe),Ii=((t,e)=>n=>t.has(n)||e(n))(u,De),Ei=((t,e)=>n=>t.has(n)||e(n))(p,Re),Pi=((t,e)=>n=>{const i=t.get(n);return e(i)||e(n)})(d,Me);function Di(t,e){if(!t)throw new Error(e)}function Ri(t,e,n=1/0){if(!(e<=t&&t<=n))throw new RangeError(`Value must be within [${e}, ${n}], got: ${t}`)}function Vi(t){t.isOffline||"running"===t.state||Bi('The AudioContext is "suspended". Invoke Tone.start() from a user action to start the audio.')}let Ni=console;function Bi(...t){Ni.warn(...t)}function qi(t){return void 0===t}function Fi(t){return!qi(t)}function Li(t){return"number"==typeof t}function ji(t){return"[object Object]"===Object.prototype.toString.call(t)&&t.constructor===Object}function Wi(t){return Array.isArray(t)}function Ui(t){return"string"==typeof t}function Hi(t){return Ui(t)&&/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(t)}const zi="object"==typeof self?self:null,Gi=zi&&(zi.hasOwnProperty("AudioContext")||zi.hasOwnProperty("webkitAudioContext"));function Xi(t,e,n,i){var s,o=arguments.length,r=o<3?e:null===i?i=Object.getOwnPropertyDescriptor(e,n):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(t,e,n,i);else for(var a=t.length-1;a>=0;a--)(s=t[a])&&(r=(o<3?s(r):o>3?s(e,n,r):s(e,n))||r);return o>3&&r&&Object.defineProperty(e,n,r),r}function Yi(t,e,n,i){return new(n||(n=Promise))((function(s,o){function r(t){try{l(i.next(t))}catch(t){o(t)}}function a(t){try{l(i.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(r,a)}l((i=i.apply(t,e||[])).next())}))}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;class Zi{constructor(t,e,n){this._callback=t,this._type=e,this._updateInterval=n,this._createClock()}_createWorker(){const t=new Blob([`\n\t\t\t// the initial timeout time\n\t\t\tlet timeoutTime =  ${(1e3*this._updateInterval).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();\n\t\t\t`],{type:"text/javascript"}),e=URL.createObjectURL(t),n=new Worker(e);n.onmessage=this._callback.bind(this),this._worker=n}_createTimeout(){this._timeout=setTimeout((()=>{this._createTimeout(),this._callback()}),1e3*this._updateInterval)}_createClock(){if("worker"===this._type)try{this._createWorker()}catch(t){this._type="timeout",this._createClock()}else"timeout"===this._type&&this._createTimeout()}_disposeClock(){this._timeout&&(clearTimeout(this._timeout),this._timeout=0),this._worker&&(this._worker.terminate(),this._worker.onmessage=null)}get updateInterval(){return this._updateInterval}set updateInterval(t){this._updateInterval=Math.max(t,128/44100),"worker"===this._type&&this._worker.postMessage(Math.max(1e3*t,1))}get type(){return this._type}set type(t){this._disposeClock(),this._type=t,this._createClock()}dispose(){this._disposeClock()}}function $i(t){return Ei(t)}function Qi(t){return Ii(t)}function Ji(t){return Pi(t)}function Ki(t){return Oi(t)}function ts(t){return t instanceof AudioBuffer}function es(t,e){return"value"===t||$i(e)||Qi(e)||ts(e)}function ns(t,...e){if(!e.length)return t;const n=e.shift();if(ji(t)&&ji(n))for(const e in n)es(e,n[e])?t[e]=n[e]:ji(n[e])?(t[e]||Object.assign(t,{[e]:{}}),ns(t[e],n[e])):Object.assign(t,{[e]:n[e]});return ns(t,...e)}function is(t,e,n=[],i){const s={},o=Array.from(e);if(ji(o[0])&&i&&!Reflect.has(o[0],i)&&(Object.keys(o[0]).some((e=>Reflect.has(t,e)))||(ns(s,{[i]:o[0]}),n.splice(n.indexOf(i),1),o.shift())),1===o.length&&ji(o[0]))ns(s,o[0]);else for(let t=0;t<n.length;t++)Fi(o[t])&&(s[n[t]]=o[t]);return ns(t,s)}function ss(t,e){return qi(t)?e:t}function os(t,e){return e.forEach((e=>{Reflect.has(t,e)&&delete t[e]})),t}class rs{constructor(){this.debug=!1,this._wasDisposed=!1}static getDefaults(){return{}}log(...t){(this.debug||zi&&this.toString()===zi.TONE_DEBUG_CLASS)&&function(...t){Ni.log(...t)}(this,...t)}dispose(){return this._wasDisposed=!0,this}get disposed(){return this._wasDisposed}toString(){return this.name}}rs.version=r;const as=1e-6;function ls(t,e){return t>e+as}function cs(t,e){return ls(t,e)||hs(t,e)}function us(t,e){return t+as<e}function hs(t,e){return Math.abs(t-e)<as}class ps extends rs{constructor(){super(),this.name="Timeline",this._timeline=[];const t=is(ps.getDefaults(),arguments,["memory"]);this.memory=t.memory,this.increasing=t.increasing}static getDefaults(){return{memory:1/0,increasing:!1}}get length(){return this._timeline.length}add(t){if(Di(Reflect.has(t,"time"),"Timeline: events must have a time attribute"),t.time=t.time.valueOf(),this.increasing&&this.length){const e=this._timeline[this.length-1];Di(cs(t.time,e.time),"The time must be greater than or equal to the last scheduled time"),this._timeline.push(t)}else{const e=this._search(t.time);this._timeline.splice(e+1,0,t)}if(this.length>this.memory){const t=this.length-this.memory;this._timeline.splice(0,t)}return this}remove(t){const e=this._timeline.indexOf(t);return-1!==e&&this._timeline.splice(e,1),this}get(t,e="time"){const n=this._search(t,e);return-1!==n?this._timeline[n]:null}peek(){return this._timeline[0]}shift(){return this._timeline.shift()}getAfter(t,e="time"){const n=this._search(t,e);return n+1<this._timeline.length?this._timeline[n+1]:null}getBefore(t){const e=this._timeline.length;if(e>0&&this._timeline[e-1].time<t)return this._timeline[e-1];const n=this._search(t);return n-1>=0?this._timeline[n-1]:null}cancel(t){if(this._timeline.length>1){let e=this._search(t);if(e>=0)if(hs(this._timeline[e].time,t)){for(let n=e;n>=0&&hs(this._timeline[n].time,t);n--)e=n;this._timeline=this._timeline.slice(0,e)}else this._timeline=this._timeline.slice(0,e+1);else this._timeline=[]}else 1===this._timeline.length&&cs(this._timeline[0].time,t)&&(this._timeline=[]);return this}cancelBefore(t){const e=this._search(t);return e>=0&&(this._timeline=this._timeline.slice(e+1)),this}previousEvent(t){const e=this._timeline.indexOf(t);return e>0?this._timeline[e-1]:null}_search(t,e="time"){if(0===this._timeline.length)return-1;let n=0;const i=this._timeline.length;let s=i;if(i>0&&this._timeline[i-1][e]<=t)return i-1;for(;n<s;){let i=Math.floor(n+(s-n)/2);const o=this._timeline[i],r=this._timeline[i+1];if(hs(o[e],t)){for(let n=i;n<this._timeline.length&&hs(this._timeline[n][e],t);n++)i=n;return i}if(us(o[e],t)&&ls(r[e],t))return i;ls(o[e],t)?s=i:n=i+1}return-1}_iterate(t,e=0,n=this._timeline.length-1){this._timeline.slice(e,n+1).forEach(t)}forEach(t){return this._iterate(t),this}forEachBefore(t,e){const n=this._search(t);return-1!==n&&this._iterate(e,0,n),this}forEachAfter(t,e){const n=this._search(t);return this._iterate(e,n+1),this}forEachBetween(t,e,n){let i=this._search(t),s=this._search(e);return-1!==i&&-1!==s?(this._timeline[i].time!==t&&(i+=1),this._timeline[s].time===e&&(s-=1),this._iterate(n,i,s)):-1===i&&this._iterate(n,0,s),this}forEachFrom(t,e){let n=this._search(t);for(;n>=0&&this._timeline[n].time>=t;)n--;return this._iterate(e,n+1),this}forEachAtTime(t,e){const n=this._search(t);if(-1!==n&&hs(this._timeline[n].time,t)){let i=n;for(let e=n;e>=0&&hs(this._timeline[e].time,t);e--)i=e;this._iterate((t=>{e(t)}),i,n)}return this}dispose(){return super.dispose(),this._timeline=[],this}}const ds=[];function fs(t){ds.push(t)}const ms=[];function gs(t){ms.push(t)}class vs extends rs{constructor(){super(...arguments),this.name="Emitter"}on(t,e){return t.split(/\W+/).forEach((t=>{qi(this._events)&&(this._events={}),this._events.hasOwnProperty(t)||(this._events[t]=[]),this._events[t].push(e)})),this}once(t,e){const n=(...i)=>{e(...i),this.off(t,n)};return this.on(t,n),this}off(t,e){return t.split(/\W+/).forEach((n=>{if(qi(this._events)&&(this._events={}),this._events.hasOwnProperty(t))if(qi(e))this._events[t]=[];else{const n=this._events[t];for(let t=n.length-1;t>=0;t--)n[t]===e&&n.splice(t,1)}})),this}emit(t,...e){if(this._events&&this._events.hasOwnProperty(t)){const n=this._events[t].slice(0);for(let t=0,i=n.length;t<i;t++)n[t].apply(this,e)}return this}static mixin(t){["on","once","off","emit"].forEach((e=>{const n=Object.getOwnPropertyDescriptor(vs.prototype,e);Object.defineProperty(t.prototype,e,n)}))}dispose(){return super.dispose(),this._events=void 0,this}}class ys extends vs{constructor(){super(...arguments),this.isOffline=!1}toJSON(){return{}}}class _s extends ys{constructor(){super(),this.name="Context",this._constants=new Map,this._timeouts=new ps,this._timeoutIds=0,this._initialized=!1,this.isOffline=!1,this._workletModules=new Map;const t=is(_s.getDefaults(),arguments,["context"]);t.context?this._context=t.context:this._context=function(t){return new pi(t)}({latencyHint:t.latencyHint}),this._ticker=new Zi(this.emit.bind(this,"tick"),t.clockSource,t.updateInterval),this.on("tick",this._timeoutLoop.bind(this)),this._context.onstatechange=()=>{this.emit("statechange",this.state)},this._setLatencyHint(t.latencyHint),this.lookAhead=t.lookAhead}static getDefaults(){return{clockSource:"worker",latencyHint:"interactive",lookAhead:.1,updateInterval:.05}}initialize(){var t;return this._initialized||(t=this,ds.forEach((e=>e(t))),this._initialized=!0),this}createAnalyser(){return this._context.createAnalyser()}createOscillator(){return this._context.createOscillator()}createBufferSource(){return this._context.createBufferSource()}createBiquadFilter(){return this._context.createBiquadFilter()}createBuffer(t,e,n){return this._context.createBuffer(t,e,n)}createChannelMerger(t){return this._context.createChannelMerger(t)}createChannelSplitter(t){return this._context.createChannelSplitter(t)}createConstantSource(){return this._context.createConstantSource()}createConvolver(){return this._context.createConvolver()}createDelay(t){return this._context.createDelay(t)}createDynamicsCompressor(){return this._context.createDynamicsCompressor()}createGain(){return this._context.createGain()}createIIRFilter(t,e){return this._context.createIIRFilter(t,e)}createPanner(){return this._context.createPanner()}createPeriodicWave(t,e,n){return this._context.createPeriodicWave(t,e,n)}createStereoPanner(){return this._context.createStereoPanner()}createWaveShaper(){return this._context.createWaveShaper()}createMediaStreamSource(t){return Di(Ki(this._context),"Not available if OfflineAudioContext"),this._context.createMediaStreamSource(t)}createMediaElementSource(t){return Di(Ki(this._context),"Not available if OfflineAudioContext"),this._context.createMediaElementSource(t)}createMediaStreamDestination(){return Di(Ki(this._context),"Not available if OfflineAudioContext"),this._context.createMediaStreamDestination()}decodeAudioData(t){return this._context.decodeAudioData(t)}get currentTime(){return this._context.currentTime}get state(){return this._context.state}get sampleRate(){return this._context.sampleRate}get listener(){return this.initialize(),this._listener}set listener(t){Di(!this._initialized,"The listener cannot be set after initialization."),this._listener=t}get transport(){return this.initialize(),this._transport}set transport(t){Di(!this._initialized,"The transport cannot be set after initialization."),this._transport=t}get draw(){return this.initialize(),this._draw}set draw(t){Di(!this._initialized,"Draw cannot be set after initialization."),this._draw=t}get destination(){return this.initialize(),this._destination}set destination(t){Di(!this._initialized,"The destination cannot be set after initialization."),this._destination=t}createAudioWorkletNode(t,e){return function(t,e,n){return Di(Fi(Ci),"This node only works in a secure context (https or localhost)"),new Ci(t,e,n)}(this.rawContext,t,e)}addAudioWorkletModule(t,e){return Yi(this,void 0,void 0,(function*(){Di(Fi(this.rawContext.audioWorklet),"AudioWorkletNode is only available in a secure context (https or localhost)"),this._workletModules.has(e)||this._workletModules.set(e,this.rawContext.audioWorklet.addModule(t)),yield this._workletModules.get(e)}))}workletsAreReady(){return Yi(this,void 0,void 0,(function*(){const t=[];this._workletModules.forEach((e=>t.push(e))),yield Promise.all(t)}))}get updateInterval(){return this._ticker.updateInterval}set updateInterval(t){this._ticker.updateInterval=t}get clockSource(){return this._ticker.type}set clockSource(t){this._ticker.type=t}get latencyHint(){return this._latencyHint}_setLatencyHint(t){let e=0;if(this._latencyHint=t,Ui(t))switch(t){case"interactive":e=.1;break;case"playback":e=.5;break;case"balanced":e=.25}this.lookAhead=e,this.updateInterval=e/2}get rawContext(){return this._context}now(){return this._context.currentTime+this.lookAhead}immediate(){return this._context.currentTime}resume(){return Ki(this._context)?this._context.resume():Promise.resolve()}close(){return Yi(this,void 0,void 0,(function*(){var t;Ki(this._context)&&(yield this._context.close()),this._initialized&&(t=this,ms.forEach((e=>e(t))))}))}getConstant(t){if(this._constants.has(t))return this._constants.get(t);{const e=this._context.createBuffer(1,128,this._context.sampleRate),n=e.getChannelData(0);for(let e=0;e<n.length;e++)n[e]=t;const i=this._context.createBufferSource();return i.channelCount=1,i.channelCountMode="explicit",i.buffer=e,i.loop=!0,i.start(0),this._constants.set(t,i),i}}dispose(){return super.dispose(),this._ticker.dispose(),this._timeouts.dispose(),Object.keys(this._constants).map((t=>this._constants[t].disconnect())),this}_timeoutLoop(){const t=this.now();let e=this._timeouts.peek();for(;this._timeouts.length&&e&&e.time<=t;)e.callback(),this._timeouts.shift(),e=this._timeouts.peek()}setTimeout(t,e){this._timeoutIds++;const n=this.now();return this._timeouts.add({callback:t,id:this._timeoutIds,time:n+e}),this._timeoutIds}clearTimeout(t){return this._timeouts.forEach((e=>{e.id===t&&this._timeouts.remove(e)})),this}clearInterval(t){return this.clearTimeout(t)}setInterval(t,e){const n=++this._timeoutIds,i=()=>{const s=this.now();this._timeouts.add({callback:()=>{t(),i()},id:n,time:s+e})};return i(),n}}function xs(t,e){Wi(e)?e.forEach((e=>xs(t,e))):Object.defineProperty(t,e,{enumerable:!0,writable:!1})}function bs(t,e){Wi(e)?e.forEach((e=>bs(t,e))):Object.defineProperty(t,e,{writable:!0})}const ws=()=>{};class Ts extends rs{constructor(){super(),this.name="ToneAudioBuffer",this.onload=ws;const t=is(Ts.getDefaults(),arguments,["url","onload","onerror"]);this.reverse=t.reverse,this.onload=t.onload,t.url&&ts(t.url)||t.url instanceof Ts?this.set(t.url):Ui(t.url)&&this.load(t.url).catch(t.onerror)}static getDefaults(){return{onerror:ws,onload:ws,reverse:!1}}get sampleRate(){return this._buffer?this._buffer.sampleRate:ks().sampleRate}set(t){return t instanceof Ts?t.loaded?this._buffer=t.get():t.onload=()=>{this.set(t),this.onload(this)}:this._buffer=t,this._reversed&&this._reverse(),this}get(){return this._buffer}load(t){return Yi(this,void 0,void 0,(function*(){const e=Ts.load(t).then((t=>{this.set(t),this.onload(this)}));Ts.downloads.push(e);try{yield e}finally{const t=Ts.downloads.indexOf(e);Ts.downloads.splice(t,1)}return this}))}dispose(){return super.dispose(),this._buffer=void 0,this}fromArray(t){const e=Wi(t)&&t[0].length>0,n=e?t.length:1,i=e?t[0].length:t.length,s=ks(),o=s.createBuffer(n,i,s.sampleRate),r=e||1!==n?t:[t];for(let t=0;t<n;t++)o.copyToChannel(r[t],t);return this._buffer=o,this}toMono(t){if(Li(t))this.fromArray(this.toArray(t));else{let t=new Float32Array(this.length);const e=this.numberOfChannels;for(let n=0;n<e;n++){const e=this.toArray(n);for(let n=0;n<e.length;n++)t[n]+=e[n]}t=t.map((t=>t/e)),this.fromArray(t)}return this}toArray(t){if(Li(t))return this.getChannelData(t);if(1===this.numberOfChannels)return this.toArray(0);{const t=[];for(let e=0;e<this.numberOfChannels;e++)t[e]=this.getChannelData(e);return t}}getChannelData(t){return this._buffer?this._buffer.getChannelData(t):new Float32Array(0)}slice(t,e=this.duration){const n=Math.floor(t*this.sampleRate),i=Math.floor(e*this.sampleRate);Di(n<i,"The start time must be less than the end time");const s=i-n,o=ks().createBuffer(this.numberOfChannels,s,this.sampleRate);for(let t=0;t<this.numberOfChannels;t++)o.copyToChannel(this.getChannelData(t).subarray(n,i),t);return new Ts(o)}_reverse(){if(this.loaded)for(let t=0;t<this.numberOfChannels;t++)this.getChannelData(t).reverse();return this}get loaded(){return this.length>0}get duration(){return this._buffer?this._buffer.duration:0}get length(){return this._buffer?this._buffer.length:0}get numberOfChannels(){return this._buffer?this._buffer.numberOfChannels:0}get reverse(){return this._reversed}set reverse(t){this._reversed!==t&&(this._reversed=t,this._reverse())}static fromArray(t){return(new Ts).fromArray(t)}static fromUrl(t){return Yi(this,void 0,void 0,(function*(){const e=new Ts;return yield e.load(t)}))}static load(t){return Yi(this,void 0,void 0,(function*(){const e=t.match(/\[([^\]\[]+\|.+)\]$/);if(e){const n=e[1].split("|");let i=n[0];for(const t of n)if(Ts.supportsType(t)){i=t;break}t=t.replace(e[0],i)}const n=""===Ts.baseUrl||Ts.baseUrl.endsWith("/")?Ts.baseUrl:Ts.baseUrl+"/",i=yield fetch(n+t);if(!i.ok)throw new Error(`could not load url: ${t}`);const s=yield i.arrayBuffer();return yield ks().decodeAudioData(s)}))}static supportsType(t){const e=t.split("."),n=e[e.length-1];return""!==document.createElement("audio").canPlayType("audio/"+n)}static loaded(){return Yi(this,void 0,void 0,(function*(){for(yield Promise.resolve();Ts.downloads.length;)yield Ts.downloads[0]}))}}Ts.baseUrl="",Ts.downloads=[];class Ss extends _s{constructor(){var t,e,n;super({clockSource:"offline",context:Ji(arguments[0])?arguments[0]:(t=arguments[0],e=arguments[1]*arguments[2],n=arguments[2],new Mi(t,e,n)),lookAhead:0,updateInterval:Ji(arguments[0])?128/arguments[0].sampleRate:128/arguments[2]}),this.name="OfflineContext",this._currentTime=0,this.isOffline=!0,this._duration=Ji(arguments[0])?arguments[0].length/arguments[0].sampleRate:arguments[1]}now(){return this._currentTime}get currentTime(){return this._currentTime}_renderClock(t){return Yi(this,void 0,void 0,(function*(){let e=0;for(;this._duration-this._currentTime>=0;){this.emit("tick"),this._currentTime+=128/this.sampleRate,e++;const n=Math.floor(this.sampleRate/128);t&&e%n==0&&(yield new Promise((t=>setTimeout(t,1))))}}))}render(t=!0){return Yi(this,void 0,void 0,(function*(){yield this.workletsAreReady(),yield this._renderClock(t);const e=yield this._context.startRendering();return new Ts(e)}))}close(){return Promise.resolve()}}const Cs=new class extends ys{constructor(){super(...arguments),this.lookAhead=0,this.latencyHint=0,this.isOffline=!1}createAnalyser(){return{}}createOscillator(){return{}}createBufferSource(){return{}}createBiquadFilter(){return{}}createBuffer(t,e,n){return{}}createChannelMerger(t){return{}}createChannelSplitter(t){return{}}createConstantSource(){return{}}createConvolver(){return{}}createDelay(t){return{}}createDynamicsCompressor(){return{}}createGain(){return{}}createIIRFilter(t,e){return{}}createPanner(){return{}}createPeriodicWave(t,e,n){return{}}createStereoPanner(){return{}}createWaveShaper(){return{}}createMediaStreamSource(t){return{}}createMediaElementSource(t){return{}}createMediaStreamDestination(){return{}}decodeAudioData(t){return Promise.resolve({})}createAudioWorkletNode(t,e){return{}}get rawContext(){return{}}addAudioWorkletModule(t,e){return Yi(this,void 0,void 0,(function*(){return Promise.resolve()}))}resume(){return Promise.resolve()}setTimeout(t,e){return 0}clearTimeout(t){return this}setInterval(t,e){return 0}clearInterval(t){return this}getConstant(t){return{}}get currentTime(){return 0}get state(){return{}}get sampleRate(){return 0}get listener(){return{}}get transport(){return{}}get draw(){return{}}set draw(t){}get destination(){return{}}set destination(t){}now(){return 0}immediate(){return 0}};let As=Cs;function ks(){return As===Cs&&Gi&&(t=new _s,As=Ki(t)?new _s(t):Ji(t)?new Ss(t):t),As;var t}if(zi&&!zi.TONE_SILENCE_LOGGING){const t=` * Tone.js ${"v"}${r} * `;console.log(`%c${t}`,"background: #000; color: #fff")}function Ms(t){return Math.pow(2,t/12)}let Os=440;function Is(t){return Math.round(Es(t))}function Es(t){return 69+12*Math.log2(t/Os)}class Ps extends rs{constructor(t,e,n){super(),this.defaultUnits="s",this._val=e,this._units=n,this.context=t,this._expressions=this._getExpressions()}_getExpressions(){return{hz:{method:t=>this._frequencyToUnits(parseFloat(t)),regexp:/^(\d+(?:\.\d+)?)hz$/i},i:{method:t=>this._ticksToUnits(parseInt(t,10)),regexp:/^(\d+)i$/i},m:{method:t=>this._beatsToUnits(parseInt(t,10)*this._getTimeSignature()),regexp:/^(\d+)m$/i},n:{method:(t,e)=>{const n=parseInt(t,10),i="."===e?1.5:1;return 1===n?this._beatsToUnits(this._getTimeSignature())*i:this._beatsToUnits(4/n)*i},regexp:/^(\d+)n(\.?)$/i},number:{method:t=>this._expressions[this.defaultUnits].method.call(this,t),regexp:/^(\d+(?:\.\d+)?)$/},s:{method:t=>this._secondsToUnits(parseFloat(t)),regexp:/^(\d+(?:\.\d+)?)s$/},samples:{method:t=>parseInt(t,10)/this.context.sampleRate,regexp:/^(\d+)samples$/},t:{method:t=>{const e=parseInt(t,10);return this._beatsToUnits(8/(3*Math.floor(e)))},regexp:/^(\d+)t$/i},tr:{method:(t,e,n)=>{let i=0;return t&&"0"!==t&&(i+=this._beatsToUnits(this._getTimeSignature()*parseFloat(t))),e&&"0"!==e&&(i+=this._beatsToUnits(parseFloat(e))),n&&"0"!==n&&(i+=this._beatsToUnits(parseFloat(n)/4)),i},regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?$/}}}valueOf(){if(this._val instanceof Ps&&this.fromType(this._val),qi(this._val))return this._noArg();if(Ui(this._val)&&qi(this._units)){for(const t in this._expressions)if(this._expressions[t].regexp.test(this._val.trim())){this._units=t;break}}else if(ji(this._val)){let t=0;for(const e in this._val)if(Fi(this._val[e])){const n=this._val[e];t+=new this.constructor(this.context,e).valueOf()*n}return t}if(Fi(this._units)){const t=this._expressions[this._units],e=this._val.toString().trim().match(t.regexp);return e?t.method.apply(this,e.slice(1)):t.method.call(this,this._val)}return Ui(this._val)?parseFloat(this._val):this._val}_frequencyToUnits(t){return 1/t}_beatsToUnits(t){return 60/this._getBpm()*t}_secondsToUnits(t){return t}_ticksToUnits(t){return t*this._beatsToUnits(1)/this._getPPQ()}_noArg(){return this._now()}_getBpm(){return this.context.transport.bpm.value}_getTimeSignature(){return this.context.transport.timeSignature}_getPPQ(){return this.context.transport.PPQ}fromType(t){switch(this._units=void 0,this.defaultUnits){case"s":this._val=t.toSeconds();break;case"i":this._val=t.toTicks();break;case"hz":this._val=t.toFrequency();break;case"midi":this._val=t.toMidi()}return this}toFrequency(){return 1/this.toSeconds()}toSamples(){return this.toSeconds()*this.context.sampleRate}toMilliseconds(){return 1e3*this.toSeconds()}}class Ds extends Ps{constructor(){super(...arguments),this.name="TimeClass"}_getExpressions(){return Object.assign(super._getExpressions(),{now:{method:t=>this._now()+new this.constructor(this.context,t).valueOf(),regexp:/^\+(.+)/},quantize:{method:t=>{const e=new Ds(this.context,t).valueOf();return this._secondsToUnits(this.context.transport.nextSubdivision(e))},regexp:/^@(.+)/}})}quantize(t,e=1){const n=new this.constructor(this.context,t).valueOf(),i=this.valueOf();return i+(Math.round(i/n)*n-i)*e}toNotation(){const t=this.toSeconds(),e=["1m"];for(let t=1;t<9;t++){const n=Math.pow(2,t);e.push(n+"n."),e.push(n+"n"),e.push(n+"t")}e.push("0");let n=e[0],i=new Ds(this.context,e[0]).toSeconds();return e.forEach((e=>{const s=new Ds(this.context,e).toSeconds();Math.abs(s-t)<Math.abs(i-t)&&(n=e,i=s)})),n}toBarsBeatsSixteenths(){const t=this._beatsToUnits(1);let e=this.valueOf()/t;e=parseFloat(e.toFixed(4));const n=Math.floor(e/this._getTimeSignature());let i=e%1*4;e=Math.floor(e)%this._getTimeSignature();const s=i.toString();return s.length>3&&(i=parseFloat(parseFloat(s).toFixed(3))),[n,e,i].join(":")}toTicks(){const t=this._beatsToUnits(1),e=this.valueOf()/t;return Math.round(e*this._getPPQ())}toSeconds(){return this.valueOf()}toMidi(){return Is(this.toFrequency())}_now(){return this.context.now()}}class Rs extends Ds{constructor(){super(...arguments),this.name="Frequency",this.defaultUnits="hz"}static get A4(){return Os}static set A4(t){!function(t){Os=t}(t)}_getExpressions(){return Object.assign({},super._getExpressions(),{midi:{regexp:/^(\d+(?:\.\d+)?midi)/,method(t){return"midi"===this.defaultUnits?t:Rs.mtof(t)}},note:{regexp:/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,method(t,e){const n=Vs[t.toLowerCase()]+12*(parseInt(e,10)+1);return"midi"===this.defaultUnits?n:Rs.mtof(n)}},tr:{regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,method(t,e,n){let i=1;return t&&"0"!==t&&(i*=this._beatsToUnits(this._getTimeSignature()*parseFloat(t))),e&&"0"!==e&&(i*=this._beatsToUnits(parseFloat(e))),n&&"0"!==n&&(i*=this._beatsToUnits(parseFloat(n)/4)),i}}})}transpose(t){return new Rs(this.context,this.valueOf()*Ms(t))}harmonize(t){return t.map((t=>this.transpose(t)))}toMidi(){return Is(this.valueOf())}toNote(){const t=this.toFrequency(),e=Math.log2(t/Rs.A4);let n=Math.round(12*e)+57;const i=Math.floor(n/12);return i<0&&(n+=-12*i),Ns[n%12]+i.toString()}toSeconds(){return 1/super.toSeconds()}toTicks(){const t=this._beatsToUnits(1),e=this.valueOf()/t;return Math.floor(e*this._getPPQ())}_noArg(){return 0}_frequencyToUnits(t){return t}_ticksToUnits(t){return 1/(60*t/(this._getBpm()*this._getPPQ()))}_beatsToUnits(t){return 1/super._beatsToUnits(t)}_secondsToUnits(t){return 1/t}static mtof(t){return function(t){return Os*Math.pow(2,(t-69)/12)}(t)}static ftom(t){return Is(t)}}const Vs={cbb:-2,cb:-1,c:0,"c#":1,cx:2,dbb:0,db:1,d:2,"d#":3,dx:4,ebb:2,eb:3,e:4,"e#":5,ex:6,fbb:3,fb:4,f:5,"f#":6,fx:7,gbb:5,gb:6,g:7,"g#":8,gx:9,abb:7,ab:8,a:9,"a#":10,ax:11,bbb:9,bb:10,b:11,"b#":12,bx:13},Ns=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"];class Bs extends Ds{constructor(){super(...arguments),this.name="TransportTime"}_now(){return this.context.transport.seconds}}class qs extends rs{constructor(){super();const t=is(qs.getDefaults(),arguments,["context"]);this.defaultContext?this.context=this.defaultContext:this.context=t.context}static getDefaults(){return{context:ks()}}now(){return this.context.currentTime+this.context.lookAhead}immediate(){return this.context.currentTime}get sampleTime(){return 1/this.context.sampleRate}get blockTime(){return 128/this.context.sampleRate}toSeconds(t){return new Ds(this.context,t).toSeconds()}toFrequency(t){return new Rs(this.context,t).toFrequency()}toTicks(t){return new Bs(this.context,t).toTicks()}_getPartialProperties(t){const e=this.get();return Object.keys(e).forEach((n=>{qi(t[n])&&delete e[n]})),e}get(){const t=this.constructor.getDefaults();return Object.keys(t).forEach((e=>{if(Reflect.has(this,e)){const n=this[e];Fi(n)&&Fi(n.value)&&Fi(n.setValueAtTime)?t[e]=n.value:n instanceof qs?t[e]=n._getPartialProperties(t[e]):Wi(n)||Li(n)||Ui(n)||"boolean"==typeof n?t[e]=n:delete t[e]}})),t}set(t){return Object.keys(t).forEach((e=>{Reflect.has(this,e)&&Fi(this[e])&&(this[e]&&Fi(this[e].value)&&Fi(this[e].setValueAtTime)?this[e].value!==t[e]&&(this[e].value=t[e]):this[e]instanceof qs?this[e].set(t[e]):this[e]=t[e])})),this}}class Fs extends ps{constructor(t="stopped"){super(),this.name="StateTimeline",this._initial=t,this.setStateAtTime(this._initial,0)}getValueAtTime(t){const e=this.get(t);return null!==e?e.state:this._initial}setStateAtTime(t,e,n){return Ri(e,0),this.add(Object.assign({},n,{state:t,time:e})),this}getLastState(t,e){for(let n=this._search(e);n>=0;n--){const e=this._timeline[n];if(e.state===t)return e}}getNextState(t,e){const n=this._search(e);if(-1!==n)for(let e=n;e<this._timeline.length;e++){const n=this._timeline[e];if(n.state===t)return n}}}class Ls extends qs{constructor(){super(is(Ls.getDefaults(),arguments,["param","units","convert"])),this.name="Param",this.overridden=!1,this._minOutput=1e-7;const t=is(Ls.getDefaults(),arguments,["param","units","convert"]);for(Di(Fi(t.param)&&($i(t.param)||t.param instanceof Ls),"param must be an AudioParam");!$i(t.param);)t.param=t.param._param;this._swappable=!!Fi(t.swappable)&&t.swappable,this._swappable?(this.input=this.context.createGain(),this._param=t.param,this.input.connect(this._param)):this._param=this.input=t.param,this._events=new ps(1e3),this._initialValue=this._param.defaultValue,this.units=t.units,this.convert=t.convert,this._minValue=t.minValue,this._maxValue=t.maxValue,Fi(t.value)&&t.value!==this._toType(this._initialValue)&&this.setValueAtTime(t.value,0)}static getDefaults(){return Object.assign(qs.getDefaults(),{convert:!0,units:"number"})}get value(){const t=this.now();return this.getValueAtTime(t)}set value(t){this.cancelScheduledValues(this.now()),this.setValueAtTime(t,this.now())}get minValue(){return Fi(this._minValue)?this._minValue:"time"===this.units||"frequency"===this.units||"normalRange"===this.units||"positive"===this.units||"transportTime"===this.units||"ticks"===this.units||"bpm"===this.units||"hertz"===this.units||"samples"===this.units?0:"audioRange"===this.units?-1:"decibels"===this.units?-1/0:this._param.minValue}get maxValue(){return Fi(this._maxValue)?this._maxValue:"normalRange"===this.units||"audioRange"===this.units?1:this._param.maxValue}_is(t,e){return this.units===e}_assertRange(t){return Fi(this.maxValue)&&Fi(this.minValue)&&Ri(t,this._fromType(this.minValue),this._fromType(this.maxValue)),t}_fromType(t){return this.convert&&!this.overridden?this._is(t,"time")?this.toSeconds(t):this._is(t,"decibels")?(e=t,Math.pow(10,e/20)):this._is(t,"frequency")?this.toFrequency(t):t:this.overridden?0:t;var e}_toType(t){return this.convert&&"decibels"===this.units?(e=t,Math.log(e)/Math.LN10*20):t;var e}setValueAtTime(t,e){const n=this.toSeconds(e),i=this._fromType(t);return Di(isFinite(i)&&isFinite(n),`Invalid argument(s) to setValueAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`),this._assertRange(i),this.log(this.units,"setValueAtTime",t,n),this._events.add({time:n,type:"setValueAtTime",value:i}),this._param.setValueAtTime(i,n),this}getValueAtTime(t){const e=Math.max(this.toSeconds(t),0),n=this._events.getAfter(e),i=this._events.get(e);let s=this._initialValue;if(null===i)s=this._initialValue;else if("setTargetAtTime"!==i.type||null!==n&&"setValueAtTime"!==n.type)if(null===n)s=i.value;else if("linearRampToValueAtTime"===n.type||"exponentialRampToValueAtTime"===n.type){let t=i.value;if("setTargetAtTime"===i.type){const e=this._events.getBefore(i.time);t=null===e?this._initialValue:e.value}s="linearRampToValueAtTime"===n.type?this._linearInterpolate(i.time,t,n.time,n.value,e):this._exponentialInterpolate(i.time,t,n.time,n.value,e)}else s=i.value;else{const t=this._events.getBefore(i.time);let n;n=null===t?this._initialValue:t.value,"setTargetAtTime"===i.type&&(s=this._exponentialApproach(i.time,n,i.value,i.constant,e))}return this._toType(s)}setRampPoint(t){t=this.toSeconds(t);let e=this.getValueAtTime(t);return this.cancelAndHoldAtTime(t),0===this._fromType(e)&&(e=this._toType(this._minOutput)),this.setValueAtTime(e,t),this}linearRampToValueAtTime(t,e){const n=this._fromType(t),i=this.toSeconds(e);return Di(isFinite(n)&&isFinite(i),`Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`),this._assertRange(n),this._events.add({time:i,type:"linearRampToValueAtTime",value:n}),this.log(this.units,"linearRampToValueAtTime",t,i),this._param.linearRampToValueAtTime(n,i),this}exponentialRampToValueAtTime(t,e){let n=this._fromType(t);n=hs(n,0)?this._minOutput:n,this._assertRange(n);const i=this.toSeconds(e);return Di(isFinite(n)&&isFinite(i),`Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`),this._events.add({time:i,type:"exponentialRampToValueAtTime",value:n}),this.log(this.units,"exponentialRampToValueAtTime",t,i),this._param.exponentialRampToValueAtTime(n,i),this}exponentialRampTo(t,e,n){return n=this.toSeconds(n),this.setRampPoint(n),this.exponentialRampToValueAtTime(t,n+this.toSeconds(e)),this}linearRampTo(t,e,n){return n=this.toSeconds(n),this.setRampPoint(n),this.linearRampToValueAtTime(t,n+this.toSeconds(e)),this}targetRampTo(t,e,n){return n=this.toSeconds(n),this.setRampPoint(n),this.exponentialApproachValueAtTime(t,n,e),this}exponentialApproachValueAtTime(t,e,n){e=this.toSeconds(e),n=this.toSeconds(n);const i=Math.log(n+1)/Math.log(200);return this.setTargetAtTime(t,e,i),this.cancelAndHoldAtTime(e+.9*n),this.linearRampToValueAtTime(t,e+n),this}setTargetAtTime(t,e,n){const i=this._fromType(t);Di(isFinite(n)&&n>0,"timeConstant must be a number greater than 0");const s=this.toSeconds(e);return this._assertRange(i),Di(isFinite(i)&&isFinite(s),`Invalid argument(s) to setTargetAtTime: ${JSON.stringify(t)}, ${JSON.stringify(e)}`),this._events.add({constant:n,time:s,type:"setTargetAtTime",value:i}),this.log(this.units,"setTargetAtTime",t,s,n),this._param.setTargetAtTime(i,s,n),this}setValueCurveAtTime(t,e,n,i=1){n=this.toSeconds(n),e=this.toSeconds(e);const s=this._fromType(t[0])*i;this.setValueAtTime(this._toType(s),e);const o=n/(t.length-1);for(let n=1;n<t.length;n++){const s=this._fromType(t[n])*i;this.linearRampToValueAtTime(this._toType(s),e+n*o)}return this}cancelScheduledValues(t){const e=this.toSeconds(t);return Di(isFinite(e),`Invalid argument to cancelScheduledValues: ${JSON.stringify(t)}`),this._events.cancel(e),this._param.cancelScheduledValues(e),this.log(this.units,"cancelScheduledValues",e),this}cancelAndHoldAtTime(t){const e=this.toSeconds(t),n=this._fromType(this.getValueAtTime(e));Di(isFinite(e),`Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(t)}`),this.log(this.units,"cancelAndHoldAtTime",e,"value="+n);const i=this._events.get(e),s=this._events.getAfter(e);return i&&hs(i.time,e)?s?(this._param.cancelScheduledValues(s.time),this._events.cancel(s.time)):(this._param.cancelAndHoldAtTime(e),this._events.cancel(e+this.sampleTime)):s&&(this._param.cancelScheduledValues(s.time),this._events.cancel(s.time),"linearRampToValueAtTime"===s.type?this.linearRampToValueAtTime(this._toType(n),e):"exponentialRampToValueAtTime"===s.type&&this.exponentialRampToValueAtTime(this._toType(n),e)),this._events.add({time:e,type:"setValueAtTime",value:n}),this._param.setValueAtTime(n,e),this}rampTo(t,e=.1,n){return"frequency"===this.units||"bpm"===this.units||"decibels"===this.units?this.exponentialRampTo(t,e,n):this.linearRampTo(t,e,n),this}apply(t){const e=this.context.currentTime;t.setValueAtTime(this.getValueAtTime(e),e);const n=this._events.get(e);if(n&&"setTargetAtTime"===n.type){const i=this._events.getAfter(n.time),s=i?i.time:e+2,o=(s-e)/10;for(let n=e;n<s;n+=o)t.linearRampToValueAtTime(this.getValueAtTime(n),n)}return this._events.forEachAfter(this.context.currentTime,(e=>{"cancelScheduledValues"===e.type?t.cancelScheduledValues(e.time):"setTargetAtTime"===e.type?t.setTargetAtTime(e.value,e.time,e.constant):t[e.type](e.value,e.time)})),this}setParam(t){Di(this._swappable,"The Param must be assigned as 'swappable' in the constructor");const e=this.input;return e.disconnect(this._param),this.apply(t),this._param=t,e.connect(this._param),this}dispose(){return super.dispose(),this._events.dispose(),this}get defaultValue(){return this._toType(this._param.defaultValue)}_exponentialApproach(t,e,n,i,s){return n+(e-n)*Math.exp(-(s-t)/i)}_linearInterpolate(t,e,n,i,s){return e+(s-t)/(n-t)*(i-e)}_exponentialInterpolate(t,e,n,i,s){return e*Math.pow(i/e,(s-t)/(n-t))}}class js extends qs{constructor(){super(...arguments),this.name="ToneAudioNode",this._internalChannels=[]}get numberOfInputs(){return Fi(this.input)?$i(this.input)||this.input instanceof Ls?1:this.input.numberOfInputs:0}get numberOfOutputs(){return Fi(this.output)?this.output.numberOfOutputs:0}_isAudioNode(t){return Fi(t)&&(t instanceof js||Qi(t))}_getInternalNodes(){const t=this._internalChannels.slice(0);return this._isAudioNode(this.input)&&t.push(this.input),this._isAudioNode(this.output)&&this.input!==this.output&&t.push(this.output),t}_setChannelProperties(t){this._getInternalNodes().forEach((e=>{e.channelCount=t.channelCount,e.channelCountMode=t.channelCountMode,e.channelInterpretation=t.channelInterpretation}))}_getChannelProperties(){const t=this._getInternalNodes();Di(t.length>0,"ToneAudioNode does not have any internal nodes");const e=t[0];return{channelCount:e.channelCount,channelCountMode:e.channelCountMode,channelInterpretation:e.channelInterpretation}}get channelCount(){return this._getChannelProperties().channelCount}set channelCount(t){const e=this._getChannelProperties();this._setChannelProperties(Object.assign(e,{channelCount:t}))}get channelCountMode(){return this._getChannelProperties().channelCountMode}set channelCountMode(t){const e=this._getChannelProperties();this._setChannelProperties(Object.assign(e,{channelCountMode:t}))}get channelInterpretation(){return this._getChannelProperties().channelInterpretation}set channelInterpretation(t){const e=this._getChannelProperties();this._setChannelProperties(Object.assign(e,{channelInterpretation:t}))}connect(t,e=0,n=0){return Us(this,t,e,n),this}toDestination(){return this.connect(this.context.destination),this}toMaster(){return Bi("toMaster() has been renamed toDestination()"),this.toDestination()}disconnect(t,e=0,n=0){return function(t,e,n=0,i=0){if(Fi(e))for(;e instanceof js;)e=e.input;for(;!Qi(t);)Fi(t.output)&&(t=t.output);$i(e)?t.disconnect(e,n):Qi(e)?t.disconnect(e,n,i):t.disconnect()}(this,t,e,n),this}chain(...t){return Ws(this,...t),this}fan(...t){return t.forEach((t=>this.connect(t))),this}dispose(){return super.dispose(),Fi(this.input)&&(this.input instanceof js?this.input.dispose():Qi(this.input)&&this.input.disconnect()),Fi(this.output)&&(this.output instanceof js?this.output.dispose():Qi(this.output)&&this.output.disconnect()),this._internalChannels=[],this}}function Ws(...t){const e=t.shift();t.reduce(((t,e)=>(t instanceof js?t.connect(e):Qi(t)&&Us(t,e),e)),e)}function Us(t,e,n=0,i=0){for(Di(Fi(t),"Cannot connect from undefined node"),Di(Fi(e),"Cannot connect to undefined node"),(e instanceof js||Qi(e))&&Di(e.numberOfInputs>0,"Cannot connect to node with no inputs"),Di(t.numberOfOutputs>0,"Cannot connect from node with no outputs");e instanceof js||e instanceof Ls;)Fi(e.input)&&(e=e.input);for(;t instanceof js;)Fi(t.output)&&(t=t.output);$i(e)?t.connect(e,n):t.connect(e,n,i)}class Hs extends js{constructor(){super(is(Hs.getDefaults(),arguments,["gain","units"])),this.name="Gain",this._gainNode=this.context.createGain(),this.input=this._gainNode,this.output=this._gainNode;const t=is(Hs.getDefaults(),arguments,["gain","units"]);this.gain=new Ls({context:this.context,convert:t.convert,param:this._gainNode.gain,units:t.units,value:t.gain,minValue:t.minValue,maxValue:t.maxValue}),xs(this,"gain")}static getDefaults(){return Object.assign(js.getDefaults(),{convert:!0,gain:1,units:"gain"})}dispose(){return super.dispose(),this._gainNode.disconnect(),this.gain.dispose(),this}}class zs extends js{constructor(t){super(t),this.onended=ws,this._startTime=-1,this._stopTime=-1,this._timeout=-1,this.output=new Hs({context:this.context,gain:0}),this._gainNode=this.output,this.getStateAtTime=function(t){const e=this.toSeconds(t);return-1!==this._startTime&&e>=this._startTime&&(-1===this._stopTime||e<=this._stopTime)?"started":"stopped"},this._fadeIn=t.fadeIn,this._fadeOut=t.fadeOut,this._curve=t.curve,this.onended=t.onended}static getDefaults(){return Object.assign(js.getDefaults(),{curve:"linear",fadeIn:0,fadeOut:0,onended:ws})}_startGain(t,e=1){Di(-1===this._startTime,"Source cannot be started more than once");const n=this.toSeconds(this._fadeIn);return this._startTime=t+n,this._startTime=Math.max(this._startTime,this.context.currentTime),n>0?(this._gainNode.gain.setValueAtTime(0,t),"linear"===this._curve?this._gainNode.gain.linearRampToValueAtTime(e,t+n):this._gainNode.gain.exponentialApproachValueAtTime(e,t,n)):this._gainNode.gain.setValueAtTime(e,t),this}stop(t){return this.log("stop",t),this._stopGain(this.toSeconds(t)),this}_stopGain(t){Di(-1!==this._startTime,"'start' must be called before 'stop'"),this.cancelStop();const e=this.toSeconds(this._fadeOut);return this._stopTime=this.toSeconds(t)+e,this._stopTime=Math.max(this._stopTime,this.context.currentTime),e>0?"linear"===this._curve?this._gainNode.gain.linearRampTo(0,e,t):this._gainNode.gain.targetRampTo(0,e,t):(this._gainNode.gain.cancelAndHoldAtTime(t),this._gainNode.gain.setValueAtTime(0,t)),this.context.clearTimeout(this._timeout),this._timeout=this.context.setTimeout((()=>{const t="exponential"===this._curve?2*e:0;this._stopSource(this.now()+t),this._onended()}),this._stopTime-this.context.currentTime),this}_onended(){if(this.onended!==ws&&(this.onended(this),this.onended=ws,!this.context.isOffline)){const t=()=>this.dispose();void 0!==window.requestIdleCallback?window.requestIdleCallback(t):setTimeout(t,1e3)}}get state(){return this.getStateAtTime(this.now())}cancelStop(){return this.log("cancelStop"),Di(-1!==this._startTime,"Source is not started"),this._gainNode.gain.cancelScheduledValues(this._startTime+this.sampleTime),this.context.clearTimeout(this._timeout),this._stopTime=-1,this}dispose(){return super.dispose(),this._gainNode.disconnect(),this}}class Gs extends zs{constructor(){super(is(Gs.getDefaults(),arguments,["offset"])),this.name="ToneConstantSource",this._source=this.context.createConstantSource();const t=is(Gs.getDefaults(),arguments,["offset"]);Us(this._source,this._gainNode),this.offset=new Ls({context:this.context,convert:t.convert,param:this._source.offset,units:t.units,value:t.offset,minValue:t.minValue,maxValue:t.maxValue})}static getDefaults(){return Object.assign(zs.getDefaults(),{convert:!0,offset:1,units:"number"})}start(t){const e=this.toSeconds(t);return this.log("start",e),this._startGain(e),this._source.start(e),this}_stopSource(t){this._source.stop(t)}dispose(){return super.dispose(),"started"===this.state&&this.stop(),this._source.disconnect(),this.offset.dispose(),this}}class Xs extends js{constructor(){super(is(Xs.getDefaults(),arguments,["value","units"])),this.name="Signal",this.override=!0;const t=is(Xs.getDefaults(),arguments,["value","units"]);this.output=this._constantSource=new Gs({context:this.context,convert:t.convert,offset:t.value,units:t.units,minValue:t.minValue,maxValue:t.maxValue}),this._constantSource.start(0),this.input=this._param=this._constantSource.offset}static getDefaults(){return Object.assign(js.getDefaults(),{convert:!0,units:"number",value:0})}connect(t,e=0,n=0){return Ys(this,t,e,n),this}dispose(){return super.dispose(),this._param.dispose(),this._constantSource.dispose(),this}setValueAtTime(t,e){return this._param.setValueAtTime(t,e),this}getValueAtTime(t){return this._param.getValueAtTime(t)}setRampPoint(t){return this._param.setRampPoint(t),this}linearRampToValueAtTime(t,e){return this._param.linearRampToValueAtTime(t,e),this}exponentialRampToValueAtTime(t,e){return this._param.exponentialRampToValueAtTime(t,e),this}exponentialRampTo(t,e,n){return this._param.exponentialRampTo(t,e,n),this}linearRampTo(t,e,n){return this._param.linearRampTo(t,e,n),this}targetRampTo(t,e,n){return this._param.targetRampTo(t,e,n),this}exponentialApproachValueAtTime(t,e,n){return this._param.exponentialApproachValueAtTime(t,e,n),this}setTargetAtTime(t,e,n){return this._param.setTargetAtTime(t,e,n),this}setValueCurveAtTime(t,e,n,i){return this._param.setValueCurveAtTime(t,e,n,i),this}cancelScheduledValues(t){return this._param.cancelScheduledValues(t),this}cancelAndHoldAtTime(t){return this._param.cancelAndHoldAtTime(t),this}rampTo(t,e,n){return this._param.rampTo(t,e,n),this}get value(){return this._param.value}set value(t){this._param.value=t}get convert(){return this._param.convert}set convert(t){this._param.convert=t}get units(){return this._param.units}get overridden(){return this._param.overridden}set overridden(t){this._param.overridden=t}get maxValue(){return this._param.maxValue}get minValue(){return this._param.minValue}apply(t){return this._param.apply(t),this}}function Ys(t,e,n,i){(e instanceof Ls||$i(e)||e instanceof Xs&&e.override)&&(e.cancelScheduledValues(0),e.setValueAtTime(0,0),e instanceof Xs&&(e.overridden=!0)),Us(t,e,n,i)}class Zs extends Ls{constructor(){super(is(Zs.getDefaults(),arguments,["value"])),this.name="TickParam",this._events=new ps(1/0),this._multiplier=1;const t=is(Zs.getDefaults(),arguments,["value"]);this._multiplier=t.multiplier,this._events.cancel(0),this._events.add({ticks:0,time:0,type:"setValueAtTime",value:this._fromType(t.value)}),this.setValueAtTime(t.value,0)}static getDefaults(){return Object.assign(Ls.getDefaults(),{multiplier:1,units:"hertz",value:1})}setTargetAtTime(t,e,n){e=this.toSeconds(e),this.setRampPoint(e);const i=this._fromType(t),s=this._events.get(e),o=Math.round(Math.max(1/n,1));for(let t=0;t<=o;t++){const o=n*t+e,r=this._exponentialApproach(s.time,s.value,i,n,o);this.linearRampToValueAtTime(this._toType(r),o)}return this}setValueAtTime(t,e){const n=this.toSeconds(e);super.setValueAtTime(t,e);const i=this._events.get(n),s=this._events.previousEvent(i),o=this._getTicksUntilEvent(s,n);return i.ticks=Math.max(o,0),this}linearRampToValueAtTime(t,e){const n=this.toSeconds(e);super.linearRampToValueAtTime(t,e);const i=this._events.get(n),s=this._events.previousEvent(i),o=this._getTicksUntilEvent(s,n);return i.ticks=Math.max(o,0),this}exponentialRampToValueAtTime(t,e){e=this.toSeconds(e);const n=this._fromType(t),i=this._events.get(e),s=Math.round(Math.max(10*(e-i.time),1)),o=(e-i.time)/s;for(let t=0;t<=s;t++){const s=o*t+i.time,r=this._exponentialInterpolate(i.time,i.value,e,n,s);this.linearRampToValueAtTime(this._toType(r),s)}return this}_getTicksUntilEvent(t,e){if(null===t)t={ticks:0,time:0,type:"setValueAtTime",value:0};else if(qi(t.ticks)){const e=this._events.previousEvent(t);t.ticks=this._getTicksUntilEvent(e,t.time)}const n=this._fromType(this.getValueAtTime(t.time));let i=this._fromType(this.getValueAtTime(e));const s=this._events.get(e);return s&&s.time===e&&"setValueAtTime"===s.type&&(i=this._fromType(this.getValueAtTime(e-this.sampleTime))),.5*(e-t.time)*(n+i)+t.ticks}getTicksAtTime(t){const e=this.toSeconds(t),n=this._events.get(e);return Math.max(this._getTicksUntilEvent(n,e),0)}getDurationOfTicks(t,e){const n=this.toSeconds(e),i=this.getTicksAtTime(e);return this.getTimeOfTick(i+t)-n}getTimeOfTick(t){const e=this._events.get(t,"ticks"),n=this._events.getAfter(t,"ticks");if(e&&e.ticks===t)return e.time;if(e&&n&&"linearRampToValueAtTime"===n.type&&e.value!==n.value){const i=this._fromType(this.getValueAtTime(e.time)),s=(this._fromType(this.getValueAtTime(n.time))-i)/(n.time-e.time),o=Math.sqrt(Math.pow(i,2)-2*s*(e.ticks-t)),r=(-i+o)/s;return(r>0?r:(-i-o)/s)+e.time}return e?0===e.value?1/0:e.time+(t-e.ticks)/e.value:t/this._initialValue}ticksToTime(t,e){return this.getDurationOfTicks(t,e)}timeToTicks(t,e){const n=this.toSeconds(e),i=this.toSeconds(t),s=this.getTicksAtTime(n);return this.getTicksAtTime(n+i)-s}_fromType(t){return"bpm"===this.units&&this.multiplier?1/(60/t/this.multiplier):super._fromType(t)}_toType(t){return"bpm"===this.units&&this.multiplier?t/this.multiplier*60:super._toType(t)}get multiplier(){return this._multiplier}set multiplier(t){const e=this.value;this._multiplier=t,this.cancelScheduledValues(0),this.setValueAtTime(e,0)}}class $s extends Xs{constructor(){super(is($s.getDefaults(),arguments,["value"])),this.name="TickSignal";const t=is($s.getDefaults(),arguments,["value"]);this.input=this._param=new Zs({context:this.context,convert:t.convert,multiplier:t.multiplier,param:this._constantSource.offset,units:t.units,value:t.value})}static getDefaults(){return Object.assign(Xs.getDefaults(),{multiplier:1,units:"hertz",value:1})}ticksToTime(t,e){return this._param.ticksToTime(t,e)}timeToTicks(t,e){return this._param.timeToTicks(t,e)}getTimeOfTick(t){return this._param.getTimeOfTick(t)}getDurationOfTicks(t,e){return this._param.getDurationOfTicks(t,e)}getTicksAtTime(t){return this._param.getTicksAtTime(t)}get multiplier(){return this._param.multiplier}set multiplier(t){this._param.multiplier=t}dispose(){return super.dispose(),this._param.dispose(),this}}class Qs extends qs{constructor(){super(is(Qs.getDefaults(),arguments,["frequency"])),this.name="TickSource",this._state=new Fs,this._tickOffset=new ps;const t=is(Qs.getDefaults(),arguments,["frequency"]);this.frequency=new $s({context:this.context,units:t.units,value:t.frequency}),xs(this,"frequency"),this._state.setStateAtTime("stopped",0),this.setTicksAtTime(0,0)}static getDefaults(){return Object.assign({frequency:1,units:"hertz"},qs.getDefaults())}get state(){return this.getStateAtTime(this.now())}start(t,e){const n=this.toSeconds(t);return"started"!==this._state.getValueAtTime(n)&&(this._state.setStateAtTime("started",n),Fi(e)&&this.setTicksAtTime(e,n)),this}stop(t){const e=this.toSeconds(t);if("stopped"===this._state.getValueAtTime(e)){const t=this._state.get(e);t&&t.time>0&&(this._tickOffset.cancel(t.time),this._state.cancel(t.time))}return this._state.cancel(e),this._state.setStateAtTime("stopped",e),this.setTicksAtTime(0,e),this}pause(t){const e=this.toSeconds(t);return"started"===this._state.getValueAtTime(e)&&this._state.setStateAtTime("paused",e),this}cancel(t){return t=this.toSeconds(t),this._state.cancel(t),this._tickOffset.cancel(t),this}getTicksAtTime(t){const e=this.toSeconds(t),n=this._state.getLastState("stopped",e),i={state:"paused",time:e};this._state.add(i);let s=n,o=0;return this._state.forEachBetween(n.time,e+this.sampleTime,(t=>{let e=s.time;const n=this._tickOffset.get(t.time);n&&n.time>=s.time&&(o=n.ticks,e=n.time),"started"===s.state&&"started"!==t.state&&(o+=this.frequency.getTicksAtTime(t.time)-this.frequency.getTicksAtTime(e)),s=t})),this._state.remove(i),o}get ticks(){return this.getTicksAtTime(this.now())}set ticks(t){this.setTicksAtTime(t,this.now())}get seconds(){return this.getSecondsAtTime(this.now())}set seconds(t){const e=this.now(),n=this.frequency.timeToTicks(t,e);this.setTicksAtTime(n,e)}getSecondsAtTime(t){t=this.toSeconds(t);const e=this._state.getLastState("stopped",t),n={state:"paused",time:t};this._state.add(n);let i=e,s=0;return this._state.forEachBetween(e.time,t+this.sampleTime,(t=>{let e=i.time;const n=this._tickOffset.get(t.time);n&&n.time>=i.time&&(s=n.seconds,e=n.time),"started"===i.state&&"started"!==t.state&&(s+=t.time-e),i=t})),this._state.remove(n),s}setTicksAtTime(t,e){return e=this.toSeconds(e),this._tickOffset.cancel(e),this._tickOffset.add({seconds:this.frequency.getDurationOfTicks(t,e),ticks:t,time:e}),this}getStateAtTime(t){return t=this.toSeconds(t),this._state.getValueAtTime(t)}getTimeOfTick(t,e=this.now()){const n=this._tickOffset.get(e),i=this._state.get(e),s=Math.max(n.time,i.time),o=this.frequency.getTicksAtTime(s)+t-n.ticks;return this.frequency.getTimeOfTick(o)}forEachTickBetween(t,e,n){let i=this._state.get(t);this._state.forEachBetween(t,e,(e=>{i&&"started"===i.state&&"started"!==e.state&&this.forEachTickBetween(Math.max(i.time,t),e.time-this.sampleTime,n),i=e}));let s=null;if(i&&"started"===i.state){const o=Math.max(i.time,t),r=this.frequency.getTicksAtTime(o),a=r-this.frequency.getTicksAtTime(i.time);let l=Math.ceil(a)-a;l=hs(l,1)?0:l;let c=this.frequency.getTimeOfTick(r+l);for(;c<e;){try{n(c,Math.round(this.getTicksAtTime(c)))}catch(t){s=t;break}c+=this.frequency.getDurationOfTicks(1,c)}}if(s)throw s;return this}dispose(){return super.dispose(),this._state.dispose(),this._tickOffset.dispose(),this.frequency.dispose(),this}}class Js extends qs{constructor(){super(is(Js.getDefaults(),arguments,["callback","frequency"])),this.name="Clock",this.callback=ws,this._lastUpdate=0,this._state=new Fs("stopped"),this._boundLoop=this._loop.bind(this);const t=is(Js.getDefaults(),arguments,["callback","frequency"]);this.callback=t.callback,this._tickSource=new Qs({context:this.context,frequency:t.frequency,units:t.units}),this._lastUpdate=0,this.frequency=this._tickSource.frequency,xs(this,"frequency"),this._state.setStateAtTime("stopped",0),this.context.on("tick",this._boundLoop)}static getDefaults(){return Object.assign(qs.getDefaults(),{callback:ws,frequency:1,units:"hertz"})}get state(){return this._state.getValueAtTime(this.now())}start(t,e){Vi(this.context);const n=this.toSeconds(t);return this.log("start",n),"started"!==this._state.getValueAtTime(n)&&(this._state.setStateAtTime("started",n),this._tickSource.start(n,e),n<this._lastUpdate&&this.emit("start",n,e)),this}stop(t){const e=this.toSeconds(t);return this.log("stop",e),this._state.cancel(e),this._state.setStateAtTime("stopped",e),this._tickSource.stop(e),e<this._lastUpdate&&this.emit("stop",e),this}pause(t){const e=this.toSeconds(t);return"started"===this._state.getValueAtTime(e)&&(this._state.setStateAtTime("paused",e),this._tickSource.pause(e),e<this._lastUpdate&&this.emit("pause",e)),this}get ticks(){return Math.ceil(this.getTicksAtTime(this.now()))}set ticks(t){this._tickSource.ticks=t}get seconds(){return this._tickSource.seconds}set seconds(t){this._tickSource.seconds=t}getSecondsAtTime(t){return this._tickSource.getSecondsAtTime(t)}setTicksAtTime(t,e){return this._tickSource.setTicksAtTime(t,e),this}getTimeOfTick(t,e=this.now()){return this._tickSource.getTimeOfTick(t,e)}getTicksAtTime(t){return this._tickSource.getTicksAtTime(t)}nextTickTime(t,e){const n=this.toSeconds(e),i=this.getTicksAtTime(n);return this._tickSource.getTimeOfTick(i+t,n)}_loop(){const t=this._lastUpdate,e=this.now();this._lastUpdate=e,this.log("loop",t,e),t!==e&&(this._state.forEachBetween(t,e,(t=>{switch(t.state){case"started":const e=this._tickSource.getTicksAtTime(t.time);this.emit("start",t.time,e);break;case"stopped":0!==t.time&&this.emit("stop",t.time);break;case"paused":this.emit("pause",t.time)}})),this._tickSource.forEachTickBetween(t,e,((t,e)=>{this.callback(t,e)})))}getStateAtTime(t){const e=this.toSeconds(t);return this._state.getValueAtTime(e)}dispose(){return super.dispose(),this.context.off("tick",this._boundLoop),this._tickSource.dispose(),this._state.dispose(),this}}vs.mixin(Js);class Ks extends rs{constructor(){super(),this.name="ToneAudioBuffers",this._buffers=new Map,this._loadingCount=0;const t=is(Ks.getDefaults(),arguments,["urls","onload","baseUrl"],"urls");this.baseUrl=t.baseUrl,Object.keys(t.urls).forEach((e=>{this._loadingCount++;const n=t.urls[e];this.add(e,n,this._bufferLoaded.bind(this,t.onload),t.onerror)}))}static getDefaults(){return{baseUrl:"",onerror:ws,onload:ws,urls:{}}}has(t){return this._buffers.has(t.toString())}get(t){return Di(this.has(t),`ToneAudioBuffers has no buffer named: ${t}`),this._buffers.get(t.toString())}_bufferLoaded(t){this._loadingCount--,0===this._loadingCount&&t&&t()}get loaded(){return Array.from(this._buffers).every((([t,e])=>e.loaded))}add(t,e,n=ws,i=ws){return Ui(e)?this._buffers.set(t.toString(),new Ts(this.baseUrl+e,n,i)):this._buffers.set(t.toString(),new Ts(e,n,i)),this}dispose(){return super.dispose(),this._buffers.forEach((t=>t.dispose())),this._buffers.clear(),this}}class to extends Bs{constructor(){super(...arguments),this.name="Ticks",this.defaultUnits="i"}_now(){return this.context.transport.ticks}_beatsToUnits(t){return this._getPPQ()*t}_secondsToUnits(t){return Math.floor(t/(60/this._getBpm())*this._getPPQ())}_ticksToUnits(t){return t}toTicks(){return this.valueOf()}toSeconds(){return this.valueOf()/this._getPPQ()*(60/this._getBpm())}}class eo extends qs{constructor(){super(...arguments),this.name="Draw",this.expiration=.25,this.anticipation=.008,this._events=new ps,this._boundDrawLoop=this._drawLoop.bind(this),this._animationFrame=-1}schedule(t,e){return this._events.add({callback:t,time:this.toSeconds(e)}),1===this._events.length&&(this._animationFrame=requestAnimationFrame(this._boundDrawLoop)),this}cancel(t){return this._events.cancel(this.toSeconds(t)),this}_drawLoop(){const t=this.context.currentTime;for(;this._events.length&&this._events.peek().time-this.anticipation<=t;){const e=this._events.shift();e&&t-e.time<=this.expiration&&e.callback()}this._events.length>0&&(this._animationFrame=requestAnimationFrame(this._boundDrawLoop))}dispose(){return super.dispose(),this._events.dispose(),cancelAnimationFrame(this._animationFrame),this}}fs((t=>{t.draw=new eo({context:t})})),gs((t=>{t.draw.dispose()}));class no extends rs{constructor(){super(...arguments),this.name="IntervalTimeline",this._root=null,this._length=0}add(t){Di(Fi(t.time),"Events must have a time property"),Di(Fi(t.duration),"Events must have a duration parameter"),t.time=t.time.valueOf();let e=new io(t.time,t.time+t.duration,t);for(null===this._root?this._root=e:this._root.insert(e),this._length++;null!==e;)e.updateHeight(),e.updateMax(),this._rebalance(e),e=e.parent;return this}remove(t){if(null!==this._root){const e=[];this._root.search(t.time,e);for(const n of e)if(n.event===t){this._removeNode(n),this._length--;break}}return this}get length(){return this._length}cancel(t){return this.forEachFrom(t,(t=>this.remove(t))),this}_setRoot(t){this._root=t,null!==this._root&&(this._root.parent=null)}_replaceNodeInParent(t,e){null!==t.parent?(t.isLeftChild()?t.parent.left=e:t.parent.right=e,this._rebalance(t.parent)):this._setRoot(e)}_removeNode(t){if(null===t.left&&null===t.right)this._replaceNodeInParent(t,null);else if(null===t.right)this._replaceNodeInParent(t,t.left);else if(null===t.left)this._replaceNodeInParent(t,t.right);else{let e,n=null;if(t.getBalance()>0)if(null===t.left.right)e=t.left,e.right=t.right,n=e;else{for(e=t.left.right;null!==e.right;)e=e.right;e.parent&&(e.parent.right=e.left,n=e.parent,e.left=t.left,e.right=t.right)}else if(null===t.right.left)e=t.right,e.left=t.left,n=e;else{for(e=t.right.left;null!==e.left;)e=e.left;e.parent&&(e.parent.left=e.right,n=e.parent,e.left=t.left,e.right=t.right)}null!==t.parent?t.isLeftChild()?t.parent.left=e:t.parent.right=e:this._setRoot(e),n&&this._rebalance(n)}t.dispose()}_rotateLeft(t){const e=t.parent,n=t.isLeftChild(),i=t.right;i&&(t.right=i.left,i.left=t),null!==e?n?e.left=i:e.right=i:this._setRoot(i)}_rotateRight(t){const e=t.parent,n=t.isLeftChild(),i=t.left;i&&(t.left=i.right,i.right=t),null!==e?n?e.left=i:e.right=i:this._setRoot(i)}_rebalance(t){const e=t.getBalance();e>1&&t.left?t.left.getBalance()<0?this._rotateLeft(t.left):this._rotateRight(t):e<-1&&t.right&&(t.right.getBalance()>0?this._rotateRight(t.right):this._rotateLeft(t))}get(t){if(null!==this._root){const e=[];if(this._root.search(t,e),e.length>0){let t=e[0];for(let n=1;n<e.length;n++)e[n].low>t.low&&(t=e[n]);return t.event}}return null}forEach(t){if(null!==this._root){const e=[];this._root.traverse((t=>e.push(t))),e.forEach((e=>{e.event&&t(e.event)}))}return this}forEachAtTime(t,e){if(null!==this._root){const n=[];this._root.search(t,n),n.forEach((t=>{t.event&&e(t.event)}))}return this}forEachFrom(t,e){if(null!==this._root){const n=[];this._root.searchAfter(t,n),n.forEach((t=>{t.event&&e(t.event)}))}return this}dispose(){return super.dispose(),null!==this._root&&this._root.traverse((t=>t.dispose())),this._root=null,this}}class io{constructor(t,e,n){this._left=null,this._right=null,this.parent=null,this.height=0,this.event=n,this.low=t,this.high=e,this.max=this.high}insert(t){t.low<=this.low?null===this.left?this.left=t:this.left.insert(t):null===this.right?this.right=t:this.right.insert(t)}search(t,e){t>this.max||(null!==this.left&&this.left.search(t,e),this.low<=t&&this.high>t&&e.push(this),this.low>t||null!==this.right&&this.right.search(t,e))}searchAfter(t,e){this.low>=t&&(e.push(this),null!==this.left&&this.left.searchAfter(t,e)),null!==this.right&&this.right.searchAfter(t,e)}traverse(t){t(this),null!==this.left&&this.left.traverse(t),null!==this.right&&this.right.traverse(t)}updateHeight(){null!==this.left&&null!==this.right?this.height=Math.max(this.left.height,this.right.height)+1:null!==this.right?this.height=this.right.height+1:null!==this.left?this.height=this.left.height+1:this.height=0}updateMax(){this.max=this.high,null!==this.left&&(this.max=Math.max(this.max,this.left.max)),null!==this.right&&(this.max=Math.max(this.max,this.right.max))}getBalance(){let t=0;return null!==this.left&&null!==this.right?t=this.left.height-this.right.height:null!==this.left?t=this.left.height+1:null!==this.right&&(t=-(this.right.height+1)),t}isLeftChild(){return null!==this.parent&&this.parent.left===this}get left(){return this._left}set left(t){this._left=t,null!==t&&(t.parent=this),this.updateHeight(),this.updateMax()}get right(){return this._right}set right(t){this._right=t,null!==t&&(t.parent=this),this.updateHeight(),this.updateMax()}dispose(){this.parent=null,this._left=null,this._right=null,this.event=null}}class so extends js{constructor(){super(is(so.getDefaults(),arguments,["volume"])),this.name="Volume";const t=is(so.getDefaults(),arguments,["volume"]);this.input=this.output=new Hs({context:this.context,gain:t.volume,units:"decibels"}),this.volume=this.output.gain,xs(this,"volume"),this._unmutedVolume=t.volume,this.mute=t.mute}static getDefaults(){return Object.assign(js.getDefaults(),{mute:!1,volume:0})}get mute(){return this.volume.value===-1/0}set mute(t){!this.mute&&t?(this._unmutedVolume=this.volume.value,this.volume.value=-1/0):this.mute&&!t&&(this.volume.value=this._unmutedVolume)}dispose(){return super.dispose(),this.input.dispose(),this.volume.dispose(),this}}class oo extends js{constructor(){super(is(oo.getDefaults(),arguments)),this.name="Destination",this.input=new so({context:this.context}),this.output=new Hs({context:this.context}),this.volume=this.input.volume;const t=is(oo.getDefaults(),arguments);Ws(this.input,this.output,this.context.rawContext.destination),this.mute=t.mute,this._internalChannels=[this.input,this.context.rawContext.destination,this.output]}static getDefaults(){return Object.assign(js.getDefaults(),{mute:!1,volume:0})}get mute(){return this.input.mute}set mute(t){this.input.mute=t}chain(...t){return this.input.disconnect(),t.unshift(this.input),t.push(this.output),Ws(...t),this}get maxChannelCount(){return this.context.rawContext.destination.maxChannelCount}dispose(){return super.dispose(),this.volume.dispose(),this}}fs((t=>{t.destination=new oo({context:t})})),gs((t=>{t.destination.dispose()}));class ro extends rs{constructor(t){super(),this.name="TimelineValue",this._timeline=new ps({memory:10}),this._initialValue=t}set(t,e){return this._timeline.add({value:t,time:e}),this}get(t){const e=this._timeline.get(t);return e?e.value:this._initialValue}}class ao{constructor(t,e){this.id=ao._eventId++;const n=Object.assign(ao.getDefaults(),e);this.transport=t,this.callback=n.callback,this._once=n.once,this.time=n.time}static getDefaults(){return{callback:ws,once:!1,time:0}}invoke(t){this.callback&&(this.callback(t),this._once&&this.transport.clear(this.id))}dispose(){return this.callback=void 0,this}}ao._eventId=0;class lo extends ao{constructor(t,e){super(t,e),this._currentId=-1,this._nextId=-1,this._nextTick=this.time,this._boundRestart=this._restart.bind(this);const n=Object.assign(lo.getDefaults(),e);this.duration=new to(t.context,n.duration).valueOf(),this._interval=new to(t.context,n.interval).valueOf(),this._nextTick=n.time,this.transport.on("start",this._boundRestart),this.transport.on("loopStart",this._boundRestart),this.context=this.transport.context,this._restart()}static getDefaults(){return Object.assign({},ao.getDefaults(),{duration:1/0,interval:1,once:!1})}invoke(t){this._createEvents(t),super.invoke(t)}_createEvents(t){const e=this.transport.getTicksAtTime(t);e>=this.time&&e>=this._nextTick&&this._nextTick+this._interval<this.time+this.duration&&(this._nextTick+=this._interval,this._currentId=this._nextId,this._nextId=this.transport.scheduleOnce(this.invoke.bind(this),new to(this.context,this._nextTick).toSeconds()))}_restart(t){this.transport.clear(this._currentId),this.transport.clear(this._nextId),this._nextTick=this.time;const e=this.transport.getTicksAtTime(t);e>this.time&&(this._nextTick=this.time+Math.ceil((e-this.time)/this._interval)*this._interval),this._currentId=this.transport.scheduleOnce(this.invoke.bind(this),new to(this.context,this._nextTick).toSeconds()),this._nextTick+=this._interval,this._nextId=this.transport.scheduleOnce(this.invoke.bind(this),new to(this.context,this._nextTick).toSeconds())}dispose(){return super.dispose(),this.transport.clear(this._currentId),this.transport.clear(this._nextId),this.transport.off("start",this._boundRestart),this.transport.off("loopStart",this._boundRestart),this}}class co extends qs{constructor(){super(is(co.getDefaults(),arguments)),this.name="Transport",this._loop=new ro(!1),this._loopStart=0,this._loopEnd=0,this._scheduledEvents={},this._timeline=new ps,this._repeatedEvents=new no,this._syncedSignals=[],this._swingAmount=0;const t=is(co.getDefaults(),arguments);this._ppq=t.ppq,this._clock=new Js({callback:this._processTick.bind(this),context:this.context,frequency:0,units:"bpm"}),this._bindClockEvents(),this.bpm=this._clock.frequency,this._clock.frequency.multiplier=t.ppq,this.bpm.setValueAtTime(t.bpm,0),xs(this,"bpm"),this._timeSignature=t.timeSignature,this._swingTicks=t.ppq/2}static getDefaults(){return Object.assign(qs.getDefaults(),{bpm:120,loopEnd:"4m",loopStart:0,ppq:192,swing:0,swingSubdivision:"8n",timeSignature:4})}_processTick(t,e){if(this._loop.get(t)&&e>=this._loopEnd&&(this.emit("loopEnd",t),this._clock.setTicksAtTime(this._loopStart,t),e=this._loopStart,this.emit("loopStart",t,this._clock.getSecondsAtTime(t)),this.emit("loop",t)),this._swingAmount>0&&e%this._ppq!=0&&e%(2*this._swingTicks)!=0){const n=e%(2*this._swingTicks)/(2*this._swingTicks),i=Math.sin(n*Math.PI)*this._swingAmount;t+=new to(this.context,2*this._swingTicks/3).toSeconds()*i}this._timeline.forEachAtTime(e,(e=>e.invoke(t)))}schedule(t,e){const n=new ao(this,{callback:t,time:new Bs(this.context,e).toTicks()});return this._addEvent(n,this._timeline)}scheduleRepeat(t,e,n,i=1/0){const s=new lo(this,{callback:t,duration:new Ds(this.context,i).toTicks(),interval:new Ds(this.context,e).toTicks(),time:new Bs(this.context,n).toTicks()});return this._addEvent(s,this._repeatedEvents)}scheduleOnce(t,e){const n=new ao(this,{callback:t,once:!0,time:new Bs(this.context,e).toTicks()});return this._addEvent(n,this._timeline)}clear(t){if(this._scheduledEvents.hasOwnProperty(t)){const e=this._scheduledEvents[t.toString()];e.timeline.remove(e.event),e.event.dispose(),delete this._scheduledEvents[t.toString()]}return this}_addEvent(t,e){return this._scheduledEvents[t.id.toString()]={event:t,timeline:e},e.add(t),t.id}cancel(t=0){const e=this.toTicks(t);return this._timeline.forEachFrom(e,(t=>this.clear(t.id))),this._repeatedEvents.forEachFrom(e,(t=>this.clear(t.id))),this}_bindClockEvents(){this._clock.on("start",((t,e)=>{e=new to(this.context,e).toSeconds(),this.emit("start",t,e)})),this._clock.on("stop",(t=>{this.emit("stop",t)})),this._clock.on("pause",(t=>{this.emit("pause",t)}))}get state(){return this._clock.getStateAtTime(this.now())}start(t,e){let n;return Fi(e)&&(n=this.toTicks(e)),this._clock.start(t,n),this}stop(t){return this._clock.stop(t),this}pause(t){return this._clock.pause(t),this}toggle(t){return t=this.toSeconds(t),"started"!==this._clock.getStateAtTime(t)?this.start(t):this.stop(t),this}get timeSignature(){return this._timeSignature}set timeSignature(t){Wi(t)&&(t=t[0]/t[1]*4),this._timeSignature=t}get loopStart(){return new Ds(this.context,this._loopStart,"i").toSeconds()}set loopStart(t){this._loopStart=this.toTicks(t)}get loopEnd(){return new Ds(this.context,this._loopEnd,"i").toSeconds()}set loopEnd(t){this._loopEnd=this.toTicks(t)}get loop(){return this._loop.get(this.now())}set loop(t){this._loop.set(t,this.now())}setLoopPoints(t,e){return this.loopStart=t,this.loopEnd=e,this}get swing(){return this._swingAmount}set swing(t){this._swingAmount=t}get swingSubdivision(){return new to(this.context,this._swingTicks).toNotation()}set swingSubdivision(t){this._swingTicks=this.toTicks(t)}get position(){const t=this.now(),e=this._clock.getTicksAtTime(t);return new to(this.context,e).toBarsBeatsSixteenths()}set position(t){const e=this.toTicks(t);this.ticks=e}get seconds(){return this._clock.seconds}set seconds(t){const e=this.now(),n=this._clock.frequency.timeToTicks(t,e);this.ticks=n}get progress(){if(this.loop){const t=this.now();return(this._clock.getTicksAtTime(t)-this._loopStart)/(this._loopEnd-this._loopStart)}return 0}get ticks(){return this._clock.ticks}set ticks(t){if(this._clock.ticks!==t){const e=this.now();if("started"===this.state){const n=this._clock.getTicksAtTime(e),i=e+this._clock.frequency.getDurationOfTicks(Math.ceil(n)-n,e);this.emit("stop",i),this._clock.setTicksAtTime(t,i),this.emit("start",i,this._clock.getSecondsAtTime(i))}else this._clock.setTicksAtTime(t,e)}}getTicksAtTime(t){return Math.round(this._clock.getTicksAtTime(t))}getSecondsAtTime(t){return this._clock.getSecondsAtTime(t)}get PPQ(){return this._clock.frequency.multiplier}set PPQ(t){this._clock.frequency.multiplier=t}nextSubdivision(t){if(t=this.toTicks(t),"started"!==this.state)return 0;{const e=this.now(),n=t-this.getTicksAtTime(e)%t;return this._clock.nextTickTime(n,e)}}syncSignal(t,e){if(!e){const n=this.now();if(0!==t.getValueAtTime(n)){const i=1/(60/this.bpm.getValueAtTime(n)/this.PPQ);e=t.getValueAtTime(n)/i}else e=0}const n=new Hs(e);return this.bpm.connect(n),n.connect(t._param),this._syncedSignals.push({initial:t.value,ratio:n,signal:t}),t.value=0,this}unsyncSignal(t){for(let e=this._syncedSignals.length-1;e>=0;e--){const n=this._syncedSignals[e];n.signal===t&&(n.ratio.dispose(),n.signal.value=n.initial,this._syncedSignals.splice(e,1))}return this}dispose(){return super.dispose(),this._clock.dispose(),bs(this,"bpm"),this._timeline.dispose(),this._repeatedEvents.dispose(),this}}vs.mixin(co),fs((t=>{t.transport=new co({context:t})})),gs((t=>{t.transport.dispose()}));class uo extends js{constructor(t){super(t),this.input=void 0,this._state=new Fs("stopped"),this._synced=!1,this._scheduled=[],this._syncedStart=ws,this._syncedStop=ws,this._state.memory=100,this._state.increasing=!0,this._volume=this.output=new so({context:this.context,mute:t.mute,volume:t.volume}),this.volume=this._volume.volume,xs(this,"volume"),this.onstop=t.onstop}static getDefaults(){return Object.assign(js.getDefaults(),{mute:!1,onstop:ws,volume:0})}get state(){return this._synced?"started"===this.context.transport.state?this._state.getValueAtTime(this.context.transport.seconds):"stopped":this._state.getValueAtTime(this.now())}get mute(){return this._volume.mute}set mute(t){this._volume.mute=t}_clampToCurrentTime(t){return this._synced?t:Math.max(t,this.context.currentTime)}start(t,e,n){let i=qi(t)&&this._synced?this.context.transport.seconds:this.toSeconds(t);if(i=this._clampToCurrentTime(i),this._synced||"started"!==this._state.getValueAtTime(i))if(this.log("start",i),this._state.setStateAtTime("started",i),this._synced){const t=this._state.get(i);t&&(t.offset=this.toSeconds(ss(e,0)),t.duration=n?this.toSeconds(n):void 0);const s=this.context.transport.schedule((t=>{this._start(t,e,n)}),i);this._scheduled.push(s),"started"===this.context.transport.state&&this.context.transport.getSecondsAtTime(this.immediate())>i&&this._syncedStart(this.now(),this.context.transport.seconds)}else Vi(this.context),this._start(i,e,n);else Di(ls(i,this._state.get(i).time),"Start time must be strictly greater than previous start time"),this._state.cancel(i),this._state.setStateAtTime("started",i),this.log("restart",i),this.restart(i,e,n);return this}stop(t){let e=qi(t)&&this._synced?this.context.transport.seconds:this.toSeconds(t);if(e=this._clampToCurrentTime(e),"started"===this._state.getValueAtTime(e)||Fi(this._state.getNextState("started",e))){if(this.log("stop",e),this._synced){const t=this.context.transport.schedule(this._stop.bind(this),e);this._scheduled.push(t)}else this._stop(e);this._state.cancel(e),this._state.setStateAtTime("stopped",e)}return this}restart(t,e,n){return t=this.toSeconds(t),"started"===this._state.getValueAtTime(t)&&(this._state.cancel(t),this._restart(t,e,n)),this}sync(){return this._synced||(this._synced=!0,this._syncedStart=(t,e)=>{if(e>0){const n=this._state.get(e);if(n&&"started"===n.state&&n.time!==e){const i=e-this.toSeconds(n.time);let s;n.duration&&(s=this.toSeconds(n.duration)-i),this._start(t,this.toSeconds(n.offset)+i,s)}}},this._syncedStop=t=>{const e=this.context.transport.getSecondsAtTime(Math.max(t-this.sampleTime,0));"started"===this._state.getValueAtTime(e)&&this._stop(t)},this.context.transport.on("start",this._syncedStart),this.context.transport.on("loopStart",this._syncedStart),this.context.transport.on("stop",this._syncedStop),this.context.transport.on("pause",this._syncedStop),this.context.transport.on("loopEnd",this._syncedStop)),this}unsync(){return this._synced&&(this.context.transport.off("stop",this._syncedStop),this.context.transport.off("pause",this._syncedStop),this.context.transport.off("loopEnd",this._syncedStop),this.context.transport.off("start",this._syncedStart),this.context.transport.off("loopStart",this._syncedStart)),this._synced=!1,this._scheduled.forEach((t=>this.context.transport.clear(t))),this._scheduled=[],this._state.cancel(0),this._stop(0),this}dispose(){return super.dispose(),this.onstop=ws,this.unsync(),this._volume.dispose(),this._state.dispose(),this}}class ho extends zs{constructor(){super(is(ho.getDefaults(),arguments,["url","onload"])),this.name="ToneBufferSource",this._source=this.context.createBufferSource(),this._internalChannels=[this._source],this._sourceStarted=!1,this._sourceStopped=!1;const t=is(ho.getDefaults(),arguments,["url","onload"]);Us(this._source,this._gainNode),this._source.onended=()=>this._stopSource(),this.playbackRate=new Ls({context:this.context,param:this._source.playbackRate,units:"positive",value:t.playbackRate}),this.loop=t.loop,this.loopStart=t.loopStart,this.loopEnd=t.loopEnd,this._buffer=new Ts(t.url,t.onload,t.onerror),this._internalChannels.push(this._source)}static getDefaults(){return Object.assign(zs.getDefaults(),{url:new Ts,loop:!1,loopEnd:0,loopStart:0,onload:ws,onerror:ws,playbackRate:1})}get fadeIn(){return this._fadeIn}set fadeIn(t){this._fadeIn=t}get fadeOut(){return this._fadeOut}set fadeOut(t){this._fadeOut=t}get curve(){return this._curve}set curve(t){this._curve=t}start(t,e,n,i=1){Di(this.buffer.loaded,"buffer is either not set or not loaded");const s=this.toSeconds(t);this._startGain(s,i),e=this.loop?ss(e,this.loopStart):ss(e,0);let o=Math.max(this.toSeconds(e),0);if(this.loop){const t=this.toSeconds(this.loopEnd)||this.buffer.duration,e=this.toSeconds(this.loopStart),n=t-e;cs(o,t)&&(o=(o-e)%n+e),hs(o,this.buffer.duration)&&(o=0)}if(this._source.buffer=this.buffer.get(),this._source.loopEnd=this.toSeconds(this.loopEnd)||this.buffer.duration,us(o,this.buffer.duration)&&(this._sourceStarted=!0,this._source.start(s,o)),Fi(n)){let t=this.toSeconds(n);t=Math.max(t,0),this.stop(s+t)}return this}_stopSource(t){!this._sourceStopped&&this._sourceStarted&&(this._sourceStopped=!0,this._source.stop(this.toSeconds(t)),this._onended())}get loopStart(){return this._source.loopStart}set loopStart(t){this._source.loopStart=this.toSeconds(t)}get loopEnd(){return this._source.loopEnd}set loopEnd(t){this._source.loopEnd=this.toSeconds(t)}get buffer(){return this._buffer}set buffer(t){this._buffer.set(t)}get loop(){return this._source.loop}set loop(t){this._source.loop=t,this._sourceStarted&&this.cancelStop()}dispose(){return super.dispose(),this._source.onended=null,this._source.disconnect(),this._buffer.dispose(),this.playbackRate.dispose(),this}}function po(t,e){return Yi(this,void 0,void 0,(function*(){const n=e/t.context.sampleRate,i=new Ss(1,n,t.context.sampleRate);return new t.constructor(Object.assign(t.get(),{frequency:2/n,detune:0,context:i})).toDestination().start(0),(yield i.render()).getChannelData(0)}))}class fo extends zs{constructor(){super(is(fo.getDefaults(),arguments,["frequency","type"])),this.name="ToneOscillatorNode",this._oscillator=this.context.createOscillator(),this._internalChannels=[this._oscillator];const t=is(fo.getDefaults(),arguments,["frequency","type"]);Us(this._oscillator,this._gainNode),this.type=t.type,this.frequency=new Ls({context:this.context,param:this._oscillator.frequency,units:"frequency",value:t.frequency}),this.detune=new Ls({context:this.context,param:this._oscillator.detune,units:"cents",value:t.detune}),xs(this,["frequency","detune"])}static getDefaults(){return Object.assign(zs.getDefaults(),{detune:0,frequency:440,type:"sine"})}start(t){const e=this.toSeconds(t);return this.log("start",e),this._startGain(e),this._oscillator.start(e),this}_stopSource(t){this._oscillator.stop(t)}setPeriodicWave(t){return this._oscillator.setPeriodicWave(t),this}get type(){return this._oscillator.type}set type(t){this._oscillator.type=t}dispose(){return super.dispose(),"started"===this.state&&this.stop(),this._oscillator.disconnect(),this.frequency.dispose(),this.detune.dispose(),this}}class mo extends uo{constructor(){super(is(mo.getDefaults(),arguments,["frequency","type"])),this.name="Oscillator",this._oscillator=null;const t=is(mo.getDefaults(),arguments,["frequency","type"]);this.frequency=new Xs({context:this.context,units:"frequency",value:t.frequency}),xs(this,"frequency"),this.detune=new Xs({context:this.context,units:"cents",value:t.detune}),xs(this,"detune"),this._partials=t.partials,this._partialCount=t.partialCount,this._type=t.type,t.partialCount&&"custom"!==t.type&&(this._type=this.baseType+t.partialCount.toString()),this.phase=t.phase}static getDefaults(){return Object.assign(uo.getDefaults(),{detune:0,frequency:440,partialCount:0,partials:[],phase:0,type:"sine"})}_start(t){const e=this.toSeconds(t),n=new fo({context:this.context,onended:()=>this.onstop(this)});this._oscillator=n,this._wave?this._oscillator.setPeriodicWave(this._wave):this._oscillator.type=this._type,this._oscillator.connect(this.output),this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),this._oscillator.start(e)}_stop(t){const e=this.toSeconds(t);this._oscillator&&this._oscillator.stop(e)}_restart(t){const e=this.toSeconds(t);return this.log("restart",e),this._oscillator&&this._oscillator.cancelStop(),this._state.cancel(e),this}syncFrequency(){return this.context.transport.syncSignal(this.frequency),this}unsyncFrequency(){return this.context.transport.unsyncSignal(this.frequency),this}_getCachedPeriodicWave(){if("custom"===this._type)return mo._periodicWaveCache.find((t=>{return t.phase===this._phase&&(e=t.partials,n=this._partials,e.length===n.length&&e.every(((t,e)=>n[e]===t)));var e,n}));{const t=mo._periodicWaveCache.find((t=>t.type===this._type&&t.phase===this._phase));return this._partialCount=t?t.partialCount:this._partialCount,t}}get type(){return this._type}set type(t){this._type=t;const e=-1!==["sine","square","sawtooth","triangle"].indexOf(t);if(0===this._phase&&e)this._wave=void 0,this._partialCount=0,null!==this._oscillator&&(this._oscillator.type=t);else{const e=this._getCachedPeriodicWave();if(Fi(e)){const{partials:t,wave:n}=e;this._wave=n,this._partials=t,null!==this._oscillator&&this._oscillator.setPeriodicWave(this._wave)}else{const[e,n]=this._getRealImaginary(t,this._phase),i=this.context.createPeriodicWave(e,n);this._wave=i,null!==this._oscillator&&this._oscillator.setPeriodicWave(this._wave),mo._periodicWaveCache.push({imag:n,partialCount:this._partialCount,partials:this._partials,phase:this._phase,real:e,type:this._type,wave:this._wave}),mo._periodicWaveCache.length>100&&mo._periodicWaveCache.shift()}}}get baseType(){return this._type.replace(this.partialCount.toString(),"")}set baseType(t){this.partialCount&&"custom"!==this._type&&"custom"!==t?this.type=t+this.partialCount:this.type=t}get partialCount(){return this._partialCount}set partialCount(t){Ri(t,0);let e=this._type;const n=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(this._type);if(n&&(e=n[1]),"custom"!==this._type)this.type=0===t?e:e+t.toString();else{const e=new Float32Array(t);this._partials.forEach(((t,n)=>e[n]=t)),this._partials=Array.from(e),this.type=this._type}}_getRealImaginary(t,e){let n=2048;const i=new Float32Array(n),s=new Float32Array(n);let o=1;if("custom"===t){if(o=this._partials.length+1,this._partialCount=this._partials.length,n=o,0===this._partials.length)return[i,s]}else{const e=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(t);e?(o=parseInt(e[2],10)+1,this._partialCount=parseInt(e[2],10),t=e[1],o=Math.max(o,2),n=o):this._partialCount=0,this._partials=[]}for(let r=1;r<n;++r){const n=2/(r*Math.PI);let a;switch(t){case"sine":a=r<=o?1:0,this._partials[r-1]=a;break;case"square":a=1&r?2*n:0,this._partials[r-1]=a;break;case"sawtooth":a=n*(1&r?1:-1),this._partials[r-1]=a;break;case"triangle":a=1&r?n*n*2*(r-1>>1&1?-1:1):0,this._partials[r-1]=a;break;case"custom":a=this._partials[r-1];break;default:throw new TypeError("Oscillator: invalid type: "+t)}0!==a?(i[r]=-a*Math.sin(e*r),s[r]=a*Math.cos(e*r)):(i[r]=0,s[r]=0)}return[i,s]}_inverseFFT(t,e,n){let i=0;const s=t.length;for(let o=0;o<s;o++)i+=t[o]*Math.cos(o*n)+e[o]*Math.sin(o*n);return i}getInitialValue(){const[t,e]=this._getRealImaginary(this._type,0);let n=0;const i=2*Math.PI;for(let s=0;s<32;s++)n=Math.max(this._inverseFFT(t,e,s/32*i),n);return s=-this._inverseFFT(t,e,this._phase)/n,-1,1,Math.max(Math.min(s,1),-1);var s}get partials(){return this._partials.slice(0,this.partialCount)}set partials(t){this._partials=t,this._partialCount=this._partials.length,t.length&&(this.type="custom")}get phase(){return this._phase*(180/Math.PI)}set phase(t){this._phase=t*Math.PI/180,this.type=this._type}asArray(t=1024){return Yi(this,void 0,void 0,(function*(){return po(this,t)}))}dispose(){return super.dispose(),null!==this._oscillator&&this._oscillator.dispose(),this._wave=void 0,this.frequency.dispose(),this.detune.dispose(),this}}mo._periodicWaveCache=[];class go extends js{constructor(){super(Object.assign(is(go.getDefaults(),arguments,["context"])))}connect(t,e=0,n=0){return Ys(this,t,e,n),this}}class vo extends go{constructor(){super(Object.assign(is(vo.getDefaults(),arguments,["mapping","length"]))),this.name="WaveShaper",this._shaper=this.context.createWaveShaper(),this.input=this._shaper,this.output=this._shaper;const t=is(vo.getDefaults(),arguments,["mapping","length"]);Wi(t.mapping)||t.mapping instanceof Float32Array?this.curve=Float32Array.from(t.mapping):"function"==typeof t.mapping&&this.setMap(t.mapping,t.length)}static getDefaults(){return Object.assign(Xs.getDefaults(),{length:1024})}setMap(t,e=1024){const n=new Float32Array(e);for(let i=0,s=e;i<s;i++){const e=i/(s-1)*2-1;n[i]=t(e,i)}return this.curve=n,this}get curve(){return this._shaper.curve}set curve(t){this._shaper.curve=t}get oversample(){return this._shaper.oversample}set oversample(t){Di(["none","2x","4x"].some((e=>e.includes(t))),"oversampling must be either 'none', '2x', or '4x'"),this._shaper.oversample=t}dispose(){return super.dispose(),this._shaper.disconnect(),this}}class yo extends go{constructor(){super(...arguments),this.name="AudioToGain",this._norm=new vo({context:this.context,mapping:t=>(t+1)/2}),this.input=this._norm,this.output=this._norm}dispose(){return super.dispose(),this._norm.dispose(),this}}class _o extends Xs{constructor(){super(Object.assign(is(_o.getDefaults(),arguments,["value"]))),this.name="Multiply",this.override=!1;const t=is(_o.getDefaults(),arguments,["value"]);this._mult=this.input=this.output=new Hs({context:this.context,minValue:t.minValue,maxValue:t.maxValue}),this.factor=this._param=this._mult.gain,this.factor.setValueAtTime(t.value,0)}static getDefaults(){return Object.assign(Xs.getDefaults(),{value:0})}dispose(){return super.dispose(),this._mult.dispose(),this}}class xo extends uo{constructor(){super(is(xo.getDefaults(),arguments,["frequency","type","modulationType"])),this.name="AMOscillator",this._modulationScale=new yo({context:this.context}),this._modulationNode=new Hs({context:this.context});const t=is(xo.getDefaults(),arguments,["frequency","type","modulationType"]);this._carrier=new mo({context:this.context,detune:t.detune,frequency:t.frequency,onstop:()=>this.onstop(this),phase:t.phase,type:t.type}),this.frequency=this._carrier.frequency,this.detune=this._carrier.detune,this._modulator=new mo({context:this.context,phase:t.phase,type:t.modulationType}),this.harmonicity=new _o({context:this.context,units:"positive",value:t.harmonicity}),this.frequency.chain(this.harmonicity,this._modulator.frequency),this._modulator.chain(this._modulationScale,this._modulationNode.gain),this._carrier.chain(this._modulationNode,this.output),xs(this,["frequency","detune","harmonicity"])}static getDefaults(){return Object.assign(mo.getDefaults(),{harmonicity:1,modulationType:"square"})}_start(t){this._modulator.start(t),this._carrier.start(t)}_stop(t){this._modulator.stop(t),this._carrier.stop(t)}_restart(t){this._modulator.restart(t),this._carrier.restart(t)}get type(){return this._carrier.type}set type(t){this._carrier.type=t}get baseType(){return this._carrier.baseType}set baseType(t){this._carrier.baseType=t}get partialCount(){return this._carrier.partialCount}set partialCount(t){this._carrier.partialCount=t}get modulationType(){return this._modulator.type}set modulationType(t){this._modulator.type=t}get phase(){return this._carrier.phase}set phase(t){this._carrier.phase=t,this._modulator.phase=t}get partials(){return this._carrier.partials}set partials(t){this._carrier.partials=t}asArray(t=1024){return Yi(this,void 0,void 0,(function*(){return po(this,t)}))}dispose(){return super.dispose(),this.frequency.dispose(),this.detune.dispose(),this.harmonicity.dispose(),this._carrier.dispose(),this._modulator.dispose(),this._modulationNode.dispose(),this._modulationScale.dispose(),this}}class bo extends uo{constructor(){super(is(bo.getDefaults(),arguments,["frequency","type","modulationType"])),this.name="FMOscillator",this._modulationNode=new Hs({context:this.context,gain:0});const t=is(bo.getDefaults(),arguments,["frequency","type","modulationType"]);this._carrier=new mo({context:this.context,detune:t.detune,frequency:0,onstop:()=>this.onstop(this),phase:t.phase,type:t.type}),this.detune=this._carrier.detune,this.frequency=new Xs({context:this.context,units:"frequency",value:t.frequency}),this._modulator=new mo({context:this.context,phase:t.phase,type:t.modulationType}),this.harmonicity=new _o({context:this.context,units:"positive",value:t.harmonicity}),this.modulationIndex=new _o({context:this.context,units:"positive",value:t.modulationIndex}),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.frequency.chain(this.modulationIndex,this._modulationNode),this._modulator.connect(this._modulationNode.gain),this._modulationNode.connect(this._carrier.frequency),this._carrier.connect(this.output),this.detune.connect(this._modulator.detune),xs(this,["modulationIndex","frequency","detune","harmonicity"])}static getDefaults(){return Object.assign(mo.getDefaults(),{harmonicity:1,modulationIndex:2,modulationType:"square"})}_start(t){this._modulator.start(t),this._carrier.start(t)}_stop(t){this._modulator.stop(t),this._carrier.stop(t)}_restart(t){return this._modulator.restart(t),this._carrier.restart(t),this}get type(){return this._carrier.type}set type(t){this._carrier.type=t}get baseType(){return this._carrier.baseType}set baseType(t){this._carrier.baseType=t}get partialCount(){return this._carrier.partialCount}set partialCount(t){this._carrier.partialCount=t}get modulationType(){return this._modulator.type}set modulationType(t){this._modulator.type=t}get phase(){return this._carrier.phase}set phase(t){this._carrier.phase=t,this._modulator.phase=t}get partials(){return this._carrier.partials}set partials(t){this._carrier.partials=t}asArray(t=1024){return Yi(this,void 0,void 0,(function*(){return po(this,t)}))}dispose(){return super.dispose(),this.frequency.dispose(),this.harmonicity.dispose(),this._carrier.dispose(),this._modulator.dispose(),this._modulationNode.dispose(),this.modulationIndex.dispose(),this}}class wo extends uo{constructor(){super(is(wo.getDefaults(),arguments,["frequency","width"])),this.name="PulseOscillator",this._widthGate=new Hs({context:this.context,gain:0}),this._thresh=new vo({context:this.context,mapping:t=>t<=0?-1:1});const t=is(wo.getDefaults(),arguments,["frequency","width"]);this.width=new Xs({context:this.context,units:"audioRange",value:t.width}),this._triangle=new mo({context:this.context,detune:t.detune,frequency:t.frequency,onstop:()=>this.onstop(this),phase:t.phase,type:"triangle"}),this.frequency=this._triangle.frequency,this.detune=this._triangle.detune,this._triangle.chain(this._thresh,this.output),this.width.chain(this._widthGate,this._thresh),xs(this,["width","frequency","detune"])}static getDefaults(){return Object.assign(uo.getDefaults(),{detune:0,frequency:440,phase:0,type:"pulse",width:.2})}_start(t){t=this.toSeconds(t),this._triangle.start(t),this._widthGate.gain.setValueAtTime(1,t)}_stop(t){t=this.toSeconds(t),this._triangle.stop(t),this._widthGate.gain.cancelScheduledValues(t),this._widthGate.gain.setValueAtTime(0,t)}_restart(t){this._triangle.restart(t),this._widthGate.gain.cancelScheduledValues(t),this._widthGate.gain.setValueAtTime(1,t)}get phase(){return this._triangle.phase}set phase(t){this._triangle.phase=t}get type(){return"pulse"}get baseType(){return"pulse"}get partials(){return[]}get partialCount(){return 0}set carrierType(t){this._triangle.type=t}asArray(t=1024){return Yi(this,void 0,void 0,(function*(){return po(this,t)}))}dispose(){return super.dispose(),this._triangle.dispose(),this.width.dispose(),this._widthGate.dispose(),this._thresh.dispose(),this}}class To extends uo{constructor(){super(is(To.getDefaults(),arguments,["frequency","type","spread"])),this.name="FatOscillator",this._oscillators=[];const t=is(To.getDefaults(),arguments,["frequency","type","spread"]);this.frequency=new Xs({context:this.context,units:"frequency",value:t.frequency}),this.detune=new Xs({context:this.context,units:"cents",value:t.detune}),this._spread=t.spread,this._type=t.type,this._phase=t.phase,this._partials=t.partials,this._partialCount=t.partialCount,this.count=t.count,xs(this,["frequency","detune"])}static getDefaults(){return Object.assign(mo.getDefaults(),{count:3,spread:20,type:"sawtooth"})}_start(t){t=this.toSeconds(t),this._forEach((e=>e.start(t)))}_stop(t){t=this.toSeconds(t),this._forEach((e=>e.stop(t)))}_restart(t){this._forEach((e=>e.restart(t)))}_forEach(t){for(let e=0;e<this._oscillators.length;e++)t(this._oscillators[e],e)}get type(){return this._type}set type(t){this._type=t,this._forEach((e=>e.type=t))}get spread(){return this._spread}set spread(t){if(this._spread=t,this._oscillators.length>1){const e=-t/2,n=t/(this._oscillators.length-1);this._forEach(((t,i)=>t.detune.value=e+n*i))}}get count(){return this._oscillators.length}set count(t){if(Ri(t,1),this._oscillators.length!==t){this._forEach((t=>t.dispose())),this._oscillators=[];for(let e=0;e<t;e++){const n=new mo({context:this.context,volume:-6-1.1*t,type:this._type,phase:this._phase+e/t*360,partialCount:this._partialCount,onstop:0===e?()=>this.onstop(this):ws});"custom"===this.type&&(n.partials=this._partials),this.frequency.connect(n.frequency),this.detune.connect(n.detune),n.detune.overridden=!1,n.connect(this.output),this._oscillators[e]=n}this.spread=this._spread,"started"===this.state&&this._forEach((t=>t.start()))}}get phase(){return this._phase}set phase(t){this._phase=t,this._forEach(((t,e)=>t.phase=this._phase+e/this.count*360))}get baseType(){return this._oscillators[0].baseType}set baseType(t){this._forEach((e=>e.baseType=t)),this._type=this._oscillators[0].type}get partials(){return this._oscillators[0].partials}set partials(t){this._partials=t,this._partialCount=this._partials.length,t.length&&(this._type="custom",this._forEach((e=>e.partials=t)))}get partialCount(){return this._oscillators[0].partialCount}set partialCount(t){this._partialCount=t,this._forEach((e=>e.partialCount=t)),this._type=this._oscillators[0].type}asArray(t=1024){return Yi(this,void 0,void 0,(function*(){return po(this,t)}))}dispose(){return super.dispose(),this.frequency.dispose(),this.detune.dispose(),this._forEach((t=>t.dispose())),this}}class So extends uo{constructor(){super(is(So.getDefaults(),arguments,["frequency","modulationFrequency"])),this.name="PWMOscillator",this.sourceType="pwm",this._scale=new _o({context:this.context,value:2});const t=is(So.getDefaults(),arguments,["frequency","modulationFrequency"]);this._pulse=new wo({context:this.context,frequency:t.modulationFrequency}),this._pulse.carrierType="sine",this.modulationFrequency=this._pulse.frequency,this._modulator=new mo({context:this.context,detune:t.detune,frequency:t.frequency,onstop:()=>this.onstop(this),phase:t.phase}),this.frequency=this._modulator.frequency,this.detune=this._modulator.detune,this._modulator.chain(this._scale,this._pulse.width),this._pulse.connect(this.output),xs(this,["modulationFrequency","frequency","detune"])}static getDefaults(){return Object.assign(uo.getDefaults(),{detune:0,frequency:440,modulationFrequency:.4,phase:0,type:"pwm"})}_start(t){t=this.toSeconds(t),this._modulator.start(t),this._pulse.start(t)}_stop(t){t=this.toSeconds(t),this._modulator.stop(t),this._pulse.stop(t)}_restart(t){this._modulator.restart(t),this._pulse.restart(t)}get type(){return"pwm"}get baseType(){return"pwm"}get partials(){return[]}get partialCount(){return 0}get phase(){return this._modulator.phase}set phase(t){this._modulator.phase=t}asArray(t=1024){return Yi(this,void 0,void 0,(function*(){return po(this,t)}))}dispose(){return super.dispose(),this._pulse.dispose(),this._scale.dispose(),this._modulator.dispose(),this}}const Co={am:xo,fat:To,fm:bo,oscillator:mo,pulse:wo,pwm:So};class Ao extends uo{constructor(){super(is(Ao.getDefaults(),arguments,["frequency","type"])),this.name="OmniOscillator";const t=is(Ao.getDefaults(),arguments,["frequency","type"]);this.frequency=new Xs({context:this.context,units:"frequency",value:t.frequency}),this.detune=new Xs({context:this.context,units:"cents",value:t.detune}),xs(this,["frequency","detune"]),this.set(t)}static getDefaults(){return Object.assign(mo.getDefaults(),bo.getDefaults(),xo.getDefaults(),To.getDefaults(),wo.getDefaults(),So.getDefaults())}_start(t){this._oscillator.start(t)}_stop(t){this._oscillator.stop(t)}_restart(t){return this._oscillator.restart(t),this}get type(){let t="";return["am","fm","fat"].some((t=>this._sourceType===t))&&(t=this._sourceType),t+this._oscillator.type}set type(t){"fm"===t.substr(0,2)?(this._createNewOscillator("fm"),this._oscillator=this._oscillator,this._oscillator.type=t.substr(2)):"am"===t.substr(0,2)?(this._createNewOscillator("am"),this._oscillator=this._oscillator,this._oscillator.type=t.substr(2)):"fat"===t.substr(0,3)?(this._createNewOscillator("fat"),this._oscillator=this._oscillator,this._oscillator.type=t.substr(3)):"pwm"===t?(this._createNewOscillator("pwm"),this._oscillator=this._oscillator):"pulse"===t?this._createNewOscillator("pulse"):(this._createNewOscillator("oscillator"),this._oscillator=this._oscillator,this._oscillator.type=t)}get partials(){return this._oscillator.partials}set partials(t){this._getOscType(this._oscillator,"pulse")||this._getOscType(this._oscillator,"pwm")||(this._oscillator.partials=t)}get partialCount(){return this._oscillator.partialCount}set partialCount(t){this._getOscType(this._oscillator,"pulse")||this._getOscType(this._oscillator,"pwm")||(this._oscillator.partialCount=t)}set(t){return Reflect.has(t,"type")&&t.type&&(this.type=t.type),super.set(t),this}_createNewOscillator(t){if(t!==this._sourceType){this._sourceType=t;const e=Co[t],n=this.now();if(this._oscillator){const t=this._oscillator;t.stop(n),this.context.setTimeout((()=>t.dispose()),this.blockTime)}this._oscillator=new e({context:this.context}),this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),this._oscillator.connect(this.output),this._oscillator.onstop=()=>this.onstop(this),"started"===this.state&&this._oscillator.start(n)}}get phase(){return this._oscillator.phase}set phase(t){this._oscillator.phase=t}get sourceType(){return this._sourceType}set sourceType(t){let e="sine";"pwm"!==this._oscillator.type&&"pulse"!==this._oscillator.type&&(e=this._oscillator.type),"fm"===t?this.type="fm"+e:"am"===t?this.type="am"+e:"fat"===t?this.type="fat"+e:"oscillator"===t?this.type=e:"pulse"===t?this.type="pulse":"pwm"===t&&(this.type="pwm")}_getOscType(t,e){return t instanceof Co[e]}get baseType(){return this._oscillator.baseType}set baseType(t){this._getOscType(this._oscillator,"pulse")||this._getOscType(this._oscillator,"pwm")||"pulse"===t||"pwm"===t||(this._oscillator.baseType=t)}get width(){return this._getOscType(this._oscillator,"pulse")?this._oscillator.width:void 0}get count(){return this._getOscType(this._oscillator,"fat")?this._oscillator.count:void 0}set count(t){this._getOscType(this._oscillator,"fat")&&Li(t)&&(this._oscillator.count=t)}get spread(){return this._getOscType(this._oscillator,"fat")?this._oscillator.spread:void 0}set spread(t){this._getOscType(this._oscillator,"fat")&&Li(t)&&(this._oscillator.spread=t)}get modulationType(){return this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am")?this._oscillator.modulationType:void 0}set modulationType(t){(this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am"))&&Ui(t)&&(this._oscillator.modulationType=t)}get modulationIndex(){return this._getOscType(this._oscillator,"fm")?this._oscillator.modulationIndex:void 0}get harmonicity(){return this._getOscType(this._oscillator,"fm")||this._getOscType(this._oscillator,"am")?this._oscillator.harmonicity:void 0}get modulationFrequency(){return this._getOscType(this._oscillator,"pwm")?this._oscillator.modulationFrequency:void 0}asArray(t=1024){return Yi(this,void 0,void 0,(function*(){return po(this,t)}))}dispose(){return super.dispose(),this.detune.dispose(),this.frequency.dispose(),this._oscillator.dispose(),this}}function ko(t,e=1/0){const n=new WeakMap;return function(i,s){Reflect.defineProperty(i,s,{configurable:!0,enumerable:!0,get:function(){return n.get(this)},set:function(i){Ri(i,t,e),n.set(this,i)}})}}function Mo(t,e=1/0){const n=new WeakMap;return function(i,s){Reflect.defineProperty(i,s,{configurable:!0,enumerable:!0,get:function(){return n.get(this)},set:function(i){Ri(this.toSeconds(i),t,e),n.set(this,i)}})}}class Oo extends uo{constructor(){super(is(Oo.getDefaults(),arguments,["url","onload"])),this.name="Player",this._activeSources=new Set;const t=is(Oo.getDefaults(),arguments,["url","onload"]);this._buffer=new Ts({onload:this._onload.bind(this,t.onload),onerror:t.onerror,reverse:t.reverse,url:t.url}),this.autostart=t.autostart,this._loop=t.loop,this._loopStart=t.loopStart,this._loopEnd=t.loopEnd,this._playbackRate=t.playbackRate,this.fadeIn=t.fadeIn,this.fadeOut=t.fadeOut}static getDefaults(){return Object.assign(uo.getDefaults(),{autostart:!1,fadeIn:0,fadeOut:0,loop:!1,loopEnd:0,loopStart:0,onload:ws,onerror:ws,playbackRate:1,reverse:!1})}load(t){return Yi(this,void 0,void 0,(function*(){return yield this._buffer.load(t),this._onload(),this}))}_onload(t=ws){t(),this.autostart&&this.start()}_onSourceEnd(t){this.onstop(this),this._activeSources.delete(t),0!==this._activeSources.size||this._synced||"started"!==this._state.getValueAtTime(this.now())||(this._state.cancel(this.now()),this._state.setStateAtTime("stopped",this.now()))}start(t,e,n){return super.start(t,e,n),this}_start(t,e,n){e=this._loop?ss(e,this._loopStart):ss(e,0);const i=this.toSeconds(e),s=n;n=ss(n,Math.max(this._buffer.duration-i,0));let o=this.toSeconds(n);o/=this._playbackRate,t=this.toSeconds(t);const r=new ho({url:this._buffer,context:this.context,fadeIn:this.fadeIn,fadeOut:this.fadeOut,loop:this._loop,loopEnd:this._loopEnd,loopStart:this._loopStart,onended:this._onSourceEnd.bind(this),playbackRate:this._playbackRate}).connect(this.output);this._loop||this._synced||(this._state.cancel(t+o),this._state.setStateAtTime("stopped",t+o,{implicitEnd:!0})),this._activeSources.add(r),this._loop&&qi(s)?r.start(t,i):r.start(t,i,o-this.toSeconds(this.fadeOut))}_stop(t){const e=this.toSeconds(t);this._activeSources.forEach((t=>t.stop(e)))}restart(t,e,n){return super.restart(t,e,n),this}_restart(t,e,n){this._stop(t),this._start(t,e,n)}seek(t,e){const n=this.toSeconds(e);if("started"===this._state.getValueAtTime(n)){const e=this.toSeconds(t);this._stop(n),this._start(n,e)}return this}setLoopPoints(t,e){return this.loopStart=t,this.loopEnd=e,this}get loopStart(){return this._loopStart}set loopStart(t){this._loopStart=t,this.buffer.loaded&&Ri(this.toSeconds(t),0,this.buffer.duration),this._activeSources.forEach((e=>{e.loopStart=t}))}get loopEnd(){return this._loopEnd}set loopEnd(t){this._loopEnd=t,this.buffer.loaded&&Ri(this.toSeconds(t),0,this.buffer.duration),this._activeSources.forEach((e=>{e.loopEnd=t}))}get buffer(){return this._buffer}set buffer(t){this._buffer.set(t)}get loop(){return this._loop}set loop(t){if(this._loop!==t&&(this._loop=t,this._activeSources.forEach((e=>{e.loop=t})),t)){const t=this._state.getNextState("stopped",this.now());t&&this._state.cancel(t.time)}}get playbackRate(){return this._playbackRate}set playbackRate(t){this._playbackRate=t;const e=this.now(),n=this._state.getNextState("stopped",e);n&&n.implicitEnd&&(this._state.cancel(n.time),this._activeSources.forEach((t=>t.cancelStop()))),this._activeSources.forEach((n=>{n.playbackRate.setValueAtTime(t,e)}))}get reverse(){return this._buffer.reverse}set reverse(t){this._buffer.reverse=t}get loaded(){return this._buffer.loaded}dispose(){return super.dispose(),this._activeSources.forEach((t=>t.dispose())),this._activeSources.clear(),this._buffer.dispose(),this}}Xi([Mo(0)],Oo.prototype,"fadeIn",void 0),Xi([Mo(0)],Oo.prototype,"fadeOut",void 0);class Io extends js{constructor(){super(is(Io.getDefaults(),arguments,["attack","decay","sustain","release"])),this.name="Envelope",this._sig=new Xs({context:this.context,value:0}),this.output=this._sig,this.input=void 0;const t=is(Io.getDefaults(),arguments,["attack","decay","sustain","release"]);this.attack=t.attack,this.decay=t.decay,this.sustain=t.sustain,this.release=t.release,this.attackCurve=t.attackCurve,this.releaseCurve=t.releaseCurve,this.decayCurve=t.decayCurve}static getDefaults(){return Object.assign(js.getDefaults(),{attack:.01,attackCurve:"linear",decay:.1,decayCurve:"exponential",release:1,releaseCurve:"exponential",sustain:.5})}get value(){return this.getValueAtTime(this.now())}_getCurve(t,e){if(Ui(t))return t;{let n;for(n in Eo)if(Eo[n][e]===t)return n;return t}}_setCurve(t,e,n){if(Ui(n)&&Reflect.has(Eo,n)){const i=Eo[n];ji(i)?"_decayCurve"!==t&&(this[t]=i[e]):this[t]=i}else{if(!Wi(n)||"_decayCurve"===t)throw new Error("Envelope: invalid curve: "+n);this[t]=n}}get attackCurve(){return this._getCurve(this._attackCurve,"In")}set attackCurve(t){this._setCurve("_attackCurve","In",t)}get releaseCurve(){return this._getCurve(this._releaseCurve,"Out")}set releaseCurve(t){this._setCurve("_releaseCurve","Out",t)}get decayCurve(){return this._decayCurve}set decayCurve(t){Di(["linear","exponential"].some((e=>e===t)),`Invalid envelope curve: ${t}`),this._decayCurve=t}triggerAttack(t,e=1){this.log("triggerAttack",t,e),t=this.toSeconds(t);let n=this.toSeconds(this.attack);const i=this.toSeconds(this.decay),s=this.getValueAtTime(t);if(s>0&&(n=(1-s)/(1/n)),n<this.sampleTime)this._sig.cancelScheduledValues(t),this._sig.setValueAtTime(e,t);else if("linear"===this._attackCurve)this._sig.linearRampTo(e,n,t);else if("exponential"===this._attackCurve)this._sig.targetRampTo(e,n,t);else{this._sig.cancelAndHoldAtTime(t);let i=this._attackCurve;for(let t=1;t<i.length;t++)if(i[t-1]<=s&&s<=i[t]){i=this._attackCurve.slice(t),i[0]=s;break}this._sig.setValueCurveAtTime(i,t,n,e)}if(i&&this.sustain<1){const s=e*this.sustain,o=t+n;this.log("decay",o),"linear"===this._decayCurve?this._sig.linearRampToValueAtTime(s,i+o):this._sig.exponentialApproachValueAtTime(s,o,i)}return this}triggerRelease(t){this.log("triggerRelease",t),t=this.toSeconds(t);const e=this.getValueAtTime(t);if(e>0){const n=this.toSeconds(this.release);n<this.sampleTime?this._sig.setValueAtTime(0,t):"linear"===this._releaseCurve?this._sig.linearRampTo(0,n,t):"exponential"===this._releaseCurve?this._sig.targetRampTo(0,n,t):(Di(Wi(this._releaseCurve),"releaseCurve must be either 'linear', 'exponential' or an array"),this._sig.cancelAndHoldAtTime(t),this._sig.setValueCurveAtTime(this._releaseCurve,t,n,e))}return this}getValueAtTime(t){return this._sig.getValueAtTime(t)}triggerAttackRelease(t,e,n=1){return e=this.toSeconds(e),this.triggerAttack(e,n),this.triggerRelease(e+this.toSeconds(t)),this}cancel(t){return this._sig.cancelScheduledValues(this.toSeconds(t)),this}connect(t,e=0,n=0){return Ys(this,t,e,n),this}asArray(t=1024){return Yi(this,void 0,void 0,(function*(){const e=t/this.context.sampleRate,n=new Ss(1,e,this.context.sampleRate),i=this.toSeconds(this.attack)+this.toSeconds(this.decay),s=i+this.toSeconds(this.release),o=.1*s,r=s+o,a=new this.constructor(Object.assign(this.get(),{attack:e*this.toSeconds(this.attack)/r,decay:e*this.toSeconds(this.decay)/r,release:e*this.toSeconds(this.release)/r,context:n}));return a._sig.toDestination(),a.triggerAttackRelease(e*(i+o)/r,0),(yield n.render()).getChannelData(0)}))}dispose(){return super.dispose(),this._sig.dispose(),this}}Xi([Mo(0)],Io.prototype,"attack",void 0),Xi([Mo(0)],Io.prototype,"decay",void 0),Xi([ko(0,1)],Io.prototype,"sustain",void 0),Xi([Mo(0)],Io.prototype,"release",void 0);const Eo=(()=>{const t=128;let e,n;const i=[];for(e=0;e<t;e++)i[e]=Math.sin(e/127*(Math.PI/2));const s=[];for(e=0;e<127;e++){n=e/127;const t=Math.sin(n*(2*Math.PI)*6.4-Math.PI/2)+1;s[e]=t/10+.83*n}s[127]=1;const o=[];for(e=0;e<t;e++)o[e]=Math.ceil(e/127*5)/5;const r=[];for(e=0;e<t;e++)n=e/127,r[e]=.5*(1-Math.cos(Math.PI*n));const a=[];for(e=0;e<t;e++){n=e/127;const t=4*Math.pow(n,3)+.2,i=Math.cos(t*Math.PI*2*n);a[e]=Math.abs(i*(1-n))}function l(t){const e=new Array(t.length);for(let n=0;n<t.length;n++)e[n]=1-t[n];return e}return{bounce:{In:l(a),Out:a},cosine:{In:i,Out:(c=i,c.slice(0).reverse())},exponential:"exponential",linear:"linear",ripple:{In:s,Out:l(s)},sine:{In:r,Out:l(r)},step:{In:o,Out:l(o)}};var c})();class Po extends js{constructor(){super(is(Po.getDefaults(),arguments)),this._scheduledEvents=[],this._synced=!1,this._original_triggerAttack=this.triggerAttack,this._original_triggerRelease=this.triggerRelease;const t=is(Po.getDefaults(),arguments);this._volume=this.output=new so({context:this.context,volume:t.volume}),this.volume=this._volume.volume,xs(this,"volume")}static getDefaults(){return Object.assign(js.getDefaults(),{volume:0})}sync(){return this._syncState()&&(this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",0)),this}_syncState(){let t=!1;return this._synced||(this._synced=!0,t=!0),t}_syncMethod(t,e){const n=this["_original_"+t]=this[t];this[t]=(...t)=>{const i=t[e],s=this.context.transport.schedule((i=>{t[e]=i,n.apply(this,t)}),i);this._scheduledEvents.push(s)}}unsync(){return this._scheduledEvents.forEach((t=>this.context.transport.clear(t))),this._scheduledEvents=[],this._synced&&(this._synced=!1,this.triggerAttack=this._original_triggerAttack,this.triggerRelease=this._original_triggerRelease),this}triggerAttackRelease(t,e,n,i){const s=this.toSeconds(n),o=this.toSeconds(e);return this.triggerAttack(t,s,i),this.triggerRelease(s+o),this}dispose(){return super.dispose(),this._volume.dispose(),this.unsync(),this._scheduledEvents=[],this}}class Do extends Po{constructor(){super(is(Do.getDefaults(),arguments));const t=is(Do.getDefaults(),arguments);this.portamento=t.portamento,this.onsilence=t.onsilence}static getDefaults(){return Object.assign(Po.getDefaults(),{detune:0,onsilence:ws,portamento:0})}triggerAttack(t,e,n=1){this.log("triggerAttack",t,e,n);const i=this.toSeconds(e);return this._triggerEnvelopeAttack(i,n),this.setNote(t,i),this}triggerRelease(t){this.log("triggerRelease",t);const e=this.toSeconds(t);return this._triggerEnvelopeRelease(e),this}setNote(t,e){const n=this.toSeconds(e),i=t instanceof Rs?t.toFrequency():t;if(this.portamento>0&&this.getLevelAtTime(n)>.05){const t=this.toSeconds(this.portamento);this.frequency.exponentialRampTo(i,t,n)}else this.frequency.setValueAtTime(i,n);return this}}Xi([Mo(0)],Do.prototype,"portamento",void 0);class Ro extends Io{constructor(){super(is(Ro.getDefaults(),arguments,["attack","decay","sustain","release"])),this.name="AmplitudeEnvelope",this._gainNode=new Hs({context:this.context,gain:0}),this.output=this._gainNode,this.input=this._gainNode,this._sig.connect(this._gainNode.gain),this.output=this._gainNode,this.input=this._gainNode}dispose(){return super.dispose(),this._gainNode.dispose(),this}}class Vo extends Do{constructor(){super(is(Vo.getDefaults(),arguments)),this.name="Synth";const t=is(Vo.getDefaults(),arguments);this.oscillator=new Ao(Object.assign({context:this.context,detune:t.detune,onstop:()=>this.onsilence(this)},t.oscillator)),this.frequency=this.oscillator.frequency,this.detune=this.oscillator.detune,this.envelope=new Ro(Object.assign({context:this.context},t.envelope)),this.oscillator.chain(this.envelope,this.output),xs(this,["oscillator","frequency","detune","envelope"])}static getDefaults(){return Object.assign(Do.getDefaults(),{envelope:Object.assign(os(Io.getDefaults(),Object.keys(js.getDefaults())),{attack:.005,decay:.1,release:1,sustain:.3}),oscillator:Object.assign(os(Ao.getDefaults(),[...Object.keys(uo.getDefaults()),"frequency","detune"]),{type:"triangle"})})}_triggerEnvelopeAttack(t,e){if(this.envelope.triggerAttack(t,e),this.oscillator.start(t),0===this.envelope.sustain){const e=this.toSeconds(this.envelope.attack),n=this.toSeconds(this.envelope.decay);this.oscillator.stop(t+e+n)}}_triggerEnvelopeRelease(t){this.envelope.triggerRelease(t),this.oscillator.stop(t+this.toSeconds(this.envelope.release))}getLevelAtTime(t){return t=this.toSeconds(t),this.envelope.getValueAtTime(t)}dispose(){return super.dispose(),this.oscillator.dispose(),this.envelope.dispose(),this}}class No extends Vo{constructor(){super(is(No.getDefaults(),arguments)),this.name="MembraneSynth",this.portamento=0;const t=is(No.getDefaults(),arguments);this.pitchDecay=t.pitchDecay,this.octaves=t.octaves,xs(this,["oscillator","envelope"])}static getDefaults(){return ns(Do.getDefaults(),Vo.getDefaults(),{envelope:{attack:.001,attackCurve:"exponential",decay:.4,release:1.4,sustain:.01},octaves:10,oscillator:{type:"sine"},pitchDecay:.05})}setNote(t,e){const n=this.toSeconds(e),i=this.toFrequency(t instanceof Rs?t.toFrequency():t),s=i*this.octaves;return this.oscillator.frequency.setValueAtTime(s,n),this.oscillator.frequency.exponentialRampToValueAtTime(i,n+this.toSeconds(this.pitchDecay)),this}dispose(){return super.dispose(),this}}Xi([ko(0)],No.prototype,"octaves",void 0),Xi([Mo(0)],No.prototype,"pitchDecay",void 0);const Bo=new Set;function qo(t){Bo.add(t)}function Fo(t,e){const n=`registerProcessor("${t}", ${e})`;Bo.add(n)}qo('\n\t/**\n\t * The base AudioWorkletProcessor for use in Tone.js. Works with the [[ToneAudioWorklet]]. \n\t */\n\tclass ToneAudioWorkletProcessor extends AudioWorkletProcessor {\n\n\t\tconstructor(options) {\n\t\t\t\n\t\t\tsuper(options);\n\t\t\t/**\n\t\t\t * If the processor was disposed or not. Keep alive until it\'s disposed.\n\t\t\t */\n\t\t\tthis.disposed = false;\n\t\t   \t/** \n\t\t\t * The number of samples in the processing block\n\t\t\t */\n\t\t\tthis.blockSize = 128;\n\t\t\t/**\n\t\t\t * the sample rate\n\t\t\t */\n\t\t\tthis.sampleRate = sampleRate;\n\n\t\t\tthis.port.onmessage = (event) => {\n\t\t\t\t// when it receives a dispose \n\t\t\t\tif (event.data === "dispose") {\n\t\t\t\t\tthis.disposed = true;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n'),qo("\n\t/**\n\t * Abstract class for a single input/output processor. \n\t * has a 'generate' function which processes one sample at a time\n\t */\n\tclass SingleIOProcessor extends ToneAudioWorkletProcessor {\n\n\t\tconstructor(options) {\n\t\t\tsuper(Object.assign(options, {\n\t\t\t\tnumberOfInputs: 1,\n\t\t\t\tnumberOfOutputs: 1\n\t\t\t}));\n\t\t\t/**\n\t\t\t * Holds the name of the parameter and a single value of that\n\t\t\t * parameter at the current sample\n\t\t\t * @type { [name: string]: number }\n\t\t\t */\n\t\t\tthis.params = {}\n\t\t}\n\n\t\t/**\n\t\t * Generate an output sample from the input sample and parameters\n\t\t * @abstract\n\t\t * @param input number\n\t\t * @param channel number\n\t\t * @param parameters { [name: string]: number }\n\t\t * @returns number\n\t\t */\n\t\tgenerate(){}\n\n\t\t/**\n\t\t * Update the private params object with the \n\t\t * values of the parameters at the given index\n\t\t * @param parameters { [name: string]: Float32Array },\n\t\t * @param index number\n\t\t */\n\t\tupdateParams(parameters, index) {\n\t\t\tfor (const paramName in parameters) {\n\t\t\t\tconst param = parameters[paramName];\n\t\t\t\tif (param.length > 1) {\n\t\t\t\t\tthis.params[paramName] = parameters[paramName][index];\n\t\t\t\t} else {\n\t\t\t\t\tthis.params[paramName] = parameters[paramName][0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Process a single frame of the audio\n\t\t * @param inputs Float32Array[][]\n\t\t * @param outputs Float32Array[][]\n\t\t */\n\t\tprocess(inputs, outputs, parameters) {\n\t\t\tconst input = inputs[0];\n\t\t\tconst output = outputs[0];\n\t\t\t// get the parameter values\n\t\t\tconst channelCount = Math.max(input && input.length || 0, output.length);\n\t\t\tfor (let sample = 0; sample < this.blockSize; sample++) {\n\t\t\t\tthis.updateParams(parameters, sample);\n\t\t\t\tfor (let channel = 0; channel < channelCount; channel++) {\n\t\t\t\t\tconst inputSample = input && input.length ? input[channel][sample] : 0;\n\t\t\t\t\toutput[channel][sample] = this.generate(inputSample, channel, this.params);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn !this.disposed;\n\t\t}\n\t};\n"),qo("\n\t/**\n\t * A multichannel buffer for use within an AudioWorkletProcessor as a delay line\n\t */\n\tclass DelayLine {\n\t\t\n\t\tconstructor(size, channels) {\n\t\t\tthis.buffer = [];\n\t\t\tthis.writeHead = []\n\t\t\tthis.size = size;\n\n\t\t\t// create the empty channels\n\t\t\tfor (let i = 0; i < channels; i++) {\n\t\t\t\tthis.buffer[i] = new Float32Array(this.size);\n\t\t\t\tthis.writeHead[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Push a value onto the end\n\t\t * @param channel number\n\t\t * @param value number\n\t\t */\n\t\tpush(channel, value) {\n\t\t\tthis.writeHead[channel] += 1;\n\t\t\tif (this.writeHead[channel] > this.size) {\n\t\t\t\tthis.writeHead[channel] = 0;\n\t\t\t}\n\t\t\tthis.buffer[channel][this.writeHead[channel]] = value;\n\t\t}\n\n\t\t/**\n\t\t * Get the recorded value of the channel given the delay\n\t\t * @param channel number\n\t\t * @param delay number delay samples\n\t\t */\n\t\tget(channel, delay) {\n\t\t\tlet readHead = this.writeHead[channel] - Math.floor(delay);\n\t\t\tif (readHead < 0) {\n\t\t\t\treadHead += this.size;\n\t\t\t}\n\t\t\treturn this.buffer[channel][readHead];\n\t\t}\n\t}\n"),Fo("feedback-comb-filter",'\n\tclass FeedbackCombFilterWorklet extends SingleIOProcessor {\n\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\t\t\tthis.delayLine = new DelayLine(this.sampleRate, options.channelCount || 2);\n\t\t}\n\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [{\n\t\t\t\tname: "delayTime",\n\t\t\t\tdefaultValue: 0.1,\n\t\t\t\tminValue: 0,\n\t\t\t\tmaxValue: 1,\n\t\t\t\tautomationRate: "k-rate"\n\t\t\t}, {\n\t\t\t\tname: "feedback",\n\t\t\t\tdefaultValue: 0.5,\n\t\t\t\tminValue: 0,\n\t\t\t\tmaxValue: 0.9999,\n\t\t\t\tautomationRate: "k-rate"\n\t\t\t}];\n\t\t}\n\n\t\tgenerate(input, channel, parameters) {\n\t\t\tconst delayedSample = this.delayLine.get(channel, parameters.delayTime * this.sampleRate);\n\t\t\tthis.delayLine.push(channel, input + delayedSample * parameters.feedback);\n\t\t\treturn delayedSample;\n\t\t}\n\t}\n');class Lo extends Po{constructor(){super(is(Lo.getDefaults(),arguments,["urls","onload","baseUrl"],"urls")),this.name="Sampler",this._activeSources=new Map;const t=is(Lo.getDefaults(),arguments,["urls","onload","baseUrl"],"urls"),e={};Object.keys(t.urls).forEach((n=>{const i=parseInt(n,10);if(Di(Hi(n)||Li(i)&&isFinite(i),`url key is neither a note or midi pitch: ${n}`),Hi(n)){const i=new Rs(this.context,n).toMidi();e[i]=t.urls[n]}else Li(i)&&isFinite(i)&&(e[i]=t.urls[i])})),this._buffers=new Ks({urls:e,onload:t.onload,baseUrl:t.baseUrl,onerror:t.onerror}),this.attack=t.attack,this.release=t.release,this.curve=t.curve,this._buffers.loaded&&Promise.resolve().then(t.onload)}static getDefaults(){return Object.assign(Po.getDefaults(),{attack:0,baseUrl:"",curve:"exponential",onload:ws,onerror:ws,release:.1,urls:{}})}_findClosest(t){let e=0;for(;e<96;){if(this._buffers.has(t+e))return-e;if(this._buffers.has(t-e))return e;e++}throw new Error(`No available buffers for note: ${t}`)}triggerAttack(t,e,n=1){return this.log("triggerAttack",t,e,n),Array.isArray(t)||(t=[t]),t.forEach((t=>{const i=Es(new Rs(this.context,t).toFrequency()),s=Math.round(i),o=i-s,r=this._findClosest(s),a=s-r,l=this._buffers.get(a),c=Ms(r+o),u=new ho({url:l,context:this.context,curve:this.curve,fadeIn:this.attack,fadeOut:this.release,playbackRate:c}).connect(this.output);u.start(e,0,l.duration/c,n),Wi(this._activeSources.get(s))||this._activeSources.set(s,[]),this._activeSources.get(s).push(u),u.onended=()=>{if(this._activeSources&&this._activeSources.has(s)){const t=this._activeSources.get(s),e=t.indexOf(u);-1!==e&&t.splice(e,1)}}})),this}triggerRelease(t,e){return this.log("triggerRelease",t,e),Array.isArray(t)||(t=[t]),t.forEach((t=>{const n=new Rs(this.context,t).toMidi();if(this._activeSources.has(n)&&this._activeSources.get(n).length){const t=this._activeSources.get(n);e=this.toSeconds(e),t.forEach((t=>{t.stop(e)})),this._activeSources.set(n,[])}})),this}releaseAll(t){const e=this.toSeconds(t);return this._activeSources.forEach((t=>{for(;t.length;)t.shift().stop(e)})),this}sync(){return this._syncState()&&(this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1)),this}triggerAttackRelease(t,e,n,i=1){const s=this.toSeconds(n);return this.triggerAttack(t,s,i),Wi(e)?(Di(Wi(t),"notes must be an array when duration is array"),t.forEach(((t,n)=>{const i=e[Math.min(n,e.length-1)];this.triggerRelease(t,s+this.toSeconds(i))}))):this.triggerRelease(t,s+this.toSeconds(e)),this}add(t,e,n){if(Di(Hi(t)||isFinite(t),`note must be a pitch or midi: ${t}`),Hi(t)){const i=new Rs(this.context,t).toMidi();this._buffers.add(i,e,n)}else this._buffers.add(t,e,n);return this}get loaded(){return this._buffers.loaded}dispose(){return super.dispose(),this._buffers.dispose(),this._activeSources.forEach((t=>{t.forEach((t=>t.dispose()))})),this._activeSources.clear(),this}}Xi([Mo(0)],Lo.prototype,"attack",void 0),Xi([Mo(0)],Lo.prototype,"release",void 0);class jo extends js{constructor(){super(Object.assign(is(jo.getDefaults(),arguments,["pan"]))),this.name="Panner",this._panner=this.context.createStereoPanner(),this.input=this._panner,this.output=this._panner;const t=is(jo.getDefaults(),arguments,["pan"]);this.pan=new Ls({context:this.context,param:this._panner.pan,value:t.pan,minValue:-1,maxValue:1}),this._panner.channelCount=t.channelCount,this._panner.channelCountMode="explicit",xs(this,"pan")}static getDefaults(){return Object.assign(js.getDefaults(),{pan:0,channelCount:1})}dispose(){return super.dispose(),this._panner.disconnect(),this.pan.dispose(),this}}Fo("bit-crusher","\n\tclass BitCrusherWorklet extends SingleIOProcessor {\n\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [{\n\t\t\t\tname: \"bits\",\n\t\t\t\tdefaultValue: 12,\n\t\t\t\tminValue: 1,\n\t\t\t\tmaxValue: 16,\n\t\t\t\tautomationRate: 'k-rate'\n\t\t\t}];\n\t\t}\n\n\t\tgenerate(input, _channel, parameters) {\n\t\t\tconst step = Math.pow(0.5, parameters.bits - 1);\n\t\t\tconst val = step * Math.floor(input / step + 0.5);\n\t\t\treturn val;\n\t\t}\n\t}\n");class Wo extends js{constructor(){super(is(Wo.getDefaults(),arguments,["solo"])),this.name="Solo";const t=is(Wo.getDefaults(),arguments,["solo"]);this.input=this.output=new Hs({context:this.context}),Wo._allSolos.has(this.context)||Wo._allSolos.set(this.context,new Set),Wo._allSolos.get(this.context).add(this),this.solo=t.solo}static getDefaults(){return Object.assign(js.getDefaults(),{solo:!1})}get solo(){return this._isSoloed()}set solo(t){t?this._addSolo():this._removeSolo(),Wo._allSolos.get(this.context).forEach((t=>t._updateSolo()))}get muted(){return 0===this.input.gain.value}_addSolo(){Wo._soloed.has(this.context)||Wo._soloed.set(this.context,new Set),Wo._soloed.get(this.context).add(this)}_removeSolo(){Wo._soloed.has(this.context)&&Wo._soloed.get(this.context).delete(this)}_isSoloed(){return Wo._soloed.has(this.context)&&Wo._soloed.get(this.context).has(this)}_noSolos(){return!Wo._soloed.has(this.context)||Wo._soloed.has(this.context)&&0===Wo._soloed.get(this.context).size}_updateSolo(){this._isSoloed()||this._noSolos()?this.input.gain.value=1:this.input.gain.value=0}dispose(){return super.dispose(),Wo._allSolos.get(this.context).delete(this),this._removeSolo(),this}}Wo._allSolos=new Map,Wo._soloed=new Map;class Uo extends js{constructor(){super(is(Uo.getDefaults(),arguments,["pan","volume"])),this.name="PanVol";const t=is(Uo.getDefaults(),arguments,["pan","volume"]);this._panner=this.input=new jo({context:this.context,pan:t.pan,channelCount:t.channelCount}),this.pan=this._panner.pan,this._volume=this.output=new so({context:this.context,volume:t.volume}),this.volume=this._volume.volume,this._panner.connect(this._volume),this.mute=t.mute,xs(this,["pan","volume"])}static getDefaults(){return Object.assign(js.getDefaults(),{mute:!1,pan:0,volume:0,channelCount:1})}get mute(){return this._volume.mute}set mute(t){this._volume.mute=t}dispose(){return super.dispose(),this._panner.dispose(),this.pan.dispose(),this._volume.dispose(),this.volume.dispose(),this}}class Ho extends js{constructor(){super(is(Ho.getDefaults(),arguments,["volume","pan"])),this.name="Channel";const t=is(Ho.getDefaults(),arguments,["volume","pan"]);this._solo=this.input=new Wo({solo:t.solo,context:this.context}),this._panVol=this.output=new Uo({context:this.context,pan:t.pan,volume:t.volume,mute:t.mute,channelCount:t.channelCount}),this.pan=this._panVol.pan,this.volume=this._panVol.volume,this._solo.connect(this._panVol),xs(this,["pan","volume"])}static getDefaults(){return Object.assign(js.getDefaults(),{pan:0,volume:0,mute:!1,solo:!1,channelCount:1})}get solo(){return this._solo.solo}set solo(t){this._solo.solo=t}get muted(){return this._solo.muted||this.mute}get mute(){return this._panVol.mute}set mute(t){this._panVol.mute=t}_getBus(t){return Ho.buses.has(t)||Ho.buses.set(t,new Hs({context:this.context})),Ho.buses.get(t)}send(t,e=0){const n=this._getBus(t),i=new Hs({context:this.context,units:"decibels",gain:e});return this.connect(i),i.connect(n),i}receive(t){return this._getBus(t).connect(this),this}dispose(){return super.dispose(),this._panVol.dispose(),this.pan.dispose(),this.volume.dispose(),this._solo.dispose(),this}}Ho.buses=new Map;class zo extends js{constructor(){super(...arguments),this.name="Listener",this.positionX=new Ls({context:this.context,param:this.context.rawContext.listener.positionX}),this.positionY=new Ls({context:this.context,param:this.context.rawContext.listener.positionY}),this.positionZ=new Ls({context:this.context,param:this.context.rawContext.listener.positionZ}),this.forwardX=new Ls({context:this.context,param:this.context.rawContext.listener.forwardX}),this.forwardY=new Ls({context:this.context,param:this.context.rawContext.listener.forwardY}),this.forwardZ=new Ls({context:this.context,param:this.context.rawContext.listener.forwardZ}),this.upX=new Ls({context:this.context,param:this.context.rawContext.listener.upX}),this.upY=new Ls({context:this.context,param:this.context.rawContext.listener.upY}),this.upZ=new Ls({context:this.context,param:this.context.rawContext.listener.upZ})}static getDefaults(){return Object.assign(js.getDefaults(),{positionX:0,positionY:0,positionZ:0,forwardX:0,forwardY:0,forwardZ:-1,upX:0,upY:1,upZ:0})}dispose(){return super.dispose(),this.positionX.dispose(),this.positionY.dispose(),this.positionZ.dispose(),this.forwardX.dispose(),this.forwardY.dispose(),this.forwardZ.dispose(),this.upX.dispose(),this.upY.dispose(),this.upZ.dispose(),this}}fs((t=>{t.listener=new zo({context:t})})),gs((t=>{t.listener.dispose()})),ks().transport,ks().destination,ks().destination,ks().listener,ks().draw,ks();let Go,Xo=!1;const Yo=o.Engine,Zo=o.Render,$o=o.Runner,Qo=o.Bodies,Jo=o.Composite,Ko=o.Events;let tr,er;function nr(t,e,n,i,s,o){const r=Qo.rectangle(t,e,n,i,{isStatic:!0,label:o,render:{fillStyle:s}});Jo.add(tr.world,[r])}function ir(t){const{label:e,speed:n}=function(t){const e=t.source;let n="";if(null==e)return{label:"",speed:0};const i=e.pairs.list;return null==i?{label:"",speed:0}:Array.isArray(i)?i.length?i[0].bodyA?i[0].bodyB?(n=i[0].bodyB.label,{label:n,speed:i[0].bodyA.speed}):(console.log("collisions: BodyB is null",i[0]),{label:"",speed:0}):(console.log("collisions: BodyA is null",i[0]),{label:"",speed:0}):(console.log("collisions: Empty array"),{label:"",speed:0}):(console.log("collisions: Not an array"),{label:"",speed:0})}(t);console.log(t),function(t,e){if(!Xo)return void console.log("not initiated");const n=Math.min(1,Math.max(.1,e/40)),i=t.split("-"),s=i[0];switch(i.length>1&&i[1],s){case"Left":Go.triggerAttackRelease(["Eb4"],4,void 0,n);break;case"Right":Go.triggerAttackRelease(["G3"],4,void 0,n);break;case"Top":Go.triggerAttackRelease(["G4"],4,void 0,n);break;case"Bottom":Go.triggerAttackRelease(["Bb4"],4,void 0,n);break;default:console.log(`unexpected wall ${s}`)}}(e,n)}function sr(t,e){const n=document.getElementById(t);n&&(n.innerHTML=`${e}`)}function or(t){const e=document.getElementById(t);e&&e.remove()}window.addEventListener("resize",(function(){er.canvas.width=window.innerWidth,er.canvas.height=window.innerHeight})),function n(){const i={x:t,y:e};sr("x1",`x: ${i.x}`),sr("y1",`y: ${i.y}`),function(t,e){tr&&(tr.gravity.x=t,tr.gravity.y=e)}(i.x,i.y),requestAnimationFrame(n)}(),window.onload=function(){const t=document.getElementById("start-btn");t&&(sr("msg","Registered click handler"),t.onclick=function(t){sr("msg","Requesting permission"),t.preventDefault(),sr("msg",`rp: ${function(){try{DeviceMotionEvent&&"function"==typeof DeviceMotionEvent.requestPermission&&DeviceMotionEvent.requestPermission()}catch(t){return`${t}`}window.addEventListener("devicemotion",s)}()}`),or("start-btn"),or("msg"),async function(){Go=new Lo({urls:{C4:"C4.mp3","D#4":"Ds4.mp3","F#4":"Fs4.mp3",A4:"A4.mp3"},release:1,baseUrl:"https://tonejs.github.io/audio/salamander/"}).toDestination(),await Ts.loaded(),Xo=!0}(),function(){tr=Yo.create(),tr.gravity.scale=5e-4,er=Zo.create({element:document.body,engine:tr,options:{width:window.innerWidth,height:window.innerHeight,wireframes:!1}});const t=Qo.circle(400,200,80,{restitution:.6,label:"Ball",render:{fillStyle:"red"}});Jo.add(tr.world,[t]);nr(window.innerWidth/2,5,window.innerWidth,10,"red","Top"),nr(window.innerWidth/2,window.innerHeight-5,window.innerWidth,10,"blue","Bottom"),nr(5,window.innerHeight/2,10,window.innerHeight,"green","Left"),nr(window.innerWidth-5,window.innerHeight/2,10,window.innerHeight,"yellow","Right"),Ko.on(tr,"collisionStart",ir),Zo.run(er);const e=$o.create();$o.run(e,tr),console.log("Physics loaded")}()})}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,