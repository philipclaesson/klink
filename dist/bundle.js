(()=>{"use strict";function e(e,t){for(const n in t)Object.defineProperty(e,n,{configurable:!0,value:t[n]})}const t=new WeakMap,n=(n,...i)=>class extends n{constructor(...e){super(e);const n=document.createDocumentFragment();t.set(this,n)}addEventListener(e,...n){return t.get(this).addEventListener(e,...n)}removeEventListener(...e){return t.get(this).removeEventListener(...e)}dispatchEvent(n){e(n,{currentTarget:this}),n.target||e(n,{target:this});const i=t.get(this).dispatchEvent(n);return i&&this.parentNode&&this.parentNode.dispatchEvent(n),e(n,{currentTarget:null,target:null}),i}};class i extends(n(Object)){}function o(e,t){Object.defineProperty(e,`on${t}`,{enumerable:!0,configurable:!1,writable:!0,value:null})}Symbol("__abort__");class s extends Event{constructor(e,t){if(super(e,t),!(t&&t.error instanceof DOMException))throw TypeError("Failed to construct 'SensorErrorEvent':2nd argument much contain 'error' property");Object.defineProperty(this,"error",{configurable:!1,writable:!1,value:t.error})}}const r=Symbol("__sensor__"),a=r,c=Symbol("Sensor.notifyError"),l=Symbol("Sensor.notifyActivatedState"),d=Symbol("Sensor.activateCallback"),h=Symbol("Sensor.deactivateCallback");class u extends i{[d](){}[h](){}[c](e,t){let n=new s("error",{error:new DOMException(e,t)});this.dispatchEvent(n),this.stop()}[l](){let e=new Event("activate");this[a].activated=!0,this.dispatchEvent(e),this[a].state=3}constructor(e){if(super(),this[r]={state:1,frequency:null,activated:!1,hasReading:!1,timestamp:null},o(this,"reading"),o(this,"activate"),o(this,"error"),Object.defineProperty(this,"activated",{get:()=>this[a].activated}),Object.defineProperty(this,"hasReading",{get:()=>this[a].hasReading}),Object.defineProperty(this,"timestamp",{get:()=>this[a].timestamp}),window&&window.parent!=window.top)throw new DOMException("Only instantiable in a top-level browsing context","SecurityError");e&&"number"==typeof e.frequency&&e.frequency>60&&(this.frequency=e.frequency)}dispatchEvent(e){switch(e.type){case"reading":case"error":case"activate":{const t=`on${e.type}`;"function"==typeof this[t]&&this[t](e),super.dispatchEvent(e);break}default:super.dispatchEvent(e)}}start(){2!==this[a].state&&3!==this[a].state&&(this[a].state=2,this[d]())}stop(){1!==this[a].state&&(this[a].activated=!1,this[a].hasReading=!1,this[a].timestamp=null,this[h](),this[a].state=1)}}const g=r,v=Symbol("handleEvent");let m;screen.orientation?m=screen.orientation:screen.msOrientation?m=screen.msOrientation:(m={},Object.defineProperty(m,"angle",{get:()=>window.orientation||0}));!function(){const e=navigator.userAgent.match(/.*Chrome\/([0-9]+)/),t=e?parseInt(e[1],10):null,n=null===t||t>=66?Math.PI/180:1}();const p=(e,...t)=>class extends e{constructor(...e){super(e);for(const e of t)if(`on${e}`in window){this[g].eventName=e;break}}[d](){window.addEventListener(this[g].eventName,this[v].bind(this),{capture:!0})}[h](){window.removeEventListener(this[g].eventName,this[v].bind(this),{capture:!0})}};window.RelativeOrientationSensor||p(u,"deviceorientation"),window.AbsoluteOrientationSensor||p(u,"deviceorientationabsolute","deviceorientation"),window.Gyroscope||p(u,"devicemotion"),window.Accelerometer||p(u,"devicemotion"),window.LinearAccelerationSensor||p(u,"devicemotion");const y=window.GravitySensor||class extends(p(u,"devicemotion")){constructor(e){super(e),function(e,t,n){const i=e[t];for(const t in n)i[t]=n[t],Object.defineProperty(e,t,{get:()=>i[t]})}(this,g,{x:null,y:null,z:null})}[v](e){null!==e.acceleration.x&&null!==e.accelerationIncludingGravity.x?(this[g].activated||this[l](),this[g].timestamp=performance.now(),this[g].x=e.accelerationIncludingGravity.x-e.acceleration.x,this[g].y=e.accelerationIncludingGravity.y-e.acceleration.y,this[g].z=e.accelerationIncludingGravity.z-e.acceleration.z,this[g].hasReading=!0,this.dispatchEvent(new Event("reading"))):this[c]("Could not connect to a sensor","NotReadableError")}[h](){super[h](),this[g].x=null,this[g].y=null,this[g].z=null}};let w=0,f=0;function b(e,t){const n=document.getElementById(e);n?(n.innerHTML=`${t}`,console.log(`setElementInnerHtml: ${e} = ${t}`)):console.log(`setElementInnerHtml: ${e} not found`)}if(window.addEventListener("deviceorientation",(e=>{const{beta:t,gamma:n}=e,i=window.innerWidth,o=window.innerHeight;null!==t&&null!==n&&(w=i/2+n/90*(i/2),f=o/2+t/180*(o/2))})),function e(){const t=document.getElementById("ball");if(!t)return void requestAnimationFrame(e);const n=parseInt(t.style.left,10)||0,i=parseInt(t.style.top,10)||0,o=n+.1*(w-n),s=i+.1*(f-i);t.style.left=`${o}px`,t.style.top=`${s}px`,requestAnimationFrame(e)}(),window.addEventListener("deviceorientation",(e=>{const{alpha:t,beta:n,gamma:i}=e,o=(t??0)*(Math.PI/180),s=(n??0)*(Math.PI/180),r=(i??0)*(Math.PI/180);Math.sin(s),Math.sin(r);Math.cos(s),Math.cos(r),Math.cos(o),Math.sin(o),Math.sin(o),Math.cos(o)})),"GravitySensor"in window){const e="accelerometer";navigator.permissions.query({name:e}).then((e=>{if(console.log(e),"granted"===e.state){console.log("permission granted");let e=new y;console.log(e),b("x1",`${e.x}`),b("y1",`${e.y}`),b("z1",`${e.z}`),e.onreading=()=>{console.log(`Onreading along the X-axis: ${e.x}`),console.log(`Onreading along the Y-axis: ${e.y}`),console.log(`Onreading along the Z-axis: ${e.z}`),b("x1",`${e.x}`),b("y1",`${e.y}`),b("z1",`${e.z}`)},e.addEventListener("reading",(()=>{console.log(`Acceleration along the X-axis: ${e.x}`),console.log(`Acceleration along the Y-axis: ${e.y}`),console.log(`Acceleration along the Z-axis: ${e.z}`),b("x2",`${e.x}`),b("y2",`${e.y}`),b("z2",`${e.z}`)})),e.start()}else"denied"===e.state?console.error("Permission to use accelerometer was denied."):console.log("Permission to use accelerometer is not yet granted or denied")}))}else console.log("GravitySensor API not available.")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,