/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={842:function(e,t,n){var i;i=function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var o=t[i]={i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(i,o,function(t){return e[t]}.bind(null,o));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=20)}([function(e,t){var i={};e.exports=i,function(){i._baseDelta=1e3/60,i._nextId=0,i._seed=0,i._nowStartTime=+new Date,i._warnedOnce={},i._decomp=null,i.extend=function(e,t){var n,o;"boolean"==typeof t?(n=2,o=t):(n=1,o=!0);for(var r=n;r<arguments.length;r++){var a=arguments[r];if(a)for(var s in a)o&&a[s]&&a[s].constructor===Object?e[s]&&e[s].constructor!==Object?e[s]=a[s]:(e[s]=e[s]||{},i.extend(e[s],o,a[s])):e[s]=a[s]}return e},i.clone=function(e,t){return i.extend({},t,e)},i.keys=function(e){if(Object.keys)return Object.keys(e);var t=[];for(var n in e)t.push(n);return t},i.values=function(e){var t=[];if(Object.keys){for(var n=Object.keys(e),i=0;i<n.length;i++)t.push(e[n[i]]);return t}for(var o in e)t.push(e[o]);return t},i.get=function(e,t,n,i){t=t.split(".").slice(n,i);for(var o=0;o<t.length;o+=1)e=e[t[o]];return e},i.set=function(e,t,n,o,r){var a=t.split(".").slice(o,r);return i.get(e,t,0,-1)[a[a.length-1]]=n,n},i.shuffle=function(e){for(var t=e.length-1;t>0;t--){var n=Math.floor(i.random()*(t+1)),o=e[t];e[t]=e[n],e[n]=o}return e},i.choose=function(e){return e[Math.floor(i.random()*e.length)]},i.isElement=function(e){return"undefined"!=typeof HTMLElement?e instanceof HTMLElement:!!(e&&e.nodeType&&e.nodeName)},i.isArray=function(e){return"[object Array]"===Object.prototype.toString.call(e)},i.isFunction=function(e){return"function"==typeof e},i.isPlainObject=function(e){return"object"==typeof e&&e.constructor===Object},i.isString=function(e){return"[object String]"===toString.call(e)},i.clamp=function(e,t,n){return e<t?t:e>n?n:e},i.sign=function(e){return e<0?-1:1},i.now=function(){if("undefined"!=typeof window&&window.performance){if(window.performance.now)return window.performance.now();if(window.performance.webkitNow)return window.performance.webkitNow()}return Date.now?Date.now():new Date-i._nowStartTime},i.random=function(t,n){return n=void 0!==n?n:1,(t=void 0!==t?t:0)+e()*(n-t)};var e=function(){return i._seed=(9301*i._seed+49297)%233280,i._seed/233280};i.colorToNumber=function(e){return 3==(e=e.replace("#","")).length&&(e=e.charAt(0)+e.charAt(0)+e.charAt(1)+e.charAt(1)+e.charAt(2)+e.charAt(2)),parseInt(e,16)},i.logLevel=1,i.log=function(){console&&i.logLevel>0&&i.logLevel<=3&&console.log.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},i.info=function(){console&&i.logLevel>0&&i.logLevel<=2&&console.info.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},i.warn=function(){console&&i.logLevel>0&&i.logLevel<=3&&console.warn.apply(console,["matter-js:"].concat(Array.prototype.slice.call(arguments)))},i.warnOnce=function(){var e=Array.prototype.slice.call(arguments).join(" ");i._warnedOnce[e]||(i.warn(e),i._warnedOnce[e]=!0)},i.deprecated=function(e,t,n){e[t]=i.chain((function(){i.warnOnce("🔅 deprecated 🔅",n)}),e[t])},i.nextId=function(){return i._nextId++},i.indexOf=function(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0;n<e.length;n++)if(e[n]===t)return n;return-1},i.map=function(e,t){if(e.map)return e.map(t);for(var n=[],i=0;i<e.length;i+=1)n.push(t(e[i]));return n},i.topologicalSort=function(e){var t=[],n=[],o=[];for(var r in e)n[r]||o[r]||i._topologicalSort(r,n,o,e,t);return t},i._topologicalSort=function(e,t,n,o,r){var a=o[e]||[];n[e]=!0;for(var s=0;s<a.length;s+=1){var l=a[s];n[l]||t[l]||i._topologicalSort(l,t,n,o,r)}n[e]=!1,t[e]=!0,r.push(e)},i.chain=function(){for(var e=[],t=0;t<arguments.length;t+=1){var n=arguments[t];n._chained?e.push.apply(e,n._chained):e.push(n)}var i=function(){for(var t,n=new Array(arguments.length),i=0,o=arguments.length;i<o;i++)n[i]=arguments[i];for(i=0;i<e.length;i+=1){var r=e[i].apply(t,n);void 0!==r&&(t=r)}return t};return i._chained=e,i},i.chainPathBefore=function(e,t,n){return i.set(e,t,i.chain(n,i.get(e,t)))},i.chainPathAfter=function(e,t,n){return i.set(e,t,i.chain(i.get(e,t),n))},i.setDecomp=function(e){i._decomp=e},i.getDecomp=function(){var e=i._decomp;try{e||"undefined"==typeof window||(e=window.decomp),e||void 0===n.g||(e=n.g.decomp)}catch(t){e=null}return e}}()},function(e,t){var n={};e.exports=n,n.create=function(e){var t={min:{x:0,y:0},max:{x:0,y:0}};return e&&n.update(t,e),t},n.update=function(e,t,n){e.min.x=1/0,e.max.x=-1/0,e.min.y=1/0,e.max.y=-1/0;for(var i=0;i<t.length;i++){var o=t[i];o.x>e.max.x&&(e.max.x=o.x),o.x<e.min.x&&(e.min.x=o.x),o.y>e.max.y&&(e.max.y=o.y),o.y<e.min.y&&(e.min.y=o.y)}n&&(n.x>0?e.max.x+=n.x:e.min.x+=n.x,n.y>0?e.max.y+=n.y:e.min.y+=n.y)},n.contains=function(e,t){return t.x>=e.min.x&&t.x<=e.max.x&&t.y>=e.min.y&&t.y<=e.max.y},n.overlaps=function(e,t){return e.min.x<=t.max.x&&e.max.x>=t.min.x&&e.max.y>=t.min.y&&e.min.y<=t.max.y},n.translate=function(e,t){e.min.x+=t.x,e.max.x+=t.x,e.min.y+=t.y,e.max.y+=t.y},n.shift=function(e,t){var n=e.max.x-e.min.x,i=e.max.y-e.min.y;e.min.x=t.x,e.max.x=t.x+n,e.min.y=t.y,e.max.y=t.y+i}},function(e,t){var n={};e.exports=n,n.create=function(e,t){return{x:e||0,y:t||0}},n.clone=function(e){return{x:e.x,y:e.y}},n.magnitude=function(e){return Math.sqrt(e.x*e.x+e.y*e.y)},n.magnitudeSquared=function(e){return e.x*e.x+e.y*e.y},n.rotate=function(e,t,n){var i=Math.cos(t),o=Math.sin(t);n||(n={});var r=e.x*i-e.y*o;return n.y=e.x*o+e.y*i,n.x=r,n},n.rotateAbout=function(e,t,n,i){var o=Math.cos(t),r=Math.sin(t);i||(i={});var a=n.x+((e.x-n.x)*o-(e.y-n.y)*r);return i.y=n.y+((e.x-n.x)*r+(e.y-n.y)*o),i.x=a,i},n.normalise=function(e){var t=n.magnitude(e);return 0===t?{x:0,y:0}:{x:e.x/t,y:e.y/t}},n.dot=function(e,t){return e.x*t.x+e.y*t.y},n.cross=function(e,t){return e.x*t.y-e.y*t.x},n.cross3=function(e,t,n){return(t.x-e.x)*(n.y-e.y)-(t.y-e.y)*(n.x-e.x)},n.add=function(e,t,n){return n||(n={}),n.x=e.x+t.x,n.y=e.y+t.y,n},n.sub=function(e,t,n){return n||(n={}),n.x=e.x-t.x,n.y=e.y-t.y,n},n.mult=function(e,t){return{x:e.x*t,y:e.y*t}},n.div=function(e,t){return{x:e.x/t,y:e.y/t}},n.perp=function(e,t){return{x:(t=!0===t?-1:1)*-e.y,y:t*e.x}},n.neg=function(e){return{x:-e.x,y:-e.y}},n.angle=function(e,t){return Math.atan2(t.y-e.y,t.x-e.x)},n._temp=[n.create(),n.create(),n.create(),n.create(),n.create(),n.create()]},function(e,t,n){var i={};e.exports=i;var o=n(2),r=n(0);i.create=function(e,t){for(var n=[],i=0;i<e.length;i++){var o=e[i],r={x:o.x,y:o.y,index:i,body:t,isInternal:!1};n.push(r)}return n},i.fromPath=function(e,t){var n=[];return e.replace(/L?\s*([-\d.e]+)[\s,]*([-\d.e]+)*/gi,(function(e,t,i){n.push({x:parseFloat(t),y:parseFloat(i)})})),i.create(n,t)},i.centre=function(e){for(var t,n,r,a=i.area(e,!0),s={x:0,y:0},l=0;l<e.length;l++)r=(l+1)%e.length,t=o.cross(e[l],e[r]),n=o.mult(o.add(e[l],e[r]),t),s=o.add(s,n);return o.div(s,6*a)},i.mean=function(e){for(var t={x:0,y:0},n=0;n<e.length;n++)t.x+=e[n].x,t.y+=e[n].y;return o.div(t,e.length)},i.area=function(e,t){for(var n=0,i=e.length-1,o=0;o<e.length;o++)n+=(e[i].x-e[o].x)*(e[i].y+e[o].y),i=o;return t?n/2:Math.abs(n)/2},i.inertia=function(e,t){for(var n,i,r=0,a=0,s=e,l=0;l<s.length;l++)i=(l+1)%s.length,r+=(n=Math.abs(o.cross(s[i],s[l])))*(o.dot(s[i],s[i])+o.dot(s[i],s[l])+o.dot(s[l],s[l])),a+=n;return t/6*(r/a)},i.translate=function(e,t,n){n=void 0!==n?n:1;var i,o=e.length,r=t.x*n,a=t.y*n;for(i=0;i<o;i++)e[i].x+=r,e[i].y+=a;return e},i.rotate=function(e,t,n){if(0!==t){var i,o,r,a,s=Math.cos(t),l=Math.sin(t),c=n.x,u=n.y,d=e.length;for(a=0;a<d;a++)o=(i=e[a]).x-c,r=i.y-u,i.x=c+(o*s-r*l),i.y=u+(o*l+r*s);return e}},i.contains=function(e,t){for(var n,i=t.x,o=t.y,r=e.length,a=e[r-1],s=0;s<r;s++){if(n=e[s],(i-a.x)*(n.y-a.y)+(o-a.y)*(a.x-n.x)>0)return!1;a=n}return!0},i.scale=function(e,t,n,r){if(1===t&&1===n)return e;var a,s;r=r||i.centre(e);for(var l=0;l<e.length;l++)a=e[l],s=o.sub(a,r),e[l].x=r.x+s.x*t,e[l].y=r.y+s.y*n;return e},i.chamfer=function(e,t,n,i,a){t="number"==typeof t?[t]:t||[8],n=void 0!==n?n:-1,i=i||2,a=a||14;for(var s=[],l=0;l<e.length;l++){var c=e[l-1>=0?l-1:e.length-1],u=e[l],d=e[(l+1)%e.length],p=t[l<t.length?l:t.length-1];if(0!==p){var f=o.normalise({x:u.y-c.y,y:c.x-u.x}),v=o.normalise({x:d.y-u.y,y:u.x-d.x}),y=Math.sqrt(2*Math.pow(p,2)),g=o.mult(r.clone(f),p),m=o.normalise(o.mult(o.add(f,v),.5)),x=o.sub(u,o.mult(m,y)),h=n;-1===n&&(h=1.75*Math.pow(p,.32)),(h=r.clamp(h,i,a))%2==1&&(h+=1);for(var b=Math.acos(o.dot(f,v))/h,w=0;w<h;w++)s.push(o.add(o.rotate(g,b*w),x))}else s.push(u)}return s},i.clockwiseSort=function(e){var t=i.mean(e);return e.sort((function(e,n){return o.angle(t,e)-o.angle(t,n)})),e},i.isConvex=function(e){var t,n,i,o,r=0,a=e.length;if(a<3)return null;for(t=0;t<a;t++)if(i=(t+2)%a,o=(e[n=(t+1)%a].x-e[t].x)*(e[i].y-e[n].y),(o-=(e[n].y-e[t].y)*(e[i].x-e[n].x))<0?r|=1:o>0&&(r|=2),3===r)return!1;return 0!==r||null},i.hull=function(e){var t,n,i=[],r=[];for((e=e.slice(0)).sort((function(e,t){var n=e.x-t.x;return 0!==n?n:e.y-t.y})),n=0;n<e.length;n+=1){for(t=e[n];r.length>=2&&o.cross3(r[r.length-2],r[r.length-1],t)<=0;)r.pop();r.push(t)}for(n=e.length-1;n>=0;n-=1){for(t=e[n];i.length>=2&&o.cross3(i[i.length-2],i[i.length-1],t)<=0;)i.pop();i.push(t)}return i.pop(),r.pop(),i.concat(r)}},function(e,t,n){var i={};e.exports=i;var o=n(3),r=n(2),a=n(7),s=n(0),l=n(1),c=n(11);!function(){i._timeCorrection=!0,i._inertiaScale=4,i._nextCollidingGroupId=1,i._nextNonCollidingGroupId=-1,i._nextCategory=1,i._baseDelta=1e3/60,i.create=function(t){var n={id:s.nextId(),type:"body",label:"Body",parts:[],plugin:{},angle:0,vertices:o.fromPath("L 0 0 L 40 0 L 40 40 L 0 40"),position:{x:0,y:0},force:{x:0,y:0},torque:0,positionImpulse:{x:0,y:0},constraintImpulse:{x:0,y:0,angle:0},totalContacts:0,speed:0,angularSpeed:0,velocity:{x:0,y:0},angularVelocity:0,isSensor:!1,isStatic:!1,isSleeping:!1,motion:0,sleepThreshold:60,density:.001,restitution:0,friction:.1,frictionStatic:.5,frictionAir:.01,collisionFilter:{category:1,mask:4294967295,group:0},slop:.05,timeScale:1,render:{visible:!0,opacity:1,strokeStyle:null,fillStyle:null,lineWidth:null,sprite:{xScale:1,yScale:1,xOffset:0,yOffset:0}},events:null,bounds:null,chamfer:null,circleRadius:0,positionPrev:null,anglePrev:0,parent:null,axes:null,area:0,mass:0,inertia:0,deltaTime:1e3/60,_original:null},i=s.extend(n,t);return e(i,t),i},i.nextGroup=function(e){return e?i._nextNonCollidingGroupId--:i._nextCollidingGroupId++},i.nextCategory=function(){return i._nextCategory=i._nextCategory<<1,i._nextCategory};var e=function(e,t){t=t||{},i.set(e,{bounds:e.bounds||l.create(e.vertices),positionPrev:e.positionPrev||r.clone(e.position),anglePrev:e.anglePrev||e.angle,vertices:e.vertices,parts:e.parts||[e],isStatic:e.isStatic,isSleeping:e.isSleeping,parent:e.parent||e}),o.rotate(e.vertices,e.angle,e.position),c.rotate(e.axes,e.angle),l.update(e.bounds,e.vertices,e.velocity),i.set(e,{axes:t.axes||e.axes,area:t.area||e.area,mass:t.mass||e.mass,inertia:t.inertia||e.inertia});var n=e.isStatic?"#14151f":s.choose(["#f19648","#f5d259","#f55a3c","#063e7b","#ececd1"]),a=e.isStatic?"#555":"#ccc",u=e.isStatic&&null===e.render.fillStyle?1:0;e.render.fillStyle=e.render.fillStyle||n,e.render.strokeStyle=e.render.strokeStyle||a,e.render.lineWidth=e.render.lineWidth||u,e.render.sprite.xOffset+=-(e.bounds.min.x-e.position.x)/(e.bounds.max.x-e.bounds.min.x),e.render.sprite.yOffset+=-(e.bounds.min.y-e.position.y)/(e.bounds.max.y-e.bounds.min.y)};i.set=function(e,t,n){var o;for(o in"string"==typeof t&&(o=t,(t={})[o]=n),t)if(Object.prototype.hasOwnProperty.call(t,o))switch(n=t[o],o){case"isStatic":i.setStatic(e,n);break;case"isSleeping":a.set(e,n);break;case"mass":i.setMass(e,n);break;case"density":i.setDensity(e,n);break;case"inertia":i.setInertia(e,n);break;case"vertices":i.setVertices(e,n);break;case"position":i.setPosition(e,n);break;case"angle":i.setAngle(e,n);break;case"velocity":i.setVelocity(e,n);break;case"angularVelocity":i.setAngularVelocity(e,n);break;case"speed":i.setSpeed(e,n);break;case"angularSpeed":i.setAngularSpeed(e,n);break;case"parts":i.setParts(e,n);break;case"centre":i.setCentre(e,n);break;default:e[o]=n}},i.setStatic=function(e,t){for(var n=0;n<e.parts.length;n++){var i=e.parts[n];i.isStatic=t,t?(i._original={restitution:i.restitution,friction:i.friction,mass:i.mass,inertia:i.inertia,density:i.density,inverseMass:i.inverseMass,inverseInertia:i.inverseInertia},i.restitution=0,i.friction=1,i.mass=i.inertia=i.density=1/0,i.inverseMass=i.inverseInertia=0,i.positionPrev.x=i.position.x,i.positionPrev.y=i.position.y,i.anglePrev=i.angle,i.angularVelocity=0,i.speed=0,i.angularSpeed=0,i.motion=0):i._original&&(i.restitution=i._original.restitution,i.friction=i._original.friction,i.mass=i._original.mass,i.inertia=i._original.inertia,i.density=i._original.density,i.inverseMass=i._original.inverseMass,i.inverseInertia=i._original.inverseInertia,i._original=null)}},i.setMass=function(e,t){var n=e.inertia/(e.mass/6);e.inertia=n*(t/6),e.inverseInertia=1/e.inertia,e.mass=t,e.inverseMass=1/e.mass,e.density=e.mass/e.area},i.setDensity=function(e,t){i.setMass(e,t*e.area),e.density=t},i.setInertia=function(e,t){e.inertia=t,e.inverseInertia=1/e.inertia},i.setVertices=function(e,t){t[0].body===e?e.vertices=t:e.vertices=o.create(t,e),e.axes=c.fromVertices(e.vertices),e.area=o.area(e.vertices),i.setMass(e,e.density*e.area);var n=o.centre(e.vertices);o.translate(e.vertices,n,-1),i.setInertia(e,i._inertiaScale*o.inertia(e.vertices,e.mass)),o.translate(e.vertices,e.position),l.update(e.bounds,e.vertices,e.velocity)},i.setParts=function(e,t,n){var r;for(t=t.slice(0),e.parts.length=0,e.parts.push(e),e.parent=e,r=0;r<t.length;r++){var a=t[r];a!==e&&(a.parent=e,e.parts.push(a))}if(1!==e.parts.length){if(n=void 0===n||n){var s=[];for(r=0;r<t.length;r++)s=s.concat(t[r].vertices);o.clockwiseSort(s);var l=o.hull(s),c=o.centre(l);i.setVertices(e,l),o.translate(e.vertices,c)}var u=i._totalProperties(e);e.area=u.area,e.parent=e,e.position.x=u.centre.x,e.position.y=u.centre.y,e.positionPrev.x=u.centre.x,e.positionPrev.y=u.centre.y,i.setMass(e,u.mass),i.setInertia(e,u.inertia),i.setPosition(e,u.centre)}},i.setCentre=function(e,t,n){n?(e.positionPrev.x+=t.x,e.positionPrev.y+=t.y,e.position.x+=t.x,e.position.y+=t.y):(e.positionPrev.x=t.x-(e.position.x-e.positionPrev.x),e.positionPrev.y=t.y-(e.position.y-e.positionPrev.y),e.position.x=t.x,e.position.y=t.y)},i.setPosition=function(e,t,n){var i=r.sub(t,e.position);n?(e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.velocity.x=i.x,e.velocity.y=i.y,e.speed=r.magnitude(i)):(e.positionPrev.x+=i.x,e.positionPrev.y+=i.y);for(var a=0;a<e.parts.length;a++){var s=e.parts[a];s.position.x+=i.x,s.position.y+=i.y,o.translate(s.vertices,i),l.update(s.bounds,s.vertices,e.velocity)}},i.setAngle=function(e,t,n){var i=t-e.angle;n?(e.anglePrev=e.angle,e.angularVelocity=i,e.angularSpeed=Math.abs(i)):e.anglePrev+=i;for(var a=0;a<e.parts.length;a++){var s=e.parts[a];s.angle+=i,o.rotate(s.vertices,i,e.position),c.rotate(s.axes,i),l.update(s.bounds,s.vertices,e.velocity),a>0&&r.rotateAbout(s.position,i,e.position,s.position)}},i.setVelocity=function(e,t){var n=e.deltaTime/i._baseDelta;e.positionPrev.x=e.position.x-t.x*n,e.positionPrev.y=e.position.y-t.y*n,e.velocity.x=(e.position.x-e.positionPrev.x)/n,e.velocity.y=(e.position.y-e.positionPrev.y)/n,e.speed=r.magnitude(e.velocity)},i.getVelocity=function(e){var t=i._baseDelta/e.deltaTime;return{x:(e.position.x-e.positionPrev.x)*t,y:(e.position.y-e.positionPrev.y)*t}},i.getSpeed=function(e){return r.magnitude(i.getVelocity(e))},i.setSpeed=function(e,t){i.setVelocity(e,r.mult(r.normalise(i.getVelocity(e)),t))},i.setAngularVelocity=function(e,t){var n=e.deltaTime/i._baseDelta;e.anglePrev=e.angle-t*n,e.angularVelocity=(e.angle-e.anglePrev)/n,e.angularSpeed=Math.abs(e.angularVelocity)},i.getAngularVelocity=function(e){return(e.angle-e.anglePrev)*i._baseDelta/e.deltaTime},i.getAngularSpeed=function(e){return Math.abs(i.getAngularVelocity(e))},i.setAngularSpeed=function(e,t){i.setAngularVelocity(e,s.sign(i.getAngularVelocity(e))*t)},i.translate=function(e,t,n){i.setPosition(e,r.add(e.position,t),n)},i.rotate=function(e,t,n,o){if(n){var r=Math.cos(t),a=Math.sin(t),s=e.position.x-n.x,l=e.position.y-n.y;i.setPosition(e,{x:n.x+(s*r-l*a),y:n.y+(s*a+l*r)},o),i.setAngle(e,e.angle+t,o)}else i.setAngle(e,e.angle+t,o)},i.scale=function(e,t,n,r){var a=0,s=0;r=r||e.position;for(var u=0;u<e.parts.length;u++){var d=e.parts[u];o.scale(d.vertices,t,n,r),d.axes=c.fromVertices(d.vertices),d.area=o.area(d.vertices),i.setMass(d,e.density*d.area),o.translate(d.vertices,{x:-d.position.x,y:-d.position.y}),i.setInertia(d,i._inertiaScale*o.inertia(d.vertices,d.mass)),o.translate(d.vertices,{x:d.position.x,y:d.position.y}),u>0&&(a+=d.area,s+=d.inertia),d.position.x=r.x+(d.position.x-r.x)*t,d.position.y=r.y+(d.position.y-r.y)*n,l.update(d.bounds,d.vertices,e.velocity)}e.parts.length>1&&(e.area=a,e.isStatic||(i.setMass(e,e.density*a),i.setInertia(e,s))),e.circleRadius&&(t===n?e.circleRadius*=t:e.circleRadius=null)},i.update=function(e,t){var n=(t=(void 0!==t?t:1e3/60)*e.timeScale)*t,a=i._timeCorrection?t/(e.deltaTime||t):1,u=1-e.frictionAir*(t/s._baseDelta),d=(e.position.x-e.positionPrev.x)*a,p=(e.position.y-e.positionPrev.y)*a;e.velocity.x=d*u+e.force.x/e.mass*n,e.velocity.y=p*u+e.force.y/e.mass*n,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.position.x+=e.velocity.x,e.position.y+=e.velocity.y,e.deltaTime=t,e.angularVelocity=(e.angle-e.anglePrev)*u*a+e.torque/e.inertia*n,e.anglePrev=e.angle,e.angle+=e.angularVelocity;for(var f=0;f<e.parts.length;f++){var v=e.parts[f];o.translate(v.vertices,e.velocity),f>0&&(v.position.x+=e.velocity.x,v.position.y+=e.velocity.y),0!==e.angularVelocity&&(o.rotate(v.vertices,e.angularVelocity,e.position),c.rotate(v.axes,e.angularVelocity),f>0&&r.rotateAbout(v.position,e.angularVelocity,e.position,v.position)),l.update(v.bounds,v.vertices,e.velocity)}},i.updateVelocities=function(e){var t=i._baseDelta/e.deltaTime,n=e.velocity;n.x=(e.position.x-e.positionPrev.x)*t,n.y=(e.position.y-e.positionPrev.y)*t,e.speed=Math.sqrt(n.x*n.x+n.y*n.y),e.angularVelocity=(e.angle-e.anglePrev)*t,e.angularSpeed=Math.abs(e.angularVelocity)},i.applyForce=function(e,t,n){var i=t.x-e.position.x,o=t.y-e.position.y;e.force.x+=n.x,e.force.y+=n.y,e.torque+=i*n.y-o*n.x},i._totalProperties=function(e){for(var t={mass:0,area:0,inertia:0,centre:{x:0,y:0}},n=1===e.parts.length?0:1;n<e.parts.length;n++){var i=e.parts[n],o=i.mass!==1/0?i.mass:1;t.mass+=o,t.area+=i.area,t.inertia+=i.inertia,t.centre=r.add(t.centre,r.mult(i.position,o))}return t.centre=r.div(t.centre,t.mass),t}}()},function(e,t,n){var i={};e.exports=i;var o=n(0);i.on=function(e,t,n){for(var i,o=t.split(" "),r=0;r<o.length;r++)i=o[r],e.events=e.events||{},e.events[i]=e.events[i]||[],e.events[i].push(n);return n},i.off=function(e,t,n){if(t){"function"==typeof t&&(n=t,t=o.keys(e.events).join(" "));for(var i=t.split(" "),r=0;r<i.length;r++){var a=e.events[i[r]],s=[];if(n&&a)for(var l=0;l<a.length;l++)a[l]!==n&&s.push(a[l]);e.events[i[r]]=s}}else e.events={}},i.trigger=function(e,t,n){var i,r,a,s,l=e.events;if(l&&o.keys(l).length>0){n||(n={}),i=t.split(" ");for(var c=0;c<i.length;c++)if(a=l[r=i[c]]){(s=o.clone(n,!1)).name=r,s.source=e;for(var u=0;u<a.length;u++)a[u].apply(e,[s])}}}},function(e,t,n){var i={};e.exports=i;var o=n(5),r=n(0),a=n(1),s=n(4);i.create=function(e){return r.extend({id:r.nextId(),type:"composite",parent:null,isModified:!1,bodies:[],constraints:[],composites:[],label:"Composite",plugin:{},cache:{allBodies:null,allConstraints:null,allComposites:null}},e)},i.setModified=function(e,t,n,o){if(e.isModified=t,t&&e.cache&&(e.cache.allBodies=null,e.cache.allConstraints=null,e.cache.allComposites=null),n&&e.parent&&i.setModified(e.parent,t,n,o),o)for(var r=0;r<e.composites.length;r++){var a=e.composites[r];i.setModified(a,t,n,o)}},i.add=function(e,t){var n=[].concat(t);o.trigger(e,"beforeAdd",{object:t});for(var a=0;a<n.length;a++){var s=n[a];switch(s.type){case"body":if(s.parent!==s){r.warn("Composite.add: skipped adding a compound body part (you must add its parent instead)");break}i.addBody(e,s);break;case"constraint":i.addConstraint(e,s);break;case"composite":i.addComposite(e,s);break;case"mouseConstraint":i.addConstraint(e,s.constraint)}}return o.trigger(e,"afterAdd",{object:t}),e},i.remove=function(e,t,n){var r=[].concat(t);o.trigger(e,"beforeRemove",{object:t});for(var a=0;a<r.length;a++){var s=r[a];switch(s.type){case"body":i.removeBody(e,s,n);break;case"constraint":i.removeConstraint(e,s,n);break;case"composite":i.removeComposite(e,s,n);break;case"mouseConstraint":i.removeConstraint(e,s.constraint)}}return o.trigger(e,"afterRemove",{object:t}),e},i.addComposite=function(e,t){return e.composites.push(t),t.parent=e,i.setModified(e,!0,!0,!1),e},i.removeComposite=function(e,t,n){var o=r.indexOf(e.composites,t);if(-1!==o&&i.removeCompositeAt(e,o),n)for(var a=0;a<e.composites.length;a++)i.removeComposite(e.composites[a],t,!0);return e},i.removeCompositeAt=function(e,t){return e.composites.splice(t,1),i.setModified(e,!0,!0,!1),e},i.addBody=function(e,t){return e.bodies.push(t),i.setModified(e,!0,!0,!1),e},i.removeBody=function(e,t,n){var o=r.indexOf(e.bodies,t);if(-1!==o&&i.removeBodyAt(e,o),n)for(var a=0;a<e.composites.length;a++)i.removeBody(e.composites[a],t,!0);return e},i.removeBodyAt=function(e,t){return e.bodies.splice(t,1),i.setModified(e,!0,!0,!1),e},i.addConstraint=function(e,t){return e.constraints.push(t),i.setModified(e,!0,!0,!1),e},i.removeConstraint=function(e,t,n){var o=r.indexOf(e.constraints,t);if(-1!==o&&i.removeConstraintAt(e,o),n)for(var a=0;a<e.composites.length;a++)i.removeConstraint(e.composites[a],t,!0);return e},i.removeConstraintAt=function(e,t){return e.constraints.splice(t,1),i.setModified(e,!0,!0,!1),e},i.clear=function(e,t,n){if(n)for(var o=0;o<e.composites.length;o++)i.clear(e.composites[o],t,!0);return t?e.bodies=e.bodies.filter((function(e){return e.isStatic})):e.bodies.length=0,e.constraints.length=0,e.composites.length=0,i.setModified(e,!0,!0,!1),e},i.allBodies=function(e){if(e.cache&&e.cache.allBodies)return e.cache.allBodies;for(var t=[].concat(e.bodies),n=0;n<e.composites.length;n++)t=t.concat(i.allBodies(e.composites[n]));return e.cache&&(e.cache.allBodies=t),t},i.allConstraints=function(e){if(e.cache&&e.cache.allConstraints)return e.cache.allConstraints;for(var t=[].concat(e.constraints),n=0;n<e.composites.length;n++)t=t.concat(i.allConstraints(e.composites[n]));return e.cache&&(e.cache.allConstraints=t),t},i.allComposites=function(e){if(e.cache&&e.cache.allComposites)return e.cache.allComposites;for(var t=[].concat(e.composites),n=0;n<e.composites.length;n++)t=t.concat(i.allComposites(e.composites[n]));return e.cache&&(e.cache.allComposites=t),t},i.get=function(e,t,n){var o,r;switch(n){case"body":o=i.allBodies(e);break;case"constraint":o=i.allConstraints(e);break;case"composite":o=i.allComposites(e).concat(e)}return o?0===(r=o.filter((function(e){return e.id.toString()===t.toString()}))).length?null:r[0]:null},i.move=function(e,t,n){return i.remove(e,t),i.add(n,t),e},i.rebase=function(e){for(var t=i.allBodies(e).concat(i.allConstraints(e)).concat(i.allComposites(e)),n=0;n<t.length;n++)t[n].id=r.nextId();return e},i.translate=function(e,t,n){for(var o=n?i.allBodies(e):e.bodies,r=0;r<o.length;r++)s.translate(o[r],t);return e},i.rotate=function(e,t,n,o){for(var r=Math.cos(t),a=Math.sin(t),l=o?i.allBodies(e):e.bodies,c=0;c<l.length;c++){var u=l[c],d=u.position.x-n.x,p=u.position.y-n.y;s.setPosition(u,{x:n.x+(d*r-p*a),y:n.y+(d*a+p*r)}),s.rotate(u,t)}return e},i.scale=function(e,t,n,o,r){for(var a=r?i.allBodies(e):e.bodies,l=0;l<a.length;l++){var c=a[l],u=c.position.x-o.x,d=c.position.y-o.y;s.setPosition(c,{x:o.x+u*t,y:o.y+d*n}),s.scale(c,t,n)}return e},i.bounds=function(e){for(var t=i.allBodies(e),n=[],o=0;o<t.length;o+=1){var r=t[o];n.push(r.bounds.min,r.bounds.max)}return a.create(n)}},function(e,t,n){var i={};e.exports=i;var o=n(4),r=n(5),a=n(0);i._motionWakeThreshold=.18,i._motionSleepThreshold=.08,i._minBias=.9,i.update=function(e,t){for(var n=t/a._baseDelta,r=i._motionSleepThreshold,s=0;s<e.length;s++){var l=e[s],c=o.getSpeed(l),u=o.getAngularSpeed(l),d=c*c+u*u;if(0===l.force.x&&0===l.force.y){var p=Math.min(l.motion,d),f=Math.max(l.motion,d);l.motion=i._minBias*p+(1-i._minBias)*f,l.sleepThreshold>0&&l.motion<r?(l.sleepCounter+=1,l.sleepCounter>=l.sleepThreshold/n&&i.set(l,!0)):l.sleepCounter>0&&(l.sleepCounter-=1)}else i.set(l,!1)}},i.afterCollisions=function(e){for(var t=i._motionSleepThreshold,n=0;n<e.length;n++){var o=e[n];if(o.isActive){var r=o.collision,a=r.bodyA.parent,s=r.bodyB.parent;if(!(a.isSleeping&&s.isSleeping||a.isStatic||s.isStatic)&&(a.isSleeping||s.isSleeping)){var l=a.isSleeping&&!a.isStatic?a:s,c=l===a?s:a;!l.isStatic&&c.motion>t&&i.set(l,!1)}}}},i.set=function(e,t){var n=e.isSleeping;t?(e.isSleeping=!0,e.sleepCounter=e.sleepThreshold,e.positionImpulse.x=0,e.positionImpulse.y=0,e.positionPrev.x=e.position.x,e.positionPrev.y=e.position.y,e.anglePrev=e.angle,e.speed=0,e.angularSpeed=0,e.motion=0,n||r.trigger(e,"sleepStart")):(e.isSleeping=!1,e.sleepCounter=0,n&&r.trigger(e,"sleepEnd"))}},function(e,t,n){var i={};e.exports=i;var o,r,a,s=n(3),l=n(9);o=[],r={overlap:0,axis:null},a={overlap:0,axis:null},i.create=function(e,t){return{pair:null,collided:!1,bodyA:e,bodyB:t,parentA:e.parent,parentB:t.parent,depth:0,normal:{x:0,y:0},tangent:{x:0,y:0},penetration:{x:0,y:0},supports:[]}},i.collides=function(e,t,n){if(i._overlapAxes(r,e.vertices,t.vertices,e.axes),r.overlap<=0)return null;if(i._overlapAxes(a,t.vertices,e.vertices,t.axes),a.overlap<=0)return null;var o,c,u=n&&n.table[l.id(e,t)];u?o=u.collision:((o=i.create(e,t)).collided=!0,o.bodyA=e.id<t.id?e:t,o.bodyB=e.id<t.id?t:e,o.parentA=o.bodyA.parent,o.parentB=o.bodyB.parent),e=o.bodyA,t=o.bodyB,c=r.overlap<a.overlap?r:a;var d=o.normal,p=o.supports,f=c.axis,v=f.x,y=f.y;v*(t.position.x-e.position.x)+y*(t.position.y-e.position.y)<0?(d.x=v,d.y=y):(d.x=-v,d.y=-y),o.tangent.x=-d.y,o.tangent.y=d.x,o.depth=c.overlap,o.penetration.x=d.x*o.depth,o.penetration.y=d.y*o.depth;var g=i._findSupports(e,t,d,1),m=0;if(s.contains(e.vertices,g[0])&&(p[m++]=g[0]),s.contains(e.vertices,g[1])&&(p[m++]=g[1]),m<2){var x=i._findSupports(t,e,d,-1);s.contains(t.vertices,x[0])&&(p[m++]=x[0]),m<2&&s.contains(t.vertices,x[1])&&(p[m++]=x[1])}return 0===m&&(p[m++]=g[0]),p.length=m,o},i._overlapAxes=function(e,t,n,i){var o,r,a,s,l,c,u=t.length,d=n.length,p=t[0].x,f=t[0].y,v=n[0].x,y=n[0].y,g=i.length,m=Number.MAX_VALUE,x=0;for(l=0;l<g;l++){var h=i[l],b=h.x,w=h.y,S=p*b+f*w,A=v*b+y*w,P=S,C=A;for(c=1;c<u;c+=1)(s=t[c].x*b+t[c].y*w)>P?P=s:s<S&&(S=s);for(c=1;c<d;c+=1)(s=n[c].x*b+n[c].y*w)>C?C=s:s<A&&(A=s);if((o=(r=P-A)<(a=C-S)?r:a)<m&&(m=o,x=l,o<=0))break}e.axis=i[x],e.overlap=m},i._projectToAxis=function(e,t,n){for(var i=t[0].x*n.x+t[0].y*n.y,o=i,r=1;r<t.length;r+=1){var a=t[r].x*n.x+t[r].y*n.y;a>o?o=a:a<i&&(i=a)}e.min=i,e.max=o},i._findSupports=function(e,t,n,i){var r,a,s,l,c,u=t.vertices,d=u.length,p=e.position.x,f=e.position.y,v=n.x*i,y=n.y*i,g=Number.MAX_VALUE;for(c=0;c<d;c+=1)(l=v*(p-(a=u[c]).x)+y*(f-a.y))<g&&(g=l,r=a);return g=v*(p-(s=u[(d+r.index-1)%d]).x)+y*(f-s.y),v*(p-(a=u[(r.index+1)%d]).x)+y*(f-a.y)<g?(o[0]=r,o[1]=a,o):(o[0]=r,o[1]=s,o)}},function(e,t,n){var i={};e.exports=i;var o=n(16);i.create=function(e,t){var n=e.bodyA,o=e.bodyB,r={id:i.id(n,o),bodyA:n,bodyB:o,collision:e,contacts:[],activeContacts:[],separation:0,isActive:!0,confirmedActive:!0,isSensor:n.isSensor||o.isSensor,timeCreated:t,timeUpdated:t,inverseMass:0,friction:0,frictionStatic:0,restitution:0,slop:0};return i.update(r,e,t),r},i.update=function(e,t,n){var i=e.contacts,r=t.supports,a=e.activeContacts,s=t.parentA,l=t.parentB,c=s.vertices.length;e.isActive=!0,e.timeUpdated=n,e.collision=t,e.separation=t.depth,e.inverseMass=s.inverseMass+l.inverseMass,e.friction=s.friction<l.friction?s.friction:l.friction,e.frictionStatic=s.frictionStatic>l.frictionStatic?s.frictionStatic:l.frictionStatic,e.restitution=s.restitution>l.restitution?s.restitution:l.restitution,e.slop=s.slop>l.slop?s.slop:l.slop,t.pair=e,a.length=0;for(var u=0;u<r.length;u++){var d=r[u],p=d.body===s?d.index:c+d.index,f=i[p];f?a.push(f):a.push(i[p]=o.create(d))}},i.setActive=function(e,t,n){t?(e.isActive=!0,e.timeUpdated=n):(e.isActive=!1,e.activeContacts.length=0)},i.id=function(e,t){return e.id<t.id?"A"+e.id+"B"+t.id:"A"+t.id+"B"+e.id}},function(e,t,n){var i={};e.exports=i;var o=n(3),r=n(2),a=n(7),s=n(1),l=n(11),c=n(0);i._warming=.4,i._torqueDampen=1,i._minLength=1e-6,i.create=function(e){var t=e;t.bodyA&&!t.pointA&&(t.pointA={x:0,y:0}),t.bodyB&&!t.pointB&&(t.pointB={x:0,y:0});var n=t.bodyA?r.add(t.bodyA.position,t.pointA):t.pointA,i=t.bodyB?r.add(t.bodyB.position,t.pointB):t.pointB,o=r.magnitude(r.sub(n,i));t.length=void 0!==t.length?t.length:o,t.id=t.id||c.nextId(),t.label=t.label||"Constraint",t.type="constraint",t.stiffness=t.stiffness||(t.length>0?1:.7),t.damping=t.damping||0,t.angularStiffness=t.angularStiffness||0,t.angleA=t.bodyA?t.bodyA.angle:t.angleA,t.angleB=t.bodyB?t.bodyB.angle:t.angleB,t.plugin={};var a={visible:!0,lineWidth:2,strokeStyle:"#ffffff",type:"line",anchors:!0};return 0===t.length&&t.stiffness>.1?(a.type="pin",a.anchors=!1):t.stiffness<.9&&(a.type="spring"),t.render=c.extend(a,t.render),t},i.preSolveAll=function(e){for(var t=0;t<e.length;t+=1){var n=e[t],i=n.constraintImpulse;n.isStatic||0===i.x&&0===i.y&&0===i.angle||(n.position.x+=i.x,n.position.y+=i.y,n.angle+=i.angle)}},i.solveAll=function(e,t){for(var n=c.clamp(t/c._baseDelta,0,1),o=0;o<e.length;o+=1){var r=e[o],a=!r.bodyA||r.bodyA&&r.bodyA.isStatic,s=!r.bodyB||r.bodyB&&r.bodyB.isStatic;(a||s)&&i.solve(e[o],n)}for(o=0;o<e.length;o+=1)a=!(r=e[o]).bodyA||r.bodyA&&r.bodyA.isStatic,s=!r.bodyB||r.bodyB&&r.bodyB.isStatic,a||s||i.solve(e[o],n)},i.solve=function(e,t){var n=e.bodyA,o=e.bodyB,a=e.pointA,s=e.pointB;if(n||o){n&&!n.isStatic&&(r.rotate(a,n.angle-e.angleA,a),e.angleA=n.angle),o&&!o.isStatic&&(r.rotate(s,o.angle-e.angleB,s),e.angleB=o.angle);var l=a,c=s;if(n&&(l=r.add(n.position,a)),o&&(c=r.add(o.position,s)),l&&c){var u=r.sub(l,c),d=r.magnitude(u);d<i._minLength&&(d=i._minLength);var p,f,v,y,g,m=(d-e.length)/d,x=e.stiffness>=1||0===e.length?e.stiffness*t:e.stiffness*t*t,h=e.damping*t,b=r.mult(u,m*x),w=(n?n.inverseMass:0)+(o?o.inverseMass:0),S=w+((n?n.inverseInertia:0)+(o?o.inverseInertia:0));if(h>0){var A=r.create();v=r.div(u,d),g=r.sub(o&&r.sub(o.position,o.positionPrev)||A,n&&r.sub(n.position,n.positionPrev)||A),y=r.dot(v,g)}n&&!n.isStatic&&(f=n.inverseMass/w,n.constraintImpulse.x-=b.x*f,n.constraintImpulse.y-=b.y*f,n.position.x-=b.x*f,n.position.y-=b.y*f,h>0&&(n.positionPrev.x-=h*v.x*y*f,n.positionPrev.y-=h*v.y*y*f),p=r.cross(a,b)/S*i._torqueDampen*n.inverseInertia*(1-e.angularStiffness),n.constraintImpulse.angle-=p,n.angle-=p),o&&!o.isStatic&&(f=o.inverseMass/w,o.constraintImpulse.x+=b.x*f,o.constraintImpulse.y+=b.y*f,o.position.x+=b.x*f,o.position.y+=b.y*f,h>0&&(o.positionPrev.x+=h*v.x*y*f,o.positionPrev.y+=h*v.y*y*f),p=r.cross(s,b)/S*i._torqueDampen*o.inverseInertia*(1-e.angularStiffness),o.constraintImpulse.angle+=p,o.angle+=p)}}},i.postSolveAll=function(e){for(var t=0;t<e.length;t++){var n=e[t],c=n.constraintImpulse;if(!(n.isStatic||0===c.x&&0===c.y&&0===c.angle)){a.set(n,!1);for(var u=0;u<n.parts.length;u++){var d=n.parts[u];o.translate(d.vertices,c),u>0&&(d.position.x+=c.x,d.position.y+=c.y),0!==c.angle&&(o.rotate(d.vertices,c.angle,n.position),l.rotate(d.axes,c.angle),u>0&&r.rotateAbout(d.position,c.angle,n.position,d.position)),s.update(d.bounds,d.vertices,n.velocity)}c.angle*=i._warming,c.x*=i._warming,c.y*=i._warming}}},i.pointAWorld=function(e){return{x:(e.bodyA?e.bodyA.position.x:0)+(e.pointA?e.pointA.x:0),y:(e.bodyA?e.bodyA.position.y:0)+(e.pointA?e.pointA.y:0)}},i.pointBWorld=function(e){return{x:(e.bodyB?e.bodyB.position.x:0)+(e.pointB?e.pointB.x:0),y:(e.bodyB?e.bodyB.position.y:0)+(e.pointB?e.pointB.y:0)}}},function(e,t,n){var i={};e.exports=i;var o=n(2),r=n(0);i.fromVertices=function(e){for(var t={},n=0;n<e.length;n++){var i=(n+1)%e.length,a=o.normalise({x:e[i].y-e[n].y,y:e[n].x-e[i].x}),s=0===a.y?1/0:a.x/a.y;t[s=s.toFixed(3).toString()]=a}return r.values(t)},i.rotate=function(e,t){if(0!==t)for(var n=Math.cos(t),i=Math.sin(t),o=0;o<e.length;o++){var r,a=e[o];r=a.x*n-a.y*i,a.y=a.x*i+a.y*n,a.x=r}}},function(e,t,n){var i={};e.exports=i;var o=n(3),r=n(0),a=n(4),s=n(1),l=n(2);i.rectangle=function(e,t,n,i,s){s=s||{};var l={label:"Rectangle Body",position:{x:e,y:t},vertices:o.fromPath("L 0 0 L "+n+" 0 L "+n+" "+i+" L 0 "+i)};if(s.chamfer){var c=s.chamfer;l.vertices=o.chamfer(l.vertices,c.radius,c.quality,c.qualityMin,c.qualityMax),delete s.chamfer}return a.create(r.extend({},l,s))},i.trapezoid=function(e,t,n,i,s,l){l=l||{};var c,u=n*(s*=.5),d=u+(1-2*s)*n,p=d+u;c=s<.5?"L 0 0 L "+u+" "+-i+" L "+d+" "+-i+" L "+p+" 0":"L 0 0 L "+d+" "+-i+" L "+p+" 0";var f={label:"Trapezoid Body",position:{x:e,y:t},vertices:o.fromPath(c)};if(l.chamfer){var v=l.chamfer;f.vertices=o.chamfer(f.vertices,v.radius,v.quality,v.qualityMin,v.qualityMax),delete l.chamfer}return a.create(r.extend({},f,l))},i.circle=function(e,t,n,o,a){o=o||{};var s={label:"Circle Body",circleRadius:n};a=a||25;var l=Math.ceil(Math.max(10,Math.min(a,n)));return l%2==1&&(l+=1),i.polygon(e,t,l,n,r.extend({},s,o))},i.polygon=function(e,t,n,s,l){if(l=l||{},n<3)return i.circle(e,t,s,l);for(var c=2*Math.PI/n,u="",d=.5*c,p=0;p<n;p+=1){var f=d+p*c,v=Math.cos(f)*s,y=Math.sin(f)*s;u+="L "+v.toFixed(3)+" "+y.toFixed(3)+" "}var g={label:"Polygon Body",position:{x:e,y:t},vertices:o.fromPath(u)};if(l.chamfer){var m=l.chamfer;g.vertices=o.chamfer(g.vertices,m.radius,m.quality,m.qualityMin,m.qualityMax),delete l.chamfer}return a.create(r.extend({},g,l))},i.fromVertices=function(e,t,n,i,c,u,d,p){var f,v,y,g,m,x,h,b,w,S,A=r.getDecomp();for(f=Boolean(A&&A.quickDecomp),i=i||{},y=[],c=void 0!==c&&c,u=void 0!==u?u:.01,d=void 0!==d?d:10,p=void 0!==p?p:.01,r.isArray(n[0])||(n=[n]),w=0;w<n.length;w+=1)if(m=n[w],!(g=o.isConvex(m))&&!f&&r.warnOnce("Bodies.fromVertices: Install the 'poly-decomp' library and use Common.setDecomp or provide 'decomp' as a global to decompose concave vertices."),g||!f)m=g?o.clockwiseSort(m):o.hull(m),y.push({position:{x:e,y:t},vertices:m});else{var P=m.map((function(e){return[e.x,e.y]}));A.makeCCW(P),!1!==u&&A.removeCollinearPoints(P,u),!1!==p&&A.removeDuplicatePoints&&A.removeDuplicatePoints(P,p);var C=A.quickDecomp(P);for(x=0;x<C.length;x++){var B=C[x].map((function(e){return{x:e[0],y:e[1]}}));d>0&&o.area(B)<d||y.push({position:o.centre(B),vertices:B})}}for(x=0;x<y.length;x++)y[x]=a.create(r.extend(y[x],i));if(c)for(x=0;x<y.length;x++){var M=y[x];for(h=x+1;h<y.length;h++){var _=y[h];if(s.overlaps(M.bounds,_.bounds)){var k=M.vertices,I=_.vertices;for(b=0;b<M.vertices.length;b++)for(S=0;S<_.vertices.length;S++){var T=l.magnitudeSquared(l.sub(k[(b+1)%k.length],I[S])),R=l.magnitudeSquared(l.sub(k[b],I[(S+1)%I.length]));T<5&&R<5&&(k[b].isInternal=!0,I[S].isInternal=!0)}}}}return y.length>1?(v=a.create(r.extend({parts:y.slice(0)},i)),a.setPosition(v,{x:e,y:t}),v):y[0]}},function(e,t,n){var i={};e.exports=i;var o=n(0),r=n(8);i.create=function(e){return o.extend({bodies:[],pairs:null},e)},i.setBodies=function(e,t){e.bodies=t.slice(0)},i.clear=function(e){e.bodies=[]},i.collisions=function(e){var t,n,o=[],a=e.pairs,s=e.bodies,l=s.length,c=i.canCollide,u=r.collides;for(s.sort(i._compareBoundsX),t=0;t<l;t++){var d=s[t],p=d.bounds,f=d.bounds.max.x,v=d.bounds.max.y,y=d.bounds.min.y,g=d.isStatic||d.isSleeping,m=d.parts.length,x=1===m;for(n=t+1;n<l;n++){var h=s[n];if((M=h.bounds).min.x>f)break;if(!(v<M.min.y||y>M.max.y)&&(!g||!h.isStatic&&!h.isSleeping)&&c(d.collisionFilter,h.collisionFilter)){var b=h.parts.length;if(x&&1===b)(C=u(d,h,a))&&o.push(C);else for(var w=b>1?1:0,S=m>1?1:0;S<m;S++)for(var A=d.parts[S],P=(p=A.bounds,w);P<b;P++){var C,B=h.parts[P],M=B.bounds;p.min.x>M.max.x||p.max.x<M.min.x||p.max.y<M.min.y||p.min.y>M.max.y||(C=u(A,B,a))&&o.push(C)}}}}return o},i.canCollide=function(e,t){return e.group===t.group&&0!==e.group?e.group>0:0!=(e.mask&t.category)&&0!=(t.mask&e.category)},i._compareBoundsX=function(e,t){return e.bounds.min.x-t.bounds.min.x}},function(e,t,n){var i={};e.exports=i;var o=n(0);i.create=function(e){var t={};return e||o.log("Mouse.create: element was undefined, defaulting to document.body","warn"),t.element=e||document.body,t.absolute={x:0,y:0},t.position={x:0,y:0},t.mousedownPosition={x:0,y:0},t.mouseupPosition={x:0,y:0},t.offset={x:0,y:0},t.scale={x:1,y:1},t.wheelDelta=0,t.button=-1,t.pixelRatio=parseInt(t.element.getAttribute("data-pixel-ratio"),10)||1,t.sourceEvents={mousemove:null,mousedown:null,mouseup:null,mousewheel:null},t.mousemove=function(e){var n=i._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches&&(t.button=0,e.preventDefault()),t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.sourceEvents.mousemove=e},t.mousedown=function(e){var n=i._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches?(t.button=0,e.preventDefault()):t.button=e.button,t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mousedownPosition.x=t.position.x,t.mousedownPosition.y=t.position.y,t.sourceEvents.mousedown=e},t.mouseup=function(e){var n=i._getRelativeMousePosition(e,t.element,t.pixelRatio);e.changedTouches&&e.preventDefault(),t.button=-1,t.absolute.x=n.x,t.absolute.y=n.y,t.position.x=t.absolute.x*t.scale.x+t.offset.x,t.position.y=t.absolute.y*t.scale.y+t.offset.y,t.mouseupPosition.x=t.position.x,t.mouseupPosition.y=t.position.y,t.sourceEvents.mouseup=e},t.mousewheel=function(e){t.wheelDelta=Math.max(-1,Math.min(1,e.wheelDelta||-e.detail)),e.preventDefault()},i.setElement(t,t.element),t},i.setElement=function(e,t){e.element=t,t.addEventListener("mousemove",e.mousemove),t.addEventListener("mousedown",e.mousedown),t.addEventListener("mouseup",e.mouseup),t.addEventListener("mousewheel",e.mousewheel),t.addEventListener("DOMMouseScroll",e.mousewheel),t.addEventListener("touchmove",e.mousemove),t.addEventListener("touchstart",e.mousedown),t.addEventListener("touchend",e.mouseup)},i.clearSourceEvents=function(e){e.sourceEvents.mousemove=null,e.sourceEvents.mousedown=null,e.sourceEvents.mouseup=null,e.sourceEvents.mousewheel=null,e.wheelDelta=0},i.setOffset=function(e,t){e.offset.x=t.x,e.offset.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},i.setScale=function(e,t){e.scale.x=t.x,e.scale.y=t.y,e.position.x=e.absolute.x*e.scale.x+e.offset.x,e.position.y=e.absolute.y*e.scale.y+e.offset.y},i._getRelativeMousePosition=function(e,t,n){var i,o,r=t.getBoundingClientRect(),a=document.documentElement||document.body.parentNode||document.body,s=void 0!==window.pageXOffset?window.pageXOffset:a.scrollLeft,l=void 0!==window.pageYOffset?window.pageYOffset:a.scrollTop,c=e.changedTouches;return c?(i=c[0].pageX-r.left-s,o=c[0].pageY-r.top-l):(i=e.pageX-r.left-s,o=e.pageY-r.top-l),{x:i/(t.clientWidth/(t.width||t.clientWidth)*n),y:o/(t.clientHeight/(t.height||t.clientHeight)*n)}}},function(e,t,n){var i={};e.exports=i;var o=n(0);i._registry={},i.register=function(e){if(i.isPlugin(e)||o.warn("Plugin.register:",i.toString(e),"does not implement all required fields."),e.name in i._registry){var t=i._registry[e.name],n=i.versionParse(e.version).number,r=i.versionParse(t.version).number;n>r?(o.warn("Plugin.register:",i.toString(t),"was upgraded to",i.toString(e)),i._registry[e.name]=e):n<r?o.warn("Plugin.register:",i.toString(t),"can not be downgraded to",i.toString(e)):e!==t&&o.warn("Plugin.register:",i.toString(e),"is already registered to different plugin object")}else i._registry[e.name]=e;return e},i.resolve=function(e){return i._registry[i.dependencyParse(e).name]},i.toString=function(e){return"string"==typeof e?e:(e.name||"anonymous")+"@"+(e.version||e.range||"0.0.0")},i.isPlugin=function(e){return e&&e.name&&e.version&&e.install},i.isUsed=function(e,t){return e.used.indexOf(t)>-1},i.isFor=function(e,t){var n=e.for&&i.dependencyParse(e.for);return!e.for||t.name===n.name&&i.versionSatisfies(t.version,n.range)},i.use=function(e,t){if(e.uses=(e.uses||[]).concat(t||[]),0!==e.uses.length){for(var n=i.dependencies(e),r=o.topologicalSort(n),a=[],s=0;s<r.length;s+=1)if(r[s]!==e.name){var l=i.resolve(r[s]);l?i.isUsed(e,l.name)||(i.isFor(l,e)||(o.warn("Plugin.use:",i.toString(l),"is for",l.for,"but installed on",i.toString(e)+"."),l._warned=!0),l.install?l.install(e):(o.warn("Plugin.use:",i.toString(l),"does not specify an install function."),l._warned=!0),l._warned?(a.push("🔶 "+i.toString(l)),delete l._warned):a.push("✅ "+i.toString(l)),e.used.push(l.name)):a.push("❌ "+r[s])}a.length>0&&o.info(a.join("  "))}else o.warn("Plugin.use:",i.toString(e),"does not specify any dependencies to install.")},i.dependencies=function(e,t){var n=i.dependencyParse(e),r=n.name;if(!(r in(t=t||{}))){e=i.resolve(e)||e,t[r]=o.map(e.uses||[],(function(t){i.isPlugin(t)&&i.register(t);var r=i.dependencyParse(t),a=i.resolve(t);return a&&!i.versionSatisfies(a.version,r.range)?(o.warn("Plugin.dependencies:",i.toString(a),"does not satisfy",i.toString(r),"used by",i.toString(n)+"."),a._warned=!0,e._warned=!0):a||(o.warn("Plugin.dependencies:",i.toString(t),"used by",i.toString(n),"could not be resolved."),e._warned=!0),r.name}));for(var a=0;a<t[r].length;a+=1)i.dependencies(t[r][a],t);return t}},i.dependencyParse=function(e){return o.isString(e)?(/^[\w-]+(@(\*|[\^~]?\d+\.\d+\.\d+(-[0-9A-Za-z-+]+)?))?$/.test(e)||o.warn("Plugin.dependencyParse:",e,"is not a valid dependency string."),{name:e.split("@")[0],range:e.split("@")[1]||"*"}):{name:e.name,range:e.range||e.version}},i.versionParse=function(e){var t=/^(\*)|(\^|~|>=|>)?\s*((\d+)\.(\d+)\.(\d+))(-[0-9A-Za-z-+]+)?$/;t.test(e)||o.warn("Plugin.versionParse:",e,"is not a valid version or range.");var n=t.exec(e),i=Number(n[4]),r=Number(n[5]),a=Number(n[6]);return{isRange:Boolean(n[1]||n[2]),version:n[3],range:e,operator:n[1]||n[2]||"",major:i,minor:r,patch:a,parts:[i,r,a],prerelease:n[7],number:1e8*i+1e4*r+a}},i.versionSatisfies=function(e,t){t=t||"*";var n=i.versionParse(t),o=i.versionParse(e);if(n.isRange){if("*"===n.operator||"*"===e)return!0;if(">"===n.operator)return o.number>n.number;if(">="===n.operator)return o.number>=n.number;if("~"===n.operator)return o.major===n.major&&o.minor===n.minor&&o.patch>=n.patch;if("^"===n.operator)return n.major>0?o.major===n.major&&o.number>=n.number:n.minor>0?o.minor===n.minor&&o.patch>=n.patch:o.patch===n.patch}return e===t||"*"===e}},function(e,t){var n={};e.exports=n,n.create=function(e){return{vertex:e,normalImpulse:0,tangentImpulse:0}}},function(e,t,n){var i={};e.exports=i;var o=n(7),r=n(18),a=n(13),s=n(19),l=n(5),c=n(6),u=n(10),d=n(0),p=n(4);i.create=function(e){e=e||{};var t=d.extend({positionIterations:6,velocityIterations:4,constraintIterations:2,enableSleeping:!1,events:[],plugin:{},gravity:{x:0,y:1,scale:.001},timing:{timestamp:0,timeScale:1,lastDelta:0,lastElapsed:0}},e);return t.world=e.world||c.create({label:"World"}),t.pairs=e.pairs||s.create(),t.detector=e.detector||a.create(),t.grid={buckets:[]},t.world.gravity=t.gravity,t.broadphase=t.grid,t.metrics={},t},i.update=function(e,t){var n,p=d.now(),f=e.world,v=e.detector,y=e.pairs,g=e.timing,m=g.timestamp;t=void 0!==t?t:d._baseDelta,t*=g.timeScale,g.timestamp+=t,g.lastDelta=t;var x={timestamp:g.timestamp,delta:t};l.trigger(e,"beforeUpdate",x);var h=c.allBodies(f),b=c.allConstraints(f);for(f.isModified&&(a.setBodies(v,h),c.setModified(f,!1,!1,!0)),e.enableSleeping&&o.update(h,t),i._bodiesApplyGravity(h,e.gravity),t>0&&i._bodiesUpdate(h,t),u.preSolveAll(h),n=0;n<e.constraintIterations;n++)u.solveAll(b,t);u.postSolveAll(h),v.pairs=e.pairs;var w=a.collisions(v);s.update(y,w,m),e.enableSleeping&&o.afterCollisions(y.list),y.collisionStart.length>0&&l.trigger(e,"collisionStart",{pairs:y.collisionStart});var S=d.clamp(20/e.positionIterations,0,1);for(r.preSolvePosition(y.list),n=0;n<e.positionIterations;n++)r.solvePosition(y.list,t,S);for(r.postSolvePosition(h),u.preSolveAll(h),n=0;n<e.constraintIterations;n++)u.solveAll(b,t);for(u.postSolveAll(h),r.preSolveVelocity(y.list),n=0;n<e.velocityIterations;n++)r.solveVelocity(y.list,t);return i._bodiesUpdateVelocities(h),y.collisionActive.length>0&&l.trigger(e,"collisionActive",{pairs:y.collisionActive}),y.collisionEnd.length>0&&l.trigger(e,"collisionEnd",{pairs:y.collisionEnd}),i._bodiesClearForces(h),l.trigger(e,"afterUpdate",x),e.timing.lastElapsed=d.now()-p,e},i.merge=function(e,t){if(d.extend(e,t),t.world){e.world=t.world,i.clear(e);for(var n=c.allBodies(e.world),r=0;r<n.length;r++){var a=n[r];o.set(a,!1),a.id=d.nextId()}}},i.clear=function(e){s.clear(e.pairs),a.clear(e.detector)},i._bodiesClearForces=function(e){for(var t=e.length,n=0;n<t;n++){var i=e[n];i.force.x=0,i.force.y=0,i.torque=0}},i._bodiesApplyGravity=function(e,t){var n=void 0!==t.scale?t.scale:.001,i=e.length;if((0!==t.x||0!==t.y)&&0!==n)for(var o=0;o<i;o++){var r=e[o];r.isStatic||r.isSleeping||(r.force.y+=r.mass*t.y*n,r.force.x+=r.mass*t.x*n)}},i._bodiesUpdate=function(e,t){for(var n=e.length,i=0;i<n;i++){var o=e[i];o.isStatic||o.isSleeping||p.update(o,t)}},i._bodiesUpdateVelocities=function(e){for(var t=e.length,n=0;n<t;n++)p.updateVelocities(e[n])}},function(e,t,n){var i={};e.exports=i;var o=n(3),r=n(0),a=n(1);i._restingThresh=2,i._restingThreshTangent=Math.sqrt(6),i._positionDampen=.9,i._positionWarming=.8,i._frictionNormalMultiplier=5,i._frictionMaxStatic=Number.MAX_VALUE,i.preSolvePosition=function(e){var t,n,i,o=e.length;for(t=0;t<o;t++)(n=e[t]).isActive&&(i=n.activeContacts.length,n.collision.parentA.totalContacts+=i,n.collision.parentB.totalContacts+=i)},i.solvePosition=function(e,t,n){var o,a,s,l,c,u,d,p,f=i._positionDampen*(n||1),v=r.clamp(t/r._baseDelta,0,1),y=e.length;for(o=0;o<y;o++)(a=e[o]).isActive&&!a.isSensor&&(l=(s=a.collision).parentA,c=s.parentB,u=s.normal,a.separation=u.x*(c.positionImpulse.x+s.penetration.x-l.positionImpulse.x)+u.y*(c.positionImpulse.y+s.penetration.y-l.positionImpulse.y));for(o=0;o<y;o++)(a=e[o]).isActive&&!a.isSensor&&(l=(s=a.collision).parentA,c=s.parentB,u=s.normal,p=a.separation-a.slop*v,(l.isStatic||c.isStatic)&&(p*=2),l.isStatic||l.isSleeping||(d=f/l.totalContacts,l.positionImpulse.x+=u.x*p*d,l.positionImpulse.y+=u.y*p*d),c.isStatic||c.isSleeping||(d=f/c.totalContacts,c.positionImpulse.x-=u.x*p*d,c.positionImpulse.y-=u.y*p*d))},i.postSolvePosition=function(e){for(var t=i._positionWarming,n=e.length,r=o.translate,s=a.update,l=0;l<n;l++){var c=e[l],u=c.positionImpulse,d=u.x,p=u.y,f=c.velocity;if(c.totalContacts=0,0!==d||0!==p){for(var v=0;v<c.parts.length;v++){var y=c.parts[v];r(y.vertices,u),s(y.bounds,y.vertices,f),y.position.x+=d,y.position.y+=p}c.positionPrev.x+=d,c.positionPrev.y+=p,d*f.x+p*f.y<0?(u.x=0,u.y=0):(u.x*=t,u.y*=t)}}},i.preSolveVelocity=function(e){var t,n,i=e.length;for(t=0;t<i;t++){var o=e[t];if(o.isActive&&!o.isSensor){var r=o.activeContacts,a=r.length,s=o.collision,l=s.parentA,c=s.parentB,u=s.normal,d=s.tangent;for(n=0;n<a;n++){var p=r[n],f=p.vertex,v=p.normalImpulse,y=p.tangentImpulse;if(0!==v||0!==y){var g=u.x*v+d.x*y,m=u.y*v+d.y*y;l.isStatic||l.isSleeping||(l.positionPrev.x+=g*l.inverseMass,l.positionPrev.y+=m*l.inverseMass,l.anglePrev+=l.inverseInertia*((f.x-l.position.x)*m-(f.y-l.position.y)*g)),c.isStatic||c.isSleeping||(c.positionPrev.x-=g*c.inverseMass,c.positionPrev.y-=m*c.inverseMass,c.anglePrev-=c.inverseInertia*((f.x-c.position.x)*m-(f.y-c.position.y)*g))}}}}},i.solveVelocity=function(e,t){var n,o,a,s,l=t/r._baseDelta,c=l*l*l,u=-i._restingThresh*l,d=i._restingThreshTangent,p=i._frictionNormalMultiplier*l,f=i._frictionMaxStatic,v=e.length;for(a=0;a<v;a++){var y=e[a];if(y.isActive&&!y.isSensor){var g=y.collision,m=g.parentA,x=g.parentB,h=m.velocity,b=x.velocity,w=g.normal.x,S=g.normal.y,A=g.tangent.x,P=g.tangent.y,C=y.activeContacts,B=C.length,M=1/B,_=m.inverseMass+x.inverseMass,k=y.friction*y.frictionStatic*p;for(h.x=m.position.x-m.positionPrev.x,h.y=m.position.y-m.positionPrev.y,b.x=x.position.x-x.positionPrev.x,b.y=x.position.y-x.positionPrev.y,m.angularVelocity=m.angle-m.anglePrev,x.angularVelocity=x.angle-x.anglePrev,s=0;s<B;s++){var I=C[s],T=I.vertex,R=T.x-m.position.x,V=T.y-m.position.y,E=T.x-x.position.x,L=T.y-x.position.y,D=h.x-V*m.angularVelocity,H=h.y+R*m.angularVelocity,O=D-(b.x-L*x.angularVelocity),F=H-(b.y+E*x.angularVelocity),q=w*O+S*F,W=A*O+P*F,j=y.separation+q,G=Math.min(j,1),U=(G=j<0?0:G)*k;W<-U||W>U?(o=W>0?W:-W,(n=y.friction*(W>0?1:-1)*c)<-o?n=-o:n>o&&(n=o)):(n=W,o=f);var N=R*S-V*w,z=E*S-L*w,$=M/(_+m.inverseInertia*N*N+x.inverseInertia*z*z),X=(1+y.restitution)*q*$;if(n*=$,q<u)I.normalImpulse=0;else{var Q=I.normalImpulse;I.normalImpulse+=X,I.normalImpulse>0&&(I.normalImpulse=0),X=I.normalImpulse-Q}if(W<-d||W>d)I.tangentImpulse=0;else{var Y=I.tangentImpulse;I.tangentImpulse+=n,I.tangentImpulse<-o&&(I.tangentImpulse=-o),I.tangentImpulse>o&&(I.tangentImpulse=o),n=I.tangentImpulse-Y}var Z=w*X+A*n,J=S*X+P*n;m.isStatic||m.isSleeping||(m.positionPrev.x+=Z*m.inverseMass,m.positionPrev.y+=J*m.inverseMass,m.anglePrev+=(R*J-V*Z)*m.inverseInertia),x.isStatic||x.isSleeping||(x.positionPrev.x-=Z*x.inverseMass,x.positionPrev.y-=J*x.inverseMass,x.anglePrev-=(E*J-L*Z)*x.inverseInertia)}}}}},function(e,t,n){var i={};e.exports=i;var o=n(9),r=n(0);i.create=function(e){return r.extend({table:{},list:[],collisionStart:[],collisionActive:[],collisionEnd:[]},e)},i.update=function(e,t,n){var i,r,a,s,l=e.list,c=l.length,u=e.table,d=t.length,p=e.collisionStart,f=e.collisionEnd,v=e.collisionActive;for(p.length=0,f.length=0,v.length=0,s=0;s<c;s++)l[s].confirmedActive=!1;for(s=0;s<d;s++)(a=(i=t[s]).pair)?(a.isActive?v.push(a):p.push(a),o.update(a,i,n),a.confirmedActive=!0):(u[(a=o.create(i,n)).id]=a,p.push(a),l.push(a));var y=[];for(c=l.length,s=0;s<c;s++)(a=l[s]).confirmedActive||(o.setActive(a,!1,n),f.push(a),a.collision.bodyA.isSleeping||a.collision.bodyB.isSleeping||y.push(s));for(s=0;s<y.length;s++)a=l[r=y[s]-s],l.splice(r,1),delete u[a.id]},i.clear=function(e){return e.table={},e.list.length=0,e.collisionStart.length=0,e.collisionActive.length=0,e.collisionEnd.length=0,e}},function(e,t,n){var i=e.exports=n(21);i.Axes=n(11),i.Bodies=n(12),i.Body=n(4),i.Bounds=n(1),i.Collision=n(8),i.Common=n(0),i.Composite=n(6),i.Composites=n(22),i.Constraint=n(10),i.Contact=n(16),i.Detector=n(13),i.Engine=n(17),i.Events=n(5),i.Grid=n(23),i.Mouse=n(14),i.MouseConstraint=n(24),i.Pair=n(9),i.Pairs=n(19),i.Plugin=n(15),i.Query=n(25),i.Render=n(26),i.Resolver=n(18),i.Runner=n(27),i.SAT=n(28),i.Sleeping=n(7),i.Svg=n(29),i.Vector=n(2),i.Vertices=n(3),i.World=n(30),i.Engine.run=i.Runner.run,i.Common.deprecated(i.Engine,"run","Engine.run ➤ use Matter.Runner.run(engine) instead")},function(e,t,n){var i={};e.exports=i;var o=n(15),r=n(0);i.name="matter-js",i.version="0.19.0",i.uses=[],i.used=[],i.use=function(){o.use(i,Array.prototype.slice.call(arguments))},i.before=function(e,t){return e=e.replace(/^Matter./,""),r.chainPathBefore(i,e,t)},i.after=function(e,t){return e=e.replace(/^Matter./,""),r.chainPathAfter(i,e,t)}},function(e,t,n){var i={};e.exports=i;var o=n(6),r=n(10),a=n(0),s=n(4),l=n(12),c=a.deprecated;i.stack=function(e,t,n,i,r,a,l){for(var c,u=o.create({label:"Stack"}),d=e,p=t,f=0,v=0;v<i;v++){for(var y=0,g=0;g<n;g++){var m=l(d,p,g,v,c,f);if(m){var x=m.bounds.max.y-m.bounds.min.y,h=m.bounds.max.x-m.bounds.min.x;x>y&&(y=x),s.translate(m,{x:.5*h,y:.5*x}),d=m.bounds.max.x+r,o.addBody(u,m),c=m,f+=1}else d+=r}p+=y+a,d=e}return u},i.chain=function(e,t,n,i,s,l){for(var c=e.bodies,u=1;u<c.length;u++){var d=c[u-1],p=c[u],f=d.bounds.max.y-d.bounds.min.y,v=d.bounds.max.x-d.bounds.min.x,y=p.bounds.max.y-p.bounds.min.y,g={bodyA:d,pointA:{x:v*t,y:f*n},bodyB:p,pointB:{x:(p.bounds.max.x-p.bounds.min.x)*i,y:y*s}},m=a.extend(g,l);o.addConstraint(e,r.create(m))}return e.label+=" Chain",e},i.mesh=function(e,t,n,i,s){var l,c,u,d,p,f=e.bodies;for(l=0;l<n;l++){for(c=1;c<t;c++)u=f[c-1+l*t],d=f[c+l*t],o.addConstraint(e,r.create(a.extend({bodyA:u,bodyB:d},s)));if(l>0)for(c=0;c<t;c++)u=f[c+(l-1)*t],d=f[c+l*t],o.addConstraint(e,r.create(a.extend({bodyA:u,bodyB:d},s))),i&&c>0&&(p=f[c-1+(l-1)*t],o.addConstraint(e,r.create(a.extend({bodyA:p,bodyB:d},s)))),i&&c<t-1&&(p=f[c+1+(l-1)*t],o.addConstraint(e,r.create(a.extend({bodyA:p,bodyB:d},s))))}return e.label+=" Mesh",e},i.pyramid=function(e,t,n,o,r,a,l){return i.stack(e,t,n,o,r,a,(function(t,i,a,c,u,d){var p=Math.min(o,Math.ceil(n/2)),f=u?u.bounds.max.x-u.bounds.min.x:0;if(!(c>p||a<(c=p-c)||a>n-1-c))return 1===d&&s.translate(u,{x:(a+(n%2==1?1:-1))*f,y:0}),l(e+(u?a*f:0)+a*r,i,a,c,u,d)}))},i.newtonsCradle=function(e,t,n,i,a){for(var s=o.create({label:"Newtons Cradle"}),c=0;c<n;c++){var u=l.circle(e+c*(1.9*i),t+a,i,{inertia:1/0,restitution:1,friction:0,frictionAir:1e-4,slop:1}),d=r.create({pointA:{x:e+c*(1.9*i),y:t},bodyB:u});o.addBody(s,u),o.addConstraint(s,d)}return s},c(i,"newtonsCradle","Composites.newtonsCradle ➤ moved to newtonsCradle example"),i.car=function(e,t,n,i,a){var c=s.nextGroup(!0),u=.5*-n+20,d=.5*n-20,p=o.create({label:"Car"}),f=l.rectangle(e,t,n,i,{collisionFilter:{group:c},chamfer:{radius:.5*i},density:2e-4}),v=l.circle(e+u,t+0,a,{collisionFilter:{group:c},friction:.8}),y=l.circle(e+d,t+0,a,{collisionFilter:{group:c},friction:.8}),g=r.create({bodyB:f,pointB:{x:u,y:0},bodyA:v,stiffness:1,length:0}),m=r.create({bodyB:f,pointB:{x:d,y:0},bodyA:y,stiffness:1,length:0});return o.addBody(p,f),o.addBody(p,v),o.addBody(p,y),o.addConstraint(p,g),o.addConstraint(p,m),p},c(i,"car","Composites.car ➤ moved to car example"),i.softBody=function(e,t,n,o,r,s,c,u,d,p){d=a.extend({inertia:1/0},d),p=a.extend({stiffness:.2,render:{type:"line",anchors:!1}},p);var f=i.stack(e,t,n,o,r,s,(function(e,t){return l.circle(e,t,u,d)}));return i.mesh(f,n,o,c,p),f.label="Soft Body",f},c(i,"softBody","Composites.softBody ➤ moved to softBody and cloth examples")},function(e,t,n){var i={};e.exports=i;var o=n(9),r=n(0),a=r.deprecated;i.create=function(e){return r.extend({buckets:{},pairs:{},pairsList:[],bucketWidth:48,bucketHeight:48},e)},i.update=function(e,t,n,o){var r,a,s,l,c,u=n.world,d=e.buckets,p=!1;for(r=0;r<t.length;r++){var f=t[r];if((!f.isSleeping||o)&&(!u.bounds||!(f.bounds.max.x<u.bounds.min.x||f.bounds.min.x>u.bounds.max.x||f.bounds.max.y<u.bounds.min.y||f.bounds.min.y>u.bounds.max.y))){var v=i._getRegion(e,f);if(!f.region||v.id!==f.region.id||o){f.region&&!o||(f.region=v);var y=i._regionUnion(v,f.region);for(a=y.startCol;a<=y.endCol;a++)for(s=y.startRow;s<=y.endRow;s++){l=d[c=i._getBucketId(a,s)];var g=a>=v.startCol&&a<=v.endCol&&s>=v.startRow&&s<=v.endRow,m=a>=f.region.startCol&&a<=f.region.endCol&&s>=f.region.startRow&&s<=f.region.endRow;!g&&m&&m&&l&&i._bucketRemoveBody(e,l,f),(f.region===v||g&&!m||o)&&(l||(l=i._createBucket(d,c)),i._bucketAddBody(e,l,f))}f.region=v,p=!0}}}p&&(e.pairsList=i._createActivePairsList(e))},a(i,"update","Grid.update ➤ replaced by Matter.Detector"),i.clear=function(e){e.buckets={},e.pairs={},e.pairsList=[]},a(i,"clear","Grid.clear ➤ replaced by Matter.Detector"),i._regionUnion=function(e,t){var n=Math.min(e.startCol,t.startCol),o=Math.max(e.endCol,t.endCol),r=Math.min(e.startRow,t.startRow),a=Math.max(e.endRow,t.endRow);return i._createRegion(n,o,r,a)},i._getRegion=function(e,t){var n=t.bounds,o=Math.floor(n.min.x/e.bucketWidth),r=Math.floor(n.max.x/e.bucketWidth),a=Math.floor(n.min.y/e.bucketHeight),s=Math.floor(n.max.y/e.bucketHeight);return i._createRegion(o,r,a,s)},i._createRegion=function(e,t,n,i){return{id:e+","+t+","+n+","+i,startCol:e,endCol:t,startRow:n,endRow:i}},i._getBucketId=function(e,t){return"C"+e+"R"+t},i._createBucket=function(e,t){return e[t]=[]},i._bucketAddBody=function(e,t,n){var i,r=e.pairs,a=o.id,s=t.length;for(i=0;i<s;i++){var l=t[i];if(!(n.id===l.id||n.isStatic&&l.isStatic)){var c=a(n,l),u=r[c];u?u[2]+=1:r[c]=[n,l,1]}}t.push(n)},i._bucketRemoveBody=function(e,t,n){var i,a=e.pairs,s=o.id;t.splice(r.indexOf(t,n),1);var l=t.length;for(i=0;i<l;i++){var c=a[s(n,t[i])];c&&(c[2]-=1)}},i._createActivePairsList=function(e){var t,n,i=e.pairs,o=r.keys(i),a=o.length,s=[];for(n=0;n<a;n++)(t=i[o[n]])[2]>0?s.push(t):delete i[o[n]];return s}},function(e,t,n){var i={};e.exports=i;var o=n(3),r=n(7),a=n(14),s=n(5),l=n(13),c=n(10),u=n(6),d=n(0),p=n(1);i.create=function(e,t){var n=(e?e.mouse:null)||(t?t.mouse:null);n||(e&&e.render&&e.render.canvas?n=a.create(e.render.canvas):t&&t.element?n=a.create(t.element):(n=a.create(),d.warn("MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected")));var o={type:"mouseConstraint",mouse:n,element:null,body:null,constraint:c.create({label:"Mouse Constraint",pointA:n.position,pointB:{x:0,y:0},length:.01,stiffness:.1,angularStiffness:1,render:{strokeStyle:"#90EE90",lineWidth:3}}),collisionFilter:{category:1,mask:4294967295,group:0}},r=d.extend(o,t);return s.on(e,"beforeUpdate",(function(){var t=u.allBodies(e.world);i.update(r,t),i._triggerEvents(r)})),r},i.update=function(e,t){var n=e.mouse,i=e.constraint,a=e.body;if(0===n.button){if(i.bodyB)r.set(i.bodyB,!1),i.pointA=n.position;else for(var c=0;c<t.length;c++)if(a=t[c],p.contains(a.bounds,n.position)&&l.canCollide(a.collisionFilter,e.collisionFilter))for(var u=a.parts.length>1?1:0;u<a.parts.length;u++){var d=a.parts[u];if(o.contains(d.vertices,n.position)){i.pointA=n.position,i.bodyB=e.body=a,i.pointB={x:n.position.x-a.position.x,y:n.position.y-a.position.y},i.angleB=a.angle,r.set(a,!1),s.trigger(e,"startdrag",{mouse:n,body:a});break}}}else i.bodyB=e.body=null,i.pointB=null,a&&s.trigger(e,"enddrag",{mouse:n,body:a})},i._triggerEvents=function(e){var t=e.mouse,n=t.sourceEvents;n.mousemove&&s.trigger(e,"mousemove",{mouse:t}),n.mousedown&&s.trigger(e,"mousedown",{mouse:t}),n.mouseup&&s.trigger(e,"mouseup",{mouse:t}),a.clearSourceEvents(t)}},function(e,t,n){var i={};e.exports=i;var o=n(2),r=n(8),a=n(1),s=n(12),l=n(3);i.collides=function(e,t){for(var n=[],i=t.length,o=e.bounds,s=r.collides,l=a.overlaps,c=0;c<i;c++){var u=t[c],d=u.parts.length,p=1===d?0:1;if(l(u.bounds,o))for(var f=p;f<d;f++){var v=u.parts[f];if(l(v.bounds,o)){var y=s(v,e);if(y){n.push(y);break}}}}return n},i.ray=function(e,t,n,r){r=r||1e-100;for(var a=o.angle(t,n),l=o.magnitude(o.sub(t,n)),c=.5*(n.x+t.x),u=.5*(n.y+t.y),d=s.rectangle(c,u,l,r,{angle:a}),p=i.collides(d,e),f=0;f<p.length;f+=1){var v=p[f];v.body=v.bodyB=v.bodyA}return p},i.region=function(e,t,n){for(var i=[],o=0;o<e.length;o++){var r=e[o],s=a.overlaps(r.bounds,t);(s&&!n||!s&&n)&&i.push(r)}return i},i.point=function(e,t){for(var n=[],i=0;i<e.length;i++){var o=e[i];if(a.contains(o.bounds,t))for(var r=1===o.parts.length?0:1;r<o.parts.length;r++){var s=o.parts[r];if(a.contains(s.bounds,t)&&l.contains(s.vertices,t)){n.push(o);break}}}return n}},function(e,t,n){var i={};e.exports=i;var o=n(4),r=n(0),a=n(6),s=n(1),l=n(5),c=n(2),u=n(14);!function(){var e,t;"undefined"!=typeof window&&(e=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame||function(e){window.setTimeout((function(){e(r.now())}),1e3/60)},t=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),i._goodFps=30,i._goodDelta=1e3/60,i.create=function(e){var t={engine:null,element:null,canvas:null,mouse:null,frameRequestId:null,timing:{historySize:60,delta:0,deltaHistory:[],lastTime:0,lastTimestamp:0,lastElapsed:0,timestampElapsed:0,timestampElapsedHistory:[],engineDeltaHistory:[],engineElapsedHistory:[],elapsedHistory:[]},options:{width:800,height:600,pixelRatio:1,background:"#14151f",wireframeBackground:"#14151f",hasBounds:!!e.bounds,enabled:!0,wireframes:!0,showSleeping:!0,showDebug:!1,showStats:!1,showPerformance:!1,showBounds:!1,showVelocity:!1,showCollisions:!1,showSeparations:!1,showAxes:!1,showPositions:!1,showAngleIndicator:!1,showIds:!1,showVertexNumbers:!1,showConvexHulls:!1,showInternalEdges:!1,showMousePosition:!1}},n=r.extend(t,e);return n.canvas&&(n.canvas.width=n.options.width||n.canvas.width,n.canvas.height=n.options.height||n.canvas.height),n.mouse=e.mouse,n.engine=e.engine,n.canvas=n.canvas||p(n.options.width,n.options.height),n.context=n.canvas.getContext("2d"),n.textures={},n.bounds=n.bounds||{min:{x:0,y:0},max:{x:n.canvas.width,y:n.canvas.height}},n.controller=i,n.options.showBroadphase=!1,1!==n.options.pixelRatio&&i.setPixelRatio(n,n.options.pixelRatio),r.isElement(n.element)&&n.element.appendChild(n.canvas),n},i.run=function(t){!function o(r){t.frameRequestId=e(o),n(t,r),i.world(t,r),(t.options.showStats||t.options.showDebug)&&i.stats(t,t.context,r),(t.options.showPerformance||t.options.showDebug)&&i.performance(t,t.context,r)}()},i.stop=function(e){t(e.frameRequestId)},i.setPixelRatio=function(e,t){var n=e.options,i=e.canvas;"auto"===t&&(t=f(i)),n.pixelRatio=t,i.setAttribute("data-pixel-ratio",t),i.width=n.width*t,i.height=n.height*t,i.style.width=n.width+"px",i.style.height=n.height+"px"},i.lookAt=function(e,t,n,i){i=void 0===i||i,t=r.isArray(t)?t:[t],n=n||{x:0,y:0};for(var o={min:{x:1/0,y:1/0},max:{x:-1/0,y:-1/0}},a=0;a<t.length;a+=1){var s=t[a],l=s.bounds?s.bounds.min:s.min||s.position||s,c=s.bounds?s.bounds.max:s.max||s.position||s;l&&c&&(l.x<o.min.x&&(o.min.x=l.x),c.x>o.max.x&&(o.max.x=c.x),l.y<o.min.y&&(o.min.y=l.y),c.y>o.max.y&&(o.max.y=c.y))}var d=o.max.x-o.min.x+2*n.x,p=o.max.y-o.min.y+2*n.y,f=e.canvas.height,v=e.canvas.width/f,y=d/p,g=1,m=1;y>v?m=y/v:g=v/y,e.options.hasBounds=!0,e.bounds.min.x=o.min.x,e.bounds.max.x=o.min.x+d*g,e.bounds.min.y=o.min.y,e.bounds.max.y=o.min.y+p*m,i&&(e.bounds.min.x+=.5*d-d*g*.5,e.bounds.max.x+=.5*d-d*g*.5,e.bounds.min.y+=.5*p-p*m*.5,e.bounds.max.y+=.5*p-p*m*.5),e.bounds.min.x-=n.x,e.bounds.max.x-=n.x,e.bounds.min.y-=n.y,e.bounds.max.y-=n.y,e.mouse&&(u.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.canvas.width,y:(e.bounds.max.y-e.bounds.min.y)/e.canvas.height}),u.setOffset(e.mouse,e.bounds.min))},i.startViewTransform=function(e){var t=e.bounds.max.x-e.bounds.min.x,n=e.bounds.max.y-e.bounds.min.y,i=t/e.options.width,o=n/e.options.height;e.context.setTransform(e.options.pixelRatio/i,0,0,e.options.pixelRatio/o,0,0),e.context.translate(-e.bounds.min.x,-e.bounds.min.y)},i.endViewTransform=function(e){e.context.setTransform(e.options.pixelRatio,0,0,e.options.pixelRatio,0,0)},i.world=function(e,t){var n,o=r.now(),d=e.engine,p=d.world,f=e.canvas,v=e.context,g=e.options,m=e.timing,x=a.allBodies(p),h=a.allConstraints(p),b=g.wireframes?g.wireframeBackground:g.background,w=[],S=[],A={timestamp:d.timing.timestamp};if(l.trigger(e,"beforeRender",A),e.currentBackground!==b&&y(e,b),v.globalCompositeOperation="source-in",v.fillStyle="transparent",v.fillRect(0,0,f.width,f.height),v.globalCompositeOperation="source-over",g.hasBounds){for(n=0;n<x.length;n++){var P=x[n];s.overlaps(P.bounds,e.bounds)&&w.push(P)}for(n=0;n<h.length;n++){var C=h[n],B=C.bodyA,M=C.bodyB,_=C.pointA,k=C.pointB;B&&(_=c.add(B.position,C.pointA)),M&&(k=c.add(M.position,C.pointB)),_&&k&&(s.contains(e.bounds,_)||s.contains(e.bounds,k))&&S.push(C)}i.startViewTransform(e),e.mouse&&(u.setScale(e.mouse,{x:(e.bounds.max.x-e.bounds.min.x)/e.options.width,y:(e.bounds.max.y-e.bounds.min.y)/e.options.height}),u.setOffset(e.mouse,e.bounds.min))}else S=h,w=x,1!==e.options.pixelRatio&&e.context.setTransform(e.options.pixelRatio,0,0,e.options.pixelRatio,0,0);!g.wireframes||d.enableSleeping&&g.showSleeping?i.bodies(e,w,v):(g.showConvexHulls&&i.bodyConvexHulls(e,w,v),i.bodyWireframes(e,w,v)),g.showBounds&&i.bodyBounds(e,w,v),(g.showAxes||g.showAngleIndicator)&&i.bodyAxes(e,w,v),g.showPositions&&i.bodyPositions(e,w,v),g.showVelocity&&i.bodyVelocity(e,w,v),g.showIds&&i.bodyIds(e,w,v),g.showSeparations&&i.separations(e,d.pairs.list,v),g.showCollisions&&i.collisions(e,d.pairs.list,v),g.showVertexNumbers&&i.vertexNumbers(e,w,v),g.showMousePosition&&i.mousePosition(e,e.mouse,v),i.constraints(S,v),g.hasBounds&&i.endViewTransform(e),l.trigger(e,"afterRender",A),m.lastElapsed=r.now()-o},i.stats=function(e,t,n){for(var i=e.engine,o=i.world,r=a.allBodies(o),s=0,l=0,c=0;c<r.length;c+=1)s+=r[c].parts.length;var u={Part:s,Body:r.length,Cons:a.allConstraints(o).length,Comp:a.allComposites(o).length,Pair:i.pairs.list.length};for(var d in t.fillStyle="#0e0f19",t.fillRect(l,0,302.5,44),t.font="12px Arial",t.textBaseline="top",t.textAlign="right",u){var p=u[d];t.fillStyle="#aaa",t.fillText(d,l+55,8),t.fillStyle="#eee",t.fillText(p,l+55,26),l+=55}},i.performance=function(e,t){var n=e.engine,o=e.timing,r=o.deltaHistory,a=o.elapsedHistory,s=o.timestampElapsedHistory,l=o.engineDeltaHistory,c=o.engineElapsedHistory,u=n.timing.lastDelta,p=d(r),f=d(a),v=d(l),y=d(c),g=d(s)/p||0,m=1e3/p||0;t.fillStyle="#0e0f19",t.fillRect(0,50,370,34),i.status(t,10,69,60,4,r.length,Math.round(m)+" fps",m/i._goodFps,(function(e){return r[e]/p-1})),i.status(t,82,69,60,4,l.length,u.toFixed(2)+" dt",i._goodDelta/u,(function(e){return l[e]/v-1})),i.status(t,154,69,60,4,c.length,y.toFixed(2)+" ut",1-y/i._goodFps,(function(e){return c[e]/y-1})),i.status(t,226,69,60,4,a.length,f.toFixed(2)+" rt",1-f/i._goodFps,(function(e){return a[e]/f-1})),i.status(t,298,69,60,4,s.length,g.toFixed(2)+" x",g*g*g,(function(e){return(s[e]/r[e]/g||0)-1}))},i.status=function(e,t,n,i,o,a,s,l,c){e.strokeStyle="#888",e.fillStyle="#444",e.lineWidth=1,e.fillRect(t,n+7,i,1),e.beginPath(),e.moveTo(t,n+7-o*r.clamp(.4*c(0),-2,2));for(var u=0;u<i;u+=1)e.lineTo(t+u,n+7-(u<a?o*r.clamp(.4*c(u),-2,2):0));e.stroke(),e.fillStyle="hsl("+r.clamp(25+95*l,0,120)+",100%,60%)",e.fillRect(t,n-7,4,4),e.font="12px Arial",e.textBaseline="middle",e.textAlign="right",e.fillStyle="#eee",e.fillText(s,t+i,n-5)},i.constraints=function(e,t){for(var n=t,i=0;i<e.length;i++){var o=e[i];if(o.render.visible&&o.pointA&&o.pointB){var a,s,l=o.bodyA,u=o.bodyB;if(a=l?c.add(l.position,o.pointA):o.pointA,"pin"===o.render.type)n.beginPath(),n.arc(a.x,a.y,3,0,2*Math.PI),n.closePath();else{if(s=u?c.add(u.position,o.pointB):o.pointB,n.beginPath(),n.moveTo(a.x,a.y),"spring"===o.render.type)for(var d,p=c.sub(s,a),f=c.perp(c.normalise(p)),v=Math.ceil(r.clamp(o.length/5,12,20)),y=1;y<v;y+=1)d=y%2==0?1:-1,n.lineTo(a.x+p.x*(y/v)+f.x*d*4,a.y+p.y*(y/v)+f.y*d*4);n.lineTo(s.x,s.y)}o.render.lineWidth&&(n.lineWidth=o.render.lineWidth,n.strokeStyle=o.render.strokeStyle,n.stroke()),o.render.anchors&&(n.fillStyle=o.render.strokeStyle,n.beginPath(),n.arc(a.x,a.y,3,0,2*Math.PI),n.arc(s.x,s.y,3,0,2*Math.PI),n.closePath(),n.fill())}}},i.bodies=function(e,t,n){var i,o,r,a,s=n,l=(e.engine,e.options),c=l.showInternalEdges||!l.wireframes;for(r=0;r<t.length;r++)if((i=t[r]).render.visible)for(a=i.parts.length>1?1:0;a<i.parts.length;a++)if((o=i.parts[a]).render.visible){if(l.showSleeping&&i.isSleeping?s.globalAlpha=.5*o.render.opacity:1!==o.render.opacity&&(s.globalAlpha=o.render.opacity),o.render.sprite&&o.render.sprite.texture&&!l.wireframes){var u=o.render.sprite,d=v(e,u.texture);s.translate(o.position.x,o.position.y),s.rotate(o.angle),s.drawImage(d,d.width*-u.xOffset*u.xScale,d.height*-u.yOffset*u.yScale,d.width*u.xScale,d.height*u.yScale),s.rotate(-o.angle),s.translate(-o.position.x,-o.position.y)}else{if(o.circleRadius)s.beginPath(),s.arc(o.position.x,o.position.y,o.circleRadius,0,2*Math.PI);else{s.beginPath(),s.moveTo(o.vertices[0].x,o.vertices[0].y);for(var p=1;p<o.vertices.length;p++)!o.vertices[p-1].isInternal||c?s.lineTo(o.vertices[p].x,o.vertices[p].y):s.moveTo(o.vertices[p].x,o.vertices[p].y),o.vertices[p].isInternal&&!c&&s.moveTo(o.vertices[(p+1)%o.vertices.length].x,o.vertices[(p+1)%o.vertices.length].y);s.lineTo(o.vertices[0].x,o.vertices[0].y),s.closePath()}l.wireframes?(s.lineWidth=1,s.strokeStyle="#bbb",s.stroke()):(s.fillStyle=o.render.fillStyle,o.render.lineWidth&&(s.lineWidth=o.render.lineWidth,s.strokeStyle=o.render.strokeStyle,s.stroke()),s.fill())}s.globalAlpha=1}},i.bodyWireframes=function(e,t,n){var i,o,r,a,s,l=n,c=e.options.showInternalEdges;for(l.beginPath(),r=0;r<t.length;r++)if((i=t[r]).render.visible)for(s=i.parts.length>1?1:0;s<i.parts.length;s++){for(o=i.parts[s],l.moveTo(o.vertices[0].x,o.vertices[0].y),a=1;a<o.vertices.length;a++)!o.vertices[a-1].isInternal||c?l.lineTo(o.vertices[a].x,o.vertices[a].y):l.moveTo(o.vertices[a].x,o.vertices[a].y),o.vertices[a].isInternal&&!c&&l.moveTo(o.vertices[(a+1)%o.vertices.length].x,o.vertices[(a+1)%o.vertices.length].y);l.lineTo(o.vertices[0].x,o.vertices[0].y)}l.lineWidth=1,l.strokeStyle="#bbb",l.stroke()},i.bodyConvexHulls=function(e,t,n){var i,o,r,a=n;for(a.beginPath(),o=0;o<t.length;o++)if((i=t[o]).render.visible&&1!==i.parts.length){for(a.moveTo(i.vertices[0].x,i.vertices[0].y),r=1;r<i.vertices.length;r++)a.lineTo(i.vertices[r].x,i.vertices[r].y);a.lineTo(i.vertices[0].x,i.vertices[0].y)}a.lineWidth=1,a.strokeStyle="rgba(255,255,255,0.2)",a.stroke()},i.vertexNumbers=function(e,t,n){var i,o,r,a=n;for(i=0;i<t.length;i++){var s=t[i].parts;for(r=s.length>1?1:0;r<s.length;r++){var l=s[r];for(o=0;o<l.vertices.length;o++)a.fillStyle="rgba(255,255,255,0.2)",a.fillText(i+"_"+o,l.position.x+.8*(l.vertices[o].x-l.position.x),l.position.y+.8*(l.vertices[o].y-l.position.y))}}},i.mousePosition=function(e,t,n){var i=n;i.fillStyle="rgba(255,255,255,0.8)",i.fillText(t.position.x+"  "+t.position.y,t.position.x+5,t.position.y-5)},i.bodyBounds=function(e,t,n){var i=n,o=(e.engine,e.options);i.beginPath();for(var r=0;r<t.length;r++)if(t[r].render.visible)for(var a=t[r].parts,s=a.length>1?1:0;s<a.length;s++){var l=a[s];i.rect(l.bounds.min.x,l.bounds.min.y,l.bounds.max.x-l.bounds.min.x,l.bounds.max.y-l.bounds.min.y)}o.wireframes?i.strokeStyle="rgba(255,255,255,0.08)":i.strokeStyle="rgba(0,0,0,0.1)",i.lineWidth=1,i.stroke()},i.bodyAxes=function(e,t,n){var i,o,r,a,s=n,l=(e.engine,e.options);for(s.beginPath(),o=0;o<t.length;o++){var c=t[o],u=c.parts;if(c.render.visible)if(l.showAxes)for(r=u.length>1?1:0;r<u.length;r++)for(i=u[r],a=0;a<i.axes.length;a++){var d=i.axes[a];s.moveTo(i.position.x,i.position.y),s.lineTo(i.position.x+20*d.x,i.position.y+20*d.y)}else for(r=u.length>1?1:0;r<u.length;r++)for(i=u[r],a=0;a<i.axes.length;a++)s.moveTo(i.position.x,i.position.y),s.lineTo((i.vertices[0].x+i.vertices[i.vertices.length-1].x)/2,(i.vertices[0].y+i.vertices[i.vertices.length-1].y)/2)}l.wireframes?(s.strokeStyle="indianred",s.lineWidth=1):(s.strokeStyle="rgba(255, 255, 255, 0.4)",s.globalCompositeOperation="overlay",s.lineWidth=2),s.stroke(),s.globalCompositeOperation="source-over"},i.bodyPositions=function(e,t,n){var i,o,r,a,s=n,l=(e.engine,e.options);for(s.beginPath(),r=0;r<t.length;r++)if((i=t[r]).render.visible)for(a=0;a<i.parts.length;a++)o=i.parts[a],s.arc(o.position.x,o.position.y,3,0,2*Math.PI,!1),s.closePath();for(l.wireframes?s.fillStyle="indianred":s.fillStyle="rgba(0,0,0,0.5)",s.fill(),s.beginPath(),r=0;r<t.length;r++)(i=t[r]).render.visible&&(s.arc(i.positionPrev.x,i.positionPrev.y,2,0,2*Math.PI,!1),s.closePath());s.fillStyle="rgba(255,165,0,0.8)",s.fill()},i.bodyVelocity=function(e,t,n){var i=n;i.beginPath();for(var r=0;r<t.length;r++){var a=t[r];if(a.render.visible){var s=o.getVelocity(a);i.moveTo(a.position.x,a.position.y),i.lineTo(a.position.x+s.x,a.position.y+s.y)}}i.lineWidth=3,i.strokeStyle="cornflowerblue",i.stroke()},i.bodyIds=function(e,t,n){var i,o,r=n;for(i=0;i<t.length;i++)if(t[i].render.visible){var a=t[i].parts;for(o=a.length>1?1:0;o<a.length;o++){var s=a[o];r.font="12px Arial",r.fillStyle="rgba(255,255,255,0.5)",r.fillText(s.id,s.position.x+10,s.position.y-10)}}},i.collisions=function(e,t,n){var i,o,r,a,s=n,l=e.options;for(s.beginPath(),r=0;r<t.length;r++)if((i=t[r]).isActive)for(o=i.collision,a=0;a<i.activeContacts.length;a++){var c=i.activeContacts[a].vertex;s.rect(c.x-1.5,c.y-1.5,3.5,3.5)}for(l.wireframes?s.fillStyle="rgba(255,255,255,0.7)":s.fillStyle="orange",s.fill(),s.beginPath(),r=0;r<t.length;r++)if((i=t[r]).isActive&&(o=i.collision,i.activeContacts.length>0)){var u=i.activeContacts[0].vertex.x,d=i.activeContacts[0].vertex.y;2===i.activeContacts.length&&(u=(i.activeContacts[0].vertex.x+i.activeContacts[1].vertex.x)/2,d=(i.activeContacts[0].vertex.y+i.activeContacts[1].vertex.y)/2),o.bodyB===o.supports[0].body||!0===o.bodyA.isStatic?s.moveTo(u-8*o.normal.x,d-8*o.normal.y):s.moveTo(u+8*o.normal.x,d+8*o.normal.y),s.lineTo(u,d)}l.wireframes?s.strokeStyle="rgba(255,165,0,0.7)":s.strokeStyle="orange",s.lineWidth=1,s.stroke()},i.separations=function(e,t,n){var i,o,r,a,s,l=n,c=e.options;for(l.beginPath(),s=0;s<t.length;s++)if((i=t[s]).isActive){r=(o=i.collision).bodyA;var u=1;(a=o.bodyB).isStatic||r.isStatic||(u=.5),a.isStatic&&(u=0),l.moveTo(a.position.x,a.position.y),l.lineTo(a.position.x-o.penetration.x*u,a.position.y-o.penetration.y*u),u=1,a.isStatic||r.isStatic||(u=.5),r.isStatic&&(u=0),l.moveTo(r.position.x,r.position.y),l.lineTo(r.position.x+o.penetration.x*u,r.position.y+o.penetration.y*u)}c.wireframes?l.strokeStyle="rgba(255,165,0,0.5)":l.strokeStyle="orange",l.stroke()},i.inspector=function(e,t){e.engine;var n,i=e.selected,o=e.render,r=o.options;if(r.hasBounds){var a=o.bounds.max.x-o.bounds.min.x,s=o.bounds.max.y-o.bounds.min.y,l=a/o.options.width,c=s/o.options.height;t.scale(1/l,1/c),t.translate(-o.bounds.min.x,-o.bounds.min.y)}for(var u=0;u<i.length;u++){var d=i[u].data;switch(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.9)",t.setLineDash([1,2]),d.type){case"body":n=d.bounds,t.beginPath(),t.rect(Math.floor(n.min.x-3),Math.floor(n.min.y-3),Math.floor(n.max.x-n.min.x+6),Math.floor(n.max.y-n.min.y+6)),t.closePath(),t.stroke();break;case"constraint":var p=d.pointA;d.bodyA&&(p=d.pointB),t.beginPath(),t.arc(p.x,p.y,10,0,2*Math.PI),t.closePath(),t.stroke()}t.setLineDash([]),t.translate(-.5,-.5)}null!==e.selectStart&&(t.translate(.5,.5),t.lineWidth=1,t.strokeStyle="rgba(255,165,0,0.6)",t.fillStyle="rgba(255,165,0,0.1)",n=e.selectBounds,t.beginPath(),t.rect(Math.floor(n.min.x),Math.floor(n.min.y),Math.floor(n.max.x-n.min.x),Math.floor(n.max.y-n.min.y)),t.closePath(),t.stroke(),t.fill(),t.translate(-.5,-.5)),r.hasBounds&&t.setTransform(1,0,0,1,0,0)};var n=function(e,t){var n=e.engine,o=e.timing,r=o.historySize,a=n.timing.timestamp;o.delta=t-o.lastTime||i._goodDelta,o.lastTime=t,o.timestampElapsed=a-o.lastTimestamp||0,o.lastTimestamp=a,o.deltaHistory.unshift(o.delta),o.deltaHistory.length=Math.min(o.deltaHistory.length,r),o.engineDeltaHistory.unshift(n.timing.lastDelta),o.engineDeltaHistory.length=Math.min(o.engineDeltaHistory.length,r),o.timestampElapsedHistory.unshift(o.timestampElapsed),o.timestampElapsedHistory.length=Math.min(o.timestampElapsedHistory.length,r),o.engineElapsedHistory.unshift(n.timing.lastElapsed),o.engineElapsedHistory.length=Math.min(o.engineElapsedHistory.length,r),o.elapsedHistory.unshift(o.lastElapsed),o.elapsedHistory.length=Math.min(o.elapsedHistory.length,r)},d=function(e){for(var t=0,n=0;n<e.length;n+=1)t+=e[n];return t/e.length||0},p=function(e,t){var n=document.createElement("canvas");return n.width=e,n.height=t,n.oncontextmenu=function(){return!1},n.onselectstart=function(){return!1},n},f=function(e){var t=e.getContext("2d");return(window.devicePixelRatio||1)/(t.webkitBackingStorePixelRatio||t.mozBackingStorePixelRatio||t.msBackingStorePixelRatio||t.oBackingStorePixelRatio||t.backingStorePixelRatio||1)},v=function(e,t){var n=e.textures[t];return n||((n=e.textures[t]=new Image).src=t,n)},y=function(e,t){var n=t;/(jpg|gif|png)$/.test(t)&&(n="url("+t+")"),e.canvas.style.background=n,e.canvas.style.backgroundSize="contain",e.currentBackground=t}}()},function(e,t,n){var i={};e.exports=i;var o,r,a,s=n(5),l=n(17),c=n(0);"undefined"!=typeof window&&(o=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.msRequestAnimationFrame,r=window.cancelAnimationFrame||window.mozCancelAnimationFrame||window.webkitCancelAnimationFrame||window.msCancelAnimationFrame),o||(o=function(e){a=setTimeout((function(){e(c.now())}),1e3/60)},r=function(){clearTimeout(a)}),i.create=function(e){var t=c.extend({fps:60,deltaSampleSize:60,counterTimestamp:0,frameCounter:0,deltaHistory:[],timePrev:null,frameRequestId:null,isFixed:!1,enabled:!0},e);return t.delta=t.delta||1e3/t.fps,t.deltaMin=t.deltaMin||1e3/t.fps,t.deltaMax=t.deltaMax||1e3/(.5*t.fps),t.fps=1e3/t.delta,t},i.run=function(e,t){return void 0!==e.positionIterations&&(t=e,e=i.create()),function n(r){e.frameRequestId=o(n),r&&e.enabled&&i.tick(e,t,r)}(),e},i.tick=function(e,t,n){var i,o=t.timing;e.isFixed?i=e.delta:(i=n-e.timePrev||e.delta,e.timePrev=n,e.deltaHistory.push(i),e.deltaHistory=e.deltaHistory.slice(-e.deltaSampleSize),i=(i=(i=Math.min.apply(null,e.deltaHistory))<e.deltaMin?e.deltaMin:i)>e.deltaMax?e.deltaMax:i,e.delta=i);var r={timestamp:o.timestamp};s.trigger(e,"beforeTick",r),e.frameCounter+=1,n-e.counterTimestamp>=1e3&&(e.fps=e.frameCounter*((n-e.counterTimestamp)/1e3),e.counterTimestamp=n,e.frameCounter=0),s.trigger(e,"tick",r),s.trigger(e,"beforeUpdate",r),l.update(t,i),s.trigger(e,"afterUpdate",r),s.trigger(e,"afterTick",r)},i.stop=function(e){r(e.frameRequestId)},i.start=function(e,t){i.run(e,t)}},function(e,t,n){var i={};e.exports=i;var o=n(8),r=n(0).deprecated;i.collides=function(e,t){return o.collides(e,t)},r(i,"collides","SAT.collides ➤ replaced by Collision.collides")},function(e,t,n){var i={};e.exports=i,n(1);var o=n(0);i.pathToVertices=function(e,t){"undefined"==typeof window||"SVGPathSeg"in window||o.warn("Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.");var n,r,a,s,l,c,u,d,p,f,v,y=[],g=0,m=0,x=0;t=t||15;var h=function(e,t,n){var i=n%2==1&&n>1;if(!p||e!=p.x||t!=p.y){p&&i?(f=p.x,v=p.y):(f=0,v=0);var o={x:f+e,y:v+t};!i&&p||(p=o),y.push(o),m=f+e,x=v+t}},b=function(e){var t=e.pathSegTypeAsLetter.toUpperCase();if("Z"!==t){switch(t){case"M":case"L":case"T":case"C":case"S":case"Q":m=e.x,x=e.y;break;case"H":m=e.x;break;case"V":x=e.y}h(m,x,e.pathSegType)}};for(i._svgPathToAbsolute(e),a=e.getTotalLength(),c=[],n=0;n<e.pathSegList.numberOfItems;n+=1)c.push(e.pathSegList.getItem(n));for(u=c.concat();g<a;){if((l=c[e.getPathSegAtLength(g)])!=d){for(;u.length&&u[0]!=l;)b(u.shift());d=l}switch(l.pathSegTypeAsLetter.toUpperCase()){case"C":case"T":case"S":case"Q":case"A":s=e.getPointAtLength(g),h(s.x,s.y,0)}g+=t}for(n=0,r=u.length;n<r;++n)b(u[n]);return y},i._svgPathToAbsolute=function(e){for(var t,n,i,o,r,a,s=e.pathSegList,l=0,c=0,u=s.numberOfItems,d=0;d<u;++d){var p=s.getItem(d),f=p.pathSegTypeAsLetter;if(/[MLHVCSQTA]/.test(f))"x"in p&&(l=p.x),"y"in p&&(c=p.y);else switch("x1"in p&&(i=l+p.x1),"x2"in p&&(r=l+p.x2),"y1"in p&&(o=c+p.y1),"y2"in p&&(a=c+p.y2),"x"in p&&(l+=p.x),"y"in p&&(c+=p.y),f){case"m":s.replaceItem(e.createSVGPathSegMovetoAbs(l,c),d);break;case"l":s.replaceItem(e.createSVGPathSegLinetoAbs(l,c),d);break;case"h":s.replaceItem(e.createSVGPathSegLinetoHorizontalAbs(l),d);break;case"v":s.replaceItem(e.createSVGPathSegLinetoVerticalAbs(c),d);break;case"c":s.replaceItem(e.createSVGPathSegCurvetoCubicAbs(l,c,i,o,r,a),d);break;case"s":s.replaceItem(e.createSVGPathSegCurvetoCubicSmoothAbs(l,c,r,a),d);break;case"q":s.replaceItem(e.createSVGPathSegCurvetoQuadraticAbs(l,c,i,o),d);break;case"t":s.replaceItem(e.createSVGPathSegCurvetoQuadraticSmoothAbs(l,c),d);break;case"a":s.replaceItem(e.createSVGPathSegArcAbs(l,c,p.r1,p.r2,p.angle,p.largeArcFlag,p.sweepFlag),d);break;case"z":case"Z":l=t,c=n}"M"!=f&&"m"!=f||(t=l,n=c)}}},function(e,t,n){var i={};e.exports=i;var o=n(6);n(0),i.create=o.create,i.add=o.add,i.remove=o.remove,i.clear=o.clear,i.addComposite=o.addComposite,i.addBody=o.addBody,i.addConstraint=o.addConstraint}])},e.exports=i()}},t={};function n(i){var o=t[i];if(void 0!==o)return o.exports;var r=t[i]={exports:{}};return e[i].call(r.exports,r,r.exports,n),r.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{"use strict";let e=0,t=0,i=0;function o(n){e=n.accelerationIncludingGravity.x,t=-1*n.accelerationIncludingGravity.y,i=n.accelerationIncludingGravity.z}window.addEventListener("keydown",(function(n){window.location.href.includes("localhost")&&("ArrowUp"===n.key&&(t=9.8,e=0),"ArrowDown"===n.key&&(t=-9.8,e=0),"ArrowLeft"===n.key&&(e=-9.8,t=0),"ArrowRight"===n.key&&(e=9.8,t=0))}));var r=n(842);const a=r.Engine,s=r.Render,l=r.Runner,c=r.Bodies,u=r.Composite;let d,p;function f(e,t,n,i,o){const r=c.rectangle(e,t,n,i,{isStatic:!0,render:{fillStyle:o}});u.add(d.world,[r])}function v(e,t){const n=document.getElementById(e);n&&(n.innerHTML=`${t}`)}function y(e){const t=document.getElementById(e);t&&t.remove()}window.addEventListener("resize",(function(){p.canvas.width=window.innerWidth,p.canvas.height=window.innerHeight})),function n(){const i={x:e,y:t};v("x1",`x: ${i.x}`),v("y1",`y: ${i.y}`),function(e,t){d&&(d.gravity.x=e,d.gravity.y=t)}(i.x,i.y),requestAnimationFrame(n)}(),window.onload=function(){const e=document.getElementById("start-btn");e&&(v("msg","Registered click handler"),e.onclick=function(e){v("msg","Requesting permission"),e.preventDefault(),v("msg",`rp: ${function(){try{DeviceMotionEvent&&"function"==typeof DeviceMotionEvent.requestPermission&&DeviceMotionEvent.requestPermission()}catch(e){return`${e}`}window.addEventListener("devicemotion",o)}()}`),y("start-btn"),y("msg"),function(){d=a.create();const e=window.innerWidth,t=window.innerHeight;console.log(`width: ${e}, height: ${t}`),p=s.create({element:document.body,engine:d,options:{width:window.innerWidth,height:window.innerHeight,wireframes:!1}});const n=c.circle(400,200,80,{render:{fillStyle:"red"}});u.add(d.world,[n]);f(window.innerWidth/2,5,window.innerWidth,10,"red"),f(window.innerWidth/2,window.innerHeight-5,window.innerWidth,10,"blue"),f(5,window.innerHeight/2,10,window.innerHeight,"green"),f(window.innerWidth-5,window.innerHeight/2,10,window.innerHeight,"yellow"),s.run(p);const i=l.create();l.run(i,d),console.log("Physics loaded")}()})}})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFpQixlQUFnQjBjLEVBQzVDLENFaUJ1Qm9CLE1BRVhULEVBQWMsYUFDZEEsRUFBYyxPRDFCbkIsV0FHSGpaLEVBQVNILEVBQU8xbkIsU0FHaEIsTUFBTWlmLEVBQVFsYixPQUFPZzlCLFdBQ2Y3aEIsRUFBU25iLE9BQU9pOUIsWUFDdEJ0OEIsUUFBUUQsSUFBSSxVQUFVd2EsY0FBa0JDLEtBR3hDOU8sRUFBU21kLEVBQU92dEIsT0FBTyxDQUNuQnFpQixRQUFTRSxTQUFTcFksS0FDbEIwZCxPQUFRQSxFQUNSdlosUUFBUyxDQUNMMlEsTUFBT2xiLE9BQU9nOUIsV0FDZDdoQixPQUFRbmIsT0FBT2k5QixZQUNmbk0sWUFBWSxLQUtwQixNQUFNNE0sRUFBTzFpQixFQUFPVSxPQUFPLElBQUssSUFBSyxHQUFJLENBQ3JDclAsT0FBUSxDQUNKSSxVQUFXLFNBR25CMkUsRUFBVTVMLElBQUlzZSxFQUFPUyxNQUFPLENBQUNtWixJQUk3QmpCLEVBQVd6OEIsT0FBT2c5QixXQUFhLEVBQUdXLEVBQW1CMzlCLE9BQU9nOUIsV0FEdEMsR0FDaUUsT0FDdkZQLEVBQVd6OEIsT0FBT2c5QixXQUFhLEVBQUdoOUIsT0FBT2k5QixZQUFjVSxFQUFtQjM5QixPQUFPZzlCLFdBRjNELEdBRXNGLFFBQzVHUCxFQUFXa0IsRUFBbUIzOUIsT0FBT2k5QixZQUFjLEVBSDdCLEdBRytDajlCLE9BQU9pOUIsWUFBYSxTQUN6RlIsRUFBV3o4QixPQUFPZzlCLFdBQWFXLEVBQW1CMzlCLE9BQU9pOUIsWUFBYyxFQUpqRCxHQUltRWo5QixPQUFPaTlCLFlBQWEsVUFTN0d6VCxFQUFPSyxJQUFJeGQsR0FHWCxNQUFNZ3NCLEVBQVM1TyxFQUFPeHRCLFNBR3RCd3RCLEVBQU9JLElBQUl3TyxFQUFRdlUsR0FFbkJuakIsUUFBUUQsSUFBSSxpQkFDaEIsQ0N6QllrOUIsRUFDSixFQUVSIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8va2xpbmsvLi9ub2RlX21vZHVsZXMvbWF0dGVyLWpzL2J1aWxkL21hdHRlci5qcyIsIndlYnBhY2s6Ly9rbGluay93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9rbGluay93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2tsaW5rLy4vc3JjL3NlbnNvcnMuanMiLCJ3ZWJwYWNrOi8va2xpbmsvLi9zcmMvcGh5c2ljcy50cyIsIndlYnBhY2s6Ly9rbGluay8uL3NyYy9tYWluLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIVxuICogbWF0dGVyLWpzIDAuMTkuMCBieSBAbGlhYnJ1XG4gKiBodHRwOi8vYnJtLmlvL21hdHRlci1qcy9cbiAqIExpY2Vuc2UgTUlUXG4gKiBcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogXG4gKiBDb3B5cmlnaHQgKGMpIExpYW0gQnJ1bW1pdHQgYW5kIGNvbnRyaWJ1dG9ycy5cbiAqIFxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICogXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKiBcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG4oZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIk1hdHRlclwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJNYXR0ZXJcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiTWF0dGVyXCJdID0gZmFjdG9yeSgpO1xufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbi8qKioqKiovIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbi8qKioqKiovIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuLyoqKioqKi8gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8qKioqKiovIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4vKioqKioqLyBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuLyoqKioqKi8gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4vKioqKioqLyBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuLyoqKioqKi8gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbi8qKioqKiovIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4vKioqKioqLyBcdFx0cmV0dXJuIG5zO1xuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAyMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbi8qKlxuKiBUaGUgYE1hdHRlci5Db21tb25gIG1vZHVsZSBjb250YWlucyB1dGlsaXR5IGZ1bmN0aW9ucyB0aGF0IGFyZSBjb21tb24gdG8gYWxsIG1vZHVsZXMuXG4qXG4qIEBjbGFzcyBDb21tb25cbiovXG5cbnZhciBDb21tb24gPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb21tb247XG5cbihmdW5jdGlvbigpIHtcblxuICAgIENvbW1vbi5fYmFzZURlbHRhID0gMTAwMCAvIDYwO1xuICAgIENvbW1vbi5fbmV4dElkID0gMDtcbiAgICBDb21tb24uX3NlZWQgPSAwO1xuICAgIENvbW1vbi5fbm93U3RhcnRUaW1lID0gKyhuZXcgRGF0ZSgpKTtcbiAgICBDb21tb24uX3dhcm5lZE9uY2UgPSB7fTtcbiAgICBDb21tb24uX2RlY29tcCA9IG51bGw7XG4gICAgXG4gICAgLyoqXG4gICAgICogRXh0ZW5kcyB0aGUgb2JqZWN0IGluIHRoZSBmaXJzdCBhcmd1bWVudCB1c2luZyB0aGUgb2JqZWN0IGluIHRoZSBzZWNvbmQgYXJndW1lbnQuXG4gICAgICogQG1ldGhvZCBleHRlbmRcbiAgICAgKiBAcGFyYW0ge30gb2JqXG4gICAgICogQHBhcmFtIHtib29sZWFufSBkZWVwXG4gICAgICogQHJldHVybiB7fSBvYmogZXh0ZW5kZWRcbiAgICAgKi9cbiAgICBDb21tb24uZXh0ZW5kID0gZnVuY3Rpb24ob2JqLCBkZWVwKSB7XG4gICAgICAgIHZhciBhcmdzU3RhcnQsXG4gICAgICAgICAgICBhcmdzLFxuICAgICAgICAgICAgZGVlcENsb25lO1xuXG4gICAgICAgIGlmICh0eXBlb2YgZGVlcCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBhcmdzU3RhcnQgPSAyO1xuICAgICAgICAgICAgZGVlcENsb25lID0gZGVlcDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFyZ3NTdGFydCA9IDE7XG4gICAgICAgICAgICBkZWVwQ2xvbmUgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IGFyZ3NTdGFydDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChkZWVwQ2xvbmUgJiYgc291cmNlW3Byb3BdICYmIHNvdXJjZVtwcm9wXS5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW9ialtwcm9wXSB8fCBvYmpbcHJvcF0uY29uc3RydWN0b3IgPT09IE9iamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ialtwcm9wXSA9IG9ialtwcm9wXSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb21tb24uZXh0ZW5kKG9ialtwcm9wXSwgZGVlcENsb25lLCBzb3VyY2VbcHJvcF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmpbcHJvcF0gPSBzb3VyY2VbcHJvcF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgY2xvbmUgb2YgdGhlIG9iamVjdCwgaWYgZGVlcCBpcyB0cnVlIHJlZmVyZW5jZXMgd2lsbCBhbHNvIGJlIGNsb25lZC5cbiAgICAgKiBAbWV0aG9kIGNsb25lXG4gICAgICogQHBhcmFtIHt9IG9ialxuICAgICAqIEBwYXJhbSB7Ym9vbH0gZGVlcFxuICAgICAqIEByZXR1cm4ge30gb2JqIGNsb25lZFxuICAgICAqL1xuICAgIENvbW1vbi5jbG9uZSA9IGZ1bmN0aW9uKG9iaiwgZGVlcCkge1xuICAgICAgICByZXR1cm4gQ29tbW9uLmV4dGVuZCh7fSwgZGVlcCwgb2JqKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGlzdCBvZiBrZXlzIGZvciB0aGUgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEBtZXRob2Qga2V5c1xuICAgICAqIEBwYXJhbSB7fSBvYmpcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmdbXX0ga2V5c1xuICAgICAqL1xuICAgIENvbW1vbi5rZXlzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cylcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhvYmopO1xuXG4gICAgICAgIC8vIGF2b2lkIGhhc093blByb3BlcnR5IGZvciBwZXJmb3JtYW5jZVxuICAgICAgICB2YXIga2V5cyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqKVxuICAgICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIHJldHVybiBrZXlzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIHZhbHVlcyBmb3IgdGhlIGdpdmVuIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIHZhbHVlc1xuICAgICAqIEBwYXJhbSB7fSBvYmpcbiAgICAgKiBAcmV0dXJuIHthcnJheX0gQXJyYXkgb2YgdGhlIG9iamVjdHMgcHJvcGVydHkgdmFsdWVzXG4gICAgICovXG4gICAgQ29tbW9uLnZhbHVlcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICB2YXIgdmFsdWVzID0gW107XG4gICAgICAgIFxuICAgICAgICBpZiAoT2JqZWN0LmtleXMpIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhbHVlcy5wdXNoKG9ialtrZXlzW2ldXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBhdm9pZCBoYXNPd25Qcm9wZXJ0eSBmb3IgcGVyZm9ybWFuY2VcbiAgICAgICAgZm9yICh2YXIga2V5IGluIG9iailcbiAgICAgICAgICAgIHZhbHVlcy5wdXNoKG9ialtrZXldKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyBhIHZhbHVlIGZyb20gYGJhc2VgIHJlbGF0aXZlIHRvIHRoZSBgcGF0aGAgc3RyaW5nLlxuICAgICAqIEBtZXRob2QgZ2V0XG4gICAgICogQHBhcmFtIHt9IG9iaiBUaGUgYmFzZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCByZWxhdGl2ZSB0byBgYmFzZWAsIGUuZy4gJ0Zvby5CYXIuYmF6J1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYmVnaW5dIFBhdGggc2xpY2UgYmVnaW5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZF0gUGF0aCBzbGljZSBlbmRcbiAgICAgKiBAcmV0dXJuIHt9IFRoZSBvYmplY3QgYXQgdGhlIGdpdmVuIHBhdGhcbiAgICAgKi9cbiAgICBDb21tb24uZ2V0ID0gZnVuY3Rpb24ob2JqLCBwYXRoLCBiZWdpbiwgZW5kKSB7XG4gICAgICAgIHBhdGggPSBwYXRoLnNwbGl0KCcuJykuc2xpY2UoYmVnaW4sIGVuZCk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBvYmogPSBvYmpbcGF0aFtpXV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgdmFsdWUgb24gYGJhc2VgIHJlbGF0aXZlIHRvIHRoZSBnaXZlbiBgcGF0aGAgc3RyaW5nLlxuICAgICAqIEBtZXRob2Qgc2V0XG4gICAgICogQHBhcmFtIHt9IG9iaiBUaGUgYmFzZSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCByZWxhdGl2ZSB0byBgYmFzZWAsIGUuZy4gJ0Zvby5CYXIuYmF6J1xuICAgICAqIEBwYXJhbSB7fSB2YWwgVGhlIHZhbHVlIHRvIHNldFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYmVnaW5dIFBhdGggc2xpY2UgYmVnaW5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZF0gUGF0aCBzbGljZSBlbmRcbiAgICAgKiBAcmV0dXJuIHt9IFBhc3MgdGhyb3VnaCBgdmFsYCBmb3IgY2hhaW5pbmdcbiAgICAgKi9cbiAgICBDb21tb24uc2V0ID0gZnVuY3Rpb24ob2JqLCBwYXRoLCB2YWwsIGJlZ2luLCBlbmQpIHtcbiAgICAgICAgdmFyIHBhcnRzID0gcGF0aC5zcGxpdCgnLicpLnNsaWNlKGJlZ2luLCBlbmQpO1xuICAgICAgICBDb21tb24uZ2V0KG9iaiwgcGF0aCwgMCwgLTEpW3BhcnRzW3BhcnRzLmxlbmd0aCAtIDFdXSA9IHZhbDtcbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2h1ZmZsZXMgdGhlIGdpdmVuIGFycmF5IGluLXBsYWNlLlxuICAgICAqIFRoZSBmdW5jdGlvbiB1c2VzIGEgc2VlZGVkIHJhbmRvbSBnZW5lcmF0b3IuXG4gICAgICogQG1ldGhvZCBzaHVmZmxlXG4gICAgICogQHBhcmFtIHthcnJheX0gYXJyYXlcbiAgICAgKiBAcmV0dXJuIHthcnJheX0gYXJyYXkgc2h1ZmZsZWQgcmFuZG9tbHlcbiAgICAgKi9cbiAgICBDb21tb24uc2h1ZmZsZSA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIGZvciAodmFyIGkgPSBhcnJheS5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XG4gICAgICAgICAgICB2YXIgaiA9IE1hdGguZmxvb3IoQ29tbW9uLnJhbmRvbSgpICogKGkgKyAxKSk7XG4gICAgICAgICAgICB2YXIgdGVtcCA9IGFycmF5W2ldO1xuICAgICAgICAgICAgYXJyYXlbaV0gPSBhcnJheVtqXTtcbiAgICAgICAgICAgIGFycmF5W2pdID0gdGVtcDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJhbmRvbWx5IGNob29zZXMgYSB2YWx1ZSBmcm9tIGEgbGlzdCB3aXRoIGVxdWFsIHByb2JhYmlsaXR5LlxuICAgICAqIFRoZSBmdW5jdGlvbiB1c2VzIGEgc2VlZGVkIHJhbmRvbSBnZW5lcmF0b3IuXG4gICAgICogQG1ldGhvZCBjaG9vc2VcbiAgICAgKiBAcGFyYW0ge2FycmF5fSBjaG9pY2VzXG4gICAgICogQHJldHVybiB7b2JqZWN0fSBBIHJhbmRvbSBjaG9pY2Ugb2JqZWN0IGZyb20gdGhlIGFycmF5XG4gICAgICovXG4gICAgQ29tbW9uLmNob29zZSA9IGZ1bmN0aW9uKGNob2ljZXMpIHtcbiAgICAgICAgcmV0dXJuIGNob2ljZXNbTWF0aC5mbG9vcihDb21tb24ucmFuZG9tKCkgKiBjaG9pY2VzLmxlbmd0aCldO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIG9iamVjdCBpcyBhIEhUTUxFbGVtZW50LCBvdGhlcndpc2UgZmFsc2UuXG4gICAgICogQG1ldGhvZCBpc0VsZW1lbnRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb2JqXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIGEgSFRNTEVsZW1lbnQsIG90aGVyd2lzZSBmYWxzZVxuICAgICAqL1xuICAgIENvbW1vbi5pc0VsZW1lbnQgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgaWYgKHR5cGVvZiBIVE1MRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmogaW5zdGFuY2VvZiBIVE1MRWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhIShvYmogJiYgb2JqLm5vZGVUeXBlICYmIG9iai5ub2RlTmFtZSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIGFuIGFycmF5LlxuICAgICAqIEBtZXRob2QgaXNBcnJheVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBvYmplY3QgaXMgYW4gYXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICAgICAqL1xuICAgIENvbW1vbi5pc0FycmF5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBvYmplY3QgaXMgYSBmdW5jdGlvbi5cbiAgICAgKiBAbWV0aG9kIGlzRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb2JqXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIGEgZnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICAgICAqL1xuICAgIENvbW1vbi5pc0Z1bmN0aW9uID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgb2JqZWN0IGlzIGEgcGxhaW4gb2JqZWN0LlxuICAgICAqIEBtZXRob2QgaXNQbGFpbk9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBvYmplY3QgaXMgYSBwbGFpbiBvYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICAgICAqL1xuICAgIENvbW1vbi5pc1BsYWluT2JqZWN0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmouY29uc3RydWN0b3IgPT09IE9iamVjdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBvYmplY3QgaXMgYSBzdHJpbmcuXG4gICAgICogQG1ldGhvZCBpc1N0cmluZ1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvYmpcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBvYmplY3QgaXMgYSBzdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICAgICAqL1xuICAgIENvbW1vbi5pc1N0cmluZyA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBTdHJpbmddJztcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGdpdmVuIHZhbHVlIGNsYW1wZWQgYmV0d2VlbiBhIG1pbmltdW0gYW5kIG1heGltdW0gdmFsdWUuXG4gICAgICogQG1ldGhvZCBjbGFtcFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF4XG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgdmFsdWUgY2xhbXBlZCBiZXR3ZWVuIG1pbiBhbmQgbWF4IGluY2x1c2l2ZVxuICAgICAqL1xuICAgIENvbW1vbi5jbGFtcCA9IGZ1bmN0aW9uKHZhbHVlLCBtaW4sIG1heCkge1xuICAgICAgICBpZiAodmFsdWUgPCBtaW4pXG4gICAgICAgICAgICByZXR1cm4gbWluO1xuICAgICAgICBpZiAodmFsdWUgPiBtYXgpXG4gICAgICAgICAgICByZXR1cm4gbWF4O1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzaWduIG9mIHRoZSBnaXZlbiB2YWx1ZS5cbiAgICAgKiBAbWV0aG9kIHNpZ25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IC0xIGlmIG5lZ2F0aXZlLCArMSBpZiAwIG9yIHBvc2l0aXZlXG4gICAgICovXG4gICAgQ29tbW9uLnNpZ24gPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWUgPCAwID8gLTEgOiAxO1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3VycmVudCB0aW1lc3RhbXAgc2luY2UgdGhlIHRpbWUgb3JpZ2luIChlLmcuIGZyb20gcGFnZSBsb2FkKS5cbiAgICAgKiBUaGUgcmVzdWx0IGlzIGluIG1pbGxpc2Vjb25kcyBhbmQgd2lsbCB1c2UgaGlnaC1yZXNvbHV0aW9uIHRpbWluZyBpZiBhdmFpbGFibGUuXG4gICAgICogQG1ldGhvZCBub3dcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IHRoZSBjdXJyZW50IHRpbWVzdGFtcCBpbiBtaWxsaXNlY29uZHNcbiAgICAgKi9cbiAgICBDb21tb24ubm93ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucGVyZm9ybWFuY2UpIHtcbiAgICAgICAgICAgIGlmICh3aW5kb3cucGVyZm9ybWFuY2Uubm93KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5wZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93LnBlcmZvcm1hbmNlLndlYmtpdE5vdykge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cucGVyZm9ybWFuY2Uud2Via2l0Tm93KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoRGF0ZS5ub3cpIHtcbiAgICAgICAgICAgIHJldHVybiBEYXRlLm5vdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChuZXcgRGF0ZSgpKSAtIENvbW1vbi5fbm93U3RhcnRUaW1lO1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHJhbmRvbSB2YWx1ZSBiZXR3ZWVuIGEgbWluaW11bSBhbmQgYSBtYXhpbXVtIHZhbHVlIGluY2x1c2l2ZS5cbiAgICAgKiBUaGUgZnVuY3Rpb24gdXNlcyBhIHNlZWRlZCByYW5kb20gZ2VuZXJhdG9yLlxuICAgICAqIEBtZXRob2QgcmFuZG9tXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1pblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXhcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IEEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIG1pbiBhbmQgbWF4IGluY2x1c2l2ZVxuICAgICAqL1xuICAgIENvbW1vbi5yYW5kb20gPSBmdW5jdGlvbihtaW4sIG1heCkge1xuICAgICAgICBtaW4gPSAodHlwZW9mIG1pbiAhPT0gXCJ1bmRlZmluZWRcIikgPyBtaW4gOiAwO1xuICAgICAgICBtYXggPSAodHlwZW9mIG1heCAhPT0gXCJ1bmRlZmluZWRcIikgPyBtYXggOiAxO1xuICAgICAgICByZXR1cm4gbWluICsgX3NlZWRlZFJhbmRvbSgpICogKG1heCAtIG1pbik7XG4gICAgfTtcblxuICAgIHZhciBfc2VlZGVkUmFuZG9tID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xpbmVhcl9jb25ncnVlbnRpYWxfZ2VuZXJhdG9yXG4gICAgICAgIENvbW1vbi5fc2VlZCA9IChDb21tb24uX3NlZWQgKiA5MzAxICsgNDkyOTcpICUgMjMzMjgwO1xuICAgICAgICByZXR1cm4gQ29tbW9uLl9zZWVkIC8gMjMzMjgwO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBhIENTUyBoZXggY29sb3VyIHN0cmluZyBpbnRvIGFuIGludGVnZXIuXG4gICAgICogQG1ldGhvZCBjb2xvclRvTnVtYmVyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbG9yU3RyaW5nXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBBbiBpbnRlZ2VyIHJlcHJlc2VudGluZyB0aGUgQ1NTIGhleCBzdHJpbmdcbiAgICAgKi9cbiAgICBDb21tb24uY29sb3JUb051bWJlciA9IGZ1bmN0aW9uKGNvbG9yU3RyaW5nKSB7XG4gICAgICAgIGNvbG9yU3RyaW5nID0gY29sb3JTdHJpbmcucmVwbGFjZSgnIycsJycpO1xuXG4gICAgICAgIGlmIChjb2xvclN0cmluZy5sZW5ndGggPT0gMykge1xuICAgICAgICAgICAgY29sb3JTdHJpbmcgPSBjb2xvclN0cmluZy5jaGFyQXQoMCkgKyBjb2xvclN0cmluZy5jaGFyQXQoMClcbiAgICAgICAgICAgICAgICAgICAgICAgICsgY29sb3JTdHJpbmcuY2hhckF0KDEpICsgY29sb3JTdHJpbmcuY2hhckF0KDEpXG4gICAgICAgICAgICAgICAgICAgICAgICArIGNvbG9yU3RyaW5nLmNoYXJBdCgyKSArIGNvbG9yU3RyaW5nLmNoYXJBdCgyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwYXJzZUludChjb2xvclN0cmluZywgMTYpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29uc29sZSBsb2dnaW5nIGxldmVsIHRvIHVzZSwgd2hlcmUgZWFjaCBsZXZlbCBpbmNsdWRlcyBhbGwgbGV2ZWxzIGFib3ZlIGFuZCBleGNsdWRlcyB0aGUgbGV2ZWxzIGJlbG93LlxuICAgICAqIFRoZSBkZWZhdWx0IGxldmVsIGlzICdkZWJ1Zycgd2hpY2ggc2hvd3MgYWxsIGNvbnNvbGUgbWVzc2FnZXMuICBcbiAgICAgKlxuICAgICAqIFBvc3NpYmxlIGxldmVsIHZhbHVlcyBhcmU6XG4gICAgICogLSAwID0gTm9uZVxuICAgICAqIC0gMSA9IERlYnVnXG4gICAgICogLSAyID0gSW5mb1xuICAgICAqIC0gMyA9IFdhcm5cbiAgICAgKiAtIDQgPSBFcnJvclxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcHJvcGVydHkgbG9nTGV2ZWxcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cbiAgICBDb21tb24ubG9nTGV2ZWwgPSAxO1xuXG4gICAgLyoqXG4gICAgICogU2hvd3MgYSBgY29uc29sZS5sb2dgIG1lc3NhZ2Ugb25seSBpZiB0aGUgY3VycmVudCBgQ29tbW9uLmxvZ0xldmVsYCBhbGxvd3MgaXQuXG4gICAgICogVGhlIG1lc3NhZ2Ugd2lsbCBiZSBwcmVmaXhlZCB3aXRoICdtYXR0ZXItanMnIHRvIG1ha2UgaXQgZWFzaWx5IGlkZW50aWZpYWJsZS5cbiAgICAgKiBAbWV0aG9kIGxvZ1xuICAgICAqIEBwYXJhbSAuLi5vYmpzIHt9IFRoZSBvYmplY3RzIHRvIGxvZy5cbiAgICAgKi9cbiAgICBDb21tb24ubG9nID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChjb25zb2xlICYmIENvbW1vbi5sb2dMZXZlbCA+IDAgJiYgQ29tbW9uLmxvZ0xldmVsIDw9IDMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nLmFwcGx5KGNvbnNvbGUsIFsnbWF0dGVyLWpzOiddLmNvbmNhdChBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2hvd3MgYSBgY29uc29sZS5pbmZvYCBtZXNzYWdlIG9ubHkgaWYgdGhlIGN1cnJlbnQgYENvbW1vbi5sb2dMZXZlbGAgYWxsb3dzIGl0LlxuICAgICAqIFRoZSBtZXNzYWdlIHdpbGwgYmUgcHJlZml4ZWQgd2l0aCAnbWF0dGVyLWpzJyB0byBtYWtlIGl0IGVhc2lseSBpZGVudGlmaWFibGUuXG4gICAgICogQG1ldGhvZCBpbmZvXG4gICAgICogQHBhcmFtIC4uLm9ianMge30gVGhlIG9iamVjdHMgdG8gbG9nLlxuICAgICAqL1xuICAgIENvbW1vbi5pbmZvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChjb25zb2xlICYmIENvbW1vbi5sb2dMZXZlbCA+IDAgJiYgQ29tbW9uLmxvZ0xldmVsIDw9IDIpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuaW5mby5hcHBseShjb25zb2xlLCBbJ21hdHRlci1qczonXS5jb25jYXQoQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKSkpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNob3dzIGEgYGNvbnNvbGUud2FybmAgbWVzc2FnZSBvbmx5IGlmIHRoZSBjdXJyZW50IGBDb21tb24ubG9nTGV2ZWxgIGFsbG93cyBpdC5cbiAgICAgKiBUaGUgbWVzc2FnZSB3aWxsIGJlIHByZWZpeGVkIHdpdGggJ21hdHRlci1qcycgdG8gbWFrZSBpdCBlYXNpbHkgaWRlbnRpZmlhYmxlLlxuICAgICAqIEBtZXRob2Qgd2FyblxuICAgICAqIEBwYXJhbSAuLi5vYmpzIHt9IFRoZSBvYmplY3RzIHRvIGxvZy5cbiAgICAgKi9cbiAgICBDb21tb24ud2FybiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoY29uc29sZSAmJiBDb21tb24ubG9nTGV2ZWwgPiAwICYmIENvbW1vbi5sb2dMZXZlbCA8PSAzKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSwgWydtYXR0ZXItanM6J10uY29uY2F0KEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVc2VzIGBDb21tb24ud2FybmAgdG8gbG9nIHRoZSBnaXZlbiBtZXNzYWdlIG9uZSB0aW1lIG9ubHkuXG4gICAgICogQG1ldGhvZCB3YXJuT25jZVxuICAgICAqIEBwYXJhbSAuLi5vYmpzIHt9IFRoZSBvYmplY3RzIHRvIGxvZy5cbiAgICAgKi9cbiAgICBDb21tb24ud2Fybk9uY2UgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpLmpvaW4oJyAnKTtcblxuICAgICAgICBpZiAoIUNvbW1vbi5fd2FybmVkT25jZVttZXNzYWdlXSkge1xuICAgICAgICAgICAgQ29tbW9uLndhcm4obWVzc2FnZSk7XG4gICAgICAgICAgICBDb21tb24uX3dhcm5lZE9uY2VbbWVzc2FnZV0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNob3dzIGEgZGVwcmVjYXRlZCBjb25zb2xlIHdhcm5pbmcgd2hlbiB0aGUgZnVuY3Rpb24gb24gdGhlIGdpdmVuIG9iamVjdCBpcyBjYWxsZWQuXG4gICAgICogVGhlIHRhcmdldCBmdW5jdGlvbiB3aWxsIGJlIHJlcGxhY2VkIHdpdGggYSBuZXcgZnVuY3Rpb24gdGhhdCBmaXJzdCBzaG93cyB0aGUgd2FybmluZ1xuICAgICAqIGFuZCB0aGVuIGNhbGxzIHRoZSBvcmlnaW5hbCBmdW5jdGlvbi5cbiAgICAgKiBAbWV0aG9kIGRlcHJlY2F0ZWRcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gb2JqIFRoZSBvYmplY3Qgb3IgbW9kdWxlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIHByb3BlcnR5IG5hbWUgb2YgdGhlIGZ1bmN0aW9uIG9uIG9ialxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB3YXJuaW5nIFRoZSBvbmUtdGltZSBtZXNzYWdlIHRvIHNob3cgaWYgdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZFxuICAgICAqL1xuICAgIENvbW1vbi5kZXByZWNhdGVkID0gZnVuY3Rpb24ob2JqLCBwcm9wLCB3YXJuaW5nKSB7XG4gICAgICAgIG9ialtwcm9wXSA9IENvbW1vbi5jaGFpbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIENvbW1vbi53YXJuT25jZSgn8J+UhSBkZXByZWNhdGVkIPCflIUnLCB3YXJuaW5nKTtcbiAgICAgICAgfSwgb2JqW3Byb3BdKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbmV4dCB1bmlxdWUgc2VxdWVudGlhbCBJRC5cbiAgICAgKiBAbWV0aG9kIG5leHRJZFxuICAgICAqIEByZXR1cm4ge051bWJlcn0gVW5pcXVlIHNlcXVlbnRpYWwgSURcbiAgICAgKi9cbiAgICBDb21tb24ubmV4dElkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBDb21tb24uX25leHRJZCsrO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBIGNyb3NzIGJyb3dzZXIgY29tcGF0aWJsZSBpbmRleE9mIGltcGxlbWVudGF0aW9uLlxuICAgICAqIEBtZXRob2QgaW5kZXhPZlxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGhheXN0YWNrXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG5lZWRsZVxuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIHBvc2l0aW9uIG9mIG5lZWRsZSBpbiBoYXlzdGFjaywgb3RoZXJ3aXNlIC0xLlxuICAgICAqL1xuICAgIENvbW1vbi5pbmRleE9mID0gZnVuY3Rpb24oaGF5c3RhY2ssIG5lZWRsZSkge1xuICAgICAgICBpZiAoaGF5c3RhY2suaW5kZXhPZilcbiAgICAgICAgICAgIHJldHVybiBoYXlzdGFjay5pbmRleE9mKG5lZWRsZSk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYXlzdGFjay5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGhheXN0YWNrW2ldID09PSBuZWVkbGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEEgY3Jvc3MgYnJvd3NlciBjb21wYXRpYmxlIGFycmF5IG1hcCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgKiBAbWV0aG9kIG1hcFxuICAgICAqIEBwYXJhbSB7YXJyYXl9IGxpc3RcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jXG4gICAgICogQHJldHVybiB7YXJyYXl9IFZhbHVlcyBmcm9tIGxpc3QgdHJhbnNmb3JtZWQgYnkgZnVuYy5cbiAgICAgKi9cbiAgICBDb21tb24ubWFwID0gZnVuY3Rpb24obGlzdCwgZnVuYykge1xuICAgICAgICBpZiAobGlzdC5tYXApIHtcbiAgICAgICAgICAgIHJldHVybiBsaXN0Lm1hcChmdW5jKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtYXBwZWQgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIG1hcHBlZC5wdXNoKGZ1bmMobGlzdFtpXSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcHBlZDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGFrZXMgYSBkaXJlY3RlZCBncmFwaCBhbmQgcmV0dXJucyB0aGUgcGFydGlhbGx5IG9yZGVyZWQgc2V0IG9mIHZlcnRpY2VzIGluIHRvcG9sb2dpY2FsIG9yZGVyLlxuICAgICAqIENpcmN1bGFyIGRlcGVuZGVuY2llcyBhcmUgYWxsb3dlZC5cbiAgICAgKiBAbWV0aG9kIHRvcG9sb2dpY2FsU29ydFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBncmFwaFxuICAgICAqIEByZXR1cm4ge2FycmF5fSBQYXJ0aWFsbHkgb3JkZXJlZCBzZXQgb2YgdmVydGljZXMgaW4gdG9wb2xvZ2ljYWwgb3JkZXIuXG4gICAgICovXG4gICAgQ29tbW9uLnRvcG9sb2dpY2FsU29ydCA9IGZ1bmN0aW9uKGdyYXBoKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tZ2VjaGV2L2phdmFzY3JpcHQtYWxnb3JpdGhtc1xuICAgICAgICAvLyBDb3B5cmlnaHQgKGMpIE1pbmtvIEdlY2hldiAoTUlUIGxpY2Vuc2UpXG4gICAgICAgIC8vIE1vZGlmaWNhdGlvbnM6IHRpZHkgZm9ybWF0dGluZyBhbmQgbmFtaW5nXG4gICAgICAgIHZhciByZXN1bHQgPSBbXSxcbiAgICAgICAgICAgIHZpc2l0ZWQgPSBbXSxcbiAgICAgICAgICAgIHRlbXAgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBub2RlIGluIGdyYXBoKSB7XG4gICAgICAgICAgICBpZiAoIXZpc2l0ZWRbbm9kZV0gJiYgIXRlbXBbbm9kZV0pIHtcbiAgICAgICAgICAgICAgICBDb21tb24uX3RvcG9sb2dpY2FsU29ydChub2RlLCB2aXNpdGVkLCB0ZW1wLCBncmFwaCwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIENvbW1vbi5fdG9wb2xvZ2ljYWxTb3J0ID0gZnVuY3Rpb24obm9kZSwgdmlzaXRlZCwgdGVtcCwgZ3JhcGgsIHJlc3VsdCkge1xuICAgICAgICB2YXIgbmVpZ2hib3JzID0gZ3JhcGhbbm9kZV0gfHwgW107XG4gICAgICAgIHRlbXBbbm9kZV0gPSB0cnVlO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmVpZ2hib3JzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgbmVpZ2hib3IgPSBuZWlnaGJvcnNbaV07XG5cbiAgICAgICAgICAgIGlmICh0ZW1wW25laWdoYm9yXSkge1xuICAgICAgICAgICAgICAgIC8vIHNraXAgY2lyY3VsYXIgZGVwZW5kZW5jaWVzXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdmlzaXRlZFtuZWlnaGJvcl0pIHtcbiAgICAgICAgICAgICAgICBDb21tb24uX3RvcG9sb2dpY2FsU29ydChuZWlnaGJvciwgdmlzaXRlZCwgdGVtcCwgZ3JhcGgsIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0ZW1wW25vZGVdID0gZmFsc2U7XG4gICAgICAgIHZpc2l0ZWRbbm9kZV0gPSB0cnVlO1xuXG4gICAgICAgIHJlc3VsdC5wdXNoKG5vZGUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUYWtlcyBfbl8gZnVuY3Rpb25zIGFzIGFyZ3VtZW50cyBhbmQgcmV0dXJucyBhIG5ldyBmdW5jdGlvbiB0aGF0IGNhbGxzIHRoZW0gaW4gb3JkZXIuXG4gICAgICogVGhlIGFyZ3VtZW50cyBhcHBsaWVkIHdoZW4gY2FsbGluZyB0aGUgbmV3IGZ1bmN0aW9uIHdpbGwgYWxzbyBiZSBhcHBsaWVkIHRvIGV2ZXJ5IGZ1bmN0aW9uIHBhc3NlZC5cbiAgICAgKiBUaGUgdmFsdWUgb2YgYHRoaXNgIHJlZmVycyB0byB0aGUgbGFzdCB2YWx1ZSByZXR1cm5lZCBpbiB0aGUgY2hhaW4gdGhhdCB3YXMgbm90IGB1bmRlZmluZWRgLlxuICAgICAqIFRoZXJlZm9yZSBpZiBhIHBhc3NlZCBmdW5jdGlvbiBkb2VzIG5vdCByZXR1cm4gYSB2YWx1ZSwgdGhlIHByZXZpb3VzbHkgcmV0dXJuZWQgdmFsdWUgaXMgbWFpbnRhaW5lZC5cbiAgICAgKiBBZnRlciBhbGwgcGFzc2VkIGZ1bmN0aW9ucyBoYXZlIGJlZW4gY2FsbGVkIHRoZSBuZXcgZnVuY3Rpb24gcmV0dXJucyB0aGUgbGFzdCByZXR1cm5lZCB2YWx1ZSAoaWYgYW55KS5cbiAgICAgKiBJZiBhbnkgb2YgdGhlIHBhc3NlZCBmdW5jdGlvbnMgYXJlIGEgY2hhaW4sIHRoZW4gdGhlIGNoYWluIHdpbGwgYmUgZmxhdHRlbmVkLlxuICAgICAqIEBtZXRob2QgY2hhaW5cbiAgICAgKiBAcGFyYW0gLi4uZnVuY3Mge2Z1bmN0aW9ufSBUaGUgZnVuY3Rpb25zIHRvIGNoYWluLlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBBIG5ldyBmdW5jdGlvbiB0aGF0IGNhbGxzIHRoZSBwYXNzZWQgZnVuY3Rpb25zIGluIG9yZGVyLlxuICAgICAqL1xuICAgIENvbW1vbi5jaGFpbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZnVuY3MgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGZ1bmMgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgICAgICAgIGlmIChmdW5jLl9jaGFpbmVkKSB7XG4gICAgICAgICAgICAgICAgLy8gZmxhdHRlbiBhbHJlYWR5IGNoYWluZWQgZnVuY3Rpb25zXG4gICAgICAgICAgICAgICAgZnVuY3MucHVzaC5hcHBseShmdW5jcywgZnVuYy5fY2hhaW5lZCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZ1bmNzLnB1c2goZnVuYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2hhaW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Hb29nbGVDaHJvbWUvZGV2dG9vbHMtZG9jcy9pc3N1ZXMvNTMjaXNzdWVjb21tZW50LTUxOTQxMzU4XG4gICAgICAgICAgICB2YXIgbGFzdFJlc3VsdCxcbiAgICAgICAgICAgICAgICBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZnVuY3MubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuY3NbaV0uYXBwbHkobGFzdFJlc3VsdCwgYXJncyk7XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdFJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBsYXN0UmVzdWx0O1xuICAgICAgICB9O1xuXG4gICAgICAgIGNoYWluLl9jaGFpbmVkID0gZnVuY3M7XG5cbiAgICAgICAgcmV0dXJuIGNoYWluO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDaGFpbnMgYSBmdW5jdGlvbiB0byBleGN1dGUgYmVmb3JlIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBvbiB0aGUgZ2l2ZW4gYHBhdGhgIHJlbGF0aXZlIHRvIGBiYXNlYC5cbiAgICAgKiBTZWUgYWxzbyBkb2NzIGZvciBgQ29tbW9uLmNoYWluYC5cbiAgICAgKiBAbWV0aG9kIGNoYWluUGF0aEJlZm9yZVxuICAgICAqIEBwYXJhbSB7fSBiYXNlIFRoZSBiYXNlIG9iamVjdFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHJlbGF0aXZlIHRvIGBiYXNlYFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoYWluIGJlZm9yZSB0aGUgb3JpZ2luYWxcbiAgICAgKiBAcmV0dXJuIHtmdW5jdGlvbn0gVGhlIGNoYWluZWQgZnVuY3Rpb24gdGhhdCByZXBsYWNlZCB0aGUgb3JpZ2luYWxcbiAgICAgKi9cbiAgICBDb21tb24uY2hhaW5QYXRoQmVmb3JlID0gZnVuY3Rpb24oYmFzZSwgcGF0aCwgZnVuYykge1xuICAgICAgICByZXR1cm4gQ29tbW9uLnNldChiYXNlLCBwYXRoLCBDb21tb24uY2hhaW4oXG4gICAgICAgICAgICBmdW5jLFxuICAgICAgICAgICAgQ29tbW9uLmdldChiYXNlLCBwYXRoKVxuICAgICAgICApKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2hhaW5zIGEgZnVuY3Rpb24gdG8gZXhjdXRlIGFmdGVyIHRoZSBvcmlnaW5hbCBmdW5jdGlvbiBvbiB0aGUgZ2l2ZW4gYHBhdGhgIHJlbGF0aXZlIHRvIGBiYXNlYC5cbiAgICAgKiBTZWUgYWxzbyBkb2NzIGZvciBgQ29tbW9uLmNoYWluYC5cbiAgICAgKiBAbWV0aG9kIGNoYWluUGF0aEFmdGVyXG4gICAgICogQHBhcmFtIHt9IGJhc2UgVGhlIGJhc2Ugb2JqZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggcmVsYXRpdmUgdG8gYGJhc2VgXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hhaW4gYWZ0ZXIgdGhlIG9yaWdpbmFsXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb259IFRoZSBjaGFpbmVkIGZ1bmN0aW9uIHRoYXQgcmVwbGFjZWQgdGhlIG9yaWdpbmFsXG4gICAgICovXG4gICAgQ29tbW9uLmNoYWluUGF0aEFmdGVyID0gZnVuY3Rpb24oYmFzZSwgcGF0aCwgZnVuYykge1xuICAgICAgICByZXR1cm4gQ29tbW9uLnNldChiYXNlLCBwYXRoLCBDb21tb24uY2hhaW4oXG4gICAgICAgICAgICBDb21tb24uZ2V0KGJhc2UsIHBhdGgpLFxuICAgICAgICAgICAgZnVuY1xuICAgICAgICApKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUHJvdmlkZSB0aGUgW3BvbHktZGVjb21wXShodHRwczovL2dpdGh1Yi5jb20vc2NodGVwcGUvcG9seS1kZWNvbXAuanMpIGxpYnJhcnkgbW9kdWxlIHRvIGVuYWJsZVxuICAgICAqIGNvbmNhdmUgdmVydGV4IGRlY29tcG9zaXRpb24gc3VwcG9ydCB3aGVuIHVzaW5nIGBCb2RpZXMuZnJvbVZlcnRpY2VzYCBlLmcuIGBDb21tb24uc2V0RGVjb21wKHJlcXVpcmUoJ3BvbHktZGVjb21wJykpYC5cbiAgICAgKiBAbWV0aG9kIHNldERlY29tcFxuICAgICAqIEBwYXJhbSB7fSBkZWNvbXAgVGhlIFtwb2x5LWRlY29tcF0oaHR0cHM6Ly9naXRodWIuY29tL3NjaHRlcHBlL3BvbHktZGVjb21wLmpzKSBsaWJyYXJ5IG1vZHVsZS5cbiAgICAgKi9cbiAgICBDb21tb24uc2V0RGVjb21wID0gZnVuY3Rpb24oZGVjb21wKSB7XG4gICAgICAgIENvbW1vbi5fZGVjb21wID0gZGVjb21wO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBbcG9seS1kZWNvbXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9zY2h0ZXBwZS9wb2x5LWRlY29tcC5qcykgbGlicmFyeSBtb2R1bGUgcHJvdmlkZWQgdGhyb3VnaCBgQ29tbW9uLnNldERlY29tcGAsXG4gICAgICogb3RoZXJ3aXNlIHJldHVybnMgdGhlIGdsb2JhbCBgZGVjb21wYCBpZiBzZXQuXG4gICAgICogQG1ldGhvZCBnZXREZWNvbXBcbiAgICAgKiBAcmV0dXJuIHt9IFRoZSBbcG9seS1kZWNvbXBdKGh0dHBzOi8vZ2l0aHViLmNvbS9zY2h0ZXBwZS9wb2x5LWRlY29tcC5qcykgbGlicmFyeSBtb2R1bGUgaWYgcHJvdmlkZWQuXG4gICAgICovXG4gICAgQ29tbW9uLmdldERlY29tcCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyBnZXQgdXNlciBwcm92aWRlZCBkZWNvbXAgaWYgc2V0XG4gICAgICAgIHZhciBkZWNvbXAgPSBDb21tb24uX2RlY29tcDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGZyb20gd2luZG93IGdsb2JhbFxuICAgICAgICAgICAgaWYgKCFkZWNvbXAgJiYgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBkZWNvbXAgPSB3aW5kb3cuZGVjb21wO1xuICAgICAgICAgICAgfVxuICAgIFxuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGZyb20gbm9kZSBnbG9iYWxcbiAgICAgICAgICAgIGlmICghZGVjb21wICYmIHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgZGVjb21wID0gZ2xvYmFsLmRlY29tcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLy8gZGVjb21wIG5vdCBhdmFpbGFibGVcbiAgICAgICAgICAgIGRlY29tcCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGVjb21wO1xuICAgIH07XG59KSgpO1xuXG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vKipcbiogVGhlIGBNYXR0ZXIuQm91bmRzYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyBheGlzLWFsaWduZWQgYm91bmRpbmcgYm94ZXMgKEFBQkIpLlxuKlxuKiBAY2xhc3MgQm91bmRzXG4qL1xuXG52YXIgQm91bmRzID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gQm91bmRzO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGF4aXMtYWxpZ25lZCBib3VuZGluZyBib3ggKEFBQkIpIGZvciB0aGUgZ2l2ZW4gdmVydGljZXMuXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqIEByZXR1cm4ge2JvdW5kc30gQSBuZXcgYm91bmRzIG9iamVjdFxuICAgICAqL1xuICAgIEJvdW5kcy5jcmVhdGUgPSBmdW5jdGlvbih2ZXJ0aWNlcykge1xuICAgICAgICB2YXIgYm91bmRzID0geyBcbiAgICAgICAgICAgIG1pbjogeyB4OiAwLCB5OiAwIH0sIFxuICAgICAgICAgICAgbWF4OiB7IHg6IDAsIHk6IDAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh2ZXJ0aWNlcylcbiAgICAgICAgICAgIEJvdW5kcy51cGRhdGUoYm91bmRzLCB2ZXJ0aWNlcyk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYm91bmRzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIGJvdW5kcyB1c2luZyB0aGUgZ2l2ZW4gdmVydGljZXMgYW5kIGV4dGVuZHMgdGhlIGJvdW5kcyBnaXZlbiBhIHZlbG9jaXR5LlxuICAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgICogQHBhcmFtIHtib3VuZHN9IGJvdW5kc1xuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlbG9jaXR5XG4gICAgICovXG4gICAgQm91bmRzLnVwZGF0ZSA9IGZ1bmN0aW9uKGJvdW5kcywgdmVydGljZXMsIHZlbG9jaXR5KSB7XG4gICAgICAgIGJvdW5kcy5taW4ueCA9IEluZmluaXR5O1xuICAgICAgICBib3VuZHMubWF4LnggPSAtSW5maW5pdHk7XG4gICAgICAgIGJvdW5kcy5taW4ueSA9IEluZmluaXR5O1xuICAgICAgICBib3VuZHMubWF4LnkgPSAtSW5maW5pdHk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHZlcnRleCA9IHZlcnRpY2VzW2ldO1xuICAgICAgICAgICAgaWYgKHZlcnRleC54ID4gYm91bmRzLm1heC54KSBib3VuZHMubWF4LnggPSB2ZXJ0ZXgueDtcbiAgICAgICAgICAgIGlmICh2ZXJ0ZXgueCA8IGJvdW5kcy5taW4ueCkgYm91bmRzLm1pbi54ID0gdmVydGV4Lng7XG4gICAgICAgICAgICBpZiAodmVydGV4LnkgPiBib3VuZHMubWF4LnkpIGJvdW5kcy5tYXgueSA9IHZlcnRleC55O1xuICAgICAgICAgICAgaWYgKHZlcnRleC55IDwgYm91bmRzLm1pbi55KSBib3VuZHMubWluLnkgPSB2ZXJ0ZXgueTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgaWYgKHZlbG9jaXR5KSB7XG4gICAgICAgICAgICBpZiAodmVsb2NpdHkueCA+IDApIHtcbiAgICAgICAgICAgICAgICBib3VuZHMubWF4LnggKz0gdmVsb2NpdHkueDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYm91bmRzLm1pbi54ICs9IHZlbG9jaXR5Lng7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh2ZWxvY2l0eS55ID4gMCkge1xuICAgICAgICAgICAgICAgIGJvdW5kcy5tYXgueSArPSB2ZWxvY2l0eS55O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBib3VuZHMubWluLnkgKz0gdmVsb2NpdHkueTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIGJvdW5kcyBjb250YWlucyB0aGUgZ2l2ZW4gcG9pbnQuXG4gICAgICogQG1ldGhvZCBjb250YWluc1xuICAgICAqIEBwYXJhbSB7Ym91bmRzfSBib3VuZHNcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gcG9pbnRcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBib3VuZHMgY29udGFpbiB0aGUgcG9pbnQsIG90aGVyd2lzZSBmYWxzZVxuICAgICAqL1xuICAgIEJvdW5kcy5jb250YWlucyA9IGZ1bmN0aW9uKGJvdW5kcywgcG9pbnQpIHtcbiAgICAgICAgcmV0dXJuIHBvaW50LnggPj0gYm91bmRzLm1pbi54ICYmIHBvaW50LnggPD0gYm91bmRzLm1heC54IFxuICAgICAgICAgICAgICAgJiYgcG9pbnQueSA+PSBib3VuZHMubWluLnkgJiYgcG9pbnQueSA8PSBib3VuZHMubWF4Lnk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgdHdvIGJvdW5kcyBpbnRlcnNlY3QuXG4gICAgICogQG1ldGhvZCBvdmVybGFwc1xuICAgICAqIEBwYXJhbSB7Ym91bmRzfSBib3VuZHNBXG4gICAgICogQHBhcmFtIHtib3VuZHN9IGJvdW5kc0JcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBUcnVlIGlmIHRoZSBib3VuZHMgb3ZlcmxhcCwgb3RoZXJ3aXNlIGZhbHNlXG4gICAgICovXG4gICAgQm91bmRzLm92ZXJsYXBzID0gZnVuY3Rpb24oYm91bmRzQSwgYm91bmRzQikge1xuICAgICAgICByZXR1cm4gKGJvdW5kc0EubWluLnggPD0gYm91bmRzQi5tYXgueCAmJiBib3VuZHNBLm1heC54ID49IGJvdW5kc0IubWluLnhcbiAgICAgICAgICAgICAgICAmJiBib3VuZHNBLm1heC55ID49IGJvdW5kc0IubWluLnkgJiYgYm91bmRzQS5taW4ueSA8PSBib3VuZHNCLm1heC55KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlcyB0aGUgYm91bmRzIGJ5IHRoZSBnaXZlbiB2ZWN0b3IuXG4gICAgICogQG1ldGhvZCB0cmFuc2xhdGVcbiAgICAgKiBAcGFyYW0ge2JvdW5kc30gYm91bmRzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqL1xuICAgIEJvdW5kcy50cmFuc2xhdGUgPSBmdW5jdGlvbihib3VuZHMsIHZlY3Rvcikge1xuICAgICAgICBib3VuZHMubWluLnggKz0gdmVjdG9yLng7XG4gICAgICAgIGJvdW5kcy5tYXgueCArPSB2ZWN0b3IueDtcbiAgICAgICAgYm91bmRzLm1pbi55ICs9IHZlY3Rvci55O1xuICAgICAgICBib3VuZHMubWF4LnkgKz0gdmVjdG9yLnk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNoaWZ0cyB0aGUgYm91bmRzIHRvIHRoZSBnaXZlbiBwb3NpdGlvbi5cbiAgICAgKiBAbWV0aG9kIHNoaWZ0XG4gICAgICogQHBhcmFtIHtib3VuZHN9IGJvdW5kc1xuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBwb3NpdGlvblxuICAgICAqL1xuICAgIEJvdW5kcy5zaGlmdCA9IGZ1bmN0aW9uKGJvdW5kcywgcG9zaXRpb24pIHtcbiAgICAgICAgdmFyIGRlbHRhWCA9IGJvdW5kcy5tYXgueCAtIGJvdW5kcy5taW4ueCxcbiAgICAgICAgICAgIGRlbHRhWSA9IGJvdW5kcy5tYXgueSAtIGJvdW5kcy5taW4ueTtcbiAgICAgICAgICAgIFxuICAgICAgICBib3VuZHMubWluLnggPSBwb3NpdGlvbi54O1xuICAgICAgICBib3VuZHMubWF4LnggPSBwb3NpdGlvbi54ICsgZGVsdGFYO1xuICAgICAgICBib3VuZHMubWluLnkgPSBwb3NpdGlvbi55O1xuICAgICAgICBib3VuZHMubWF4LnkgPSBwb3NpdGlvbi55ICsgZGVsdGFZO1xuICAgIH07XG4gICAgXG59KSgpO1xuXG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG4vKipcbiogVGhlIGBNYXR0ZXIuVmVjdG9yYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyB2ZWN0b3JzLlxuKiBWZWN0b3JzIGFyZSB0aGUgYmFzaXMgb2YgYWxsIHRoZSBnZW9tZXRyeSByZWxhdGVkIG9wZXJhdGlvbnMgaW4gdGhlIGVuZ2luZS5cbiogQSBgTWF0dGVyLlZlY3RvcmAgb2JqZWN0IGlzIG9mIHRoZSBmb3JtIGB7IHg6IDAsIHk6IDAgfWAuXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG4qXG4qIEBjbGFzcyBWZWN0b3JcbiovXG5cbi8vIFRPRE86IGNvbnNpZGVyIHBhcmFtcyBmb3IgcmV1c2luZyB2ZWN0b3Igb2JqZWN0c1xuXG52YXIgVmVjdG9yID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gVmVjdG9yO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHZlY3Rvci5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICAgKiBAcmV0dXJuIHt2ZWN0b3J9IEEgbmV3IHZlY3RvclxuICAgICAqL1xuICAgIFZlY3Rvci5jcmVhdGUgPSBmdW5jdGlvbih4LCB5KSB7XG4gICAgICAgIHJldHVybiB7IHg6IHggfHwgMCwgeTogeSB8fCAwIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBuZXcgdmVjdG9yIHdpdGggYHhgIGFuZCBgeWAgY29waWVkIGZyb20gdGhlIGdpdmVuIGB2ZWN0b3JgLlxuICAgICAqIEBtZXRob2QgY2xvbmVcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBBIG5ldyBjbG9uZWQgdmVjdG9yXG4gICAgICovXG4gICAgVmVjdG9yLmNsb25lID0gZnVuY3Rpb24odmVjdG9yKSB7XG4gICAgICAgIHJldHVybiB7IHg6IHZlY3Rvci54LCB5OiB2ZWN0b3IueSB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYWduaXR1ZGUgKGxlbmd0aCkgb2YgYSB2ZWN0b3IuXG4gICAgICogQG1ldGhvZCBtYWduaXR1ZGVcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgbWFnbml0dWRlIG9mIHRoZSB2ZWN0b3JcbiAgICAgKi9cbiAgICBWZWN0b3IubWFnbml0dWRlID0gZnVuY3Rpb24odmVjdG9yKSB7XG4gICAgICAgIHJldHVybiBNYXRoLnNxcnQoKHZlY3Rvci54ICogdmVjdG9yLngpICsgKHZlY3Rvci55ICogdmVjdG9yLnkpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWFnbml0dWRlIChsZW5ndGgpIG9mIGEgdmVjdG9yICh0aGVyZWZvcmUgc2F2aW5nIGEgYHNxcnRgIG9wZXJhdGlvbikuXG4gICAgICogQG1ldGhvZCBtYWduaXR1ZGVTcXVhcmVkXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIHNxdWFyZWQgbWFnbml0dWRlIG9mIHRoZSB2ZWN0b3JcbiAgICAgKi9cbiAgICBWZWN0b3IubWFnbml0dWRlU3F1YXJlZCA9IGZ1bmN0aW9uKHZlY3Rvcikge1xuICAgICAgICByZXR1cm4gKHZlY3Rvci54ICogdmVjdG9yLngpICsgKHZlY3Rvci55ICogdmVjdG9yLnkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGVzIHRoZSB2ZWN0b3IgYWJvdXQgKDAsIDApIGJ5IHNwZWNpZmllZCBhbmdsZS5cbiAgICAgKiBAbWV0aG9kIHJvdGF0ZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYW5nbGVcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gW291dHB1dF1cbiAgICAgKiBAcmV0dXJuIHt2ZWN0b3J9IFRoZSB2ZWN0b3Igcm90YXRlZCBhYm91dCAoMCwgMClcbiAgICAgKi9cbiAgICBWZWN0b3Iucm90YXRlID0gZnVuY3Rpb24odmVjdG9yLCBhbmdsZSwgb3V0cHV0KSB7XG4gICAgICAgIHZhciBjb3MgPSBNYXRoLmNvcyhhbmdsZSksIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgaWYgKCFvdXRwdXQpIG91dHB1dCA9IHt9O1xuICAgICAgICB2YXIgeCA9IHZlY3Rvci54ICogY29zIC0gdmVjdG9yLnkgKiBzaW47XG4gICAgICAgIG91dHB1dC55ID0gdmVjdG9yLnggKiBzaW4gKyB2ZWN0b3IueSAqIGNvcztcbiAgICAgICAgb3V0cHV0LnggPSB4O1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGVzIHRoZSB2ZWN0b3IgYWJvdXQgYSBzcGVjaWZpZWQgcG9pbnQgYnkgc3BlY2lmaWVkIGFuZ2xlLlxuICAgICAqIEBtZXRob2Qgcm90YXRlQWJvdXRcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvaW50XG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IFtvdXRwdXRdXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBBIG5ldyB2ZWN0b3Igcm90YXRlZCBhYm91dCB0aGUgcG9pbnRcbiAgICAgKi9cbiAgICBWZWN0b3Iucm90YXRlQWJvdXQgPSBmdW5jdGlvbih2ZWN0b3IsIGFuZ2xlLCBwb2ludCwgb3V0cHV0KSB7XG4gICAgICAgIHZhciBjb3MgPSBNYXRoLmNvcyhhbmdsZSksIHNpbiA9IE1hdGguc2luKGFuZ2xlKTtcbiAgICAgICAgaWYgKCFvdXRwdXQpIG91dHB1dCA9IHt9O1xuICAgICAgICB2YXIgeCA9IHBvaW50LnggKyAoKHZlY3Rvci54IC0gcG9pbnQueCkgKiBjb3MgLSAodmVjdG9yLnkgLSBwb2ludC55KSAqIHNpbik7XG4gICAgICAgIG91dHB1dC55ID0gcG9pbnQueSArICgodmVjdG9yLnggLSBwb2ludC54KSAqIHNpbiArICh2ZWN0b3IueSAtIHBvaW50LnkpICogY29zKTtcbiAgICAgICAgb3V0cHV0LnggPSB4O1xuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBOb3JtYWxpc2VzIGEgdmVjdG9yIChzdWNoIHRoYXQgaXRzIG1hZ25pdHVkZSBpcyBgMWApLlxuICAgICAqIEBtZXRob2Qgbm9ybWFsaXNlXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEByZXR1cm4ge3ZlY3Rvcn0gQSBuZXcgdmVjdG9yIG5vcm1hbGlzZWRcbiAgICAgKi9cbiAgICBWZWN0b3Iubm9ybWFsaXNlID0gZnVuY3Rpb24odmVjdG9yKSB7XG4gICAgICAgIHZhciBtYWduaXR1ZGUgPSBWZWN0b3IubWFnbml0dWRlKHZlY3Rvcik7XG4gICAgICAgIGlmIChtYWduaXR1ZGUgPT09IDApXG4gICAgICAgICAgICByZXR1cm4geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIHJldHVybiB7IHg6IHZlY3Rvci54IC8gbWFnbml0dWRlLCB5OiB2ZWN0b3IueSAvIG1hZ25pdHVkZSB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBkb3QtcHJvZHVjdCBvZiB0d28gdmVjdG9ycy5cbiAgICAgKiBAbWV0aG9kIGRvdFxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JBXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBkb3QgcHJvZHVjdCBvZiB0aGUgdHdvIHZlY3RvcnNcbiAgICAgKi9cbiAgICBWZWN0b3IuZG90ID0gZnVuY3Rpb24odmVjdG9yQSwgdmVjdG9yQikge1xuICAgICAgICByZXR1cm4gKHZlY3RvckEueCAqIHZlY3RvckIueCkgKyAodmVjdG9yQS55ICogdmVjdG9yQi55KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3Jvc3MtcHJvZHVjdCBvZiB0d28gdmVjdG9ycy5cbiAgICAgKiBAbWV0aG9kIGNyb3NzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckFcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQlxuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIGNyb3NzIHByb2R1Y3Qgb2YgdGhlIHR3byB2ZWN0b3JzXG4gICAgICovXG4gICAgVmVjdG9yLmNyb3NzID0gZnVuY3Rpb24odmVjdG9yQSwgdmVjdG9yQikge1xuICAgICAgICByZXR1cm4gKHZlY3RvckEueCAqIHZlY3RvckIueSkgLSAodmVjdG9yQS55ICogdmVjdG9yQi54KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY3Jvc3MtcHJvZHVjdCBvZiB0aHJlZSB2ZWN0b3JzLlxuICAgICAqIEBtZXRob2QgY3Jvc3MzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckFcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQlxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JDXG4gICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgY3Jvc3MgcHJvZHVjdCBvZiB0aGUgdGhyZWUgdmVjdG9yc1xuICAgICAqL1xuICAgIFZlY3Rvci5jcm9zczMgPSBmdW5jdGlvbih2ZWN0b3JBLCB2ZWN0b3JCLCB2ZWN0b3JDKSB7XG4gICAgICAgIHJldHVybiAodmVjdG9yQi54IC0gdmVjdG9yQS54KSAqICh2ZWN0b3JDLnkgLSB2ZWN0b3JBLnkpIC0gKHZlY3RvckIueSAtIHZlY3RvckEueSkgKiAodmVjdG9yQy54IC0gdmVjdG9yQS54KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyB0aGUgdHdvIHZlY3RvcnMuXG4gICAgICogQG1ldGhvZCBhZGRcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JCXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IFtvdXRwdXRdXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBBIG5ldyB2ZWN0b3Igb2YgdmVjdG9yQSBhbmQgdmVjdG9yQiBhZGRlZFxuICAgICAqL1xuICAgIFZlY3Rvci5hZGQgPSBmdW5jdGlvbih2ZWN0b3JBLCB2ZWN0b3JCLCBvdXRwdXQpIHtcbiAgICAgICAgaWYgKCFvdXRwdXQpIG91dHB1dCA9IHt9O1xuICAgICAgICBvdXRwdXQueCA9IHZlY3RvckEueCArIHZlY3RvckIueDtcbiAgICAgICAgb3V0cHV0LnkgPSB2ZWN0b3JBLnkgKyB2ZWN0b3JCLnk7XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFN1YnRyYWN0cyB0aGUgdHdvIHZlY3RvcnMuXG4gICAgICogQG1ldGhvZCBzdWJcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yQVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JCXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IFtvdXRwdXRdXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBBIG5ldyB2ZWN0b3Igb2YgdmVjdG9yQSBhbmQgdmVjdG9yQiBzdWJ0cmFjdGVkXG4gICAgICovXG4gICAgVmVjdG9yLnN1YiA9IGZ1bmN0aW9uKHZlY3RvckEsIHZlY3RvckIsIG91dHB1dCkge1xuICAgICAgICBpZiAoIW91dHB1dCkgb3V0cHV0ID0ge307XG4gICAgICAgIG91dHB1dC54ID0gdmVjdG9yQS54IC0gdmVjdG9yQi54O1xuICAgICAgICBvdXRwdXQueSA9IHZlY3RvckEueSAtIHZlY3RvckIueTtcbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbGllcyBhIHZlY3RvciBhbmQgYSBzY2FsYXIuXG4gICAgICogQG1ldGhvZCBtdWx0XG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsYXJcbiAgICAgKiBAcmV0dXJuIHt2ZWN0b3J9IEEgbmV3IHZlY3RvciBtdWx0aXBsaWVkIGJ5IHNjYWxhclxuICAgICAqL1xuICAgIFZlY3Rvci5tdWx0ID0gZnVuY3Rpb24odmVjdG9yLCBzY2FsYXIpIHtcbiAgICAgICAgcmV0dXJuIHsgeDogdmVjdG9yLnggKiBzY2FsYXIsIHk6IHZlY3Rvci55ICogc2NhbGFyIH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERpdmlkZXMgYSB2ZWN0b3IgYW5kIGEgc2NhbGFyLlxuICAgICAqIEBtZXRob2QgZGl2XG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsYXJcbiAgICAgKiBAcmV0dXJuIHt2ZWN0b3J9IEEgbmV3IHZlY3RvciBkaXZpZGVkIGJ5IHNjYWxhclxuICAgICAqL1xuICAgIFZlY3Rvci5kaXYgPSBmdW5jdGlvbih2ZWN0b3IsIHNjYWxhcikge1xuICAgICAgICByZXR1cm4geyB4OiB2ZWN0b3IueCAvIHNjYWxhciwgeTogdmVjdG9yLnkgLyBzY2FsYXIgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgcGVycGVuZGljdWxhciB2ZWN0b3IuIFNldCBgbmVnYXRlYCB0byB0cnVlIGZvciB0aGUgcGVycGVuZGljdWxhciBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uLlxuICAgICAqIEBtZXRob2QgcGVycFxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IFtuZWdhdGU9ZmFsc2VdXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBUaGUgcGVycGVuZGljdWxhciB2ZWN0b3JcbiAgICAgKi9cbiAgICBWZWN0b3IucGVycCA9IGZ1bmN0aW9uKHZlY3RvciwgbmVnYXRlKSB7XG4gICAgICAgIG5lZ2F0ZSA9IG5lZ2F0ZSA9PT0gdHJ1ZSA/IC0xIDogMTtcbiAgICAgICAgcmV0dXJuIHsgeDogbmVnYXRlICogLXZlY3Rvci55LCB5OiBuZWdhdGUgKiB2ZWN0b3IueCB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBOZWdhdGVzIGJvdGggY29tcG9uZW50cyBvZiBhIHZlY3RvciBzdWNoIHRoYXQgaXQgcG9pbnRzIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24uXG4gICAgICogQG1ldGhvZCBuZWdcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBUaGUgbmVnYXRlZCB2ZWN0b3JcbiAgICAgKi9cbiAgICBWZWN0b3IubmVnID0gZnVuY3Rpb24odmVjdG9yKSB7XG4gICAgICAgIHJldHVybiB7IHg6IC12ZWN0b3IueCwgeTogLXZlY3Rvci55IH07XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGFuZ2xlIGJldHdlZW4gdGhlIHZlY3RvciBgdmVjdG9yQiAtIHZlY3RvckFgIGFuZCB0aGUgeC1heGlzIGluIHJhZGlhbnMuXG4gICAgICogQG1ldGhvZCBhbmdsZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB2ZWN0b3JBXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlY3RvckJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBhbmdsZSBpbiByYWRpYW5zXG4gICAgICovXG4gICAgVmVjdG9yLmFuZ2xlID0gZnVuY3Rpb24odmVjdG9yQSwgdmVjdG9yQikge1xuICAgICAgICByZXR1cm4gTWF0aC5hdGFuMih2ZWN0b3JCLnkgLSB2ZWN0b3JBLnksIHZlY3RvckIueCAtIHZlY3RvckEueCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRlbXBvcmFyeSB2ZWN0b3IgcG9vbCAobm90IHRocmVhZC1zYWZlKS5cbiAgICAgKiBAcHJvcGVydHkgX3RlbXBcbiAgICAgKiBAdHlwZSB7dmVjdG9yW119XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBWZWN0b3IuX3RlbXAgPSBbXG4gICAgICAgIFZlY3Rvci5jcmVhdGUoKSwgVmVjdG9yLmNyZWF0ZSgpLCBcbiAgICAgICAgVmVjdG9yLmNyZWF0ZSgpLCBWZWN0b3IuY3JlYXRlKCksIFxuICAgICAgICBWZWN0b3IuY3JlYXRlKCksIFZlY3Rvci5jcmVhdGUoKVxuICAgIF07XG5cbn0pKCk7XG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKipcbiogVGhlIGBNYXR0ZXIuVmVydGljZXNgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIHNldHMgb2YgdmVydGljZXMuXG4qIEEgc2V0IG9mIHZlcnRpY2VzIGlzIGFuIGFycmF5IG9mIGBNYXR0ZXIuVmVjdG9yYCB3aXRoIGFkZGl0aW9uYWwgaW5kZXhpbmcgcHJvcGVydGllcyBpbnNlcnRlZCBieSBgVmVydGljZXMuY3JlYXRlYC5cbiogQSBgTWF0dGVyLkJvZHlgIG1haW50YWlucyBhIHNldCBvZiB2ZXJ0aWNlcyB0byByZXByZXNlbnQgdGhlIHNoYXBlIG9mIHRoZSBvYmplY3QgKGl0cyBjb252ZXggaHVsbCkuXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG4qXG4qIEBjbGFzcyBWZXJ0aWNlc1xuKi9cblxudmFyIFZlcnRpY2VzID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gVmVydGljZXM7XG5cbnZhciBWZWN0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xudmFyIENvbW1vbiA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgc2V0IG9mIGBNYXR0ZXIuQm9keWAgY29tcGF0aWJsZSB2ZXJ0aWNlcy5cbiAgICAgKiBUaGUgYHBvaW50c2AgYXJndW1lbnQgYWNjZXB0cyBhbiBhcnJheSBvZiBgTWF0dGVyLlZlY3RvcmAgcG9pbnRzIG9yaWVudGF0ZWQgYXJvdW5kIHRoZSBvcmlnaW4gYCgwLCAwKWAsIGZvciBleGFtcGxlOlxuICAgICAqXG4gICAgICogICAgIFt7IHg6IDAsIHk6IDAgfSwgeyB4OiAyNSwgeTogNTAgfSwgeyB4OiA1MCwgeTogMCB9XVxuICAgICAqXG4gICAgICogVGhlIGBWZXJ0aWNlcy5jcmVhdGVgIG1ldGhvZCByZXR1cm5zIGEgbmV3IGFycmF5IG9mIHZlcnRpY2VzLCB3aGljaCBhcmUgc2ltaWxhciB0byBNYXR0ZXIuVmVjdG9yIG9iamVjdHMsXG4gICAgICogYnV0IHdpdGggc29tZSBhZGRpdGlvbmFsIHJlZmVyZW5jZXMgcmVxdWlyZWQgZm9yIGVmZmljaWVudCBjb2xsaXNpb24gZGV0ZWN0aW9uIHJvdXRpbmVzLlxuICAgICAqXG4gICAgICogVmVydGljZXMgbXVzdCBiZSBzcGVjaWZpZWQgaW4gY2xvY2t3aXNlIG9yZGVyLlxuICAgICAqXG4gICAgICogTm90ZSB0aGF0IHRoZSBgYm9keWAgYXJndW1lbnQgaXMgbm90IG9wdGlvbmFsLCBhIGBNYXR0ZXIuQm9keWAgcmVmZXJlbmNlIG11c3QgYmUgcHJvdmlkZWQuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7dmVjdG9yW119IHBvaW50c1xuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqL1xuICAgIFZlcnRpY2VzLmNyZWF0ZSA9IGZ1bmN0aW9uKHBvaW50cywgYm9keSkge1xuICAgICAgICB2YXIgdmVydGljZXMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBvaW50ID0gcG9pbnRzW2ldLFxuICAgICAgICAgICAgICAgIHZlcnRleCA9IHtcbiAgICAgICAgICAgICAgICAgICAgeDogcG9pbnQueCxcbiAgICAgICAgICAgICAgICAgICAgeTogcG9pbnQueSxcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgICAgICAgICAgIGJvZHk6IGJvZHksXG4gICAgICAgICAgICAgICAgICAgIGlzSW50ZXJuYWw6IGZhbHNlXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmVydGljZXMucHVzaCh2ZXJ0ZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZlcnRpY2VzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBzdHJpbmcgY29udGFpbmluZyBvcmRlcmVkIHggeSBwYWlycyBzZXBhcmF0ZWQgYnkgc3BhY2VzIChhbmQgb3B0aW9uYWxseSBjb21tYXMpLCBcbiAgICAgKiBpbnRvIGEgYE1hdHRlci5WZXJ0aWNlc2Agb2JqZWN0IGZvciB0aGUgZ2l2ZW4gYE1hdHRlci5Cb2R5YC5cbiAgICAgKiBGb3IgcGFyc2luZyBTVkcgcGF0aHMsIHNlZSBgU3ZnLnBhdGhUb1ZlcnRpY2VzYC5cbiAgICAgKiBAbWV0aG9kIGZyb21QYXRoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcmV0dXJuIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKi9cbiAgICBWZXJ0aWNlcy5mcm9tUGF0aCA9IGZ1bmN0aW9uKHBhdGgsIGJvZHkpIHtcbiAgICAgICAgdmFyIHBhdGhQYXR0ZXJuID0gL0w/XFxzKihbLVxcZC5lXSspW1xccyxdKihbLVxcZC5lXSspKi9pZyxcbiAgICAgICAgICAgIHBvaW50cyA9IFtdO1xuXG4gICAgICAgIHBhdGgucmVwbGFjZShwYXRoUGF0dGVybiwgZnVuY3Rpb24obWF0Y2gsIHgsIHkpIHtcbiAgICAgICAgICAgIHBvaW50cy5wdXNoKHsgeDogcGFyc2VGbG9hdCh4KSwgeTogcGFyc2VGbG9hdCh5KSB9KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIFZlcnRpY2VzLmNyZWF0ZShwb2ludHMsIGJvZHkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBjZW50cmUgKGNlbnRyb2lkKSBvZiB0aGUgc2V0IG9mIHZlcnRpY2VzLlxuICAgICAqIEBtZXRob2QgY2VudHJlXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcmV0dXJuIHt2ZWN0b3J9IFRoZSBjZW50cmUgcG9pbnRcbiAgICAgKi9cbiAgICBWZXJ0aWNlcy5jZW50cmUgPSBmdW5jdGlvbih2ZXJ0aWNlcykge1xuICAgICAgICB2YXIgYXJlYSA9IFZlcnRpY2VzLmFyZWEodmVydGljZXMsIHRydWUpLFxuICAgICAgICAgICAgY2VudHJlID0geyB4OiAwLCB5OiAwIH0sXG4gICAgICAgICAgICBjcm9zcyxcbiAgICAgICAgICAgIHRlbXAsXG4gICAgICAgICAgICBqO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGogPSAoaSArIDEpICUgdmVydGljZXMubGVuZ3RoO1xuICAgICAgICAgICAgY3Jvc3MgPSBWZWN0b3IuY3Jvc3ModmVydGljZXNbaV0sIHZlcnRpY2VzW2pdKTtcbiAgICAgICAgICAgIHRlbXAgPSBWZWN0b3IubXVsdChWZWN0b3IuYWRkKHZlcnRpY2VzW2ldLCB2ZXJ0aWNlc1tqXSksIGNyb3NzKTtcbiAgICAgICAgICAgIGNlbnRyZSA9IFZlY3Rvci5hZGQoY2VudHJlLCB0ZW1wKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBWZWN0b3IuZGl2KGNlbnRyZSwgNiAqIGFyZWEpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhdmVyYWdlIChtZWFuKSBvZiB0aGUgc2V0IG9mIHZlcnRpY2VzLlxuICAgICAqIEBtZXRob2QgbWVhblxuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHJldHVybiB7dmVjdG9yfSBUaGUgYXZlcmFnZSBwb2ludFxuICAgICAqL1xuICAgIFZlcnRpY2VzLm1lYW4gPSBmdW5jdGlvbih2ZXJ0aWNlcykge1xuICAgICAgICB2YXIgYXZlcmFnZSA9IHsgeDogMCwgeTogMCB9O1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGF2ZXJhZ2UueCArPSB2ZXJ0aWNlc1tpXS54O1xuICAgICAgICAgICAgYXZlcmFnZS55ICs9IHZlcnRpY2VzW2ldLnk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gVmVjdG9yLmRpdihhdmVyYWdlLCB2ZXJ0aWNlcy5sZW5ndGgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhcmVhIG9mIHRoZSBzZXQgb2YgdmVydGljZXMuXG4gICAgICogQG1ldGhvZCBhcmVhXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IHNpZ25lZFxuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIGFyZWFcbiAgICAgKi9cbiAgICBWZXJ0aWNlcy5hcmVhID0gZnVuY3Rpb24odmVydGljZXMsIHNpZ25lZCkge1xuICAgICAgICB2YXIgYXJlYSA9IDAsXG4gICAgICAgICAgICBqID0gdmVydGljZXMubGVuZ3RoIC0gMTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmVhICs9ICh2ZXJ0aWNlc1tqXS54IC0gdmVydGljZXNbaV0ueCkgKiAodmVydGljZXNbal0ueSArIHZlcnRpY2VzW2ldLnkpO1xuICAgICAgICAgICAgaiA9IGk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2lnbmVkKVxuICAgICAgICAgICAgcmV0dXJuIGFyZWEgLyAyO1xuXG4gICAgICAgIHJldHVybiBNYXRoLmFicyhhcmVhKSAvIDI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1vbWVudCBvZiBpbmVydGlhIChzZWNvbmQgbW9tZW50IG9mIGFyZWEpIG9mIHRoZSBzZXQgb2YgdmVydGljZXMgZ2l2ZW4gdGhlIHRvdGFsIG1hc3MuXG4gICAgICogQG1ldGhvZCBpbmVydGlhXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWFzc1xuICAgICAqIEByZXR1cm4ge251bWJlcn0gVGhlIHBvbHlnb24ncyBtb21lbnQgb2YgaW5lcnRpYVxuICAgICAqL1xuICAgIFZlcnRpY2VzLmluZXJ0aWEgPSBmdW5jdGlvbih2ZXJ0aWNlcywgbWFzcykge1xuICAgICAgICB2YXIgbnVtZXJhdG9yID0gMCxcbiAgICAgICAgICAgIGRlbm9taW5hdG9yID0gMCxcbiAgICAgICAgICAgIHYgPSB2ZXJ0aWNlcyxcbiAgICAgICAgICAgIGNyb3NzLFxuICAgICAgICAgICAgajtcblxuICAgICAgICAvLyBmaW5kIHRoZSBwb2x5Z29uJ3MgbW9tZW50IG9mIGluZXJ0aWEsIHVzaW5nIHNlY29uZCBtb21lbnQgb2YgYXJlYVxuICAgICAgICAvLyBmcm9tIGVxdWF0aW9ucyBhdCBodHRwOi8vd3d3LnBoeXNpY3Nmb3J1bXMuY29tL3Nob3d0aHJlYWQucGhwP3Q9MjUyOTNcbiAgICAgICAgZm9yICh2YXIgbiA9IDA7IG4gPCB2Lmxlbmd0aDsgbisrKSB7XG4gICAgICAgICAgICBqID0gKG4gKyAxKSAlIHYubGVuZ3RoO1xuICAgICAgICAgICAgY3Jvc3MgPSBNYXRoLmFicyhWZWN0b3IuY3Jvc3ModltqXSwgdltuXSkpO1xuICAgICAgICAgICAgbnVtZXJhdG9yICs9IGNyb3NzICogKFZlY3Rvci5kb3QodltqXSwgdltqXSkgKyBWZWN0b3IuZG90KHZbal0sIHZbbl0pICsgVmVjdG9yLmRvdCh2W25dLCB2W25dKSk7XG4gICAgICAgICAgICBkZW5vbWluYXRvciArPSBjcm9zcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAobWFzcyAvIDYpICogKG51bWVyYXRvciAvIGRlbm9taW5hdG9yKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVHJhbnNsYXRlcyB0aGUgc2V0IG9mIHZlcnRpY2VzIGluLXBsYWNlLlxuICAgICAqIEBtZXRob2QgdHJhbnNsYXRlXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdmVjdG9yXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhclxuICAgICAqL1xuICAgIFZlcnRpY2VzLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uKHZlcnRpY2VzLCB2ZWN0b3IsIHNjYWxhcikge1xuICAgICAgICBzY2FsYXIgPSB0eXBlb2Ygc2NhbGFyICE9PSAndW5kZWZpbmVkJyA/IHNjYWxhciA6IDE7XG5cbiAgICAgICAgdmFyIHZlcnRpY2VzTGVuZ3RoID0gdmVydGljZXMubGVuZ3RoLFxuICAgICAgICAgICAgdHJhbnNsYXRlWCA9IHZlY3Rvci54ICogc2NhbGFyLFxuICAgICAgICAgICAgdHJhbnNsYXRlWSA9IHZlY3Rvci55ICogc2NhbGFyLFxuICAgICAgICAgICAgaTtcbiAgICAgICAgXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB2ZXJ0aWNlc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2ZXJ0aWNlc1tpXS54ICs9IHRyYW5zbGF0ZVg7XG4gICAgICAgICAgICB2ZXJ0aWNlc1tpXS55ICs9IHRyYW5zbGF0ZVk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmVydGljZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZXMgdGhlIHNldCBvZiB2ZXJ0aWNlcyBpbi1wbGFjZS5cbiAgICAgKiBAbWV0aG9kIHJvdGF0ZVxuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvaW50XG4gICAgICovXG4gICAgVmVydGljZXMucm90YXRlID0gZnVuY3Rpb24odmVydGljZXMsIGFuZ2xlLCBwb2ludCkge1xuICAgICAgICBpZiAoYW5nbGUgPT09IDApXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgdmFyIGNvcyA9IE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgICAgIHNpbiA9IE1hdGguc2luKGFuZ2xlKSxcbiAgICAgICAgICAgIHBvaW50WCA9IHBvaW50LngsXG4gICAgICAgICAgICBwb2ludFkgPSBwb2ludC55LFxuICAgICAgICAgICAgdmVydGljZXNMZW5ndGggPSB2ZXJ0aWNlcy5sZW5ndGgsXG4gICAgICAgICAgICB2ZXJ0ZXgsXG4gICAgICAgICAgICBkeCxcbiAgICAgICAgICAgIGR5LFxuICAgICAgICAgICAgaTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdmVydGljZXNMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmVydGV4ID0gdmVydGljZXNbaV07XG4gICAgICAgICAgICBkeCA9IHZlcnRleC54IC0gcG9pbnRYO1xuICAgICAgICAgICAgZHkgPSB2ZXJ0ZXgueSAtIHBvaW50WTtcbiAgICAgICAgICAgIHZlcnRleC54ID0gcG9pbnRYICsgKGR4ICogY29zIC0gZHkgKiBzaW4pO1xuICAgICAgICAgICAgdmVydGV4LnkgPSBwb2ludFkgKyAoZHggKiBzaW4gKyBkeSAqIGNvcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmVydGljZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIHRoZSBgcG9pbnRgIGlzIGluc2lkZSB0aGUgc2V0IG9mIGB2ZXJ0aWNlc2AuXG4gICAgICogQG1ldGhvZCBjb250YWluc1xuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvaW50XG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgdmVydGljZXMgY29udGFpbnMgcG9pbnQsIG90aGVyd2lzZSBmYWxzZVxuICAgICAqL1xuICAgIFZlcnRpY2VzLmNvbnRhaW5zID0gZnVuY3Rpb24odmVydGljZXMsIHBvaW50KSB7XG4gICAgICAgIHZhciBwb2ludFggPSBwb2ludC54LFxuICAgICAgICAgICAgcG9pbnRZID0gcG9pbnQueSxcbiAgICAgICAgICAgIHZlcnRpY2VzTGVuZ3RoID0gdmVydGljZXMubGVuZ3RoLFxuICAgICAgICAgICAgdmVydGV4ID0gdmVydGljZXNbdmVydGljZXNMZW5ndGggLSAxXSxcbiAgICAgICAgICAgIG5leHRWZXJ0ZXg7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZXJ0aWNlc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBuZXh0VmVydGV4ID0gdmVydGljZXNbaV07XG5cbiAgICAgICAgICAgIGlmICgocG9pbnRYIC0gdmVydGV4LngpICogKG5leHRWZXJ0ZXgueSAtIHZlcnRleC55KSBcbiAgICAgICAgICAgICAgICArIChwb2ludFkgLSB2ZXJ0ZXgueSkgKiAodmVydGV4LnggLSBuZXh0VmVydGV4LngpID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmVydGV4ID0gbmV4dFZlcnRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTY2FsZXMgdGhlIHZlcnRpY2VzIGZyb20gYSBwb2ludCAoZGVmYXVsdCBpcyBjZW50cmUpIGluLXBsYWNlLlxuICAgICAqIEBtZXRob2Qgc2NhbGVcbiAgICAgKiBAcGFyYW0ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZVhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGVZXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvaW50XG4gICAgICovXG4gICAgVmVydGljZXMuc2NhbGUgPSBmdW5jdGlvbih2ZXJ0aWNlcywgc2NhbGVYLCBzY2FsZVksIHBvaW50KSB7XG4gICAgICAgIGlmIChzY2FsZVggPT09IDEgJiYgc2NhbGVZID09PSAxKVxuICAgICAgICAgICAgcmV0dXJuIHZlcnRpY2VzO1xuXG4gICAgICAgIHBvaW50ID0gcG9pbnQgfHwgVmVydGljZXMuY2VudHJlKHZlcnRpY2VzKTtcblxuICAgICAgICB2YXIgdmVydGV4LFxuICAgICAgICAgICAgZGVsdGE7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmVydGV4ID0gdmVydGljZXNbaV07XG4gICAgICAgICAgICBkZWx0YSA9IFZlY3Rvci5zdWIodmVydGV4LCBwb2ludCk7XG4gICAgICAgICAgICB2ZXJ0aWNlc1tpXS54ID0gcG9pbnQueCArIGRlbHRhLnggKiBzY2FsZVg7XG4gICAgICAgICAgICB2ZXJ0aWNlc1tpXS55ID0gcG9pbnQueSArIGRlbHRhLnkgKiBzY2FsZVk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdmVydGljZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoYW1mZXJzIGEgc2V0IG9mIHZlcnRpY2VzIGJ5IGdpdmluZyB0aGVtIHJvdW5kZWQgY29ybmVycywgcmV0dXJucyBhIG5ldyBzZXQgb2YgdmVydGljZXMuXG4gICAgICogVGhlIHJhZGl1cyBwYXJhbWV0ZXIgaXMgYSBzaW5nbGUgbnVtYmVyIG9yIGFuIGFycmF5IHRvIHNwZWNpZnkgdGhlIHJhZGl1cyBmb3IgZWFjaCB2ZXJ0ZXguXG4gICAgICogQG1ldGhvZCBjaGFtZmVyXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSByYWRpdXNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcXVhbGl0eVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBxdWFsaXR5TWluXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHF1YWxpdHlNYXhcbiAgICAgKi9cbiAgICBWZXJ0aWNlcy5jaGFtZmVyID0gZnVuY3Rpb24odmVydGljZXMsIHJhZGl1cywgcXVhbGl0eSwgcXVhbGl0eU1pbiwgcXVhbGl0eU1heCkge1xuICAgICAgICBpZiAodHlwZW9mIHJhZGl1cyA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIHJhZGl1cyA9IFtyYWRpdXNdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmFkaXVzID0gcmFkaXVzIHx8IFs4XTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHF1YWxpdHkgZGVmYXVsdHMgdG8gLTEsIHdoaWNoIGlzIGF1dG9cbiAgICAgICAgcXVhbGl0eSA9ICh0eXBlb2YgcXVhbGl0eSAhPT0gJ3VuZGVmaW5lZCcpID8gcXVhbGl0eSA6IC0xO1xuICAgICAgICBxdWFsaXR5TWluID0gcXVhbGl0eU1pbiB8fCAyO1xuICAgICAgICBxdWFsaXR5TWF4ID0gcXVhbGl0eU1heCB8fCAxNDtcblxuICAgICAgICB2YXIgbmV3VmVydGljZXMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcHJldlZlcnRleCA9IHZlcnRpY2VzW2kgLSAxID49IDAgPyBpIC0gMSA6IHZlcnRpY2VzLmxlbmd0aCAtIDFdLFxuICAgICAgICAgICAgICAgIHZlcnRleCA9IHZlcnRpY2VzW2ldLFxuICAgICAgICAgICAgICAgIG5leHRWZXJ0ZXggPSB2ZXJ0aWNlc1soaSArIDEpICUgdmVydGljZXMubGVuZ3RoXSxcbiAgICAgICAgICAgICAgICBjdXJyZW50UmFkaXVzID0gcmFkaXVzW2kgPCByYWRpdXMubGVuZ3RoID8gaSA6IHJhZGl1cy5sZW5ndGggLSAxXTtcblxuICAgICAgICAgICAgaWYgKGN1cnJlbnRSYWRpdXMgPT09IDApIHtcbiAgICAgICAgICAgICAgICBuZXdWZXJ0aWNlcy5wdXNoKHZlcnRleCk7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwcmV2Tm9ybWFsID0gVmVjdG9yLm5vcm1hbGlzZSh7IFxuICAgICAgICAgICAgICAgIHg6IHZlcnRleC55IC0gcHJldlZlcnRleC55LCBcbiAgICAgICAgICAgICAgICB5OiBwcmV2VmVydGV4LnggLSB2ZXJ0ZXgueFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBuZXh0Tm9ybWFsID0gVmVjdG9yLm5vcm1hbGlzZSh7IFxuICAgICAgICAgICAgICAgIHg6IG5leHRWZXJ0ZXgueSAtIHZlcnRleC55LCBcbiAgICAgICAgICAgICAgICB5OiB2ZXJ0ZXgueCAtIG5leHRWZXJ0ZXgueFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHZhciBkaWFnb25hbFJhZGl1cyA9IE1hdGguc3FydCgyICogTWF0aC5wb3coY3VycmVudFJhZGl1cywgMikpLFxuICAgICAgICAgICAgICAgIHJhZGl1c1ZlY3RvciA9IFZlY3Rvci5tdWx0KENvbW1vbi5jbG9uZShwcmV2Tm9ybWFsKSwgY3VycmVudFJhZGl1cyksXG4gICAgICAgICAgICAgICAgbWlkTm9ybWFsID0gVmVjdG9yLm5vcm1hbGlzZShWZWN0b3IubXVsdChWZWN0b3IuYWRkKHByZXZOb3JtYWwsIG5leHROb3JtYWwpLCAwLjUpKSxcbiAgICAgICAgICAgICAgICBzY2FsZWRWZXJ0ZXggPSBWZWN0b3Iuc3ViKHZlcnRleCwgVmVjdG9yLm11bHQobWlkTm9ybWFsLCBkaWFnb25hbFJhZGl1cykpO1xuXG4gICAgICAgICAgICB2YXIgcHJlY2lzaW9uID0gcXVhbGl0eTtcblxuICAgICAgICAgICAgaWYgKHF1YWxpdHkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgLy8gYXV0b21hdGljYWxseSBkZWNpZGUgcHJlY2lzaW9uXG4gICAgICAgICAgICAgICAgcHJlY2lzaW9uID0gTWF0aC5wb3coY3VycmVudFJhZGl1cywgMC4zMikgKiAxLjc1O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBwcmVjaXNpb24gPSBDb21tb24uY2xhbXAocHJlY2lzaW9uLCBxdWFsaXR5TWluLCBxdWFsaXR5TWF4KTtcblxuICAgICAgICAgICAgLy8gdXNlIGFuIGV2ZW4gdmFsdWUgZm9yIHByZWNpc2lvbiwgbW9yZSBsaWtlbHkgdG8gcmVkdWNlIGF4ZXMgYnkgdXNpbmcgc3ltbWV0cnlcbiAgICAgICAgICAgIGlmIChwcmVjaXNpb24gJSAyID09PSAxKVxuICAgICAgICAgICAgICAgIHByZWNpc2lvbiArPSAxO1xuXG4gICAgICAgICAgICB2YXIgYWxwaGEgPSBNYXRoLmFjb3MoVmVjdG9yLmRvdChwcmV2Tm9ybWFsLCBuZXh0Tm9ybWFsKSksXG4gICAgICAgICAgICAgICAgdGhldGEgPSBhbHBoYSAvIHByZWNpc2lvbjtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBwcmVjaXNpb247IGorKykge1xuICAgICAgICAgICAgICAgIG5ld1ZlcnRpY2VzLnB1c2goVmVjdG9yLmFkZChWZWN0b3Iucm90YXRlKHJhZGl1c1ZlY3RvciwgdGhldGEgKiBqKSwgc2NhbGVkVmVydGV4KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3VmVydGljZXM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNvcnRzIHRoZSBpbnB1dCB2ZXJ0aWNlcyBpbnRvIGNsb2Nrd2lzZSBvcmRlciBpbiBwbGFjZS5cbiAgICAgKiBAbWV0aG9kIGNsb2Nrd2lzZVNvcnRcbiAgICAgKiBAcGFyYW0ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqIEByZXR1cm4ge3ZlcnRpY2VzfSB2ZXJ0aWNlc1xuICAgICAqL1xuICAgIFZlcnRpY2VzLmNsb2Nrd2lzZVNvcnQgPSBmdW5jdGlvbih2ZXJ0aWNlcykge1xuICAgICAgICB2YXIgY2VudHJlID0gVmVydGljZXMubWVhbih2ZXJ0aWNlcyk7XG5cbiAgICAgICAgdmVydGljZXMuc29ydChmdW5jdGlvbih2ZXJ0ZXhBLCB2ZXJ0ZXhCKSB7XG4gICAgICAgICAgICByZXR1cm4gVmVjdG9yLmFuZ2xlKGNlbnRyZSwgdmVydGV4QSkgLSBWZWN0b3IuYW5nbGUoY2VudHJlLCB2ZXJ0ZXhCKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHZlcnRpY2VzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHZlcnRpY2VzIGZvcm0gYSBjb252ZXggc2hhcGUgKHZlcnRpY2VzIG11c3QgYmUgaW4gY2xvY2t3aXNlIG9yZGVyKS5cbiAgICAgKiBAbWV0aG9kIGlzQ29udmV4XG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcmV0dXJuIHtib29sfSBgdHJ1ZWAgaWYgdGhlIGB2ZXJ0aWNlc2AgYXJlIGNvbnZleCwgYGZhbHNlYCBpZiBub3QgKG9yIGBudWxsYCBpZiBub3QgY29tcHV0YWJsZSkuXG4gICAgICovXG4gICAgVmVydGljZXMuaXNDb252ZXggPSBmdW5jdGlvbih2ZXJ0aWNlcykge1xuICAgICAgICAvLyBodHRwOi8vcGF1bGJvdXJrZS5uZXQvZ2VvbWV0cnkvcG9seWdvbm1lc2gvXG4gICAgICAgIC8vIENvcHlyaWdodCAoYykgUGF1bCBCb3Vya2UgKHVzZSBwZXJtaXR0ZWQpXG5cbiAgICAgICAgdmFyIGZsYWcgPSAwLFxuICAgICAgICAgICAgbiA9IHZlcnRpY2VzLmxlbmd0aCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgayxcbiAgICAgICAgICAgIHo7XG5cbiAgICAgICAgaWYgKG4gPCAzKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgaiA9IChpICsgMSkgJSBuO1xuICAgICAgICAgICAgayA9IChpICsgMikgJSBuO1xuICAgICAgICAgICAgeiA9ICh2ZXJ0aWNlc1tqXS54IC0gdmVydGljZXNbaV0ueCkgKiAodmVydGljZXNba10ueSAtIHZlcnRpY2VzW2pdLnkpO1xuICAgICAgICAgICAgeiAtPSAodmVydGljZXNbal0ueSAtIHZlcnRpY2VzW2ldLnkpICogKHZlcnRpY2VzW2tdLnggLSB2ZXJ0aWNlc1tqXS54KTtcblxuICAgICAgICAgICAgaWYgKHogPCAwKSB7XG4gICAgICAgICAgICAgICAgZmxhZyB8PSAxO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh6ID4gMCkge1xuICAgICAgICAgICAgICAgIGZsYWcgfD0gMjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGZsYWcgPT09IDMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZmxhZyAhPT0gMCl7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvbnZleCBodWxsIG9mIHRoZSBpbnB1dCB2ZXJ0aWNlcyBhcyBhIG5ldyBhcnJheSBvZiBwb2ludHMuXG4gICAgICogQG1ldGhvZCBodWxsXG4gICAgICogQHBhcmFtIHt2ZXJ0aWNlc30gdmVydGljZXNcbiAgICAgKiBAcmV0dXJuIFt2ZXJ0ZXhdIHZlcnRpY2VzXG4gICAgICovXG4gICAgVmVydGljZXMuaHVsbCA9IGZ1bmN0aW9uKHZlcnRpY2VzKSB7XG4gICAgICAgIC8vIGh0dHA6Ly9nZW9tYWxnb3JpdGhtcy5jb20vYTEwLV9odWxsLTEuaHRtbFxuXG4gICAgICAgIHZhciB1cHBlciA9IFtdLFxuICAgICAgICAgICAgbG93ZXIgPSBbXSwgXG4gICAgICAgICAgICB2ZXJ0ZXgsXG4gICAgICAgICAgICBpO1xuXG4gICAgICAgIC8vIHNvcnQgdmVydGljZXMgb24geC1heGlzICh5LWF4aXMgZm9yIHRpZXMpXG4gICAgICAgIHZlcnRpY2VzID0gdmVydGljZXMuc2xpY2UoMCk7XG4gICAgICAgIHZlcnRpY2VzLnNvcnQoZnVuY3Rpb24odmVydGV4QSwgdmVydGV4Qikge1xuICAgICAgICAgICAgdmFyIGR4ID0gdmVydGV4QS54IC0gdmVydGV4Qi54O1xuICAgICAgICAgICAgcmV0dXJuIGR4ICE9PSAwID8gZHggOiB2ZXJ0ZXhBLnkgLSB2ZXJ0ZXhCLnk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGJ1aWxkIGxvd2VyIGh1bGxcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHZlcnRpY2VzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2ZXJ0ZXggPSB2ZXJ0aWNlc1tpXTtcblxuICAgICAgICAgICAgd2hpbGUgKGxvd2VyLmxlbmd0aCA+PSAyIFxuICAgICAgICAgICAgICAgICAgICYmIFZlY3Rvci5jcm9zczMobG93ZXJbbG93ZXIubGVuZ3RoIC0gMl0sIGxvd2VyW2xvd2VyLmxlbmd0aCAtIDFdLCB2ZXJ0ZXgpIDw9IDApIHtcbiAgICAgICAgICAgICAgICBsb3dlci5wb3AoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbG93ZXIucHVzaCh2ZXJ0ZXgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYnVpbGQgdXBwZXIgaHVsbFxuICAgICAgICBmb3IgKGkgPSB2ZXJ0aWNlcy5sZW5ndGggLSAxOyBpID49IDA7IGkgLT0gMSkge1xuICAgICAgICAgICAgdmVydGV4ID0gdmVydGljZXNbaV07XG5cbiAgICAgICAgICAgIHdoaWxlICh1cHBlci5sZW5ndGggPj0gMiBcbiAgICAgICAgICAgICAgICAgICAmJiBWZWN0b3IuY3Jvc3MzKHVwcGVyW3VwcGVyLmxlbmd0aCAtIDJdLCB1cHBlclt1cHBlci5sZW5ndGggLSAxXSwgdmVydGV4KSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdXBwZXIucG9wKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHVwcGVyLnB1c2godmVydGV4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNvbmNhdGVuYXRpb24gb2YgdGhlIGxvd2VyIGFuZCB1cHBlciBodWxscyBnaXZlcyB0aGUgY29udmV4IGh1bGxcbiAgICAgICAgLy8gb21pdCBsYXN0IHBvaW50cyBiZWNhdXNlIHRoZXkgYXJlIHJlcGVhdGVkIGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIG90aGVyIGxpc3RcbiAgICAgICAgdXBwZXIucG9wKCk7XG4gICAgICAgIGxvd2VyLnBvcCgpO1xuXG4gICAgICAgIHJldHVybiB1cHBlci5jb25jYXQobG93ZXIpO1xuICAgIH07XG5cbn0pKCk7XG5cblxuLyoqKi8gfSksXG4vKiA0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qKlxuKiBUaGUgYE1hdHRlci5Cb2R5YCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyByaWdpZCBib2RpZXMuXG4qIEZvciBjcmVhdGluZyBib2RpZXMgd2l0aCBjb21tb24gY29uZmlndXJhdGlvbnMgc3VjaCBhcyByZWN0YW5nbGVzLCBjaXJjbGVzIGFuZCBvdGhlciBwb2x5Z29ucyBzZWUgdGhlIG1vZHVsZSBgTWF0dGVyLkJvZGllc2AuXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG5cbiogQGNsYXNzIEJvZHlcbiovXG5cbnZhciBCb2R5ID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gQm9keTtcblxudmFyIFZlcnRpY2VzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbnZhciBWZWN0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xudmFyIFNsZWVwaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcbnZhciBDb21tb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIEJvdW5kcyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgQXhlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICBCb2R5Ll90aW1lQ29ycmVjdGlvbiA9IHRydWU7XG4gICAgQm9keS5faW5lcnRpYVNjYWxlID0gNDtcbiAgICBCb2R5Ll9uZXh0Q29sbGlkaW5nR3JvdXBJZCA9IDE7XG4gICAgQm9keS5fbmV4dE5vbkNvbGxpZGluZ0dyb3VwSWQgPSAtMTtcbiAgICBCb2R5Ll9uZXh0Q2F0ZWdvcnkgPSAweDAwMDE7XG4gICAgQm9keS5fYmFzZURlbHRhID0gMTAwMCAvIDYwO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByaWdpZCBib2R5IG1vZGVsLiBUaGUgb3B0aW9ucyBwYXJhbWV0ZXIgaXMgYW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIGFueSBwcm9wZXJ0aWVzIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0cy5cbiAgICAgKiBBbGwgcHJvcGVydGllcyBoYXZlIGRlZmF1bHQgdmFsdWVzLCBhbmQgbWFueSBhcmUgcHJlLWNhbGN1bGF0ZWQgYXV0b21hdGljYWxseSBiYXNlZCBvbiBvdGhlciBwcm9wZXJ0aWVzLlxuICAgICAqIFZlcnRpY2VzIG11c3QgYmUgc3BlY2lmaWVkIGluIGNsb2Nrd2lzZSBvcmRlci5cbiAgICAgKiBTZWUgdGhlIHByb3BlcnRpZXMgc2VjdGlvbiBiZWxvdyBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCB5b3UgY2FuIHBhc3MgdmlhIHRoZSBgb3B0aW9uc2Agb2JqZWN0LlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHt9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtib2R5fSBib2R5XG4gICAgICovXG4gICAgQm9keS5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIGlkOiBDb21tb24ubmV4dElkKCksXG4gICAgICAgICAgICB0eXBlOiAnYm9keScsXG4gICAgICAgICAgICBsYWJlbDogJ0JvZHknLFxuICAgICAgICAgICAgcGFydHM6IFtdLFxuICAgICAgICAgICAgcGx1Z2luOiB7fSxcbiAgICAgICAgICAgIGFuZ2xlOiAwLFxuICAgICAgICAgICAgdmVydGljZXM6IFZlcnRpY2VzLmZyb21QYXRoKCdMIDAgMCBMIDQwIDAgTCA0MCA0MCBMIDAgNDAnKSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7IHg6IDAsIHk6IDAgfSxcbiAgICAgICAgICAgIGZvcmNlOiB7IHg6IDAsIHk6IDAgfSxcbiAgICAgICAgICAgIHRvcnF1ZTogMCxcbiAgICAgICAgICAgIHBvc2l0aW9uSW1wdWxzZTogeyB4OiAwLCB5OiAwIH0sXG4gICAgICAgICAgICBjb25zdHJhaW50SW1wdWxzZTogeyB4OiAwLCB5OiAwLCBhbmdsZTogMCB9LFxuICAgICAgICAgICAgdG90YWxDb250YWN0czogMCxcbiAgICAgICAgICAgIHNwZWVkOiAwLFxuICAgICAgICAgICAgYW5ndWxhclNwZWVkOiAwLFxuICAgICAgICAgICAgdmVsb2NpdHk6IHsgeDogMCwgeTogMCB9LFxuICAgICAgICAgICAgYW5ndWxhclZlbG9jaXR5OiAwLFxuICAgICAgICAgICAgaXNTZW5zb3I6IGZhbHNlLFxuICAgICAgICAgICAgaXNTdGF0aWM6IGZhbHNlLFxuICAgICAgICAgICAgaXNTbGVlcGluZzogZmFsc2UsXG4gICAgICAgICAgICBtb3Rpb246IDAsXG4gICAgICAgICAgICBzbGVlcFRocmVzaG9sZDogNjAsXG4gICAgICAgICAgICBkZW5zaXR5OiAwLjAwMSxcbiAgICAgICAgICAgIHJlc3RpdHV0aW9uOiAwLFxuICAgICAgICAgICAgZnJpY3Rpb246IDAuMSxcbiAgICAgICAgICAgIGZyaWN0aW9uU3RhdGljOiAwLjUsXG4gICAgICAgICAgICBmcmljdGlvbkFpcjogMC4wMSxcbiAgICAgICAgICAgIGNvbGxpc2lvbkZpbHRlcjoge1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiAweDAwMDEsXG4gICAgICAgICAgICAgICAgbWFzazogMHhGRkZGRkZGRixcbiAgICAgICAgICAgICAgICBncm91cDogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNsb3A6IDAuMDUsXG4gICAgICAgICAgICB0aW1lU2NhbGU6IDEsXG4gICAgICAgICAgICByZW5kZXI6IHtcbiAgICAgICAgICAgICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDEsXG4gICAgICAgICAgICAgICAgc3Ryb2tlU3R5bGU6IG51bGwsXG4gICAgICAgICAgICAgICAgZmlsbFN0eWxlOiBudWxsLFxuICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogbnVsbCxcbiAgICAgICAgICAgICAgICBzcHJpdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgeFNjYWxlOiAxLFxuICAgICAgICAgICAgICAgICAgICB5U2NhbGU6IDEsXG4gICAgICAgICAgICAgICAgICAgIHhPZmZzZXQ6IDAsXG4gICAgICAgICAgICAgICAgICAgIHlPZmZzZXQ6IDBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXZlbnRzOiBudWxsLFxuICAgICAgICAgICAgYm91bmRzOiBudWxsLFxuICAgICAgICAgICAgY2hhbWZlcjogbnVsbCxcbiAgICAgICAgICAgIGNpcmNsZVJhZGl1czogMCxcbiAgICAgICAgICAgIHBvc2l0aW9uUHJldjogbnVsbCxcbiAgICAgICAgICAgIGFuZ2xlUHJldjogMCxcbiAgICAgICAgICAgIHBhcmVudDogbnVsbCxcbiAgICAgICAgICAgIGF4ZXM6IG51bGwsXG4gICAgICAgICAgICBhcmVhOiAwLFxuICAgICAgICAgICAgbWFzczogMCxcbiAgICAgICAgICAgIGluZXJ0aWE6IDAsXG4gICAgICAgICAgICBkZWx0YVRpbWU6IDEwMDAgLyA2MCxcbiAgICAgICAgICAgIF9vcmlnaW5hbDogbnVsbFxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBib2R5ID0gQ29tbW9uLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAgICAgX2luaXRQcm9wZXJ0aWVzKGJvZHksIG9wdGlvbnMpO1xuXG4gICAgICAgIHJldHVybiBib2R5O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuZXh0IHVuaXF1ZSBncm91cCBpbmRleCBmb3Igd2hpY2ggYm9kaWVzIHdpbGwgY29sbGlkZS5cbiAgICAgKiBJZiBgaXNOb25Db2xsaWRpbmdgIGlzIGB0cnVlYCwgcmV0dXJucyB0aGUgbmV4dCB1bmlxdWUgZ3JvdXAgaW5kZXggZm9yIHdoaWNoIGJvZGllcyB3aWxsIF9ub3RfIGNvbGxpZGUuXG4gICAgICogU2VlIGBib2R5LmNvbGxpc2lvbkZpbHRlcmAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICogQG1ldGhvZCBuZXh0R3JvdXBcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IFtpc05vbkNvbGxpZGluZz1mYWxzZV1cbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFVuaXF1ZSBncm91cCBpbmRleFxuICAgICAqL1xuICAgIEJvZHkubmV4dEdyb3VwID0gZnVuY3Rpb24oaXNOb25Db2xsaWRpbmcpIHtcbiAgICAgICAgaWYgKGlzTm9uQ29sbGlkaW5nKVxuICAgICAgICAgICAgcmV0dXJuIEJvZHkuX25leHROb25Db2xsaWRpbmdHcm91cElkLS07XG5cbiAgICAgICAgcmV0dXJuIEJvZHkuX25leHRDb2xsaWRpbmdHcm91cElkKys7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG5leHQgdW5pcXVlIGNhdGVnb3J5IGJpdGZpZWxkIChzdGFydGluZyBhZnRlciB0aGUgaW5pdGlhbCBkZWZhdWx0IGNhdGVnb3J5IGAweDAwMDFgKS5cbiAgICAgKiBUaGVyZSBhcmUgMzIgYXZhaWxhYmxlLiBTZWUgYGJvZHkuY29sbGlzaW9uRmlsdGVyYCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKiBAbWV0aG9kIG5leHRDYXRlZ29yeVxuICAgICAqIEByZXR1cm4ge051bWJlcn0gVW5pcXVlIGNhdGVnb3J5IGJpdGZpZWxkXG4gICAgICovXG4gICAgQm9keS5uZXh0Q2F0ZWdvcnkgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgQm9keS5fbmV4dENhdGVnb3J5ID0gQm9keS5fbmV4dENhdGVnb3J5IDw8IDE7XG4gICAgICAgIHJldHVybiBCb2R5Ll9uZXh0Q2F0ZWdvcnk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpc2VzIGJvZHkgcHJvcGVydGllcy5cbiAgICAgKiBAbWV0aG9kIF9pbml0UHJvcGVydGllc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHt9IFtvcHRpb25zXVxuICAgICAqL1xuICAgIHZhciBfaW5pdFByb3BlcnRpZXMgPSBmdW5jdGlvbihib2R5LCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIC8vIGluaXQgcmVxdWlyZWQgcHJvcGVydGllcyAob3JkZXIgaXMgaW1wb3J0YW50KVxuICAgICAgICBCb2R5LnNldChib2R5LCB7XG4gICAgICAgICAgICBib3VuZHM6IGJvZHkuYm91bmRzIHx8IEJvdW5kcy5jcmVhdGUoYm9keS52ZXJ0aWNlcyksXG4gICAgICAgICAgICBwb3NpdGlvblByZXY6IGJvZHkucG9zaXRpb25QcmV2IHx8IFZlY3Rvci5jbG9uZShib2R5LnBvc2l0aW9uKSxcbiAgICAgICAgICAgIGFuZ2xlUHJldjogYm9keS5hbmdsZVByZXYgfHwgYm9keS5hbmdsZSxcbiAgICAgICAgICAgIHZlcnRpY2VzOiBib2R5LnZlcnRpY2VzLFxuICAgICAgICAgICAgcGFydHM6IGJvZHkucGFydHMgfHwgW2JvZHldLFxuICAgICAgICAgICAgaXNTdGF0aWM6IGJvZHkuaXNTdGF0aWMsXG4gICAgICAgICAgICBpc1NsZWVwaW5nOiBib2R5LmlzU2xlZXBpbmcsXG4gICAgICAgICAgICBwYXJlbnQ6IGJvZHkucGFyZW50IHx8IGJvZHlcbiAgICAgICAgfSk7XG5cbiAgICAgICAgVmVydGljZXMucm90YXRlKGJvZHkudmVydGljZXMsIGJvZHkuYW5nbGUsIGJvZHkucG9zaXRpb24pO1xuICAgICAgICBBeGVzLnJvdGF0ZShib2R5LmF4ZXMsIGJvZHkuYW5nbGUpO1xuICAgICAgICBCb3VuZHMudXBkYXRlKGJvZHkuYm91bmRzLCBib2R5LnZlcnRpY2VzLCBib2R5LnZlbG9jaXR5KTtcblxuICAgICAgICAvLyBhbGxvdyBvcHRpb25zIHRvIG92ZXJyaWRlIHRoZSBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZWQgcHJvcGVydGllc1xuICAgICAgICBCb2R5LnNldChib2R5LCB7XG4gICAgICAgICAgICBheGVzOiBvcHRpb25zLmF4ZXMgfHwgYm9keS5heGVzLFxuICAgICAgICAgICAgYXJlYTogb3B0aW9ucy5hcmVhIHx8IGJvZHkuYXJlYSxcbiAgICAgICAgICAgIG1hc3M6IG9wdGlvbnMubWFzcyB8fCBib2R5Lm1hc3MsXG4gICAgICAgICAgICBpbmVydGlhOiBvcHRpb25zLmluZXJ0aWEgfHwgYm9keS5pbmVydGlhXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHJlbmRlciBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBkZWZhdWx0RmlsbFN0eWxlID0gKGJvZHkuaXNTdGF0aWMgPyAnIzE0MTUxZicgOiBDb21tb24uY2hvb3NlKFsnI2YxOTY0OCcsICcjZjVkMjU5JywgJyNmNTVhM2MnLCAnIzA2M2U3YicsICcjZWNlY2QxJ10pKSxcbiAgICAgICAgICAgIGRlZmF1bHRTdHJva2VTdHlsZSA9IGJvZHkuaXNTdGF0aWMgPyAnIzU1NScgOiAnI2NjYycsXG4gICAgICAgICAgICBkZWZhdWx0TGluZVdpZHRoID0gYm9keS5pc1N0YXRpYyAmJiBib2R5LnJlbmRlci5maWxsU3R5bGUgPT09IG51bGwgPyAxIDogMDtcbiAgICAgICAgYm9keS5yZW5kZXIuZmlsbFN0eWxlID0gYm9keS5yZW5kZXIuZmlsbFN0eWxlIHx8IGRlZmF1bHRGaWxsU3R5bGU7XG4gICAgICAgIGJvZHkucmVuZGVyLnN0cm9rZVN0eWxlID0gYm9keS5yZW5kZXIuc3Ryb2tlU3R5bGUgfHwgZGVmYXVsdFN0cm9rZVN0eWxlO1xuICAgICAgICBib2R5LnJlbmRlci5saW5lV2lkdGggPSBib2R5LnJlbmRlci5saW5lV2lkdGggfHwgZGVmYXVsdExpbmVXaWR0aDtcbiAgICAgICAgYm9keS5yZW5kZXIuc3ByaXRlLnhPZmZzZXQgKz0gLShib2R5LmJvdW5kcy5taW4ueCAtIGJvZHkucG9zaXRpb24ueCkgLyAoYm9keS5ib3VuZHMubWF4LnggLSBib2R5LmJvdW5kcy5taW4ueCk7XG4gICAgICAgIGJvZHkucmVuZGVyLnNwcml0ZS55T2Zmc2V0ICs9IC0oYm9keS5ib3VuZHMubWluLnkgLSBib2R5LnBvc2l0aW9uLnkpIC8gKGJvZHkuYm91bmRzLm1heC55IC0gYm9keS5ib3VuZHMubWluLnkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIHByb3BlcnR5IGFuZCBhIHZhbHVlIChvciBtYXAgb2YpLCBzZXRzIHRoZSBwcm9wZXJ0eShzKSBvbiB0aGUgYm9keSwgdXNpbmcgdGhlIGFwcHJvcHJpYXRlIHNldHRlciBmdW5jdGlvbnMgaWYgdGhleSBleGlzdC5cbiAgICAgKiBQcmVmZXIgdG8gdXNlIHRoZSBhY3R1YWwgc2V0dGVyIGZ1bmN0aW9ucyBpbiBwZXJmb3JtYW5jZSBjcml0aWNhbCBzaXR1YXRpb25zLlxuICAgICAqIEBtZXRob2Qgc2V0XG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHt9IHNldHRpbmdzIEEgcHJvcGVydHkgbmFtZSAob3IgbWFwIG9mIHByb3BlcnRpZXMgYW5kIHZhbHVlcykgdG8gc2V0IG9uIHRoZSBib2R5LlxuICAgICAqIEBwYXJhbSB7fSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0IGlmIGBzZXR0aW5nc2AgaXMgYSBzaW5nbGUgcHJvcGVydHkgbmFtZS5cbiAgICAgKi9cbiAgICBCb2R5LnNldCA9IGZ1bmN0aW9uKGJvZHksIHNldHRpbmdzLCB2YWx1ZSkge1xuICAgICAgICB2YXIgcHJvcGVydHk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBzZXR0aW5ncyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHByb3BlcnR5ID0gc2V0dGluZ3M7XG4gICAgICAgICAgICBzZXR0aW5ncyA9IHt9O1xuICAgICAgICAgICAgc2V0dGluZ3NbcHJvcGVydHldID0gdmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHByb3BlcnR5IGluIHNldHRpbmdzKSB7XG4gICAgICAgICAgICBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzZXR0aW5ncywgcHJvcGVydHkpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICB2YWx1ZSA9IHNldHRpbmdzW3Byb3BlcnR5XTtcbiAgICAgICAgICAgIHN3aXRjaCAocHJvcGVydHkpIHtcblxuICAgICAgICAgICAgY2FzZSAnaXNTdGF0aWMnOlxuICAgICAgICAgICAgICAgIEJvZHkuc2V0U3RhdGljKGJvZHksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2lzU2xlZXBpbmcnOlxuICAgICAgICAgICAgICAgIFNsZWVwaW5nLnNldChib2R5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtYXNzJzpcbiAgICAgICAgICAgICAgICBCb2R5LnNldE1hc3MoYm9keSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGVuc2l0eSc6XG4gICAgICAgICAgICAgICAgQm9keS5zZXREZW5zaXR5KGJvZHksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2luZXJ0aWEnOlxuICAgICAgICAgICAgICAgIEJvZHkuc2V0SW5lcnRpYShib2R5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd2ZXJ0aWNlcyc6XG4gICAgICAgICAgICAgICAgQm9keS5zZXRWZXJ0aWNlcyhib2R5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdwb3NpdGlvbic6XG4gICAgICAgICAgICAgICAgQm9keS5zZXRQb3NpdGlvbihib2R5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdhbmdsZSc6XG4gICAgICAgICAgICAgICAgQm9keS5zZXRBbmdsZShib2R5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd2ZWxvY2l0eSc6XG4gICAgICAgICAgICAgICAgQm9keS5zZXRWZWxvY2l0eShib2R5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdhbmd1bGFyVmVsb2NpdHknOlxuICAgICAgICAgICAgICAgIEJvZHkuc2V0QW5ndWxhclZlbG9jaXR5KGJvZHksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NwZWVkJzpcbiAgICAgICAgICAgICAgICBCb2R5LnNldFNwZWVkKGJvZHksIHZhbHVlKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2FuZ3VsYXJTcGVlZCc6XG4gICAgICAgICAgICAgICAgQm9keS5zZXRBbmd1bGFyU3BlZWQoYm9keSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncGFydHMnOlxuICAgICAgICAgICAgICAgIEJvZHkuc2V0UGFydHMoYm9keSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY2VudHJlJzpcbiAgICAgICAgICAgICAgICBCb2R5LnNldENlbnRyZShib2R5LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGJvZHlbcHJvcGVydHldID0gdmFsdWU7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBib2R5IGFzIHN0YXRpYywgaW5jbHVkaW5nIGlzU3RhdGljIGZsYWcgYW5kIHNldHRpbmcgbWFzcyBhbmQgaW5lcnRpYSB0byBJbmZpbml0eS5cbiAgICAgKiBAbWV0aG9kIHNldFN0YXRpY1xuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7Ym9vbH0gaXNTdGF0aWNcbiAgICAgKi9cbiAgICBCb2R5LnNldFN0YXRpYyA9IGZ1bmN0aW9uKGJvZHksIGlzU3RhdGljKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhcnQgPSBib2R5LnBhcnRzW2ldO1xuICAgICAgICAgICAgcGFydC5pc1N0YXRpYyA9IGlzU3RhdGljO1xuXG4gICAgICAgICAgICBpZiAoaXNTdGF0aWMpIHtcbiAgICAgICAgICAgICAgICBwYXJ0Ll9vcmlnaW5hbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdGl0dXRpb246IHBhcnQucmVzdGl0dXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGZyaWN0aW9uOiBwYXJ0LmZyaWN0aW9uLFxuICAgICAgICAgICAgICAgICAgICBtYXNzOiBwYXJ0Lm1hc3MsXG4gICAgICAgICAgICAgICAgICAgIGluZXJ0aWE6IHBhcnQuaW5lcnRpYSxcbiAgICAgICAgICAgICAgICAgICAgZGVuc2l0eTogcGFydC5kZW5zaXR5LFxuICAgICAgICAgICAgICAgICAgICBpbnZlcnNlTWFzczogcGFydC5pbnZlcnNlTWFzcyxcbiAgICAgICAgICAgICAgICAgICAgaW52ZXJzZUluZXJ0aWE6IHBhcnQuaW52ZXJzZUluZXJ0aWFcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgcGFydC5yZXN0aXR1dGlvbiA9IDA7XG4gICAgICAgICAgICAgICAgcGFydC5mcmljdGlvbiA9IDE7XG4gICAgICAgICAgICAgICAgcGFydC5tYXNzID0gcGFydC5pbmVydGlhID0gcGFydC5kZW5zaXR5ID0gSW5maW5pdHk7XG4gICAgICAgICAgICAgICAgcGFydC5pbnZlcnNlTWFzcyA9IHBhcnQuaW52ZXJzZUluZXJ0aWEgPSAwO1xuXG4gICAgICAgICAgICAgICAgcGFydC5wb3NpdGlvblByZXYueCA9IHBhcnQucG9zaXRpb24ueDtcbiAgICAgICAgICAgICAgICBwYXJ0LnBvc2l0aW9uUHJldi55ID0gcGFydC5wb3NpdGlvbi55O1xuICAgICAgICAgICAgICAgIHBhcnQuYW5nbGVQcmV2ID0gcGFydC5hbmdsZTtcbiAgICAgICAgICAgICAgICBwYXJ0LmFuZ3VsYXJWZWxvY2l0eSA9IDA7XG4gICAgICAgICAgICAgICAgcGFydC5zcGVlZCA9IDA7XG4gICAgICAgICAgICAgICAgcGFydC5hbmd1bGFyU3BlZWQgPSAwO1xuICAgICAgICAgICAgICAgIHBhcnQubW90aW9uID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGFydC5fb3JpZ2luYWwpIHtcbiAgICAgICAgICAgICAgICBwYXJ0LnJlc3RpdHV0aW9uID0gcGFydC5fb3JpZ2luYWwucmVzdGl0dXRpb247XG4gICAgICAgICAgICAgICAgcGFydC5mcmljdGlvbiA9IHBhcnQuX29yaWdpbmFsLmZyaWN0aW9uO1xuICAgICAgICAgICAgICAgIHBhcnQubWFzcyA9IHBhcnQuX29yaWdpbmFsLm1hc3M7XG4gICAgICAgICAgICAgICAgcGFydC5pbmVydGlhID0gcGFydC5fb3JpZ2luYWwuaW5lcnRpYTtcbiAgICAgICAgICAgICAgICBwYXJ0LmRlbnNpdHkgPSBwYXJ0Ll9vcmlnaW5hbC5kZW5zaXR5O1xuICAgICAgICAgICAgICAgIHBhcnQuaW52ZXJzZU1hc3MgPSBwYXJ0Ll9vcmlnaW5hbC5pbnZlcnNlTWFzcztcbiAgICAgICAgICAgICAgICBwYXJ0LmludmVyc2VJbmVydGlhID0gcGFydC5fb3JpZ2luYWwuaW52ZXJzZUluZXJ0aWE7XG5cbiAgICAgICAgICAgICAgICBwYXJ0Ll9vcmlnaW5hbCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFzcyBvZiB0aGUgYm9keS4gSW52ZXJzZSBtYXNzLCBkZW5zaXR5IGFuZCBpbmVydGlhIGFyZSBhdXRvbWF0aWNhbGx5IHVwZGF0ZWQgdG8gcmVmbGVjdCB0aGUgY2hhbmdlLlxuICAgICAqIEBtZXRob2Qgc2V0TWFzc1xuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXNzXG4gICAgICovXG4gICAgQm9keS5zZXRNYXNzID0gZnVuY3Rpb24oYm9keSwgbWFzcykge1xuICAgICAgICB2YXIgbW9tZW50ID0gYm9keS5pbmVydGlhIC8gKGJvZHkubWFzcyAvIDYpO1xuICAgICAgICBib2R5LmluZXJ0aWEgPSBtb21lbnQgKiAobWFzcyAvIDYpO1xuICAgICAgICBib2R5LmludmVyc2VJbmVydGlhID0gMSAvIGJvZHkuaW5lcnRpYTtcblxuICAgICAgICBib2R5Lm1hc3MgPSBtYXNzO1xuICAgICAgICBib2R5LmludmVyc2VNYXNzID0gMSAvIGJvZHkubWFzcztcbiAgICAgICAgYm9keS5kZW5zaXR5ID0gYm9keS5tYXNzIC8gYm9keS5hcmVhO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBkZW5zaXR5IG9mIHRoZSBib2R5LiBNYXNzIGFuZCBpbmVydGlhIGFyZSBhdXRvbWF0aWNhbGx5IHVwZGF0ZWQgdG8gcmVmbGVjdCB0aGUgY2hhbmdlLlxuICAgICAqIEBtZXRob2Qgc2V0RGVuc2l0eVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZW5zaXR5XG4gICAgICovXG4gICAgQm9keS5zZXREZW5zaXR5ID0gZnVuY3Rpb24oYm9keSwgZGVuc2l0eSkge1xuICAgICAgICBCb2R5LnNldE1hc3MoYm9keSwgZGVuc2l0eSAqIGJvZHkuYXJlYSk7XG4gICAgICAgIGJvZHkuZGVuc2l0eSA9IGRlbnNpdHk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1vbWVudCBvZiBpbmVydGlhIG9mIHRoZSBib2R5LiBUaGlzIGlzIHRoZSBzZWNvbmQgbW9tZW50IG9mIGFyZWEgaW4gdHdvIGRpbWVuc2lvbnMuXG4gICAgICogSW52ZXJzZSBpbmVydGlhIGlzIGF1dG9tYXRpY2FsbHkgdXBkYXRlZCB0byByZWZsZWN0IHRoZSBjaGFuZ2UuIE1hc3MgaXMgbm90IGNoYW5nZWQuXG4gICAgICogQG1ldGhvZCBzZXRJbmVydGlhXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZXJ0aWFcbiAgICAgKi9cbiAgICBCb2R5LnNldEluZXJ0aWEgPSBmdW5jdGlvbihib2R5LCBpbmVydGlhKSB7XG4gICAgICAgIGJvZHkuaW5lcnRpYSA9IGluZXJ0aWE7XG4gICAgICAgIGJvZHkuaW52ZXJzZUluZXJ0aWEgPSAxIC8gYm9keS5pbmVydGlhO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBib2R5J3MgdmVydGljZXMgYW5kIHVwZGF0ZXMgYm9keSBwcm9wZXJ0aWVzIGFjY29yZGluZ2x5LCBpbmNsdWRpbmcgaW5lcnRpYSwgYXJlYSBhbmQgbWFzcyAod2l0aCByZXNwZWN0IHRvIGBib2R5LmRlbnNpdHlgKS5cbiAgICAgKiBWZXJ0aWNlcyB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgdHJhbnNmb3JtZWQgdG8gYmUgb3JpZW50YXRlZCBhcm91bmQgdGhlaXIgY2VudHJlIG9mIG1hc3MgYXMgdGhlIG9yaWdpbi5cbiAgICAgKiBUaGV5IGFyZSB0aGVuIGF1dG9tYXRpY2FsbHkgdHJhbnNsYXRlZCB0byB3b3JsZCBzcGFjZSBiYXNlZCBvbiBgYm9keS5wb3NpdGlvbmAuXG4gICAgICpcbiAgICAgKiBUaGUgYHZlcnRpY2VzYCBhcmd1bWVudCBzaG91bGQgYmUgcGFzc2VkIGFzIGFuIGFycmF5IG9mIGBNYXR0ZXIuVmVjdG9yYCBwb2ludHMgKG9yIGEgYE1hdHRlci5WZXJ0aWNlc2AgYXJyYXkpLlxuICAgICAqIFZlcnRpY2VzIG11c3QgZm9ybSBhIGNvbnZleCBodWxsLiBDb25jYXZlIHZlcnRpY2VzIG11c3QgYmUgZGVjb21wb3NlZCBpbnRvIGNvbnZleCBwYXJ0cy5cbiAgICAgKiBcbiAgICAgKiBAbWV0aG9kIHNldFZlcnRpY2VzXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHt2ZWN0b3JbXX0gdmVydGljZXNcbiAgICAgKi9cbiAgICBCb2R5LnNldFZlcnRpY2VzID0gZnVuY3Rpb24oYm9keSwgdmVydGljZXMpIHtcbiAgICAgICAgLy8gY2hhbmdlIHZlcnRpY2VzXG4gICAgICAgIGlmICh2ZXJ0aWNlc1swXS5ib2R5ID09PSBib2R5KSB7XG4gICAgICAgICAgICBib2R5LnZlcnRpY2VzID0gdmVydGljZXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBib2R5LnZlcnRpY2VzID0gVmVydGljZXMuY3JlYXRlKHZlcnRpY2VzLCBib2R5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIGJvZHkuYXhlcyA9IEF4ZXMuZnJvbVZlcnRpY2VzKGJvZHkudmVydGljZXMpO1xuICAgICAgICBib2R5LmFyZWEgPSBWZXJ0aWNlcy5hcmVhKGJvZHkudmVydGljZXMpO1xuICAgICAgICBCb2R5LnNldE1hc3MoYm9keSwgYm9keS5kZW5zaXR5ICogYm9keS5hcmVhKTtcblxuICAgICAgICAvLyBvcmllbnQgdmVydGljZXMgYXJvdW5kIHRoZSBjZW50cmUgb2YgbWFzcyBhdCBvcmlnaW4gKDAsIDApXG4gICAgICAgIHZhciBjZW50cmUgPSBWZXJ0aWNlcy5jZW50cmUoYm9keS52ZXJ0aWNlcyk7XG4gICAgICAgIFZlcnRpY2VzLnRyYW5zbGF0ZShib2R5LnZlcnRpY2VzLCBjZW50cmUsIC0xKTtcblxuICAgICAgICAvLyB1cGRhdGUgaW5lcnRpYSB3aGlsZSB2ZXJ0aWNlcyBhcmUgYXQgb3JpZ2luICgwLCAwKVxuICAgICAgICBCb2R5LnNldEluZXJ0aWEoYm9keSwgQm9keS5faW5lcnRpYVNjYWxlICogVmVydGljZXMuaW5lcnRpYShib2R5LnZlcnRpY2VzLCBib2R5Lm1hc3MpKTtcblxuICAgICAgICAvLyB1cGRhdGUgZ2VvbWV0cnlcbiAgICAgICAgVmVydGljZXMudHJhbnNsYXRlKGJvZHkudmVydGljZXMsIGJvZHkucG9zaXRpb24pO1xuICAgICAgICBCb3VuZHMudXBkYXRlKGJvZHkuYm91bmRzLCBib2R5LnZlcnRpY2VzLCBib2R5LnZlbG9jaXR5KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcGFydHMgb2YgdGhlIGBib2R5YCBhbmQgdXBkYXRlcyBtYXNzLCBpbmVydGlhIGFuZCBjZW50cm9pZC5cbiAgICAgKiBFYWNoIHBhcnQgd2lsbCBoYXZlIGl0cyBwYXJlbnQgc2V0IHRvIGBib2R5YC5cbiAgICAgKiBCeSBkZWZhdWx0IHRoZSBjb252ZXggaHVsbCB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY29tcHV0ZWQgYW5kIHNldCBvbiBgYm9keWAsIHVubGVzcyBgYXV0b0h1bGxgIGlzIHNldCB0byBgZmFsc2UuYFxuICAgICAqIE5vdGUgdGhhdCB0aGlzIG1ldGhvZCB3aWxsIGVuc3VyZSB0aGF0IHRoZSBmaXJzdCBwYXJ0IGluIGBib2R5LnBhcnRzYCB3aWxsIGFsd2F5cyBiZSB0aGUgYGJvZHlgLlxuICAgICAqIEBtZXRob2Qgc2V0UGFydHNcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gcGFydHNcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IFthdXRvSHVsbD10cnVlXVxuICAgICAqL1xuICAgIEJvZHkuc2V0UGFydHMgPSBmdW5jdGlvbihib2R5LCBwYXJ0cywgYXV0b0h1bGwpIHtcbiAgICAgICAgdmFyIGk7XG5cbiAgICAgICAgLy8gYWRkIGFsbCB0aGUgcGFydHMsIGVuc3VyaW5nIHRoYXQgdGhlIGZpcnN0IHBhcnQgaXMgYWx3YXlzIHRoZSBwYXJlbnQgYm9keVxuICAgICAgICBwYXJ0cyA9IHBhcnRzLnNsaWNlKDApO1xuICAgICAgICBib2R5LnBhcnRzLmxlbmd0aCA9IDA7XG4gICAgICAgIGJvZHkucGFydHMucHVzaChib2R5KTtcbiAgICAgICAgYm9keS5wYXJlbnQgPSBib2R5O1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgICAgIGlmIChwYXJ0ICE9PSBib2R5KSB7XG4gICAgICAgICAgICAgICAgcGFydC5wYXJlbnQgPSBib2R5O1xuICAgICAgICAgICAgICAgIGJvZHkucGFydHMucHVzaChwYXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChib2R5LnBhcnRzLmxlbmd0aCA9PT0gMSlcbiAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICBhdXRvSHVsbCA9IHR5cGVvZiBhdXRvSHVsbCAhPT0gJ3VuZGVmaW5lZCcgPyBhdXRvSHVsbCA6IHRydWU7XG5cbiAgICAgICAgLy8gZmluZCB0aGUgY29udmV4IGh1bGwgb2YgYWxsIHBhcnRzIHRvIHNldCBvbiB0aGUgcGFyZW50IGJvZHlcbiAgICAgICAgaWYgKGF1dG9IdWxsKSB7XG4gICAgICAgICAgICB2YXIgdmVydGljZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZlcnRpY2VzID0gdmVydGljZXMuY29uY2F0KHBhcnRzW2ldLnZlcnRpY2VzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgVmVydGljZXMuY2xvY2t3aXNlU29ydCh2ZXJ0aWNlcyk7XG5cbiAgICAgICAgICAgIHZhciBodWxsID0gVmVydGljZXMuaHVsbCh2ZXJ0aWNlcyksXG4gICAgICAgICAgICAgICAgaHVsbENlbnRyZSA9IFZlcnRpY2VzLmNlbnRyZShodWxsKTtcblxuICAgICAgICAgICAgQm9keS5zZXRWZXJ0aWNlcyhib2R5LCBodWxsKTtcbiAgICAgICAgICAgIFZlcnRpY2VzLnRyYW5zbGF0ZShib2R5LnZlcnRpY2VzLCBodWxsQ2VudHJlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHN1bSB0aGUgcHJvcGVydGllcyBvZiBhbGwgY29tcG91bmQgcGFydHMgb2YgdGhlIHBhcmVudCBib2R5XG4gICAgICAgIHZhciB0b3RhbCA9IEJvZHkuX3RvdGFsUHJvcGVydGllcyhib2R5KTtcblxuICAgICAgICBib2R5LmFyZWEgPSB0b3RhbC5hcmVhO1xuICAgICAgICBib2R5LnBhcmVudCA9IGJvZHk7XG4gICAgICAgIGJvZHkucG9zaXRpb24ueCA9IHRvdGFsLmNlbnRyZS54O1xuICAgICAgICBib2R5LnBvc2l0aW9uLnkgPSB0b3RhbC5jZW50cmUueTtcbiAgICAgICAgYm9keS5wb3NpdGlvblByZXYueCA9IHRvdGFsLmNlbnRyZS54O1xuICAgICAgICBib2R5LnBvc2l0aW9uUHJldi55ID0gdG90YWwuY2VudHJlLnk7XG5cbiAgICAgICAgQm9keS5zZXRNYXNzKGJvZHksIHRvdGFsLm1hc3MpO1xuICAgICAgICBCb2R5LnNldEluZXJ0aWEoYm9keSwgdG90YWwuaW5lcnRpYSk7XG4gICAgICAgIEJvZHkuc2V0UG9zaXRpb24oYm9keSwgdG90YWwuY2VudHJlKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjZW50cmUgb2YgbWFzcyBvZiB0aGUgYm9keS4gXG4gICAgICogVGhlIGBjZW50cmVgIGlzIGEgdmVjdG9yIGluIHdvcmxkLXNwYWNlIHVubGVzcyBgcmVsYXRpdmVgIGlzIHNldCwgaW4gd2hpY2ggY2FzZSBpdCBpcyBhIHRyYW5zbGF0aW9uLlxuICAgICAqIFRoZSBjZW50cmUgb2YgbWFzcyBpcyB0aGUgcG9pbnQgdGhlIGJvZHkgcm90YXRlcyBhYm91dCBhbmQgY2FuIGJlIHVzZWQgdG8gc2ltdWxhdGUgbm9uLXVuaWZvcm0gZGVuc2l0eS5cbiAgICAgKiBUaGlzIGlzIGVxdWFsIHRvIG1vdmluZyBgYm9keS5wb3NpdGlvbmAgYnV0IG5vdCB0aGUgYGJvZHkudmVydGljZXNgLlxuICAgICAqIEludmFsaWQgaWYgdGhlIGBjZW50cmVgIGZhbGxzIG91dHNpZGUgdGhlIGJvZHkncyBjb252ZXggaHVsbC5cbiAgICAgKiBAbWV0aG9kIHNldENlbnRyZVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBjZW50cmVcbiAgICAgKiBAcGFyYW0ge2Jvb2x9IHJlbGF0aXZlXG4gICAgICovXG4gICAgQm9keS5zZXRDZW50cmUgPSBmdW5jdGlvbihib2R5LCBjZW50cmUsIHJlbGF0aXZlKSB7XG4gICAgICAgIGlmICghcmVsYXRpdmUpIHtcbiAgICAgICAgICAgIGJvZHkucG9zaXRpb25QcmV2LnggPSBjZW50cmUueCAtIChib2R5LnBvc2l0aW9uLnggLSBib2R5LnBvc2l0aW9uUHJldi54KTtcbiAgICAgICAgICAgIGJvZHkucG9zaXRpb25QcmV2LnkgPSBjZW50cmUueSAtIChib2R5LnBvc2l0aW9uLnkgLSBib2R5LnBvc2l0aW9uUHJldi55KTtcbiAgICAgICAgICAgIGJvZHkucG9zaXRpb24ueCA9IGNlbnRyZS54O1xuICAgICAgICAgICAgYm9keS5wb3NpdGlvbi55ID0gY2VudHJlLnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBib2R5LnBvc2l0aW9uUHJldi54ICs9IGNlbnRyZS54O1xuICAgICAgICAgICAgYm9keS5wb3NpdGlvblByZXYueSArPSBjZW50cmUueTtcbiAgICAgICAgICAgIGJvZHkucG9zaXRpb24ueCArPSBjZW50cmUueDtcbiAgICAgICAgICAgIGJvZHkucG9zaXRpb24ueSArPSBjZW50cmUueTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwb3NpdGlvbiBvZiB0aGUgYm9keS4gQnkgZGVmYXVsdCB2ZWxvY2l0eSBpcyB1bmNoYW5nZWQuXG4gICAgICogSWYgYHVwZGF0ZVZlbG9jaXR5YCBpcyBgdHJ1ZWAgdGhlbiB2ZWxvY2l0eSBpcyBpbmZlcnJlZCBmcm9tIHRoZSBjaGFuZ2UgaW4gcG9zaXRpb24uXG4gICAgICogQG1ldGhvZCBzZXRQb3NpdGlvblxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBwb3NpdGlvblxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VwZGF0ZVZlbG9jaXR5PWZhbHNlXVxuICAgICAqL1xuICAgIEJvZHkuc2V0UG9zaXRpb24gPSBmdW5jdGlvbihib2R5LCBwb3NpdGlvbiwgdXBkYXRlVmVsb2NpdHkpIHtcbiAgICAgICAgdmFyIGRlbHRhID0gVmVjdG9yLnN1Yihwb3NpdGlvbiwgYm9keS5wb3NpdGlvbik7XG5cbiAgICAgICAgaWYgKHVwZGF0ZVZlbG9jaXR5KSB7XG4gICAgICAgICAgICBib2R5LnBvc2l0aW9uUHJldi54ID0gYm9keS5wb3NpdGlvbi54O1xuICAgICAgICAgICAgYm9keS5wb3NpdGlvblByZXYueSA9IGJvZHkucG9zaXRpb24ueTtcbiAgICAgICAgICAgIGJvZHkudmVsb2NpdHkueCA9IGRlbHRhLng7XG4gICAgICAgICAgICBib2R5LnZlbG9jaXR5LnkgPSBkZWx0YS55O1xuICAgICAgICAgICAgYm9keS5zcGVlZCA9IFZlY3Rvci5tYWduaXR1ZGUoZGVsdGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYm9keS5wb3NpdGlvblByZXYueCArPSBkZWx0YS54O1xuICAgICAgICAgICAgYm9keS5wb3NpdGlvblByZXYueSArPSBkZWx0YS55O1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2R5LnBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcGFydCA9IGJvZHkucGFydHNbaV07XG4gICAgICAgICAgICBwYXJ0LnBvc2l0aW9uLnggKz0gZGVsdGEueDtcbiAgICAgICAgICAgIHBhcnQucG9zaXRpb24ueSArPSBkZWx0YS55O1xuICAgICAgICAgICAgVmVydGljZXMudHJhbnNsYXRlKHBhcnQudmVydGljZXMsIGRlbHRhKTtcbiAgICAgICAgICAgIEJvdW5kcy51cGRhdGUocGFydC5ib3VuZHMsIHBhcnQudmVydGljZXMsIGJvZHkudmVsb2NpdHkpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGFuZ2xlIG9mIHRoZSBib2R5LiBCeSBkZWZhdWx0IGFuZ3VsYXIgdmVsb2NpdHkgaXMgdW5jaGFuZ2VkLlxuICAgICAqIElmIGB1cGRhdGVWZWxvY2l0eWAgaXMgYHRydWVgIHRoZW4gYW5ndWxhciB2ZWxvY2l0eSBpcyBpbmZlcnJlZCBmcm9tIHRoZSBjaGFuZ2UgaW4gYW5nbGUuXG4gICAgICogQG1ldGhvZCBzZXRBbmdsZVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBhbmdsZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VwZGF0ZVZlbG9jaXR5PWZhbHNlXVxuICAgICAqL1xuICAgIEJvZHkuc2V0QW5nbGUgPSBmdW5jdGlvbihib2R5LCBhbmdsZSwgdXBkYXRlVmVsb2NpdHkpIHtcbiAgICAgICAgdmFyIGRlbHRhID0gYW5nbGUgLSBib2R5LmFuZ2xlO1xuICAgICAgICBcbiAgICAgICAgaWYgKHVwZGF0ZVZlbG9jaXR5KSB7XG4gICAgICAgICAgICBib2R5LmFuZ2xlUHJldiA9IGJvZHkuYW5nbGU7XG4gICAgICAgICAgICBib2R5LmFuZ3VsYXJWZWxvY2l0eSA9IGRlbHRhO1xuICAgICAgICAgICAgYm9keS5hbmd1bGFyU3BlZWQgPSBNYXRoLmFicyhkZWx0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBib2R5LmFuZ2xlUHJldiArPSBkZWx0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhcnQgPSBib2R5LnBhcnRzW2ldO1xuICAgICAgICAgICAgcGFydC5hbmdsZSArPSBkZWx0YTtcbiAgICAgICAgICAgIFZlcnRpY2VzLnJvdGF0ZShwYXJ0LnZlcnRpY2VzLCBkZWx0YSwgYm9keS5wb3NpdGlvbik7XG4gICAgICAgICAgICBBeGVzLnJvdGF0ZShwYXJ0LmF4ZXMsIGRlbHRhKTtcbiAgICAgICAgICAgIEJvdW5kcy51cGRhdGUocGFydC5ib3VuZHMsIHBhcnQudmVydGljZXMsIGJvZHkudmVsb2NpdHkpO1xuICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgVmVjdG9yLnJvdGF0ZUFib3V0KHBhcnQucG9zaXRpb24sIGRlbHRhLCBib2R5LnBvc2l0aW9uLCBwYXJ0LnBvc2l0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjdXJyZW50IGxpbmVhciB2ZWxvY2l0eSBvZiB0aGUgYm9keS4gIFxuICAgICAqIEFmZmVjdHMgYm9keSBzcGVlZC5cbiAgICAgKiBAbWV0aG9kIHNldFZlbG9jaXR5XG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHZlbG9jaXR5XG4gICAgICovXG4gICAgQm9keS5zZXRWZWxvY2l0eSA9IGZ1bmN0aW9uKGJvZHksIHZlbG9jaXR5KSB7XG4gICAgICAgIHZhciB0aW1lU2NhbGUgPSBib2R5LmRlbHRhVGltZSAvIEJvZHkuX2Jhc2VEZWx0YTtcbiAgICAgICAgYm9keS5wb3NpdGlvblByZXYueCA9IGJvZHkucG9zaXRpb24ueCAtIHZlbG9jaXR5LnggKiB0aW1lU2NhbGU7XG4gICAgICAgIGJvZHkucG9zaXRpb25QcmV2LnkgPSBib2R5LnBvc2l0aW9uLnkgLSB2ZWxvY2l0eS55ICogdGltZVNjYWxlO1xuICAgICAgICBib2R5LnZlbG9jaXR5LnggPSAoYm9keS5wb3NpdGlvbi54IC0gYm9keS5wb3NpdGlvblByZXYueCkgLyB0aW1lU2NhbGU7XG4gICAgICAgIGJvZHkudmVsb2NpdHkueSA9IChib2R5LnBvc2l0aW9uLnkgLSBib2R5LnBvc2l0aW9uUHJldi55KSAvIHRpbWVTY2FsZTtcbiAgICAgICAgYm9keS5zcGVlZCA9IFZlY3Rvci5tYWduaXR1ZGUoYm9keS52ZWxvY2l0eSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgbGluZWFyIHZlbG9jaXR5IG9mIHRoZSBib2R5LlxuICAgICAqIEBtZXRob2QgZ2V0VmVsb2NpdHlcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcmV0dXJuIHt2ZWN0b3J9IHZlbG9jaXR5XG4gICAgICovXG4gICAgQm9keS5nZXRWZWxvY2l0eSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAgICAgdmFyIHRpbWVTY2FsZSA9IEJvZHkuX2Jhc2VEZWx0YSAvIGJvZHkuZGVsdGFUaW1lO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiAoYm9keS5wb3NpdGlvbi54IC0gYm9keS5wb3NpdGlvblByZXYueCkgKiB0aW1lU2NhbGUsXG4gICAgICAgICAgICB5OiAoYm9keS5wb3NpdGlvbi55IC0gYm9keS5wb3NpdGlvblByZXYueSkgKiB0aW1lU2NhbGVcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgY3VycmVudCBsaW5lYXIgc3BlZWQgb2YgdGhlIGJvZHkuICBcbiAgICAgKiBFcXVpdmFsZW50IHRvIHRoZSBtYWduaXR1ZGUgb2YgaXRzIHZlbG9jaXR5LlxuICAgICAqIEBtZXRob2QgZ2V0U3BlZWRcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IHNwZWVkXG4gICAgICovXG4gICAgQm9keS5nZXRTcGVlZCA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5tYWduaXR1ZGUoQm9keS5nZXRWZWxvY2l0eShib2R5KSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGN1cnJlbnQgbGluZWFyIHNwZWVkIG9mIHRoZSBib2R5LiAgXG4gICAgICogRGlyZWN0aW9uIGlzIG1haW50YWluZWQuIEFmZmVjdHMgYm9keSB2ZWxvY2l0eS5cbiAgICAgKiBAbWV0aG9kIHNldFNwZWVkXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNwZWVkXG4gICAgICovXG4gICAgQm9keS5zZXRTcGVlZCA9IGZ1bmN0aW9uKGJvZHksIHNwZWVkKSB7XG4gICAgICAgIEJvZHkuc2V0VmVsb2NpdHkoYm9keSwgVmVjdG9yLm11bHQoVmVjdG9yLm5vcm1hbGlzZShCb2R5LmdldFZlbG9jaXR5KGJvZHkpKSwgc3BlZWQpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY3VycmVudCByb3RhdGlvbmFsIHZlbG9jaXR5IG9mIHRoZSBib2R5LiAgXG4gICAgICogQWZmZWN0cyBib2R5IGFuZ3VsYXIgc3BlZWQuXG4gICAgICogQG1ldGhvZCBzZXRBbmd1bGFyVmVsb2NpdHlcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmVsb2NpdHlcbiAgICAgKi9cbiAgICBCb2R5LnNldEFuZ3VsYXJWZWxvY2l0eSA9IGZ1bmN0aW9uKGJvZHksIHZlbG9jaXR5KSB7XG4gICAgICAgIHZhciB0aW1lU2NhbGUgPSBib2R5LmRlbHRhVGltZSAvIEJvZHkuX2Jhc2VEZWx0YTtcbiAgICAgICAgYm9keS5hbmdsZVByZXYgPSBib2R5LmFuZ2xlIC0gdmVsb2NpdHkgKiB0aW1lU2NhbGU7XG4gICAgICAgIGJvZHkuYW5ndWxhclZlbG9jaXR5ID0gKGJvZHkuYW5nbGUgLSBib2R5LmFuZ2xlUHJldikgLyB0aW1lU2NhbGU7XG4gICAgICAgIGJvZHkuYW5ndWxhclNwZWVkID0gTWF0aC5hYnMoYm9keS5hbmd1bGFyVmVsb2NpdHkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBjdXJyZW50IHJvdGF0aW9uYWwgdmVsb2NpdHkgb2YgdGhlIGJvZHkuXG4gICAgICogQG1ldGhvZCBnZXRBbmd1bGFyVmVsb2NpdHlcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IGFuZ3VsYXIgdmVsb2NpdHlcbiAgICAgKi9cbiAgICBCb2R5LmdldEFuZ3VsYXJWZWxvY2l0eSA9IGZ1bmN0aW9uKGJvZHkpIHtcbiAgICAgICAgcmV0dXJuIChib2R5LmFuZ2xlIC0gYm9keS5hbmdsZVByZXYpICogQm9keS5fYmFzZURlbHRhIC8gYm9keS5kZWx0YVRpbWU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGN1cnJlbnQgcm90YXRpb25hbCBzcGVlZCBvZiB0aGUgYm9keS4gIFxuICAgICAqIEVxdWl2YWxlbnQgdG8gdGhlIG1hZ25pdHVkZSBvZiBpdHMgYW5ndWxhciB2ZWxvY2l0eS5cbiAgICAgKiBAbWV0aG9kIGdldEFuZ3VsYXJTcGVlZFxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEByZXR1cm4ge251bWJlcn0gYW5ndWxhciBzcGVlZFxuICAgICAqL1xuICAgIEJvZHkuZ2V0QW5ndWxhclNwZWVkID0gZnVuY3Rpb24oYm9keSkge1xuICAgICAgICByZXR1cm4gTWF0aC5hYnMoQm9keS5nZXRBbmd1bGFyVmVsb2NpdHkoYm9keSkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBjdXJyZW50IHJvdGF0aW9uYWwgc3BlZWQgb2YgdGhlIGJvZHkuICBcbiAgICAgKiBEaXJlY3Rpb24gaXMgbWFpbnRhaW5lZC4gQWZmZWN0cyBib2R5IGFuZ3VsYXIgdmVsb2NpdHkuXG4gICAgICogQG1ldGhvZCBzZXRBbmd1bGFyU3BlZWRcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3BlZWRcbiAgICAgKi9cbiAgICBCb2R5LnNldEFuZ3VsYXJTcGVlZCA9IGZ1bmN0aW9uKGJvZHksIHNwZWVkKSB7XG4gICAgICAgIEJvZHkuc2V0QW5ndWxhclZlbG9jaXR5KGJvZHksIENvbW1vbi5zaWduKEJvZHkuZ2V0QW5ndWxhclZlbG9jaXR5KGJvZHkpKSAqIHNwZWVkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTW92ZXMgYSBib2R5IGJ5IGEgZ2l2ZW4gdmVjdG9yIHJlbGF0aXZlIHRvIGl0cyBjdXJyZW50IHBvc2l0aW9uLiBCeSBkZWZhdWx0IHZlbG9jaXR5IGlzIHVuY2hhbmdlZC5cbiAgICAgKiBJZiBgdXBkYXRlVmVsb2NpdHlgIGlzIGB0cnVlYCB0aGVuIHZlbG9jaXR5IGlzIGluZmVycmVkIGZyb20gdGhlIGNoYW5nZSBpbiBwb3NpdGlvbi5cbiAgICAgKiBAbWV0aG9kIHRyYW5zbGF0ZVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSB0cmFuc2xhdGlvblxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VwZGF0ZVZlbG9jaXR5PWZhbHNlXVxuICAgICAqL1xuICAgIEJvZHkudHJhbnNsYXRlID0gZnVuY3Rpb24oYm9keSwgdHJhbnNsYXRpb24sIHVwZGF0ZVZlbG9jaXR5KSB7XG4gICAgICAgIEJvZHkuc2V0UG9zaXRpb24oYm9keSwgVmVjdG9yLmFkZChib2R5LnBvc2l0aW9uLCB0cmFuc2xhdGlvbiksIHVwZGF0ZVZlbG9jaXR5KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUm90YXRlcyBhIGJvZHkgYnkgYSBnaXZlbiBhbmdsZSByZWxhdGl2ZSB0byBpdHMgY3VycmVudCBhbmdsZS4gQnkgZGVmYXVsdCBhbmd1bGFyIHZlbG9jaXR5IGlzIHVuY2hhbmdlZC5cbiAgICAgKiBJZiBgdXBkYXRlVmVsb2NpdHlgIGlzIGB0cnVlYCB0aGVuIGFuZ3VsYXIgdmVsb2NpdHkgaXMgaW5mZXJyZWQgZnJvbSB0aGUgY2hhbmdlIGluIGFuZ2xlLlxuICAgICAqIEBtZXRob2Qgcm90YXRlXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJvdGF0aW9uXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IFtwb2ludF1cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFt1cGRhdGVWZWxvY2l0eT1mYWxzZV1cbiAgICAgKi9cbiAgICBCb2R5LnJvdGF0ZSA9IGZ1bmN0aW9uKGJvZHksIHJvdGF0aW9uLCBwb2ludCwgdXBkYXRlVmVsb2NpdHkpIHtcbiAgICAgICAgaWYgKCFwb2ludCkge1xuICAgICAgICAgICAgQm9keS5zZXRBbmdsZShib2R5LCBib2R5LmFuZ2xlICsgcm90YXRpb24sIHVwZGF0ZVZlbG9jaXR5KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBjb3MgPSBNYXRoLmNvcyhyb3RhdGlvbiksXG4gICAgICAgICAgICAgICAgc2luID0gTWF0aC5zaW4ocm90YXRpb24pLFxuICAgICAgICAgICAgICAgIGR4ID0gYm9keS5wb3NpdGlvbi54IC0gcG9pbnQueCxcbiAgICAgICAgICAgICAgICBkeSA9IGJvZHkucG9zaXRpb24ueSAtIHBvaW50Lnk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBCb2R5LnNldFBvc2l0aW9uKGJvZHksIHtcbiAgICAgICAgICAgICAgICB4OiBwb2ludC54ICsgKGR4ICogY29zIC0gZHkgKiBzaW4pLFxuICAgICAgICAgICAgICAgIHk6IHBvaW50LnkgKyAoZHggKiBzaW4gKyBkeSAqIGNvcylcbiAgICAgICAgICAgIH0sIHVwZGF0ZVZlbG9jaXR5KTtcblxuICAgICAgICAgICAgQm9keS5zZXRBbmdsZShib2R5LCBib2R5LmFuZ2xlICsgcm90YXRpb24sIHVwZGF0ZVZlbG9jaXR5KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTY2FsZXMgdGhlIGJvZHksIGluY2x1ZGluZyB1cGRhdGluZyBwaHlzaWNhbCBwcm9wZXJ0aWVzIChtYXNzLCBhcmVhLCBheGVzLCBpbmVydGlhKSwgZnJvbSBhIHdvcmxkLXNwYWNlIHBvaW50IChkZWZhdWx0IGlzIGJvZHkgY2VudHJlKS5cbiAgICAgKiBAbWV0aG9kIHNjYWxlXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxlWFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZVlcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gW3BvaW50XVxuICAgICAqL1xuICAgIEJvZHkuc2NhbGUgPSBmdW5jdGlvbihib2R5LCBzY2FsZVgsIHNjYWxlWSwgcG9pbnQpIHtcbiAgICAgICAgdmFyIHRvdGFsQXJlYSA9IDAsXG4gICAgICAgICAgICB0b3RhbEluZXJ0aWEgPSAwO1xuXG4gICAgICAgIHBvaW50ID0gcG9pbnQgfHwgYm9keS5wb3NpdGlvbjtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZHkucGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwYXJ0ID0gYm9keS5wYXJ0c1tpXTtcblxuICAgICAgICAgICAgLy8gc2NhbGUgdmVydGljZXNcbiAgICAgICAgICAgIFZlcnRpY2VzLnNjYWxlKHBhcnQudmVydGljZXMsIHNjYWxlWCwgc2NhbGVZLCBwb2ludCk7XG5cbiAgICAgICAgICAgIC8vIHVwZGF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICBwYXJ0LmF4ZXMgPSBBeGVzLmZyb21WZXJ0aWNlcyhwYXJ0LnZlcnRpY2VzKTtcbiAgICAgICAgICAgIHBhcnQuYXJlYSA9IFZlcnRpY2VzLmFyZWEocGFydC52ZXJ0aWNlcyk7XG4gICAgICAgICAgICBCb2R5LnNldE1hc3MocGFydCwgYm9keS5kZW5zaXR5ICogcGFydC5hcmVhKTtcblxuICAgICAgICAgICAgLy8gdXBkYXRlIGluZXJ0aWEgKHJlcXVpcmVzIHZlcnRpY2VzIHRvIGJlIGF0IG9yaWdpbilcbiAgICAgICAgICAgIFZlcnRpY2VzLnRyYW5zbGF0ZShwYXJ0LnZlcnRpY2VzLCB7IHg6IC1wYXJ0LnBvc2l0aW9uLngsIHk6IC1wYXJ0LnBvc2l0aW9uLnkgfSk7XG4gICAgICAgICAgICBCb2R5LnNldEluZXJ0aWEocGFydCwgQm9keS5faW5lcnRpYVNjYWxlICogVmVydGljZXMuaW5lcnRpYShwYXJ0LnZlcnRpY2VzLCBwYXJ0Lm1hc3MpKTtcbiAgICAgICAgICAgIFZlcnRpY2VzLnRyYW5zbGF0ZShwYXJ0LnZlcnRpY2VzLCB7IHg6IHBhcnQucG9zaXRpb24ueCwgeTogcGFydC5wb3NpdGlvbi55IH0pO1xuXG4gICAgICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgICAgICB0b3RhbEFyZWEgKz0gcGFydC5hcmVhO1xuICAgICAgICAgICAgICAgIHRvdGFsSW5lcnRpYSArPSBwYXJ0LmluZXJ0aWE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHNjYWxlIHBvc2l0aW9uXG4gICAgICAgICAgICBwYXJ0LnBvc2l0aW9uLnggPSBwb2ludC54ICsgKHBhcnQucG9zaXRpb24ueCAtIHBvaW50LngpICogc2NhbGVYO1xuICAgICAgICAgICAgcGFydC5wb3NpdGlvbi55ID0gcG9pbnQueSArIChwYXJ0LnBvc2l0aW9uLnkgLSBwb2ludC55KSAqIHNjYWxlWTtcblxuICAgICAgICAgICAgLy8gdXBkYXRlIGJvdW5kc1xuICAgICAgICAgICAgQm91bmRzLnVwZGF0ZShwYXJ0LmJvdW5kcywgcGFydC52ZXJ0aWNlcywgYm9keS52ZWxvY2l0eSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBoYW5kbGUgcGFyZW50IGJvZHlcbiAgICAgICAgaWYgKGJvZHkucGFydHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgYm9keS5hcmVhID0gdG90YWxBcmVhO1xuXG4gICAgICAgICAgICBpZiAoIWJvZHkuaXNTdGF0aWMpIHtcbiAgICAgICAgICAgICAgICBCb2R5LnNldE1hc3MoYm9keSwgYm9keS5kZW5zaXR5ICogdG90YWxBcmVhKTtcbiAgICAgICAgICAgICAgICBCb2R5LnNldEluZXJ0aWEoYm9keSwgdG90YWxJbmVydGlhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGhhbmRsZSBjaXJjbGVzXG4gICAgICAgIGlmIChib2R5LmNpcmNsZVJhZGl1cykgeyBcbiAgICAgICAgICAgIGlmIChzY2FsZVggPT09IHNjYWxlWSkge1xuICAgICAgICAgICAgICAgIGJvZHkuY2lyY2xlUmFkaXVzICo9IHNjYWxlWDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gYm9keSBpcyBubyBsb25nZXIgYSBjaXJjbGVcbiAgICAgICAgICAgICAgICBib2R5LmNpcmNsZVJhZGl1cyA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYW4gdXBkYXRlIGJ5IGludGVncmF0aW5nIHRoZSBlcXVhdGlvbnMgb2YgbW90aW9uIG9uIHRoZSBgYm9keWAuXG4gICAgICogVGhpcyBpcyBhcHBsaWVkIGV2ZXJ5IHVwZGF0ZSBieSBgTWF0dGVyLkVuZ2luZWAgYXV0b21hdGljYWxseS5cbiAgICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVsdGFUaW1lPTE2LjY2Nl1cbiAgICAgKi9cbiAgICBCb2R5LnVwZGF0ZSA9IGZ1bmN0aW9uKGJvZHksIGRlbHRhVGltZSkge1xuICAgICAgICBkZWx0YVRpbWUgPSAodHlwZW9mIGRlbHRhVGltZSAhPT0gJ3VuZGVmaW5lZCcgPyBkZWx0YVRpbWUgOiAoMTAwMCAvIDYwKSkgKiBib2R5LnRpbWVTY2FsZTtcblxuICAgICAgICB2YXIgZGVsdGFUaW1lU3F1YXJlZCA9IGRlbHRhVGltZSAqIGRlbHRhVGltZSxcbiAgICAgICAgICAgIGNvcnJlY3Rpb24gPSBCb2R5Ll90aW1lQ29ycmVjdGlvbiA/IGRlbHRhVGltZSAvIChib2R5LmRlbHRhVGltZSB8fCBkZWx0YVRpbWUpIDogMTtcblxuICAgICAgICAvLyBmcm9tIHRoZSBwcmV2aW91cyBzdGVwXG4gICAgICAgIHZhciBmcmljdGlvbkFpciA9IDEgLSBib2R5LmZyaWN0aW9uQWlyICogKGRlbHRhVGltZSAvIENvbW1vbi5fYmFzZURlbHRhKSxcbiAgICAgICAgICAgIHZlbG9jaXR5UHJldlggPSAoYm9keS5wb3NpdGlvbi54IC0gYm9keS5wb3NpdGlvblByZXYueCkgKiBjb3JyZWN0aW9uLFxuICAgICAgICAgICAgdmVsb2NpdHlQcmV2WSA9IChib2R5LnBvc2l0aW9uLnkgLSBib2R5LnBvc2l0aW9uUHJldi55KSAqIGNvcnJlY3Rpb247XG5cbiAgICAgICAgLy8gdXBkYXRlIHZlbG9jaXR5IHdpdGggVmVybGV0IGludGVncmF0aW9uXG4gICAgICAgIGJvZHkudmVsb2NpdHkueCA9ICh2ZWxvY2l0eVByZXZYICogZnJpY3Rpb25BaXIpICsgKGJvZHkuZm9yY2UueCAvIGJvZHkubWFzcykgKiBkZWx0YVRpbWVTcXVhcmVkO1xuICAgICAgICBib2R5LnZlbG9jaXR5LnkgPSAodmVsb2NpdHlQcmV2WSAqIGZyaWN0aW9uQWlyKSArIChib2R5LmZvcmNlLnkgLyBib2R5Lm1hc3MpICogZGVsdGFUaW1lU3F1YXJlZDtcblxuICAgICAgICBib2R5LnBvc2l0aW9uUHJldi54ID0gYm9keS5wb3NpdGlvbi54O1xuICAgICAgICBib2R5LnBvc2l0aW9uUHJldi55ID0gYm9keS5wb3NpdGlvbi55O1xuICAgICAgICBib2R5LnBvc2l0aW9uLnggKz0gYm9keS52ZWxvY2l0eS54O1xuICAgICAgICBib2R5LnBvc2l0aW9uLnkgKz0gYm9keS52ZWxvY2l0eS55O1xuICAgICAgICBib2R5LmRlbHRhVGltZSA9IGRlbHRhVGltZTtcblxuICAgICAgICAvLyB1cGRhdGUgYW5ndWxhciB2ZWxvY2l0eSB3aXRoIFZlcmxldCBpbnRlZ3JhdGlvblxuICAgICAgICBib2R5LmFuZ3VsYXJWZWxvY2l0eSA9ICgoYm9keS5hbmdsZSAtIGJvZHkuYW5nbGVQcmV2KSAqIGZyaWN0aW9uQWlyICogY29ycmVjdGlvbikgKyAoYm9keS50b3JxdWUgLyBib2R5LmluZXJ0aWEpICogZGVsdGFUaW1lU3F1YXJlZDtcbiAgICAgICAgYm9keS5hbmdsZVByZXYgPSBib2R5LmFuZ2xlO1xuICAgICAgICBib2R5LmFuZ2xlICs9IGJvZHkuYW5ndWxhclZlbG9jaXR5O1xuXG4gICAgICAgIC8vIHRyYW5zZm9ybSB0aGUgYm9keSBnZW9tZXRyeVxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZHkucGFydHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwYXJ0ID0gYm9keS5wYXJ0c1tpXTtcblxuICAgICAgICAgICAgVmVydGljZXMudHJhbnNsYXRlKHBhcnQudmVydGljZXMsIGJvZHkudmVsb2NpdHkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgICAgICBwYXJ0LnBvc2l0aW9uLnggKz0gYm9keS52ZWxvY2l0eS54O1xuICAgICAgICAgICAgICAgIHBhcnQucG9zaXRpb24ueSArPSBib2R5LnZlbG9jaXR5Lnk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChib2R5LmFuZ3VsYXJWZWxvY2l0eSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIFZlcnRpY2VzLnJvdGF0ZShwYXJ0LnZlcnRpY2VzLCBib2R5LmFuZ3VsYXJWZWxvY2l0eSwgYm9keS5wb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgQXhlcy5yb3RhdGUocGFydC5heGVzLCBib2R5LmFuZ3VsYXJWZWxvY2l0eSk7XG4gICAgICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIFZlY3Rvci5yb3RhdGVBYm91dChwYXJ0LnBvc2l0aW9uLCBib2R5LmFuZ3VsYXJWZWxvY2l0eSwgYm9keS5wb3NpdGlvbiwgcGFydC5wb3NpdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBCb3VuZHMudXBkYXRlKHBhcnQuYm91bmRzLCBwYXJ0LnZlcnRpY2VzLCBib2R5LnZlbG9jaXR5KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHByb3BlcnRpZXMgYGJvZHkudmVsb2NpdHlgLCBgYm9keS5zcGVlZGAsIGBib2R5LmFuZ3VsYXJWZWxvY2l0eWAgYW5kIGBib2R5LmFuZ3VsYXJTcGVlZGAgd2hpY2ggYXJlIG5vcm1hbGlzZWQgaW4gcmVsYXRpb24gdG8gYEJvZHkuX2Jhc2VEZWx0YWAuXG4gICAgICogQG1ldGhvZCB1cGRhdGVWZWxvY2l0aWVzXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICovXG4gICAgQm9keS51cGRhdGVWZWxvY2l0aWVzID0gZnVuY3Rpb24oYm9keSkge1xuICAgICAgICB2YXIgdGltZVNjYWxlID0gQm9keS5fYmFzZURlbHRhIC8gYm9keS5kZWx0YVRpbWUsXG4gICAgICAgICAgICBib2R5VmVsb2NpdHkgPSBib2R5LnZlbG9jaXR5O1xuXG4gICAgICAgIGJvZHlWZWxvY2l0eS54ID0gKGJvZHkucG9zaXRpb24ueCAtIGJvZHkucG9zaXRpb25QcmV2LngpICogdGltZVNjYWxlO1xuICAgICAgICBib2R5VmVsb2NpdHkueSA9IChib2R5LnBvc2l0aW9uLnkgLSBib2R5LnBvc2l0aW9uUHJldi55KSAqIHRpbWVTY2FsZTtcbiAgICAgICAgYm9keS5zcGVlZCA9IE1hdGguc3FydCgoYm9keVZlbG9jaXR5LnggKiBib2R5VmVsb2NpdHkueCkgKyAoYm9keVZlbG9jaXR5LnkgKiBib2R5VmVsb2NpdHkueSkpO1xuXG4gICAgICAgIGJvZHkuYW5ndWxhclZlbG9jaXR5ID0gKGJvZHkuYW5nbGUgLSBib2R5LmFuZ2xlUHJldikgKiB0aW1lU2NhbGU7XG4gICAgICAgIGJvZHkuYW5ndWxhclNwZWVkID0gTWF0aC5hYnMoYm9keS5hbmd1bGFyVmVsb2NpdHkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBsaWVzIHRoZSBgZm9yY2VgIHRvIHRoZSBgYm9keWAgZnJvbSB0aGUgZm9yY2Ugb3JpZ2luIGBwb3NpdGlvbmAgaW4gd29ybGQtc3BhY2UsIG92ZXIgYSBzaW5nbGUgdGltZXN0ZXAsIGluY2x1ZGluZyBhcHBseWluZyBhbnkgcmVzdWx0aW5nIGFuZ3VsYXIgdG9ycXVlLlxuICAgICAqIFxuICAgICAqIEZvcmNlcyBhcmUgdXNlZnVsIGZvciBlZmZlY3RzIGxpa2UgZ3Jhdml0eSwgd2luZCBvciByb2NrZXQgdGhydXN0LCBidXQgY2FuIGJlIGRpZmZpY3VsdCBpbiBwcmFjdGljZSB3aGVuIHByZWNpc2UgY29udHJvbCBpcyBuZWVkZWQuIEluIHRoZXNlIGNhc2VzIHNlZSBgQm9keS5zZXRWZWxvY2l0eWAgYW5kIGBCb2R5LnNldFBvc2l0aW9uYCBhcyBhbiBhbHRlcm5hdGl2ZS5cbiAgICAgKiBcbiAgICAgKiBUaGUgZm9yY2UgZnJvbSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgYXBwbGllZCBvbmNlIGZvciB0aGUgZHVyYXRpb24gb2YgYSBzaW5nbGUgdGltZXN0ZXAsIGluIG90aGVyIHdvcmRzIHRoZSBkdXJhdGlvbiBkZXBlbmRzIGRpcmVjdGx5IG9uIHRoZSBjdXJyZW50IGVuZ2luZSB1cGRhdGUgYGRlbHRhYCBhbmQgdGhlIHJhdGUgb2YgY2FsbHMgdG8gdGhpcyBmdW5jdGlvbi5cbiAgICAgKiBcbiAgICAgKiBUaGVyZWZvcmUgdG8gYWNjb3VudCBmb3IgdGltZSwgeW91IHNob3VsZCBhcHBseSB0aGUgZm9yY2UgY29uc3RhbnRseSBvdmVyIGFzIG1hbnkgZW5naW5lIHVwZGF0ZXMgYXMgZXF1aXZhbGVudCB0byB0aGUgaW50ZW5kZWQgZHVyYXRpb24uXG4gICAgICogXG4gICAgICogSWYgYWxsIG9yIHBhcnQgb2YgdGhlIGZvcmNlIGR1cmF0aW9uIGlzIHNvbWUgZnJhY3Rpb24gb2YgYSB0aW1lc3RlcCwgZmlyc3QgbXVsdGlwbHkgdGhlIGZvcmNlIGJ5IGBkdXJhdGlvbiAvIHRpbWVzdGVwYC5cbiAgICAgKiBcbiAgICAgKiBUaGUgZm9yY2Ugb3JpZ2luIGBwb3NpdGlvbmAgaW4gd29ybGQtc3BhY2UgbXVzdCBhbHNvIGJlIHNwZWNpZmllZC4gUGFzc2luZyBgYm9keS5wb3NpdGlvbmAgd2lsbCByZXN1bHQgaW4gemVybyBhbmd1bGFyIGVmZmVjdCBhcyB0aGUgZm9yY2Ugb3JpZ2luIHdvdWxkIGJlIGF0IHRoZSBjZW50cmUgb2YgbWFzcy5cbiAgICAgKiBcbiAgICAgKiBUaGUgYGJvZHlgIHdpbGwgdGFrZSB0aW1lIHRvIGFjY2VsZXJhdGUgdW5kZXIgYSBmb3JjZSwgdGhlIHJlc3VsdGluZyBlZmZlY3QgZGVwZW5kcyBvbiBkdXJhdGlvbiBvZiB0aGUgZm9yY2UsIHRoZSBib2R5IG1hc3MgYW5kIG90aGVyIGZvcmNlcyBvbiB0aGUgYm9keSBpbmNsdWRpbmcgZnJpY3Rpb24gY29tYmluZWQuXG4gICAgICogQG1ldGhvZCBhcHBseUZvcmNlXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvc2l0aW9uIFRoZSBmb3JjZSBvcmlnaW4gaW4gd29ybGQtc3BhY2UuIFBhc3MgYGJvZHkucG9zaXRpb25gIHRvIGF2b2lkIGFuZ3VsYXIgdG9ycXVlLlxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBmb3JjZVxuICAgICAqL1xuICAgIEJvZHkuYXBwbHlGb3JjZSA9IGZ1bmN0aW9uKGJvZHksIHBvc2l0aW9uLCBmb3JjZSkge1xuICAgICAgICB2YXIgb2Zmc2V0ID0geyB4OiBwb3NpdGlvbi54IC0gYm9keS5wb3NpdGlvbi54LCB5OiBwb3NpdGlvbi55IC0gYm9keS5wb3NpdGlvbi55IH07XG4gICAgICAgIGJvZHkuZm9yY2UueCArPSBmb3JjZS54O1xuICAgICAgICBib2R5LmZvcmNlLnkgKz0gZm9yY2UueTtcbiAgICAgICAgYm9keS50b3JxdWUgKz0gb2Zmc2V0LnggKiBmb3JjZS55IC0gb2Zmc2V0LnkgKiBmb3JjZS54O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzdW1zIG9mIHRoZSBwcm9wZXJ0aWVzIG9mIGFsbCBjb21wb3VuZCBwYXJ0cyBvZiB0aGUgcGFyZW50IGJvZHkuXG4gICAgICogQG1ldGhvZCBfdG90YWxQcm9wZXJ0aWVzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcmV0dXJuIHt9XG4gICAgICovXG4gICAgQm9keS5fdG90YWxQcm9wZXJ0aWVzID0gZnVuY3Rpb24oYm9keSkge1xuICAgICAgICAvLyBmcm9tIGVxdWF0aW9ucyBhdDpcbiAgICAgICAgLy8gaHR0cHM6Ly9lY291cnNlcy5vdS5lZHUvY2dpLWJpbi9lYm9vay5jZ2k/ZG9jPSZ0b3BpYz1zdCZjaGFwX3NlYz0wNy4yJnBhZ2U9dGhlb3J5XG4gICAgICAgIC8vIGh0dHA6Ly9vdXRwdXQudG8vc2lkZXdheS9kZWZhdWx0LmFzcD9xbm89MTIxMTAwMDg3XG5cbiAgICAgICAgdmFyIHByb3BlcnRpZXMgPSB7XG4gICAgICAgICAgICBtYXNzOiAwLFxuICAgICAgICAgICAgYXJlYTogMCxcbiAgICAgICAgICAgIGluZXJ0aWE6IDAsXG4gICAgICAgICAgICBjZW50cmU6IHsgeDogMCwgeTogMCB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gc3VtIHRoZSBwcm9wZXJ0aWVzIG9mIGFsbCBjb21wb3VuZCBwYXJ0cyBvZiB0aGUgcGFyZW50IGJvZHlcbiAgICAgICAgZm9yICh2YXIgaSA9IGJvZHkucGFydHMubGVuZ3RoID09PSAxID8gMCA6IDE7IGkgPCBib2R5LnBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcGFydCA9IGJvZHkucGFydHNbaV0sXG4gICAgICAgICAgICAgICAgbWFzcyA9IHBhcnQubWFzcyAhPT0gSW5maW5pdHkgPyBwYXJ0Lm1hc3MgOiAxO1xuXG4gICAgICAgICAgICBwcm9wZXJ0aWVzLm1hc3MgKz0gbWFzcztcbiAgICAgICAgICAgIHByb3BlcnRpZXMuYXJlYSArPSBwYXJ0LmFyZWE7XG4gICAgICAgICAgICBwcm9wZXJ0aWVzLmluZXJ0aWEgKz0gcGFydC5pbmVydGlhO1xuICAgICAgICAgICAgcHJvcGVydGllcy5jZW50cmUgPSBWZWN0b3IuYWRkKHByb3BlcnRpZXMuY2VudHJlLCBWZWN0b3IubXVsdChwYXJ0LnBvc2l0aW9uLCBtYXNzKSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm9wZXJ0aWVzLmNlbnRyZSA9IFZlY3Rvci5kaXYocHJvcGVydGllcy5jZW50cmUsIHByb3BlcnRpZXMubWFzcyk7XG5cbiAgICAgICAgcmV0dXJuIHByb3BlcnRpZXM7XG4gICAgfTtcblxuICAgIC8qXG4gICAgKlxuICAgICogIEV2ZW50cyBEb2N1bWVudGF0aW9uXG4gICAgKlxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIHdoZW4gYSBib2R5IHN0YXJ0cyBzbGVlcGluZyAod2hlcmUgYHRoaXNgIGlzIHRoZSBib2R5KS5cbiAgICAqXG4gICAgKiBAZXZlbnQgc2xlZXBTdGFydFxuICAgICogQHRoaXMge2JvZHl9IFRoZSBib2R5IHRoYXQgaGFzIHN0YXJ0ZWQgc2xlZXBpbmdcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCB3aGVuIGEgYm9keSBlbmRzIHNsZWVwaW5nICh3aGVyZSBgdGhpc2AgaXMgdGhlIGJvZHkpLlxuICAgICpcbiAgICAqIEBldmVudCBzbGVlcEVuZFxuICAgICogQHRoaXMge2JvZHl9IFRoZSBib2R5IHRoYXQgaGFzIGVuZGVkIHNsZWVwaW5nXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qXG4gICAgKlxuICAgICogIFByb3BlcnRpZXMgRG9jdW1lbnRhdGlvblxuICAgICpcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gaW50ZWdlciBgTnVtYmVyYCB1bmlxdWVseSBpZGVudGlmeWluZyBudW1iZXIgZ2VuZXJhdGVkIGluIGBCb2R5LmNyZWF0ZWAgYnkgYENvbW1vbi5uZXh0SWRgLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGlkXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBfUmVhZCBvbmx5Xy4gU2V0IGJ5IGBCb2R5LmNyZWF0ZWAuXG4gICAgICogXG4gICAgICogQSBgU3RyaW5nYCBkZW5vdGluZyB0aGUgdHlwZSBvZiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAcHJvcGVydHkgdHlwZVxuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqIEBkZWZhdWx0IFwiYm9keVwiXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBhcmJpdHJhcnkgYFN0cmluZ2AgbmFtZSB0byBoZWxwIHRoZSB1c2VyIGlkZW50aWZ5IGFuZCBtYW5hZ2UgYm9kaWVzLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGxhYmVsXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICogQGRlZmF1bHQgXCJCb2R5XCJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIF9SZWFkIG9ubHlfLiBVc2UgYEJvZHkuc2V0UGFydHNgIHRvIHNldC4gXG4gICAgICogXG4gICAgICogQW4gYXJyYXkgb2YgYm9kaWVzIHRoYXQgbWFrZSB1cCB0aGlzIGJvZHkuIFxuICAgICAqIFRoZSBmaXJzdCBib2R5IGluIHRoZSBhcnJheSBtdXN0IGFsd2F5cyBiZSBhIHNlbGYgcmVmZXJlbmNlIHRvIHRoZSBjdXJyZW50IGJvZHkgaW5zdGFuY2UuXG4gICAgICogQWxsIGJvZGllcyBpbiB0aGUgYHBhcnRzYCBhcnJheSB0b2dldGhlciBmb3JtIGEgc2luZ2xlIHJpZ2lkIGNvbXBvdW5kIGJvZHkuXG4gICAgICogUGFydHMgYXJlIGFsbG93ZWQgdG8gb3ZlcmxhcCwgaGF2ZSBnYXBzIG9yIGhvbGVzIG9yIGV2ZW4gZm9ybSBjb25jYXZlIGJvZGllcy5cbiAgICAgKiBQYXJ0cyB0aGVtc2VsdmVzIHNob3VsZCBuZXZlciBiZSBhZGRlZCB0byBhIGBXb3JsZGAsIG9ubHkgdGhlIHBhcmVudCBib2R5IHNob3VsZCBiZS5cbiAgICAgKiBVc2UgYEJvZHkuc2V0UGFydHNgIHdoZW4gc2V0dGluZyBwYXJ0cyB0byBlbnN1cmUgY29ycmVjdCB1cGRhdGVzIG9mIGFsbCBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHByb3BlcnR5IHBhcnRzXG4gICAgICogQHR5cGUgYm9keVtdXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3QgcmVzZXJ2ZWQgZm9yIHN0b3JpbmcgcGx1Z2luLXNwZWNpZmljIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcGx1Z2luXG4gICAgICogQHR5cGUge31cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIF9SZWFkIG9ubHlfLiBVcGRhdGVkIGJ5IGBCb2R5LnNldFBhcnRzYC5cbiAgICAgKiBcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYm9keSB0aGF0IHRoaXMgaXMgYSBwYXJ0IG9mLiBTZWUgYGJvZHkucGFydHNgLlxuICAgICAqIFRoaXMgaXMgYSBzZWxmIHJlZmVyZW5jZSBpZiB0aGUgYm9keSBpcyBub3QgYSBwYXJ0IG9mIGFub3RoZXIgYm9keS5cbiAgICAgKlxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBwcm9wZXJ0eSBwYXJlbnRcbiAgICAgKiBAdHlwZSBib2R5XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHNwZWNpZnlpbmcgdGhlIGFuZ2xlIG9mIHRoZSBib2R5LCBpbiByYWRpYW5zLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGFuZ2xlXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogX1JlYWQgb25seV8uIFVzZSBgQm9keS5zZXRWZXJ0aWNlc2Agb3IgYEJvZHkuc2V0UGFydHNgIHRvIHNldC4gU2VlIGFsc28gYEJvZGllcy5mcm9tVmVydGljZXNgLlxuICAgICAqIFxuICAgICAqIEFuIGFycmF5IG9mIGBWZWN0b3JgIG9iamVjdHMgdGhhdCBzcGVjaWZ5IHRoZSBjb252ZXggaHVsbCBvZiB0aGUgcmlnaWQgYm9keS5cbiAgICAgKiBUaGVzZSBzaG91bGQgYmUgcHJvdmlkZWQgYWJvdXQgdGhlIG9yaWdpbiBgKDAsIDApYC4gRS5nLlxuICAgICAqXG4gICAgICogYFt7IHg6IDAsIHk6IDAgfSwgeyB4OiAyNSwgeTogNTAgfSwgeyB4OiA1MCwgeTogMCB9XWBcbiAgICAgKiBcbiAgICAgKiBWZXJ0aWNlcyBtdXN0IGFsd2F5cyBiZSBjb252ZXgsIGluIGNsb2Nrd2lzZSBvcmRlciBhbmQgbXVzdCBub3QgY29udGFpbiBhbnkgZHVwbGljYXRlIHBvaW50cy5cbiAgICAgKiBcbiAgICAgKiBDb25jYXZlIHZlcnRpY2VzIHNob3VsZCBiZSBkZWNvbXBvc2VkIGludG8gY29udmV4IGBwYXJ0c2AsIHNlZSBgQm9kaWVzLmZyb21WZXJ0aWNlc2AgYW5kIGBCb2R5LnNldFBhcnRzYC5cbiAgICAgKlxuICAgICAqIFdoZW4gc2V0IHRoZSB2ZXJ0aWNlcyBhcmUgdHJhbnNsYXRlZCBzdWNoIHRoYXQgYGJvZHkucG9zaXRpb25gIGlzIGF0IHRoZSBjZW50cmUgb2YgbWFzcy5cbiAgICAgKiBNYW55IG90aGVyIGJvZHkgcHJvcGVydGllcyBhcmUgYXV0b21hdGljYWxseSBjYWxjdWxhdGVkIGZyb20gdGhlc2UgdmVydGljZXMgd2hlbiBzZXQgaW5jbHVkaW5nIGBkZW5zaXR5YCwgYGFyZWFgIGFuZCBgaW5lcnRpYWAuXG4gICAgICogXG4gICAgICogVGhlIG1vZHVsZSBgTWF0dGVyLlZlcnRpY2VzYCBjb250YWlucyB1c2VmdWwgbWV0aG9kcyBmb3Igd29ya2luZyB3aXRoIHZlcnRpY2VzLlxuICAgICAqXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHByb3BlcnR5IHZlcnRpY2VzXG4gICAgICogQHR5cGUgdmVjdG9yW11cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIF9SZWFkIG9ubHlfLiBVc2UgYEJvZHkuc2V0UG9zaXRpb25gIHRvIHNldC4gXG4gICAgICogXG4gICAgICogQSBgVmVjdG9yYCB0aGF0IHNwZWNpZmllcyB0aGUgY3VycmVudCB3b3JsZC1zcGFjZSBwb3NpdGlvbiBvZiB0aGUgYm9keS5cbiAgICAgKiBcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAcHJvcGVydHkgcG9zaXRpb25cbiAgICAgKiBAdHlwZSB2ZWN0b3JcbiAgICAgKiBAZGVmYXVsdCB7IHg6IDAsIHk6IDAgfVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgVmVjdG9yYCB0aGF0IGFjY3VtdWxhdGVzIHRoZSB0b3RhbCBmb3JjZSBhcHBsaWVkIHRvIHRoZSBib2R5IGZvciBhIHNpbmdsZSB1cGRhdGUuXG4gICAgICogRm9yY2UgaXMgemVyb2VkIGFmdGVyIGV2ZXJ5IGBFbmdpbmUudXBkYXRlYCwgc28gY29uc3RhbnQgZm9yY2VzIHNob3VsZCBiZSBhcHBsaWVkIGZvciBldmVyeSB1cGRhdGUgdGhleSBhcmUgbmVlZGVkLiBTZWUgYWxzbyBgQm9keS5hcHBseUZvcmNlYC5cbiAgICAgKiBcbiAgICAgKiBAcHJvcGVydHkgZm9yY2VcbiAgICAgKiBAdHlwZSB2ZWN0b3JcbiAgICAgKiBAZGVmYXVsdCB7IHg6IDAsIHk6IDAgfVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGFjY3VtdWxhdGVzIHRoZSB0b3RhbCB0b3JxdWUgKHR1cm5pbmcgZm9yY2UpIGFwcGxpZWQgdG8gdGhlIGJvZHkgZm9yIGEgc2luZ2xlIHVwZGF0ZS4gU2VlIGFsc28gYEJvZHkuYXBwbHlGb3JjZWAuXG4gICAgICogVG9ycXVlIGlzIHplcm9lZCBhZnRlciBldmVyeSBgRW5naW5lLnVwZGF0ZWAsIHNvIGNvbnN0YW50IHRvcnF1ZXMgc2hvdWxkIGJlIGFwcGxpZWQgZm9yIGV2ZXJ5IHVwZGF0ZSB0aGV5IGFyZSBuZWVkZWQuXG4gICAgICpcbiAgICAgKiBUb3JxdWVzIHJlc3VsdCBpbiBhbmd1bGFyIGFjY2VsZXJhdGlvbiBvbiBldmVyeSB1cGRhdGUsIHdoaWNoIGRlcGVuZHMgb24gYm9keSBpbmVydGlhIGFuZCB0aGUgZW5naW5lIHVwZGF0ZSBkZWx0YS5cbiAgICAgKiBcbiAgICAgKiBAcHJvcGVydHkgdG9ycXVlXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogX1JlYWQgb25seV8uIFVzZSBgQm9keS5zZXRTcGVlZGAgdG8gc2V0LiBcbiAgICAgKiBcbiAgICAgKiBTZWUgYEJvZHkuZ2V0U3BlZWRgIGZvciBkZXRhaWxzLlxuICAgICAqIFxuICAgICAqIEVxdWl2YWxlbnQgdG8gdGhlIG1hZ25pdHVkZSBvZiBgYm9keS52ZWxvY2l0eWAgKGFsd2F5cyBwb3NpdGl2ZSkuXG4gICAgICogXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHByb3BlcnR5IHNwZWVkXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogX1JlYWQgb25seV8uIFVzZSBgQm9keS5zZXRWZWxvY2l0eWAgdG8gc2V0LiBcbiAgICAgKiBcbiAgICAgKiBTZWUgYEJvZHkuZ2V0VmVsb2NpdHlgIGZvciBkZXRhaWxzLlxuICAgICAqIFxuICAgICAqIEVxdWl2YWxlbnQgdG8gdGhlIG1hZ25pdHVkZSBvZiBgYm9keS5hbmd1bGFyVmVsb2NpdHlgIChhbHdheXMgcG9zaXRpdmUpLlxuICAgICAqIFxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBwcm9wZXJ0eSB2ZWxvY2l0eVxuICAgICAqIEB0eXBlIHZlY3RvclxuICAgICAqIEBkZWZhdWx0IHsgeDogMCwgeTogMCB9XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBfUmVhZCBvbmx5Xy4gVXNlIGBCb2R5LnNldEFuZ3VsYXJTcGVlZGAgdG8gc2V0LiBcbiAgICAgKiBcbiAgICAgKiBTZWUgYEJvZHkuZ2V0QW5ndWxhclNwZWVkYCBmb3IgZGV0YWlscy5cbiAgICAgKiBcbiAgICAgKiBcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAcHJvcGVydHkgYW5ndWxhclNwZWVkXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogX1JlYWQgb25seV8uIFVzZSBgQm9keS5zZXRBbmd1bGFyVmVsb2NpdHlgIHRvIHNldC4gXG4gICAgICogXG4gICAgICogU2VlIGBCb2R5LmdldEFuZ3VsYXJWZWxvY2l0eWAgZm9yIGRldGFpbHMuXG4gICAgICogXG4gICAgICpcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAcHJvcGVydHkgYW5ndWxhclZlbG9jaXR5XG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogX1JlYWQgb25seV8uIFVzZSBgQm9keS5zZXRTdGF0aWNgIHRvIHNldC4gXG4gICAgICogXG4gICAgICogQSBmbGFnIHRoYXQgaW5kaWNhdGVzIHdoZXRoZXIgYSBib2R5IGlzIGNvbnNpZGVyZWQgc3RhdGljLiBBIHN0YXRpYyBib2R5IGNhbiBuZXZlciBjaGFuZ2UgcG9zaXRpb24gb3IgYW5nbGUgYW5kIGlzIGNvbXBsZXRlbHkgZml4ZWQuXG4gICAgICpcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAcHJvcGVydHkgaXNTdGF0aWNcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0aGF0IGluZGljYXRlcyB3aGV0aGVyIGEgYm9keSBpcyBhIHNlbnNvci4gU2Vuc29yIHRyaWdnZXJzIGNvbGxpc2lvbiBldmVudHMsIGJ1dCBkb2Vzbid0IHJlYWN0IHdpdGggY29sbGlkaW5nIGJvZHkgcGh5c2ljYWxseS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBpc1NlbnNvclxuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogX1JlYWQgb25seV8uIFVzZSBgU2xlZXBpbmcuc2V0YCB0byBzZXQuIFxuICAgICAqIFxuICAgICAqIEEgZmxhZyB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBib2R5IGlzIGNvbnNpZGVyZWQgc2xlZXBpbmcuIEEgc2xlZXBpbmcgYm9keSBhY3RzIHNpbWlsYXIgdG8gYSBzdGF0aWMgYm9keSwgZXhjZXB0IGl0IGlzIG9ubHkgdGVtcG9yYXJ5IGFuZCBjYW4gYmUgYXdva2VuLlxuICAgICAqXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHByb3BlcnR5IGlzU2xlZXBpbmdcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIF9SZWFkIG9ubHlfLiBDYWxjdWxhdGVkIGR1cmluZyBlbmdpbmUgdXBkYXRlIG9ubHkgd2hlbiBzbGVlcGluZyBpcyBlbmFibGVkLlxuICAgICAqIFxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBsb29zZWx5IG1lYXN1cmVzIHRoZSBhbW91bnQgb2YgbW92ZW1lbnQgYSBib2R5IGN1cnJlbnRseSBoYXMuXG4gICAgICpcbiAgICAgKiBEZXJpdmVkIGZyb20gYGJvZHkuc3BlZWReMiArIGJvZHkuYW5ndWxhclNwZWVkXjJgLiBTZWUgYFNsZWVwaW5nLnVwZGF0ZWAuXG4gICAgICogXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHByb3BlcnR5IG1vdGlvblxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBsZW5ndGggb2YgdGltZSBkdXJpbmcgd2hpY2ggdGhpcyBib2R5IG11c3QgaGF2ZSBuZWFyLXplcm8gdmVsb2NpdHkgYmVmb3JlIGl0IGlzIHNldCBhcyBzbGVlcGluZyBieSB0aGUgYE1hdHRlci5TbGVlcGluZ2AgbW9kdWxlIChpZiBzbGVlcGluZyBpcyBlbmFibGVkIGJ5IHRoZSBlbmdpbmUpLlxuICAgICAqIFxuICAgICAqIEBwcm9wZXJ0eSBzbGVlcFRocmVzaG9sZFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDYwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBfUmVhZCBvbmx5Xy4gVXNlIGBCb2R5LnNldERlbnNpdHlgIHRvIHNldC4gXG4gICAgICogXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIGRlbnNpdHkgb2YgdGhlIGJvZHkgKG1hc3MgcGVyIHVuaXQgYXJlYSkuXG4gICAgICogXG4gICAgICogTWFzcyB3aWxsIGFsc28gYmUgdXBkYXRlZCB3aGVuIHNldC5cbiAgICAgKlxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBwcm9wZXJ0eSBkZW5zaXR5XG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMC4wMDFcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIF9SZWFkIG9ubHlfLiBVc2UgYEJvZHkuc2V0TWFzc2AgdG8gc2V0LiBcbiAgICAgKiBcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgZGVmaW5lcyB0aGUgbWFzcyBvZiB0aGUgYm9keS5cbiAgICAgKiBcbiAgICAgKiBEZW5zaXR5IHdpbGwgYWxzbyBiZSB1cGRhdGVkIHdoZW4gc2V0LlxuICAgICAqIFxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBwcm9wZXJ0eSBtYXNzXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBfUmVhZCBvbmx5Xy4gVXNlIGBCb2R5LnNldE1hc3NgIHRvIHNldC4gXG4gICAgICogXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIGludmVyc2UgbWFzcyBvZiB0aGUgYm9keSAoYDEgLyBtYXNzYCkuXG4gICAgICpcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAcHJvcGVydHkgaW52ZXJzZU1hc3NcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIF9SZWFkIG9ubHlfLiBBdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZWQgd2hlbiB2ZXJ0aWNlcywgbWFzcyBvciBkZW5zaXR5IGFyZSBzZXQgb3Igc2V0IHRocm91Z2ggYEJvZHkuc2V0SW5lcnRpYWAuXG4gICAgICogXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIG1vbWVudCBvZiBpbmVydGlhIG9mIHRoZSBib2R5LiBUaGlzIGlzIHRoZSBzZWNvbmQgbW9tZW50IG9mIGFyZWEgaW4gdHdvIGRpbWVuc2lvbnMuXG4gICAgICogXG4gICAgICogQ2FuIGJlIG1hbnVhbGx5IHNldCB0byBgSW5maW5pdHlgIHRvIHByZXZlbnQgcm90YXRpb24gb2YgdGhlIGJvZHkuIFNlZSBgQm9keS5zZXRJbmVydGlhYC5cbiAgICAgKiBcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAcHJvcGVydHkgaW5lcnRpYVxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogX1JlYWQgb25seV8uIEF1dG9tYXRpY2FsbHkgY2FsY3VsYXRlZCB3aGVuIHZlcnRpY2VzLCBtYXNzIG9yIGRlbnNpdHkgYXJlIHNldCBvciBjYWxjdWxhdGVkIGJ5IGBCb2R5LnNldEluZXJ0aWFgLlxuICAgICAqIFxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBpbnZlcnNlIG1vbWVudCBvZiBpbmVydGlhIG9mIHRoZSBib2R5IChgMSAvIGluZXJ0aWFgKS5cbiAgICAgKiBcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAcHJvcGVydHkgaW52ZXJzZUluZXJ0aWFcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSByZXN0aXR1dGlvbiAoZWxhc3RpY2l0eSkgb2YgdGhlIGJvZHkuIFRoZSB2YWx1ZSBpcyBhbHdheXMgcG9zaXRpdmUgYW5kIGlzIGluIHRoZSByYW5nZSBgKDAsIDEpYC5cbiAgICAgKiBBIHZhbHVlIG9mIGAwYCBtZWFucyBjb2xsaXNpb25zIG1heSBiZSBwZXJmZWN0bHkgaW5lbGFzdGljIGFuZCBubyBib3VuY2luZyBtYXkgb2NjdXIuIFxuICAgICAqIEEgdmFsdWUgb2YgYDAuOGAgbWVhbnMgdGhlIGJvZHkgbWF5IGJvdW5jZSBiYWNrIHdpdGggYXBwcm94aW1hdGVseSA4MCUgb2YgaXRzIGtpbmV0aWMgZW5lcmd5LlxuICAgICAqIE5vdGUgdGhhdCBjb2xsaXNpb24gcmVzcG9uc2UgaXMgYmFzZWQgb24gX3BhaXJzXyBvZiBib2RpZXMsIGFuZCB0aGF0IGByZXN0aXR1dGlvbmAgdmFsdWVzIGFyZSBfY29tYmluZWRfIHdpdGggdGhlIGZvbGxvd2luZyBmb3JtdWxhOlxuICAgICAqXG4gICAgICogYE1hdGgubWF4KGJvZHlBLnJlc3RpdHV0aW9uLCBib2R5Qi5yZXN0aXR1dGlvbilgXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVzdGl0dXRpb25cbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgZGVmaW5lcyB0aGUgZnJpY3Rpb24gb2YgdGhlIGJvZHkuIFRoZSB2YWx1ZSBpcyBhbHdheXMgcG9zaXRpdmUgYW5kIGlzIGluIHRoZSByYW5nZSBgKDAsIDEpYC5cbiAgICAgKiBBIHZhbHVlIG9mIGAwYCBtZWFucyB0aGF0IHRoZSBib2R5IG1heSBzbGlkZSBpbmRlZmluaXRlbHkuXG4gICAgICogQSB2YWx1ZSBvZiBgMWAgbWVhbnMgdGhlIGJvZHkgbWF5IGNvbWUgdG8gYSBzdG9wIGFsbW9zdCBpbnN0YW50bHkgYWZ0ZXIgYSBmb3JjZSBpcyBhcHBsaWVkLlxuICAgICAqXG4gICAgICogVGhlIGVmZmVjdHMgb2YgdGhlIHZhbHVlIG1heSBiZSBub24tbGluZWFyLiBcbiAgICAgKiBIaWdoIHZhbHVlcyBtYXkgYmUgdW5zdGFibGUgZGVwZW5kaW5nIG9uIHRoZSBib2R5LlxuICAgICAqIFRoZSBlbmdpbmUgdXNlcyBhIENvdWxvbWIgZnJpY3Rpb24gbW9kZWwgaW5jbHVkaW5nIHN0YXRpYyBhbmQga2luZXRpYyBmcmljdGlvbi5cbiAgICAgKiBOb3RlIHRoYXQgY29sbGlzaW9uIHJlc3BvbnNlIGlzIGJhc2VkIG9uIF9wYWlyc18gb2YgYm9kaWVzLCBhbmQgdGhhdCBgZnJpY3Rpb25gIHZhbHVlcyBhcmUgX2NvbWJpbmVkXyB3aXRoIHRoZSBmb2xsb3dpbmcgZm9ybXVsYTpcbiAgICAgKlxuICAgICAqIGBNYXRoLm1pbihib2R5QS5mcmljdGlvbiwgYm9keUIuZnJpY3Rpb24pYFxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGZyaWN0aW9uXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMC4xXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgZGVmaW5lcyB0aGUgc3RhdGljIGZyaWN0aW9uIG9mIHRoZSBib2R5IChpbiB0aGUgQ291bG9tYiBmcmljdGlvbiBtb2RlbCkuIFxuICAgICAqIEEgdmFsdWUgb2YgYDBgIG1lYW5zIHRoZSBib2R5IHdpbGwgbmV2ZXIgJ3N0aWNrJyB3aGVuIGl0IGlzIG5lYXJseSBzdGF0aW9uYXJ5IGFuZCBvbmx5IGR5bmFtaWMgYGZyaWN0aW9uYCBpcyB1c2VkLlxuICAgICAqIFRoZSBoaWdoZXIgdGhlIHZhbHVlIChlLmcuIGAxMGApLCB0aGUgbW9yZSBmb3JjZSBpdCB3aWxsIHRha2UgdG8gaW5pdGlhbGx5IGdldCB0aGUgYm9keSBtb3Zpbmcgd2hlbiBuZWFybHkgc3RhdGlvbmFyeS5cbiAgICAgKiBUaGlzIHZhbHVlIGlzIG11bHRpcGxpZWQgd2l0aCB0aGUgYGZyaWN0aW9uYCBwcm9wZXJ0eSB0byBtYWtlIGl0IGVhc2llciB0byBjaGFuZ2UgYGZyaWN0aW9uYCBhbmQgbWFpbnRhaW4gYW4gYXBwcm9wcmlhdGUgYW1vdW50IG9mIHN0YXRpYyBmcmljdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBmcmljdGlvblN0YXRpY1xuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDAuNVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIGFpciBmcmljdGlvbiBvZiB0aGUgYm9keSAoYWlyIHJlc2lzdGFuY2UpLiBcbiAgICAgKiBBIHZhbHVlIG9mIGAwYCBtZWFucyB0aGUgYm9keSB3aWxsIG5ldmVyIHNsb3cgYXMgaXQgbW92ZXMgdGhyb3VnaCBzcGFjZS5cbiAgICAgKiBUaGUgaGlnaGVyIHRoZSB2YWx1ZSwgdGhlIGZhc3RlciBhIGJvZHkgc2xvd3Mgd2hlbiBtb3ZpbmcgdGhyb3VnaCBzcGFjZS5cbiAgICAgKiBUaGUgZWZmZWN0cyBvZiB0aGUgdmFsdWUgYXJlIG5vbi1saW5lYXIuIFxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGZyaWN0aW9uQWlyXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMC4wMVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYE9iamVjdGAgdGhhdCBzcGVjaWZpZXMgdGhlIGNvbGxpc2lvbiBmaWx0ZXJpbmcgcHJvcGVydGllcyBvZiB0aGlzIGJvZHkuXG4gICAgICpcbiAgICAgKiBDb2xsaXNpb25zIGJldHdlZW4gdHdvIGJvZGllcyB3aWxsIG9iZXkgdGhlIGZvbGxvd2luZyBydWxlczpcbiAgICAgKiAtIElmIHRoZSB0d28gYm9kaWVzIGhhdmUgdGhlIHNhbWUgbm9uLXplcm8gdmFsdWUgb2YgYGNvbGxpc2lvbkZpbHRlci5ncm91cGAsXG4gICAgICogICB0aGV5IHdpbGwgYWx3YXlzIGNvbGxpZGUgaWYgdGhlIHZhbHVlIGlzIHBvc2l0aXZlLCBhbmQgdGhleSB3aWxsIG5ldmVyIGNvbGxpZGVcbiAgICAgKiAgIGlmIHRoZSB2YWx1ZSBpcyBuZWdhdGl2ZS5cbiAgICAgKiAtIElmIHRoZSB0d28gYm9kaWVzIGhhdmUgZGlmZmVyZW50IHZhbHVlcyBvZiBgY29sbGlzaW9uRmlsdGVyLmdyb3VwYCBvciBpZiBvbmVcbiAgICAgKiAgIChvciBib3RoKSBvZiB0aGUgYm9kaWVzIGhhcyBhIHZhbHVlIG9mIDAsIHRoZW4gdGhlIGNhdGVnb3J5L21hc2sgcnVsZXMgYXBwbHkgYXMgZm9sbG93czpcbiAgICAgKlxuICAgICAqIEVhY2ggYm9keSBiZWxvbmdzIHRvIGEgY29sbGlzaW9uIGNhdGVnb3J5LCBnaXZlbiBieSBgY29sbGlzaW9uRmlsdGVyLmNhdGVnb3J5YC4gVGhpc1xuICAgICAqIHZhbHVlIGlzIHVzZWQgYXMgYSBiaXQgZmllbGQgYW5kIHRoZSBjYXRlZ29yeSBzaG91bGQgaGF2ZSBvbmx5IG9uZSBiaXQgc2V0LCBtZWFuaW5nIHRoYXRcbiAgICAgKiB0aGUgdmFsdWUgb2YgdGhpcyBwcm9wZXJ0eSBpcyBhIHBvd2VyIG9mIHR3byBpbiB0aGUgcmFuZ2UgWzEsIDJeMzFdLiBUaHVzLCB0aGVyZSBhcmUgMzJcbiAgICAgKiBkaWZmZXJlbnQgY29sbGlzaW9uIGNhdGVnb3JpZXMgYXZhaWxhYmxlLlxuICAgICAqXG4gICAgICogRWFjaCBib2R5IGFsc28gZGVmaW5lcyBhIGNvbGxpc2lvbiBiaXRtYXNrLCBnaXZlbiBieSBgY29sbGlzaW9uRmlsdGVyLm1hc2tgIHdoaWNoIHNwZWNpZmllc1xuICAgICAqIHRoZSBjYXRlZ29yaWVzIGl0IGNvbGxpZGVzIHdpdGggKHRoZSB2YWx1ZSBpcyB0aGUgYml0d2lzZSBBTkQgdmFsdWUgb2YgYWxsIHRoZXNlIGNhdGVnb3JpZXMpLlxuICAgICAqXG4gICAgICogVXNpbmcgdGhlIGNhdGVnb3J5L21hc2sgcnVsZXMsIHR3byBib2RpZXMgYEFgIGFuZCBgQmAgY29sbGlkZSBpZiBlYWNoIGluY2x1ZGVzIHRoZSBvdGhlcidzXG4gICAgICogY2F0ZWdvcnkgaW4gaXRzIG1hc2ssIGkuZS4gYChjYXRlZ29yeUEgJiBtYXNrQikgIT09IDBgIGFuZCBgKGNhdGVnb3J5QiAmIG1hc2tBKSAhPT0gMGBcbiAgICAgKiBhcmUgYm90aCB0cnVlLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGNvbGxpc2lvbkZpbHRlclxuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gSW50ZWdlciBgTnVtYmVyYCwgdGhhdCBzcGVjaWZpZXMgdGhlIGNvbGxpc2lvbiBncm91cCB0aGlzIGJvZHkgYmVsb25ncyB0by5cbiAgICAgKiBTZWUgYGJvZHkuY29sbGlzaW9uRmlsdGVyYCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBjb2xsaXNpb25GaWx0ZXIuZ3JvdXBcbiAgICAgKiBAdHlwZSBvYmplY3RcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGJpdCBmaWVsZCB0aGF0IHNwZWNpZmllcyB0aGUgY29sbGlzaW9uIGNhdGVnb3J5IHRoaXMgYm9keSBiZWxvbmdzIHRvLlxuICAgICAqIFRoZSBjYXRlZ29yeSB2YWx1ZSBzaG91bGQgaGF2ZSBvbmx5IG9uZSBiaXQgc2V0LCBmb3IgZXhhbXBsZSBgMHgwMDAxYC5cbiAgICAgKiBUaGlzIG1lYW5zIHRoZXJlIGFyZSB1cCB0byAzMiB1bmlxdWUgY29sbGlzaW9uIGNhdGVnb3JpZXMgYXZhaWxhYmxlLlxuICAgICAqIFNlZSBgYm9keS5jb2xsaXNpb25GaWx0ZXJgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGNvbGxpc2lvbkZpbHRlci5jYXRlZ29yeVxuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYml0IG1hc2sgdGhhdCBzcGVjaWZpZXMgdGhlIGNvbGxpc2lvbiBjYXRlZ29yaWVzIHRoaXMgYm9keSBtYXkgY29sbGlkZSB3aXRoLlxuICAgICAqIFNlZSBgYm9keS5jb2xsaXNpb25GaWx0ZXJgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGNvbGxpc2lvbkZpbHRlci5tYXNrXG4gICAgICogQHR5cGUgb2JqZWN0XG4gICAgICogQGRlZmF1bHQgLTFcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgYSB0aGluIGJvdW5kYXJ5IGFyb3VuZCB0aGUgYm9keSB3aGVyZSBpdCBpcyBhbGxvd2VkIHRvIHNsaWdodGx5IHNpbmsgaW50byBvdGhlciBib2RpZXMuXG4gICAgICogXG4gICAgICogVGhpcyBpcyByZXF1aXJlZCBmb3IgcHJvcGVyIGNvbGxpc2lvbiByZXNwb25zZSwgaW5jbHVkaW5nIGZyaWN0aW9uIGFuZCByZXN0aXR1dGlvbiBlZmZlY3RzLlxuICAgICAqIFxuICAgICAqIFRoZSBkZWZhdWx0IHNob3VsZCBnZW5lcmFsbHkgc3VmZmljZSBpbiBtb3N0IGNhc2VzLiBZb3UgbWF5IG5lZWQgdG8gZGVjcmVhc2UgdGhpcyB2YWx1ZSBmb3IgdmVyeSBzbWFsbCBib2RpZXMgdGhhdCBhcmUgbmVhcmluZyB0aGUgZGVmYXVsdCB2YWx1ZSBpbiBzY2FsZS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBzbG9wXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMC4wNVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IHNwZWNpZmllcyBwZXItYm9keSB0aW1lIHNjYWxpbmcuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgdGltZVNjYWxlXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogX1JlYWQgb25seV8uIFVwZGF0ZWQgZHVyaW5nIGVuZ2luZSB1cGRhdGUuXG4gICAgICogXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IHJlY29yZHMgdGhlIGxhc3QgZGVsdGEgdGltZSB2YWx1ZSB1c2VkIHRvIHVwZGF0ZSB0aGlzIGJvZHkuXG4gICAgICogVXNlZCB0byBjYWxjdWxhdGUgc3BlZWQgYW5kIHZlbG9jaXR5LlxuICAgICAqXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHByb3BlcnR5IGRlbHRhVGltZVxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDEwMDAgLyA2MFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYE9iamVjdGAgdGhhdCBkZWZpbmVzIHRoZSByZW5kZXJpbmcgcHJvcGVydGllcyB0byBiZSBjb25zdW1lZCBieSB0aGUgbW9kdWxlIGBNYXR0ZXIuUmVuZGVyYC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXJcbiAgICAgKiBAdHlwZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0aGF0IGluZGljYXRlcyBpZiB0aGUgYm9keSBzaG91bGQgYmUgcmVuZGVyZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyLnZpc2libGVcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgb3BhY2l0eSB0byB1c2Ugd2hlbiByZW5kZXJpbmcuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyLm9wYWNpdHlcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGBPYmplY3RgIHRoYXQgZGVmaW5lcyB0aGUgc3ByaXRlIHByb3BlcnRpZXMgdG8gdXNlIHdoZW4gcmVuZGVyaW5nLCBpZiBhbnkuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyLnNwcml0ZVxuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYFN0cmluZ2AgdGhhdCBkZWZpbmVzIHRoZSBwYXRoIHRvIHRoZSBpbWFnZSB0byB1c2UgYXMgdGhlIHNwcml0ZSB0ZXh0dXJlLCBpZiBhbnkuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyLnNwcml0ZS50ZXh0dXJlXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICovXG4gICAgIFxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBzY2FsaW5nIGluIHRoZSB4LWF4aXMgZm9yIHRoZSBzcHJpdGUsIGlmIGFueS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuc3ByaXRlLnhTY2FsZVxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBzY2FsaW5nIGluIHRoZSB5LWF4aXMgZm9yIHRoZSBzcHJpdGUsIGlmIGFueS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuc3ByaXRlLnlTY2FsZVxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAgKiBBIGBOdW1iZXJgIHRoYXQgZGVmaW5lcyB0aGUgb2Zmc2V0IGluIHRoZSB4LWF4aXMgZm9yIHRoZSBzcHJpdGUgKG5vcm1hbGlzZWQgYnkgdGV4dHVyZSB3aWR0aCkuXG4gICAgICAqXG4gICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuc3ByaXRlLnhPZmZzZXRcbiAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICovXG5cbiAgICAvKipcbiAgICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIG9mZnNldCBpbiB0aGUgeS1heGlzIGZvciB0aGUgc3ByaXRlIChub3JtYWxpc2VkIGJ5IHRleHR1cmUgaGVpZ2h0KS5cbiAgICAgICpcbiAgICAgICogQHByb3BlcnR5IHJlbmRlci5zcHJpdGUueU9mZnNldFxuICAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgICogQGRlZmF1bHQgMFxuICAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBkZWZpbmVzIHRoZSBsaW5lIHdpZHRoIHRvIHVzZSB3aGVuIHJlbmRlcmluZyB0aGUgYm9keSBvdXRsaW5lIChpZiBhIHNwcml0ZSBpcyBub3QgZGVmaW5lZCkuXG4gICAgICogQSB2YWx1ZSBvZiBgMGAgbWVhbnMgbm8gb3V0bGluZSB3aWxsIGJlIHJlbmRlcmVkLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHJlbmRlci5saW5lV2lkdGhcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBTdHJpbmdgIHRoYXQgZGVmaW5lcyB0aGUgZmlsbCBzdHlsZSB0byB1c2Ugd2hlbiByZW5kZXJpbmcgdGhlIGJvZHkgKGlmIGEgc3ByaXRlIGlzIG5vdCBkZWZpbmVkKS5cbiAgICAgKiBJdCBpcyB0aGUgc2FtZSBhcyB3aGVuIHVzaW5nIGEgY2FudmFzLCBzbyBpdCBhY2NlcHRzIENTUyBzdHlsZSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyLmZpbGxTdHlsZVxuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqIEBkZWZhdWx0IGEgcmFuZG9tIGNvbG91clxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgU3RyaW5nYCB0aGF0IGRlZmluZXMgdGhlIHN0cm9rZSBzdHlsZSB0byB1c2Ugd2hlbiByZW5kZXJpbmcgdGhlIGJvZHkgb3V0bGluZSAoaWYgYSBzcHJpdGUgaXMgbm90IGRlZmluZWQpLlxuICAgICAqIEl0IGlzIHRoZSBzYW1lIGFzIHdoZW4gdXNpbmcgYSBjYW52YXMsIHNvIGl0IGFjY2VwdHMgQ1NTIHN0eWxlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuc3Ryb2tlU3R5bGVcbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKiBAZGVmYXVsdCBhIHJhbmRvbSBjb2xvdXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIF9SZWFkIG9ubHlfLiBDYWxjdWxhdGVkIGF1dG9tYXRpY2FsbHkgd2hlbiB2ZXJ0aWNlcyBhcmUgc2V0LlxuICAgICAqIFxuICAgICAqIEFuIGFycmF5IG9mIHVuaXF1ZSBheGlzIHZlY3RvcnMgKGVkZ2Ugbm9ybWFscykgdXNlZCBmb3IgY29sbGlzaW9uIGRldGVjdGlvbi5cbiAgICAgKiBUaGVzZSBhcmUgYXV0b21hdGljYWxseSBjYWxjdWxhdGVkIHdoZW4gdmVydGljZXMgYXJlIHNldC5cbiAgICAgKiBUaGV5IGFyZSBjb25zdGFudGx5IHVwZGF0ZWQgYnkgYEJvZHkudXBkYXRlYCBkdXJpbmcgdGhlIHNpbXVsYXRpb24uXG4gICAgICpcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKiBAcHJvcGVydHkgYXhlc1xuICAgICAqIEB0eXBlIHZlY3RvcltdXG4gICAgICovXG4gICAgIFxuICAgIC8qKlxuICAgICAqIF9SZWFkIG9ubHlfLiBDYWxjdWxhdGVkIGF1dG9tYXRpY2FsbHkgd2hlbiB2ZXJ0aWNlcyBhcmUgc2V0LlxuICAgICAqIFxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBtZWFzdXJlcyB0aGUgYXJlYSBvZiB0aGUgYm9keSdzIGNvbnZleCBodWxsLlxuICAgICAqIFxuICAgICAqIEByZWFkT25seVxuICAgICAqIEBwcm9wZXJ0eSBhcmVhXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICogQGRlZmF1bHQgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBCb3VuZHNgIG9iamVjdCB0aGF0IGRlZmluZXMgdGhlIEFBQkIgcmVnaW9uIGZvciB0aGUgYm9keS5cbiAgICAgKiBJdCBpcyBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZWQgd2hlbiB2ZXJ0aWNlcyBhcmUgc2V0IGFuZCBjb25zdGFudGx5IHVwZGF0ZWQgYnkgYEJvZHkudXBkYXRlYCBkdXJpbmcgc2ltdWxhdGlvbi5cbiAgICAgKiBcbiAgICAgKiBAcHJvcGVydHkgYm91bmRzXG4gICAgICogQHR5cGUgYm91bmRzXG4gICAgICovXG5cbn0pKCk7XG5cblxuLyoqKi8gfSksXG4vKiA1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qKlxuKiBUaGUgYE1hdHRlci5FdmVudHNgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIHRvIGZpcmUgYW5kIGxpc3RlbiB0byBldmVudHMgb24gb3RoZXIgb2JqZWN0cy5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIEV2ZW50c1xuKi9cblxudmFyIEV2ZW50cyA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50cztcblxudmFyIENvbW1vbiA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZXMgYSBjYWxsYmFjayBmdW5jdGlvbiB0byB0aGUgZ2l2ZW4gb2JqZWN0J3MgYGV2ZW50TmFtZWAuXG4gICAgICogQG1ldGhvZCBvblxuICAgICAqIEBwYXJhbSB7fSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lc1xuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgRXZlbnRzLm9uID0gZnVuY3Rpb24ob2JqZWN0LCBldmVudE5hbWVzLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgbmFtZXMgPSBldmVudE5hbWVzLnNwbGl0KCcgJyksXG4gICAgICAgICAgICBuYW1lO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIG5hbWUgPSBuYW1lc1tpXTtcbiAgICAgICAgICAgIG9iamVjdC5ldmVudHMgPSBvYmplY3QuZXZlbnRzIHx8IHt9O1xuICAgICAgICAgICAgb2JqZWN0LmV2ZW50c1tuYW1lXSA9IG9iamVjdC5ldmVudHNbbmFtZV0gfHwgW107XG4gICAgICAgICAgICBvYmplY3QuZXZlbnRzW25hbWVdLnB1c2goY2FsbGJhY2spO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBnaXZlbiBldmVudCBjYWxsYmFjay4gSWYgbm8gY2FsbGJhY2ssIGNsZWFycyBhbGwgY2FsbGJhY2tzIGluIGBldmVudE5hbWVzYC4gSWYgbm8gYGV2ZW50TmFtZXNgLCBjbGVhcnMgYWxsIGV2ZW50cy5cbiAgICAgKiBAbWV0aG9kIG9mZlxuICAgICAqIEBwYXJhbSB7fSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZXZlbnROYW1lc1xuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgRXZlbnRzLm9mZiA9IGZ1bmN0aW9uKG9iamVjdCwgZXZlbnROYW1lcywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKCFldmVudE5hbWVzKSB7XG4gICAgICAgICAgICBvYmplY3QuZXZlbnRzID0ge307XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBoYW5kbGUgRXZlbnRzLm9mZihvYmplY3QsIGNhbGxiYWNrKVxuICAgICAgICBpZiAodHlwZW9mIGV2ZW50TmFtZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gZXZlbnROYW1lcztcbiAgICAgICAgICAgIGV2ZW50TmFtZXMgPSBDb21tb24ua2V5cyhvYmplY3QuZXZlbnRzKS5qb2luKCcgJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbmFtZXMgPSBldmVudE5hbWVzLnNwbGl0KCcgJyk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IG9iamVjdC5ldmVudHNbbmFtZXNbaV1dLFxuICAgICAgICAgICAgICAgIG5ld0NhbGxiYWNrcyA9IFtdO1xuXG4gICAgICAgICAgICBpZiAoY2FsbGJhY2sgJiYgY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjYWxsYmFja3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrc1tqXSAhPT0gY2FsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdDYWxsYmFja3MucHVzaChjYWxsYmFja3Nbal0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgb2JqZWN0LmV2ZW50c1tuYW1lc1tpXV0gPSBuZXdDYWxsYmFja3M7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRmlyZXMgYWxsIHRoZSBjYWxsYmFja3Mgc3Vic2NyaWJlZCB0byB0aGUgZ2l2ZW4gb2JqZWN0J3MgYGV2ZW50TmFtZWAsIGluIHRoZSBvcmRlciB0aGV5IHN1YnNjcmliZWQsIGlmIGFueS5cbiAgICAgKiBAbWV0aG9kIHRyaWdnZXJcbiAgICAgKiBAcGFyYW0ge30gb2JqZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZXNcbiAgICAgKiBAcGFyYW0ge30gZXZlbnRcbiAgICAgKi9cbiAgICBFdmVudHMudHJpZ2dlciA9IGZ1bmN0aW9uKG9iamVjdCwgZXZlbnROYW1lcywgZXZlbnQpIHtcbiAgICAgICAgdmFyIG5hbWVzLFxuICAgICAgICAgICAgbmFtZSxcbiAgICAgICAgICAgIGNhbGxiYWNrcyxcbiAgICAgICAgICAgIGV2ZW50Q2xvbmU7XG5cbiAgICAgICAgdmFyIGV2ZW50cyA9IG9iamVjdC5ldmVudHM7XG4gICAgICAgIFxuICAgICAgICBpZiAoZXZlbnRzICYmIENvbW1vbi5rZXlzKGV2ZW50cykubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKCFldmVudClcbiAgICAgICAgICAgICAgICBldmVudCA9IHt9O1xuXG4gICAgICAgICAgICBuYW1lcyA9IGV2ZW50TmFtZXMuc3BsaXQoJyAnKTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIG5hbWUgPSBuYW1lc1tpXTtcbiAgICAgICAgICAgICAgICBjYWxsYmFja3MgPSBldmVudHNbbmFtZV07XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2tzKSB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50Q2xvbmUgPSBDb21tb24uY2xvbmUoZXZlbnQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRDbG9uZS5uYW1lID0gbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRDbG9uZS5zb3VyY2UgPSBvYmplY3Q7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBjYWxsYmFja3MubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrc1tqXS5hcHBseShvYmplY3QsIFtldmVudENsb25lXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG59KSgpO1xuXG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKipcbiogQSBjb21wb3NpdGUgaXMgYSBjb2xsZWN0aW9uIG9mIGBNYXR0ZXIuQm9keWAsIGBNYXR0ZXIuQ29uc3RyYWludGAgYW5kIG90aGVyIGBNYXR0ZXIuQ29tcG9zaXRlYCBvYmplY3RzLlxuKlxuKiBUaGV5IGFyZSBhIGNvbnRhaW5lciB0aGF0IGNhbiByZXByZXNlbnQgY29tcGxleCBvYmplY3RzIG1hZGUgb2YgbXVsdGlwbGUgcGFydHMsIGV2ZW4gaWYgdGhleSBhcmUgbm90IHBoeXNpY2FsbHkgY29ubmVjdGVkLlxuKiBBIGNvbXBvc2l0ZSBjb3VsZCBjb250YWluIGFueXRoaW5nIGZyb20gYSBzaW5nbGUgYm9keSBhbGwgdGhlIHdheSB1cCB0byBhIHdob2xlIHdvcmxkLlxuKiBcbiogV2hlbiBtYWtpbmcgYW55IGNoYW5nZXMgdG8gY29tcG9zaXRlcywgdXNlIHRoZSBpbmNsdWRlZCBmdW5jdGlvbnMgcmF0aGVyIHRoYW4gY2hhbmdpbmcgdGhlaXIgcHJvcGVydGllcyBkaXJlY3RseS5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIENvbXBvc2l0ZVxuKi9cblxudmFyIENvbXBvc2l0ZSA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvc2l0ZTtcblxudmFyIEV2ZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG52YXIgQ29tbW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBCb3VuZHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xudmFyIEJvZHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGNvbXBvc2l0ZS4gVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyBhbnkgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogU2VlIHRoZSBwcm9wZXJpdGVzIHNlY3Rpb24gYmVsb3cgZm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgeW91IGNhbiBwYXNzIHZpYSB0aGUgYG9wdGlvbnNgIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7fSBbb3B0aW9uc11cbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IEEgbmV3IGNvbXBvc2l0ZVxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBDb21tb24uZXh0ZW5kKHsgXG4gICAgICAgICAgICBpZDogQ29tbW9uLm5leHRJZCgpLFxuICAgICAgICAgICAgdHlwZTogJ2NvbXBvc2l0ZScsXG4gICAgICAgICAgICBwYXJlbnQ6IG51bGwsXG4gICAgICAgICAgICBpc01vZGlmaWVkOiBmYWxzZSxcbiAgICAgICAgICAgIGJvZGllczogW10sIFxuICAgICAgICAgICAgY29uc3RyYWludHM6IFtdLCBcbiAgICAgICAgICAgIGNvbXBvc2l0ZXM6IFtdLFxuICAgICAgICAgICAgbGFiZWw6ICdDb21wb3NpdGUnLFxuICAgICAgICAgICAgcGx1Z2luOiB7fSxcbiAgICAgICAgICAgIGNhY2hlOiB7XG4gICAgICAgICAgICAgICAgYWxsQm9kaWVzOiBudWxsLFxuICAgICAgICAgICAgICAgIGFsbENvbnN0cmFpbnRzOiBudWxsLFxuICAgICAgICAgICAgICAgIGFsbENvbXBvc2l0ZXM6IG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgb3B0aW9ucyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNvbXBvc2l0ZSdzIGBpc01vZGlmaWVkYCBmbGFnLiBcbiAgICAgKiBJZiBgdXBkYXRlUGFyZW50c2AgaXMgdHJ1ZSwgYWxsIHBhcmVudHMgd2lsbCBiZSBzZXQgKGRlZmF1bHQ6IGZhbHNlKS5cbiAgICAgKiBJZiBgdXBkYXRlQ2hpbGRyZW5gIGlzIHRydWUsIGFsbCBjaGlsZHJlbiB3aWxsIGJlIHNldCAoZGVmYXVsdDogZmFsc2UpLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBzZXRNb2RpZmllZFxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGlzTW9kaWZpZWRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFt1cGRhdGVQYXJlbnRzPWZhbHNlXVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3VwZGF0ZUNoaWxkcmVuPWZhbHNlXVxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZCA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwgaXNNb2RpZmllZCwgdXBkYXRlUGFyZW50cywgdXBkYXRlQ2hpbGRyZW4pIHtcbiAgICAgICAgY29tcG9zaXRlLmlzTW9kaWZpZWQgPSBpc01vZGlmaWVkO1xuXG4gICAgICAgIGlmIChpc01vZGlmaWVkICYmIGNvbXBvc2l0ZS5jYWNoZSkge1xuICAgICAgICAgICAgY29tcG9zaXRlLmNhY2hlLmFsbEJvZGllcyA9IG51bGw7XG4gICAgICAgICAgICBjb21wb3NpdGUuY2FjaGUuYWxsQ29uc3RyYWludHMgPSBudWxsO1xuICAgICAgICAgICAgY29tcG9zaXRlLmNhY2hlLmFsbENvbXBvc2l0ZXMgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHVwZGF0ZVBhcmVudHMgJiYgY29tcG9zaXRlLnBhcmVudCkge1xuICAgICAgICAgICAgQ29tcG9zaXRlLnNldE1vZGlmaWVkKGNvbXBvc2l0ZS5wYXJlbnQsIGlzTW9kaWZpZWQsIHVwZGF0ZVBhcmVudHMsIHVwZGF0ZUNoaWxkcmVuKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1cGRhdGVDaGlsZHJlbikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21wb3NpdGUuY29tcG9zaXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBjaGlsZENvbXBvc2l0ZSA9IGNvbXBvc2l0ZS5jb21wb3NpdGVzW2ldO1xuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZChjaGlsZENvbXBvc2l0ZSwgaXNNb2RpZmllZCwgdXBkYXRlUGFyZW50cywgdXBkYXRlQ2hpbGRyZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdlbmVyaWMgc2luZ2xlIG9yIG11bHRpLWFkZCBmdW5jdGlvbi4gQWRkcyBhIHNpbmdsZSBvciBhbiBhcnJheSBvZiBib2R5KHMpLCBjb25zdHJhaW50KHMpIG9yIGNvbXBvc2l0ZShzKSB0byB0aGUgZ2l2ZW4gY29tcG9zaXRlLlxuICAgICAqIFRyaWdnZXJzIGBiZWZvcmVBZGRgIGFuZCBgYWZ0ZXJBZGRgIGV2ZW50cyBvbiB0aGUgYGNvbXBvc2l0ZWAuXG4gICAgICogQG1ldGhvZCBhZGRcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtvYmplY3R8YXJyYXl9IG9iamVjdCBBIHNpbmdsZSBvciBhbiBhcnJheSBvZiBib2R5KHMpLCBjb25zdHJhaW50KHMpIG9yIGNvbXBvc2l0ZShzKVxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gVGhlIG9yaWdpbmFsIGNvbXBvc2l0ZSB3aXRoIHRoZSBvYmplY3RzIGFkZGVkXG4gICAgICovXG4gICAgQ29tcG9zaXRlLmFkZCA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwgb2JqZWN0KSB7XG4gICAgICAgIHZhciBvYmplY3RzID0gW10uY29uY2F0KG9iamVjdCk7XG5cbiAgICAgICAgRXZlbnRzLnRyaWdnZXIoY29tcG9zaXRlLCAnYmVmb3JlQWRkJywgeyBvYmplY3Q6IG9iamVjdCB9KTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBvYmogPSBvYmplY3RzW2ldO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKG9iai50eXBlKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ2JvZHknOlxuICAgICAgICAgICAgICAgIC8vIHNraXAgYWRkaW5nIGNvbXBvdW5kIHBhcnRzXG4gICAgICAgICAgICAgICAgaWYgKG9iai5wYXJlbnQgIT09IG9iaikge1xuICAgICAgICAgICAgICAgICAgICBDb21tb24ud2FybignQ29tcG9zaXRlLmFkZDogc2tpcHBlZCBhZGRpbmcgYSBjb21wb3VuZCBib2R5IHBhcnQgKHlvdSBtdXN0IGFkZCBpdHMgcGFyZW50IGluc3RlYWQpJyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5hZGRCb2R5KGNvbXBvc2l0ZSwgb2JqKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbnN0cmFpbnQnOlxuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5hZGRDb25zdHJhaW50KGNvbXBvc2l0ZSwgb2JqKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbXBvc2l0ZSc6XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLmFkZENvbXBvc2l0ZShjb21wb3NpdGUsIG9iaik7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb3VzZUNvbnN0cmFpbnQnOlxuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5hZGRDb25zdHJhaW50KGNvbXBvc2l0ZSwgb2JqLmNvbnN0cmFpbnQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBFdmVudHMudHJpZ2dlcihjb21wb3NpdGUsICdhZnRlckFkZCcsIHsgb2JqZWN0OiBvYmplY3QgfSk7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2VuZXJpYyByZW1vdmUgZnVuY3Rpb24uIFJlbW92ZXMgb25lIG9yIG1hbnkgYm9keShzKSwgY29uc3RyYWludChzKSBvciBhIGNvbXBvc2l0ZShzKSB0byB0aGUgZ2l2ZW4gY29tcG9zaXRlLlxuICAgICAqIE9wdGlvbmFsbHkgc2VhcmNoaW5nIGl0cyBjaGlsZHJlbiByZWN1cnNpdmVseS5cbiAgICAgKiBUcmlnZ2VycyBgYmVmb3JlUmVtb3ZlYCBhbmQgYGFmdGVyUmVtb3ZlYCBldmVudHMgb24gdGhlIGBjb21wb3NpdGVgLlxuICAgICAqIEBtZXRob2QgcmVtb3ZlXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fGFycmF5fSBvYmplY3RcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtkZWVwPWZhbHNlXVxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gVGhlIG9yaWdpbmFsIGNvbXBvc2l0ZSB3aXRoIHRoZSBvYmplY3RzIHJlbW92ZWRcbiAgICAgKi9cbiAgICBDb21wb3NpdGUucmVtb3ZlID0gZnVuY3Rpb24oY29tcG9zaXRlLCBvYmplY3QsIGRlZXApIHtcbiAgICAgICAgdmFyIG9iamVjdHMgPSBbXS5jb25jYXQob2JqZWN0KTtcblxuICAgICAgICBFdmVudHMudHJpZ2dlcihjb21wb3NpdGUsICdiZWZvcmVSZW1vdmUnLCB7IG9iamVjdDogb2JqZWN0IH0pO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIG9iaiA9IG9iamVjdHNbaV07XG5cbiAgICAgICAgICAgIHN3aXRjaCAob2JqLnR5cGUpIHtcblxuICAgICAgICAgICAgY2FzZSAnYm9keSc6XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLnJlbW92ZUJvZHkoY29tcG9zaXRlLCBvYmosIGRlZXApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY29uc3RyYWludCc6XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLnJlbW92ZUNvbnN0cmFpbnQoY29tcG9zaXRlLCBvYmosIGRlZXApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY29tcG9zaXRlJzpcbiAgICAgICAgICAgICAgICBDb21wb3NpdGUucmVtb3ZlQ29tcG9zaXRlKGNvbXBvc2l0ZSwgb2JqLCBkZWVwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vdXNlQ29uc3RyYWludCc6XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLnJlbW92ZUNvbnN0cmFpbnQoY29tcG9zaXRlLCBvYmouY29uc3RyYWludCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKGNvbXBvc2l0ZSwgJ2FmdGVyUmVtb3ZlJywgeyBvYmplY3Q6IG9iamVjdCB9KTtcblxuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgY29tcG9zaXRlIHRvIHRoZSBnaXZlbiBjb21wb3NpdGUuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGFkZENvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVBXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZUJcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBvcmlnaW5hbCBjb21wb3NpdGVBIHdpdGggdGhlIG9iamVjdHMgZnJvbSBjb21wb3NpdGVCIGFkZGVkXG4gICAgICovXG4gICAgQ29tcG9zaXRlLmFkZENvbXBvc2l0ZSA9IGZ1bmN0aW9uKGNvbXBvc2l0ZUEsIGNvbXBvc2l0ZUIpIHtcbiAgICAgICAgY29tcG9zaXRlQS5jb21wb3NpdGVzLnB1c2goY29tcG9zaXRlQik7XG4gICAgICAgIGNvbXBvc2l0ZUIucGFyZW50ID0gY29tcG9zaXRlQTtcbiAgICAgICAgQ29tcG9zaXRlLnNldE1vZGlmaWVkKGNvbXBvc2l0ZUEsIHRydWUsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZUE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBjb21wb3NpdGUgZnJvbSB0aGUgZ2l2ZW4gY29tcG9zaXRlLCBhbmQgb3B0aW9uYWxseSBzZWFyY2hpbmcgaXRzIGNoaWxkcmVuIHJlY3Vyc2l2ZWx5LlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCByZW1vdmVDb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlQVxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVCXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZGVlcD1mYWxzZV1cbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBvcmlnaW5hbCBjb21wb3NpdGVBIHdpdGggdGhlIGNvbXBvc2l0ZSByZW1vdmVkXG4gICAgICovXG4gICAgQ29tcG9zaXRlLnJlbW92ZUNvbXBvc2l0ZSA9IGZ1bmN0aW9uKGNvbXBvc2l0ZUEsIGNvbXBvc2l0ZUIsIGRlZXApIHtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gQ29tbW9uLmluZGV4T2YoY29tcG9zaXRlQS5jb21wb3NpdGVzLCBjb21wb3NpdGVCKTtcbiAgICAgICAgaWYgKHBvc2l0aW9uICE9PSAtMSkge1xuICAgICAgICAgICAgQ29tcG9zaXRlLnJlbW92ZUNvbXBvc2l0ZUF0KGNvbXBvc2l0ZUEsIHBvc2l0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWVwKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBvc2l0ZUEuY29tcG9zaXRlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLnJlbW92ZUNvbXBvc2l0ZShjb21wb3NpdGVBLmNvbXBvc2l0ZXNbaV0sIGNvbXBvc2l0ZUIsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZUE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBjb21wb3NpdGUgZnJvbSB0aGUgZ2l2ZW4gY29tcG9zaXRlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCByZW1vdmVDb21wb3NpdGVBdFxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcG9zaXRpb25cbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBvcmlnaW5hbCBjb21wb3NpdGUgd2l0aCB0aGUgY29tcG9zaXRlIHJlbW92ZWRcbiAgICAgKi9cbiAgICBDb21wb3NpdGUucmVtb3ZlQ29tcG9zaXRlQXQgPSBmdW5jdGlvbihjb21wb3NpdGUsIHBvc2l0aW9uKSB7XG4gICAgICAgIGNvbXBvc2l0ZS5jb21wb3NpdGVzLnNwbGljZShwb3NpdGlvbiwgMSk7XG4gICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZChjb21wb3NpdGUsIHRydWUsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWRkcyBhIGJvZHkgdG8gdGhlIGdpdmVuIGNvbXBvc2l0ZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgYWRkQm9keVxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBvcmlnaW5hbCBjb21wb3NpdGUgd2l0aCB0aGUgYm9keSBhZGRlZFxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5hZGRCb2R5ID0gZnVuY3Rpb24oY29tcG9zaXRlLCBib2R5KSB7XG4gICAgICAgIGNvbXBvc2l0ZS5ib2RpZXMucHVzaChib2R5KTtcbiAgICAgICAgQ29tcG9zaXRlLnNldE1vZGlmaWVkKGNvbXBvc2l0ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgYm9keSBmcm9tIHRoZSBnaXZlbiBjb21wb3NpdGUsIGFuZCBvcHRpb25hbGx5IHNlYXJjaGluZyBpdHMgY2hpbGRyZW4gcmVjdXJzaXZlbHkuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIHJlbW92ZUJvZHlcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZGVlcD1mYWxzZV1cbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IFRoZSBvcmlnaW5hbCBjb21wb3NpdGUgd2l0aCB0aGUgYm9keSByZW1vdmVkXG4gICAgICovXG4gICAgQ29tcG9zaXRlLnJlbW92ZUJvZHkgPSBmdW5jdGlvbihjb21wb3NpdGUsIGJvZHksIGRlZXApIHtcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gQ29tbW9uLmluZGV4T2YoY29tcG9zaXRlLmJvZGllcywgYm9keSk7XG4gICAgICAgIGlmIChwb3NpdGlvbiAhPT0gLTEpIHtcbiAgICAgICAgICAgIENvbXBvc2l0ZS5yZW1vdmVCb2R5QXQoY29tcG9zaXRlLCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVlcCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21wb3NpdGUuY29tcG9zaXRlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLnJlbW92ZUJvZHkoY29tcG9zaXRlLmNvbXBvc2l0ZXNbaV0sIGJvZHksIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGJvZHkgZnJvbSB0aGUgZ2l2ZW4gY29tcG9zaXRlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCByZW1vdmVCb2R5QXRcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBvc2l0aW9uXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBUaGUgb3JpZ2luYWwgY29tcG9zaXRlIHdpdGggdGhlIGJvZHkgcmVtb3ZlZFxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5yZW1vdmVCb2R5QXQgPSBmdW5jdGlvbihjb21wb3NpdGUsIHBvc2l0aW9uKSB7XG4gICAgICAgIGNvbXBvc2l0ZS5ib2RpZXMuc3BsaWNlKHBvc2l0aW9uLCAxKTtcbiAgICAgICAgQ29tcG9zaXRlLnNldE1vZGlmaWVkKGNvbXBvc2l0ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UpO1xuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgY29uc3RyYWludCB0byB0aGUgZ2l2ZW4gY29tcG9zaXRlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBhZGRDb25zdHJhaW50XG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7Y29uc3RyYWludH0gY29uc3RyYWludFxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gVGhlIG9yaWdpbmFsIGNvbXBvc2l0ZSB3aXRoIHRoZSBjb25zdHJhaW50IGFkZGVkXG4gICAgICovXG4gICAgQ29tcG9zaXRlLmFkZENvbnN0cmFpbnQgPSBmdW5jdGlvbihjb21wb3NpdGUsIGNvbnN0cmFpbnQpIHtcbiAgICAgICAgY29tcG9zaXRlLmNvbnN0cmFpbnRzLnB1c2goY29uc3RyYWludCk7XG4gICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZChjb21wb3NpdGUsIHRydWUsIHRydWUsIGZhbHNlKTtcbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGNvbnN0cmFpbnQgZnJvbSB0aGUgZ2l2ZW4gY29tcG9zaXRlLCBhbmQgb3B0aW9uYWxseSBzZWFyY2hpbmcgaXRzIGNoaWxkcmVuIHJlY3Vyc2l2ZWx5LlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCByZW1vdmVDb25zdHJhaW50XG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7Y29uc3RyYWludH0gY29uc3RyYWludFxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2RlZXA9ZmFsc2VdXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBUaGUgb3JpZ2luYWwgY29tcG9zaXRlIHdpdGggdGhlIGNvbnN0cmFpbnQgcmVtb3ZlZFxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5yZW1vdmVDb25zdHJhaW50ID0gZnVuY3Rpb24oY29tcG9zaXRlLCBjb25zdHJhaW50LCBkZWVwKSB7XG4gICAgICAgIHZhciBwb3NpdGlvbiA9IENvbW1vbi5pbmRleE9mKGNvbXBvc2l0ZS5jb25zdHJhaW50cywgY29uc3RyYWludCk7XG4gICAgICAgIGlmIChwb3NpdGlvbiAhPT0gLTEpIHtcbiAgICAgICAgICAgIENvbXBvc2l0ZS5yZW1vdmVDb25zdHJhaW50QXQoY29tcG9zaXRlLCBwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVlcCkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21wb3NpdGUuY29tcG9zaXRlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLnJlbW92ZUNvbnN0cmFpbnQoY29tcG9zaXRlLmNvbXBvc2l0ZXNbaV0sIGNvbnN0cmFpbnQsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGJvZHkgZnJvbSB0aGUgZ2l2ZW4gY29tcG9zaXRlLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCByZW1vdmVDb25zdHJhaW50QXRcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHBvc2l0aW9uXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBUaGUgb3JpZ2luYWwgY29tcG9zaXRlIHdpdGggdGhlIGNvbnN0cmFpbnQgcmVtb3ZlZFxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5yZW1vdmVDb25zdHJhaW50QXQgPSBmdW5jdGlvbihjb21wb3NpdGUsIHBvc2l0aW9uKSB7XG4gICAgICAgIGNvbXBvc2l0ZS5jb25zdHJhaW50cy5zcGxpY2UocG9zaXRpb24sIDEpO1xuICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY29tcG9zaXRlLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGJvZGllcywgY29uc3RyYWludHMgYW5kIGNvbXBvc2l0ZXMgZnJvbSB0aGUgZ2l2ZW4gY29tcG9zaXRlLlxuICAgICAqIE9wdGlvbmFsbHkgY2xlYXJpbmcgaXRzIGNoaWxkcmVuIHJlY3Vyc2l2ZWx5LlxuICAgICAqIEBtZXRob2QgY2xlYXJcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBrZWVwU3RhdGljXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZGVlcD1mYWxzZV1cbiAgICAgKi9cbiAgICBDb21wb3NpdGUuY2xlYXIgPSBmdW5jdGlvbihjb21wb3NpdGUsIGtlZXBTdGF0aWMsIGRlZXApIHtcbiAgICAgICAgaWYgKGRlZXApIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY29tcG9zaXRlLmNvbXBvc2l0ZXMubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5jbGVhcihjb21wb3NpdGUuY29tcG9zaXRlc1tpXSwga2VlcFN0YXRpYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChrZWVwU3RhdGljKSB7XG4gICAgICAgICAgICBjb21wb3NpdGUuYm9kaWVzID0gY29tcG9zaXRlLmJvZGllcy5maWx0ZXIoZnVuY3Rpb24oYm9keSkgeyByZXR1cm4gYm9keS5pc1N0YXRpYzsgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb21wb3NpdGUuYm9kaWVzLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb21wb3NpdGUuY29uc3RyYWludHMubGVuZ3RoID0gMDtcbiAgICAgICAgY29tcG9zaXRlLmNvbXBvc2l0ZXMubGVuZ3RoID0gMDtcblxuICAgICAgICBDb21wb3NpdGUuc2V0TW9kaWZpZWQoY29tcG9zaXRlLCB0cnVlLCB0cnVlLCBmYWxzZSk7XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbGwgYm9kaWVzIGluIHRoZSBnaXZlbiBjb21wb3NpdGUsIGluY2x1ZGluZyBhbGwgYm9kaWVzIGluIGl0cyBjaGlsZHJlbiwgcmVjdXJzaXZlbHkuXG4gICAgICogQG1ldGhvZCBhbGxCb2RpZXNcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHJldHVybiB7Ym9keVtdfSBBbGwgdGhlIGJvZGllc1xuICAgICAqL1xuICAgIENvbXBvc2l0ZS5hbGxCb2RpZXMgPSBmdW5jdGlvbihjb21wb3NpdGUpIHtcbiAgICAgICAgaWYgKGNvbXBvc2l0ZS5jYWNoZSAmJiBjb21wb3NpdGUuY2FjaGUuYWxsQm9kaWVzKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcG9zaXRlLmNhY2hlLmFsbEJvZGllcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBib2RpZXMgPSBbXS5jb25jYXQoY29tcG9zaXRlLmJvZGllcyk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21wb3NpdGUuY29tcG9zaXRlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGJvZGllcyA9IGJvZGllcy5jb25jYXQoQ29tcG9zaXRlLmFsbEJvZGllcyhjb21wb3NpdGUuY29tcG9zaXRlc1tpXSkpO1xuXG4gICAgICAgIGlmIChjb21wb3NpdGUuY2FjaGUpIHtcbiAgICAgICAgICAgIGNvbXBvc2l0ZS5jYWNoZS5hbGxCb2RpZXMgPSBib2RpZXM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYm9kaWVzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFsbCBjb25zdHJhaW50cyBpbiB0aGUgZ2l2ZW4gY29tcG9zaXRlLCBpbmNsdWRpbmcgYWxsIGNvbnN0cmFpbnRzIGluIGl0cyBjaGlsZHJlbiwgcmVjdXJzaXZlbHkuXG4gICAgICogQG1ldGhvZCBhbGxDb25zdHJhaW50c1xuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcmV0dXJuIHtjb25zdHJhaW50W119IEFsbCB0aGUgY29uc3RyYWludHNcbiAgICAgKi9cbiAgICBDb21wb3NpdGUuYWxsQ29uc3RyYWludHMgPSBmdW5jdGlvbihjb21wb3NpdGUpIHtcbiAgICAgICAgaWYgKGNvbXBvc2l0ZS5jYWNoZSAmJiBjb21wb3NpdGUuY2FjaGUuYWxsQ29uc3RyYWludHMpIHtcbiAgICAgICAgICAgIHJldHVybiBjb21wb3NpdGUuY2FjaGUuYWxsQ29uc3RyYWludHM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY29uc3RyYWludHMgPSBbXS5jb25jYXQoY29tcG9zaXRlLmNvbnN0cmFpbnRzKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBvc2l0ZS5jb21wb3NpdGVzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgICAgY29uc3RyYWludHMgPSBjb25zdHJhaW50cy5jb25jYXQoQ29tcG9zaXRlLmFsbENvbnN0cmFpbnRzKGNvbXBvc2l0ZS5jb21wb3NpdGVzW2ldKSk7XG5cbiAgICAgICAgaWYgKGNvbXBvc2l0ZS5jYWNoZSkge1xuICAgICAgICAgICAgY29tcG9zaXRlLmNhY2hlLmFsbENvbnN0cmFpbnRzID0gY29uc3RyYWludHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29uc3RyYWludHM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYWxsIGNvbXBvc2l0ZXMgaW4gdGhlIGdpdmVuIGNvbXBvc2l0ZSwgaW5jbHVkaW5nIGFsbCBjb21wb3NpdGVzIGluIGl0cyBjaGlsZHJlbiwgcmVjdXJzaXZlbHkuXG4gICAgICogQG1ldGhvZCBhbGxDb21wb3NpdGVzXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZVtdfSBBbGwgdGhlIGNvbXBvc2l0ZXNcbiAgICAgKi9cbiAgICBDb21wb3NpdGUuYWxsQ29tcG9zaXRlcyA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSkge1xuICAgICAgICBpZiAoY29tcG9zaXRlLmNhY2hlICYmIGNvbXBvc2l0ZS5jYWNoZS5hbGxDb21wb3NpdGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gY29tcG9zaXRlLmNhY2hlLmFsbENvbXBvc2l0ZXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY29tcG9zaXRlcyA9IFtdLmNvbmNhdChjb21wb3NpdGUuY29tcG9zaXRlcyk7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21wb3NpdGUuY29tcG9zaXRlcy5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIGNvbXBvc2l0ZXMgPSBjb21wb3NpdGVzLmNvbmNhdChDb21wb3NpdGUuYWxsQ29tcG9zaXRlcyhjb21wb3NpdGUuY29tcG9zaXRlc1tpXSkpO1xuXG4gICAgICAgIGlmIChjb21wb3NpdGUuY2FjaGUpIHtcbiAgICAgICAgICAgIGNvbXBvc2l0ZS5jYWNoZS5hbGxDb21wb3NpdGVzID0gY29tcG9zaXRlcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb21wb3NpdGVzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZWFyY2hlcyB0aGUgY29tcG9zaXRlIHJlY3Vyc2l2ZWx5IGZvciBhbiBvYmplY3QgbWF0Y2hpbmcgdGhlIHR5cGUgYW5kIGlkIHN1cHBsaWVkLCBudWxsIGlmIG5vdCBmb3VuZC5cbiAgICAgKiBAbWV0aG9kIGdldFxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaWRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZVxuICAgICAqIEByZXR1cm4ge29iamVjdH0gVGhlIHJlcXVlc3RlZCBvYmplY3QsIGlmIGZvdW5kXG4gICAgICovXG4gICAgQ29tcG9zaXRlLmdldCA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwgaWQsIHR5cGUpIHtcbiAgICAgICAgdmFyIG9iamVjdHMsXG4gICAgICAgICAgICBvYmplY3Q7XG5cbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgIGNhc2UgJ2JvZHknOlxuICAgICAgICAgICAgb2JqZWN0cyA9IENvbXBvc2l0ZS5hbGxCb2RpZXMoY29tcG9zaXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdjb25zdHJhaW50JzpcbiAgICAgICAgICAgIG9iamVjdHMgPSBDb21wb3NpdGUuYWxsQ29uc3RyYWludHMoY29tcG9zaXRlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdjb21wb3NpdGUnOlxuICAgICAgICAgICAgb2JqZWN0cyA9IENvbXBvc2l0ZS5hbGxDb21wb3NpdGVzKGNvbXBvc2l0ZSkuY29uY2F0KGNvbXBvc2l0ZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb2JqZWN0cylcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgIG9iamVjdCA9IG9iamVjdHMuZmlsdGVyKGZ1bmN0aW9uKG9iamVjdCkgeyBcbiAgICAgICAgICAgIHJldHVybiBvYmplY3QuaWQudG9TdHJpbmcoKSA9PT0gaWQudG9TdHJpbmcoKTsgXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBvYmplY3QubGVuZ3RoID09PSAwID8gbnVsbCA6IG9iamVjdFswXTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTW92ZXMgdGhlIGdpdmVuIG9iamVjdChzKSBmcm9tIGNvbXBvc2l0ZUEgdG8gY29tcG9zaXRlQiAoZXF1YWwgdG8gYSByZW1vdmUgZm9sbG93ZWQgYnkgYW4gYWRkKS5cbiAgICAgKiBAbWV0aG9kIG1vdmVcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZUF9IGNvbXBvc2l0ZUFcbiAgICAgKiBAcGFyYW0ge29iamVjdFtdfSBvYmplY3RzXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGVCfSBjb21wb3NpdGVCXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBSZXR1cm5zIGNvbXBvc2l0ZUFcbiAgICAgKi9cbiAgICBDb21wb3NpdGUubW92ZSA9IGZ1bmN0aW9uKGNvbXBvc2l0ZUEsIG9iamVjdHMsIGNvbXBvc2l0ZUIpIHtcbiAgICAgICAgQ29tcG9zaXRlLnJlbW92ZShjb21wb3NpdGVBLCBvYmplY3RzKTtcbiAgICAgICAgQ29tcG9zaXRlLmFkZChjb21wb3NpdGVCLCBvYmplY3RzKTtcbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZUE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFzc2lnbnMgbmV3IGlkcyBmb3IgYWxsIG9iamVjdHMgaW4gdGhlIGNvbXBvc2l0ZSwgcmVjdXJzaXZlbHkuXG4gICAgICogQG1ldGhvZCByZWJhc2VcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBSZXR1cm5zIGNvbXBvc2l0ZVxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5yZWJhc2UgPSBmdW5jdGlvbihjb21wb3NpdGUpIHtcbiAgICAgICAgdmFyIG9iamVjdHMgPSBDb21wb3NpdGUuYWxsQm9kaWVzKGNvbXBvc2l0ZSlcbiAgICAgICAgICAgIC5jb25jYXQoQ29tcG9zaXRlLmFsbENvbnN0cmFpbnRzKGNvbXBvc2l0ZSkpXG4gICAgICAgICAgICAuY29uY2F0KENvbXBvc2l0ZS5hbGxDb21wb3NpdGVzKGNvbXBvc2l0ZSkpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgb2JqZWN0c1tpXS5pZCA9IENvbW1vbi5uZXh0SWQoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRyYW5zbGF0ZXMgYWxsIGNoaWxkcmVuIGluIHRoZSBjb21wb3NpdGUgYnkgYSBnaXZlbiB2ZWN0b3IgcmVsYXRpdmUgdG8gdGhlaXIgY3VycmVudCBwb3NpdGlvbnMsIFxuICAgICAqIHdpdGhvdXQgaW1wYXJ0aW5nIGFueSB2ZWxvY2l0eS5cbiAgICAgKiBAbWV0aG9kIHRyYW5zbGF0ZVxuICAgICAqIEBwYXJhbSB7Y29tcG9zaXRlfSBjb21wb3NpdGVcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gdHJhbnNsYXRpb25cbiAgICAgKiBAcGFyYW0ge2Jvb2x9IFtyZWN1cnNpdmU9dHJ1ZV1cbiAgICAgKi9cbiAgICBDb21wb3NpdGUudHJhbnNsYXRlID0gZnVuY3Rpb24oY29tcG9zaXRlLCB0cmFuc2xhdGlvbiwgcmVjdXJzaXZlKSB7XG4gICAgICAgIHZhciBib2RpZXMgPSByZWN1cnNpdmUgPyBDb21wb3NpdGUuYWxsQm9kaWVzKGNvbXBvc2l0ZSkgOiBjb21wb3NpdGUuYm9kaWVzO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBCb2R5LnRyYW5zbGF0ZShib2RpZXNbaV0sIHRyYW5zbGF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZXMgYWxsIGNoaWxkcmVuIGluIHRoZSBjb21wb3NpdGUgYnkgYSBnaXZlbiBhbmdsZSBhYm91dCB0aGUgZ2l2ZW4gcG9pbnQsIHdpdGhvdXQgaW1wYXJ0aW5nIGFueSBhbmd1bGFyIHZlbG9jaXR5LlxuICAgICAqIEBtZXRob2Qgcm90YXRlXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3RhdGlvblxuICAgICAqIEBwYXJhbSB7dmVjdG9yfSBwb2ludFxuICAgICAqIEBwYXJhbSB7Ym9vbH0gW3JlY3Vyc2l2ZT10cnVlXVxuICAgICAqL1xuICAgIENvbXBvc2l0ZS5yb3RhdGUgPSBmdW5jdGlvbihjb21wb3NpdGUsIHJvdGF0aW9uLCBwb2ludCwgcmVjdXJzaXZlKSB7XG4gICAgICAgIHZhciBjb3MgPSBNYXRoLmNvcyhyb3RhdGlvbiksXG4gICAgICAgICAgICBzaW4gPSBNYXRoLnNpbihyb3RhdGlvbiksXG4gICAgICAgICAgICBib2RpZXMgPSByZWN1cnNpdmUgPyBDb21wb3NpdGUuYWxsQm9kaWVzKGNvbXBvc2l0ZSkgOiBjb21wb3NpdGUuYm9kaWVzO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXSxcbiAgICAgICAgICAgICAgICBkeCA9IGJvZHkucG9zaXRpb24ueCAtIHBvaW50LngsXG4gICAgICAgICAgICAgICAgZHkgPSBib2R5LnBvc2l0aW9uLnkgLSBwb2ludC55O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgQm9keS5zZXRQb3NpdGlvbihib2R5LCB7XG4gICAgICAgICAgICAgICAgeDogcG9pbnQueCArIChkeCAqIGNvcyAtIGR5ICogc2luKSxcbiAgICAgICAgICAgICAgICB5OiBwb2ludC55ICsgKGR4ICogc2luICsgZHkgKiBjb3MpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgQm9keS5yb3RhdGUoYm9keSwgcm90YXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbXBvc2l0ZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU2NhbGVzIGFsbCBjaGlsZHJlbiBpbiB0aGUgY29tcG9zaXRlLCBpbmNsdWRpbmcgdXBkYXRpbmcgcGh5c2ljYWwgcHJvcGVydGllcyAobWFzcywgYXJlYSwgYXhlcywgaW5lcnRpYSksIGZyb20gYSB3b3JsZC1zcGFjZSBwb2ludC5cbiAgICAgKiBAbWV0aG9kIHNjYWxlXG4gICAgICogQHBhcmFtIHtjb21wb3NpdGV9IGNvbXBvc2l0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzY2FsZVhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGVZXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvaW50XG4gICAgICogQHBhcmFtIHtib29sfSBbcmVjdXJzaXZlPXRydWVdXG4gICAgICovXG4gICAgQ29tcG9zaXRlLnNjYWxlID0gZnVuY3Rpb24oY29tcG9zaXRlLCBzY2FsZVgsIHNjYWxlWSwgcG9pbnQsIHJlY3Vyc2l2ZSkge1xuICAgICAgICB2YXIgYm9kaWVzID0gcmVjdXJzaXZlID8gQ29tcG9zaXRlLmFsbEJvZGllcyhjb21wb3NpdGUpIDogY29tcG9zaXRlLmJvZGllcztcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV0sXG4gICAgICAgICAgICAgICAgZHggPSBib2R5LnBvc2l0aW9uLnggLSBwb2ludC54LFxuICAgICAgICAgICAgICAgIGR5ID0gYm9keS5wb3NpdGlvbi55IC0gcG9pbnQueTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIEJvZHkuc2V0UG9zaXRpb24oYm9keSwge1xuICAgICAgICAgICAgICAgIHg6IHBvaW50LnggKyBkeCAqIHNjYWxlWCxcbiAgICAgICAgICAgICAgICB5OiBwb2ludC55ICsgZHkgKiBzY2FsZVlcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBCb2R5LnNjYWxlKGJvZHksIHNjYWxlWCwgc2NhbGVZKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHVuaW9uIG9mIHRoZSBib3VuZHMgb2YgYWxsIG9mIHRoZSBjb21wb3NpdGUncyBib2RpZXMuXG4gICAgICogQG1ldGhvZCBib3VuZHNcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlIFRoZSBjb21wb3NpdGUuXG4gICAgICogQHJldHVybnMge2JvdW5kc30gVGhlIGNvbXBvc2l0ZSBib3VuZHMuXG4gICAgICovXG4gICAgQ29tcG9zaXRlLmJvdW5kcyA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSkge1xuICAgICAgICB2YXIgYm9kaWVzID0gQ29tcG9zaXRlLmFsbEJvZGllcyhjb21wb3NpdGUpLFxuICAgICAgICAgICAgdmVydGljZXMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV07XG4gICAgICAgICAgICB2ZXJ0aWNlcy5wdXNoKGJvZHkuYm91bmRzLm1pbiwgYm9keS5ib3VuZHMubWF4KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBCb3VuZHMuY3JlYXRlKHZlcnRpY2VzKTtcbiAgICB9O1xuXG4gICAgLypcbiAgICAqXG4gICAgKiAgRXZlbnRzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgd2hlbiBhIGNhbGwgdG8gYENvbXBvc2l0ZS5hZGRgIGlzIG1hZGUsIGJlZm9yZSBvYmplY3RzIGhhdmUgYmVlbiBhZGRlZC5cbiAgICAqXG4gICAgKiBAZXZlbnQgYmVmb3JlQWRkXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge30gZXZlbnQub2JqZWN0IFRoZSBvYmplY3QocykgdG8gYmUgYWRkZWQgKG1heSBiZSBhIHNpbmdsZSBib2R5LCBjb25zdHJhaW50LCBjb21wb3NpdGUgb3IgYSBtaXhlZCBhcnJheSBvZiB0aGVzZSlcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCB3aGVuIGEgY2FsbCB0byBgQ29tcG9zaXRlLmFkZGAgaXMgbWFkZSwgYWZ0ZXIgb2JqZWN0cyBoYXZlIGJlZW4gYWRkZWQuXG4gICAgKlxuICAgICogQGV2ZW50IGFmdGVyQWRkXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge30gZXZlbnQub2JqZWN0IFRoZSBvYmplY3QocykgdGhhdCBoYXZlIGJlZW4gYWRkZWQgKG1heSBiZSBhIHNpbmdsZSBib2R5LCBjb25zdHJhaW50LCBjb21wb3NpdGUgb3IgYSBtaXhlZCBhcnJheSBvZiB0aGVzZSlcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCB3aGVuIGEgY2FsbCB0byBgQ29tcG9zaXRlLnJlbW92ZWAgaXMgbWFkZSwgYmVmb3JlIG9iamVjdHMgaGF2ZSBiZWVuIHJlbW92ZWQuXG4gICAgKlxuICAgICogQGV2ZW50IGJlZm9yZVJlbW92ZVxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm9iamVjdCBUaGUgb2JqZWN0KHMpIHRvIGJlIHJlbW92ZWQgKG1heSBiZSBhIHNpbmdsZSBib2R5LCBjb25zdHJhaW50LCBjb21wb3NpdGUgb3IgYSBtaXhlZCBhcnJheSBvZiB0aGVzZSlcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCB3aGVuIGEgY2FsbCB0byBgQ29tcG9zaXRlLnJlbW92ZWAgaXMgbWFkZSwgYWZ0ZXIgb2JqZWN0cyBoYXZlIGJlZW4gcmVtb3ZlZC5cbiAgICAqXG4gICAgKiBAZXZlbnQgYWZ0ZXJSZW1vdmVcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7fSBldmVudC5vYmplY3QgVGhlIG9iamVjdChzKSB0aGF0IGhhdmUgYmVlbiByZW1vdmVkIChtYXkgYmUgYSBzaW5nbGUgYm9keSwgY29uc3RyYWludCwgY29tcG9zaXRlIG9yIGEgbWl4ZWQgYXJyYXkgb2YgdGhlc2UpXG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qXG4gICAgKlxuICAgICogIFByb3BlcnRpZXMgRG9jdW1lbnRhdGlvblxuICAgICpcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gaW50ZWdlciBgTnVtYmVyYCB1bmlxdWVseSBpZGVudGlmeWluZyBudW1iZXIgZ2VuZXJhdGVkIGluIGBDb21wb3NpdGUuY3JlYXRlYCBieSBgQ29tbW9uLm5leHRJZGAuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgaWRcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYFN0cmluZ2AgZGVub3RpbmcgdGhlIHR5cGUgb2Ygb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHR5cGVcbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKiBAZGVmYXVsdCBcImNvbXBvc2l0ZVwiXG4gICAgICogQHJlYWRPbmx5XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBhcmJpdHJhcnkgYFN0cmluZ2AgbmFtZSB0byBoZWxwIHRoZSB1c2VyIGlkZW50aWZ5IGFuZCBtYW5hZ2UgY29tcG9zaXRlcy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBsYWJlbFxuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqIEBkZWZhdWx0IFwiQ29tcG9zaXRlXCJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0aGF0IHNwZWNpZmllcyB3aGV0aGVyIHRoZSBjb21wb3NpdGUgaGFzIGJlZW4gbW9kaWZpZWQgZHVyaW5nIHRoZSBjdXJyZW50IHN0ZXAuXG4gICAgICogVGhpcyBpcyBhdXRvbWF0aWNhbGx5IG1hbmFnZWQgd2hlbiBib2RpZXMsIGNvbnN0cmFpbnRzIG9yIGNvbXBvc2l0ZXMgYXJlIGFkZGVkIG9yIHJlbW92ZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgaXNNb2RpZmllZFxuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIGBDb21wb3NpdGVgIHRoYXQgaXMgdGhlIHBhcmVudCBvZiB0aGlzIGNvbXBvc2l0ZS4gSXQgaXMgYXV0b21hdGljYWxseSBtYW5hZ2VkIGJ5IHRoZSBgTWF0dGVyLkNvbXBvc2l0ZWAgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBwYXJlbnRcbiAgICAgKiBAdHlwZSBjb21wb3NpdGVcbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBgQm9keWAgdGhhdCBhcmUgX2RpcmVjdF8gY2hpbGRyZW4gb2YgdGhpcyBjb21wb3NpdGUuXG4gICAgICogVG8gYWRkIG9yIHJlbW92ZSBib2RpZXMgeW91IHNob3VsZCB1c2UgYENvbXBvc2l0ZS5hZGRgIGFuZCBgQ29tcG9zaXRlLnJlbW92ZWAgbWV0aG9kcyByYXRoZXIgdGhhbiBkaXJlY3RseSBtb2RpZnlpbmcgdGhpcyBwcm9wZXJ0eS5cbiAgICAgKiBJZiB5b3Ugd2lzaCB0byByZWN1cnNpdmVseSBmaW5kIGFsbCBkZXNjZW5kYW50cywgeW91IHNob3VsZCB1c2UgdGhlIGBDb21wb3NpdGUuYWxsQm9kaWVzYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgYm9kaWVzXG4gICAgICogQHR5cGUgYm9keVtdXG4gICAgICogQGRlZmF1bHQgW11cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIGBDb25zdHJhaW50YCB0aGF0IGFyZSBfZGlyZWN0XyBjaGlsZHJlbiBvZiB0aGlzIGNvbXBvc2l0ZS5cbiAgICAgKiBUbyBhZGQgb3IgcmVtb3ZlIGNvbnN0cmFpbnRzIHlvdSBzaG91bGQgdXNlIGBDb21wb3NpdGUuYWRkYCBhbmQgYENvbXBvc2l0ZS5yZW1vdmVgIG1ldGhvZHMgcmF0aGVyIHRoYW4gZGlyZWN0bHkgbW9kaWZ5aW5nIHRoaXMgcHJvcGVydHkuXG4gICAgICogSWYgeW91IHdpc2ggdG8gcmVjdXJzaXZlbHkgZmluZCBhbGwgZGVzY2VuZGFudHMsIHlvdSBzaG91bGQgdXNlIHRoZSBgQ29tcG9zaXRlLmFsbENvbnN0cmFpbnRzYCBtZXRob2QuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgY29uc3RyYWludHNcbiAgICAgKiBAdHlwZSBjb25zdHJhaW50W11cbiAgICAgKiBAZGVmYXVsdCBbXVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgYENvbXBvc2l0ZWAgdGhhdCBhcmUgX2RpcmVjdF8gY2hpbGRyZW4gb2YgdGhpcyBjb21wb3NpdGUuXG4gICAgICogVG8gYWRkIG9yIHJlbW92ZSBjb21wb3NpdGVzIHlvdSBzaG91bGQgdXNlIGBDb21wb3NpdGUuYWRkYCBhbmQgYENvbXBvc2l0ZS5yZW1vdmVgIG1ldGhvZHMgcmF0aGVyIHRoYW4gZGlyZWN0bHkgbW9kaWZ5aW5nIHRoaXMgcHJvcGVydHkuXG4gICAgICogSWYgeW91IHdpc2ggdG8gcmVjdXJzaXZlbHkgZmluZCBhbGwgZGVzY2VuZGFudHMsIHlvdSBzaG91bGQgdXNlIHRoZSBgQ29tcG9zaXRlLmFsbENvbXBvc2l0ZXNgIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBjb21wb3NpdGVzXG4gICAgICogQHR5cGUgY29tcG9zaXRlW11cbiAgICAgKiBAZGVmYXVsdCBbXVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IHJlc2VydmVkIGZvciBzdG9yaW5nIHBsdWdpbi1zcGVjaWZpYyBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHBsdWdpblxuICAgICAqIEB0eXBlIHt9XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3QgdXNlZCBmb3Igc3RvcmluZyBjYWNoZWQgcmVzdWx0cyBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucy5cbiAgICAgKiBUaGlzIGlzIHVzZWQgaW50ZXJuYWxseSBvbmx5IGFuZCBpcyBhdXRvbWF0aWNhbGx5IG1hbmFnZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwcm9wZXJ0eSBjYWNoZVxuICAgICAqIEB0eXBlIHt9XG4gICAgICovXG5cbn0pKCk7XG5cblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qKlxuKiBUaGUgYE1hdHRlci5TbGVlcGluZ2AgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgdG8gbWFuYWdlIHRoZSBzbGVlcGluZyBzdGF0ZSBvZiBib2RpZXMuXG4qXG4qIEBjbGFzcyBTbGVlcGluZ1xuKi9cblxudmFyIFNsZWVwaW5nID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gU2xlZXBpbmc7XG5cbnZhciBCb2R5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcbnZhciBFdmVudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xudmFyIENvbW1vbiA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIFNsZWVwaW5nLl9tb3Rpb25XYWtlVGhyZXNob2xkID0gMC4xODtcbiAgICBTbGVlcGluZy5fbW90aW9uU2xlZXBUaHJlc2hvbGQgPSAwLjA4O1xuICAgIFNsZWVwaW5nLl9taW5CaWFzID0gMC45O1xuXG4gICAgLyoqXG4gICAgICogUHV0cyBib2RpZXMgdG8gc2xlZXAgb3Igd2FrZXMgdGhlbSB1cCBkZXBlbmRpbmcgb24gdGhlaXIgbW90aW9uLlxuICAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWx0YVxuICAgICAqL1xuICAgIFNsZWVwaW5nLnVwZGF0ZSA9IGZ1bmN0aW9uKGJvZGllcywgZGVsdGEpIHtcbiAgICAgICAgdmFyIHRpbWVTY2FsZSA9IGRlbHRhIC8gQ29tbW9uLl9iYXNlRGVsdGEsXG4gICAgICAgICAgICBtb3Rpb25TbGVlcFRocmVzaG9sZCA9IFNsZWVwaW5nLl9tb3Rpb25TbGVlcFRocmVzaG9sZDtcbiAgICAgICAgXG4gICAgICAgIC8vIHVwZGF0ZSBib2RpZXMgc2xlZXBpbmcgc3RhdHVzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXSxcbiAgICAgICAgICAgICAgICBzcGVlZCA9IEJvZHkuZ2V0U3BlZWQoYm9keSksXG4gICAgICAgICAgICAgICAgYW5ndWxhclNwZWVkID0gQm9keS5nZXRBbmd1bGFyU3BlZWQoYm9keSksXG4gICAgICAgICAgICAgICAgbW90aW9uID0gc3BlZWQgKiBzcGVlZCArIGFuZ3VsYXJTcGVlZCAqIGFuZ3VsYXJTcGVlZDtcblxuICAgICAgICAgICAgLy8gd2FrZSB1cCBib2RpZXMgaWYgdGhleSBoYXZlIGEgZm9yY2UgYXBwbGllZFxuICAgICAgICAgICAgaWYgKGJvZHkuZm9yY2UueCAhPT0gMCB8fCBib2R5LmZvcmNlLnkgIT09IDApIHtcbiAgICAgICAgICAgICAgICBTbGVlcGluZy5zZXQoYm9keSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgbWluTW90aW9uID0gTWF0aC5taW4oYm9keS5tb3Rpb24sIG1vdGlvbiksXG4gICAgICAgICAgICAgICAgbWF4TW90aW9uID0gTWF0aC5tYXgoYm9keS5tb3Rpb24sIG1vdGlvbik7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gYmlhc2VkIGF2ZXJhZ2UgbW90aW9uIGVzdGltYXRpb24gYmV0d2VlbiBmcmFtZXNcbiAgICAgICAgICAgIGJvZHkubW90aW9uID0gU2xlZXBpbmcuX21pbkJpYXMgKiBtaW5Nb3Rpb24gKyAoMSAtIFNsZWVwaW5nLl9taW5CaWFzKSAqIG1heE1vdGlvbjtcblxuICAgICAgICAgICAgaWYgKGJvZHkuc2xlZXBUaHJlc2hvbGQgPiAwICYmIGJvZHkubW90aW9uIDwgbW90aW9uU2xlZXBUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgICAgICBib2R5LnNsZWVwQ291bnRlciArPSAxO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChib2R5LnNsZWVwQ291bnRlciA+PSBib2R5LnNsZWVwVGhyZXNob2xkIC8gdGltZVNjYWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIFNsZWVwaW5nLnNldChib2R5LCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJvZHkuc2xlZXBDb3VudGVyID4gMCkge1xuICAgICAgICAgICAgICAgIGJvZHkuc2xlZXBDb3VudGVyIC09IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBzZXQgb2YgY29sbGlkaW5nIHBhaXJzLCB3YWtlcyB0aGUgc2xlZXBpbmcgYm9kaWVzIGludm9sdmVkLlxuICAgICAqIEBtZXRob2QgYWZ0ZXJDb2xsaXNpb25zXG4gICAgICogQHBhcmFtIHtwYWlyW119IHBhaXJzXG4gICAgICovXG4gICAgU2xlZXBpbmcuYWZ0ZXJDb2xsaXNpb25zID0gZnVuY3Rpb24ocGFpcnMpIHtcbiAgICAgICAgdmFyIG1vdGlvblNsZWVwVGhyZXNob2xkID0gU2xlZXBpbmcuX21vdGlvblNsZWVwVGhyZXNob2xkO1xuXG4gICAgICAgIC8vIHdha2UgdXAgYm9kaWVzIGludm9sdmVkIGluIGNvbGxpc2lvbnNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYWlycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gZG9uJ3Qgd2FrZSBpbmFjdGl2ZSBwYWlyc1xuICAgICAgICAgICAgaWYgKCFwYWlyLmlzQWN0aXZlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICB2YXIgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb24sXG4gICAgICAgICAgICAgICAgYm9keUEgPSBjb2xsaXNpb24uYm9keUEucGFyZW50LCBcbiAgICAgICAgICAgICAgICBib2R5QiA9IGNvbGxpc2lvbi5ib2R5Qi5wYXJlbnQ7XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gZG9uJ3Qgd2FrZSBpZiBhdCBsZWFzdCBvbmUgYm9keSBpcyBzdGF0aWNcbiAgICAgICAgICAgIGlmICgoYm9keUEuaXNTbGVlcGluZyAmJiBib2R5Qi5pc1NsZWVwaW5nKSB8fCBib2R5QS5pc1N0YXRpYyB8fCBib2R5Qi5pc1N0YXRpYylcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgXG4gICAgICAgICAgICBpZiAoYm9keUEuaXNTbGVlcGluZyB8fCBib2R5Qi5pc1NsZWVwaW5nKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNsZWVwaW5nQm9keSA9IChib2R5QS5pc1NsZWVwaW5nICYmICFib2R5QS5pc1N0YXRpYykgPyBib2R5QSA6IGJvZHlCLFxuICAgICAgICAgICAgICAgICAgICBtb3ZpbmdCb2R5ID0gc2xlZXBpbmdCb2R5ID09PSBib2R5QSA/IGJvZHlCIDogYm9keUE7XG5cbiAgICAgICAgICAgICAgICBpZiAoIXNsZWVwaW5nQm9keS5pc1N0YXRpYyAmJiBtb3ZpbmdCb2R5Lm1vdGlvbiA+IG1vdGlvblNsZWVwVGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgICAgICAgIFNsZWVwaW5nLnNldChzbGVlcGluZ0JvZHksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICBcbiAgICAvKipcbiAgICAgKiBTZXQgYSBib2R5IGFzIHNsZWVwaW5nIG9yIGF3YWtlLlxuICAgICAqIEBtZXRob2Qgc2V0XG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5XG4gICAgICogQHBhcmFtIHtib29sZWFufSBpc1NsZWVwaW5nXG4gICAgICovXG4gICAgU2xlZXBpbmcuc2V0ID0gZnVuY3Rpb24oYm9keSwgaXNTbGVlcGluZykge1xuICAgICAgICB2YXIgd2FzU2xlZXBpbmcgPSBib2R5LmlzU2xlZXBpbmc7XG5cbiAgICAgICAgaWYgKGlzU2xlZXBpbmcpIHtcbiAgICAgICAgICAgIGJvZHkuaXNTbGVlcGluZyA9IHRydWU7XG4gICAgICAgICAgICBib2R5LnNsZWVwQ291bnRlciA9IGJvZHkuc2xlZXBUaHJlc2hvbGQ7XG5cbiAgICAgICAgICAgIGJvZHkucG9zaXRpb25JbXB1bHNlLnggPSAwO1xuICAgICAgICAgICAgYm9keS5wb3NpdGlvbkltcHVsc2UueSA9IDA7XG5cbiAgICAgICAgICAgIGJvZHkucG9zaXRpb25QcmV2LnggPSBib2R5LnBvc2l0aW9uLng7XG4gICAgICAgICAgICBib2R5LnBvc2l0aW9uUHJldi55ID0gYm9keS5wb3NpdGlvbi55O1xuXG4gICAgICAgICAgICBib2R5LmFuZ2xlUHJldiA9IGJvZHkuYW5nbGU7XG4gICAgICAgICAgICBib2R5LnNwZWVkID0gMDtcbiAgICAgICAgICAgIGJvZHkuYW5ndWxhclNwZWVkID0gMDtcbiAgICAgICAgICAgIGJvZHkubW90aW9uID0gMDtcblxuICAgICAgICAgICAgaWYgKCF3YXNTbGVlcGluZykge1xuICAgICAgICAgICAgICAgIEV2ZW50cy50cmlnZ2VyKGJvZHksICdzbGVlcFN0YXJ0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBib2R5LmlzU2xlZXBpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIGJvZHkuc2xlZXBDb3VudGVyID0gMDtcblxuICAgICAgICAgICAgaWYgKHdhc1NsZWVwaW5nKSB7XG4gICAgICAgICAgICAgICAgRXZlbnRzLnRyaWdnZXIoYm9keSwgJ3NsZWVwRW5kJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG59KSgpO1xuXG5cbi8qKiovIH0pLFxuLyogOCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKipcbiogVGhlIGBNYXR0ZXIuQ29sbGlzaW9uYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgZGV0ZWN0aW5nIGNvbGxpc2lvbnMgYmV0d2VlbiBhIGdpdmVuIHBhaXIgb2YgYm9kaWVzLlxuKlxuKiBGb3IgZWZmaWNpZW50IGRldGVjdGlvbiBiZXR3ZWVuIGEgbGlzdCBvZiBib2RpZXMsIHNlZSBgTWF0dGVyLkRldGVjdG9yYCBhbmQgYE1hdHRlci5RdWVyeWAuXG4qXG4qIFNlZSBgTWF0dGVyLkVuZ2luZWAgZm9yIGNvbGxpc2lvbiBldmVudHMuXG4qXG4qIEBjbGFzcyBDb2xsaXNpb25cbiovXG5cbnZhciBDb2xsaXNpb24gPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb2xsaXNpb247XG5cbnZhciBWZXJ0aWNlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG52YXIgUGFpciA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbihmdW5jdGlvbigpIHtcbiAgICB2YXIgX3N1cHBvcnRzID0gW107XG5cbiAgICB2YXIgX292ZXJsYXBBQiA9IHtcbiAgICAgICAgb3ZlcmxhcDogMCxcbiAgICAgICAgYXhpczogbnVsbFxuICAgIH07XG5cbiAgICB2YXIgX292ZXJsYXBCQSA9IHtcbiAgICAgICAgb3ZlcmxhcDogMCxcbiAgICAgICAgYXhpczogbnVsbFxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGNvbGxpc2lvbiByZWNvcmQuXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlBIFRoZSBmaXJzdCBib2R5IHBhcnQgcmVwcmVzZW50ZWQgYnkgdGhlIGNvbGxpc2lvbiByZWNvcmRcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlCIFRoZSBzZWNvbmQgYm9keSBwYXJ0IHJlcHJlc2VudGVkIGJ5IHRoZSBjb2xsaXNpb24gcmVjb3JkXG4gICAgICogQHJldHVybiB7Y29sbGlzaW9ufSBBIG5ldyBjb2xsaXNpb24gcmVjb3JkXG4gICAgICovXG4gICAgQ29sbGlzaW9uLmNyZWF0ZSA9IGZ1bmN0aW9uKGJvZHlBLCBib2R5Qikge1xuICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgIHBhaXI6IG51bGwsXG4gICAgICAgICAgICBjb2xsaWRlZDogZmFsc2UsXG4gICAgICAgICAgICBib2R5QTogYm9keUEsXG4gICAgICAgICAgICBib2R5QjogYm9keUIsXG4gICAgICAgICAgICBwYXJlbnRBOiBib2R5QS5wYXJlbnQsXG4gICAgICAgICAgICBwYXJlbnRCOiBib2R5Qi5wYXJlbnQsXG4gICAgICAgICAgICBkZXB0aDogMCxcbiAgICAgICAgICAgIG5vcm1hbDogeyB4OiAwLCB5OiAwIH0sXG4gICAgICAgICAgICB0YW5nZW50OiB7IHg6IDAsIHk6IDAgfSxcbiAgICAgICAgICAgIHBlbmV0cmF0aW9uOiB7IHg6IDAsIHk6IDAgfSxcbiAgICAgICAgICAgIHN1cHBvcnRzOiBbXVxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXRlY3QgY29sbGlzaW9uIGJldHdlZW4gdHdvIGJvZGllcy5cbiAgICAgKiBAbWV0aG9kIGNvbGxpZGVzXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5QVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keUJcbiAgICAgKiBAcGFyYW0ge3BhaXJzfSBbcGFpcnNdIE9wdGlvbmFsbHkgcmV1c2UgY29sbGlzaW9uIHJlY29yZHMgZnJvbSBleGlzdGluZyBwYWlycy5cbiAgICAgKiBAcmV0dXJuIHtjb2xsaXNpb258bnVsbH0gQSBjb2xsaXNpb24gcmVjb3JkIGlmIGRldGVjdGVkLCBvdGhlcndpc2UgbnVsbFxuICAgICAqL1xuICAgIENvbGxpc2lvbi5jb2xsaWRlcyA9IGZ1bmN0aW9uKGJvZHlBLCBib2R5QiwgcGFpcnMpIHtcbiAgICAgICAgQ29sbGlzaW9uLl9vdmVybGFwQXhlcyhfb3ZlcmxhcEFCLCBib2R5QS52ZXJ0aWNlcywgYm9keUIudmVydGljZXMsIGJvZHlBLmF4ZXMpO1xuXG4gICAgICAgIGlmIChfb3ZlcmxhcEFCLm92ZXJsYXAgPD0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBDb2xsaXNpb24uX292ZXJsYXBBeGVzKF9vdmVybGFwQkEsIGJvZHlCLnZlcnRpY2VzLCBib2R5QS52ZXJ0aWNlcywgYm9keUIuYXhlcyk7XG5cbiAgICAgICAgaWYgKF9vdmVybGFwQkEub3ZlcmxhcCA8PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJldXNlIGNvbGxpc2lvbiByZWNvcmRzIGZvciBnYyBlZmZpY2llbmN5XG4gICAgICAgIHZhciBwYWlyID0gcGFpcnMgJiYgcGFpcnMudGFibGVbUGFpci5pZChib2R5QSwgYm9keUIpXSxcbiAgICAgICAgICAgIGNvbGxpc2lvbjtcblxuICAgICAgICBpZiAoIXBhaXIpIHtcbiAgICAgICAgICAgIGNvbGxpc2lvbiA9IENvbGxpc2lvbi5jcmVhdGUoYm9keUEsIGJvZHlCKTtcbiAgICAgICAgICAgIGNvbGxpc2lvbi5jb2xsaWRlZCA9IHRydWU7XG4gICAgICAgICAgICBjb2xsaXNpb24uYm9keUEgPSBib2R5QS5pZCA8IGJvZHlCLmlkID8gYm9keUEgOiBib2R5QjtcbiAgICAgICAgICAgIGNvbGxpc2lvbi5ib2R5QiA9IGJvZHlBLmlkIDwgYm9keUIuaWQgPyBib2R5QiA6IGJvZHlBO1xuICAgICAgICAgICAgY29sbGlzaW9uLnBhcmVudEEgPSBjb2xsaXNpb24uYm9keUEucGFyZW50O1xuICAgICAgICAgICAgY29sbGlzaW9uLnBhcmVudEIgPSBjb2xsaXNpb24uYm9keUIucGFyZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb247XG4gICAgICAgIH1cblxuICAgICAgICBib2R5QSA9IGNvbGxpc2lvbi5ib2R5QTtcbiAgICAgICAgYm9keUIgPSBjb2xsaXNpb24uYm9keUI7XG5cbiAgICAgICAgdmFyIG1pbk92ZXJsYXA7XG5cbiAgICAgICAgaWYgKF9vdmVybGFwQUIub3ZlcmxhcCA8IF9vdmVybGFwQkEub3ZlcmxhcCkge1xuICAgICAgICAgICAgbWluT3ZlcmxhcCA9IF9vdmVybGFwQUI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtaW5PdmVybGFwID0gX292ZXJsYXBCQTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBub3JtYWwgPSBjb2xsaXNpb24ubm9ybWFsLFxuICAgICAgICAgICAgc3VwcG9ydHMgPSBjb2xsaXNpb24uc3VwcG9ydHMsXG4gICAgICAgICAgICBtaW5BeGlzID0gbWluT3ZlcmxhcC5heGlzLFxuICAgICAgICAgICAgbWluQXhpc1ggPSBtaW5BeGlzLngsXG4gICAgICAgICAgICBtaW5BeGlzWSA9IG1pbkF4aXMueTtcblxuICAgICAgICAvLyBlbnN1cmUgbm9ybWFsIGlzIGZhY2luZyBhd2F5IGZyb20gYm9keUFcbiAgICAgICAgaWYgKG1pbkF4aXNYICogKGJvZHlCLnBvc2l0aW9uLnggLSBib2R5QS5wb3NpdGlvbi54KSArIG1pbkF4aXNZICogKGJvZHlCLnBvc2l0aW9uLnkgLSBib2R5QS5wb3NpdGlvbi55KSA8IDApIHtcbiAgICAgICAgICAgIG5vcm1hbC54ID0gbWluQXhpc1g7XG4gICAgICAgICAgICBub3JtYWwueSA9IG1pbkF4aXNZO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9ybWFsLnggPSAtbWluQXhpc1g7XG4gICAgICAgICAgICBub3JtYWwueSA9IC1taW5BeGlzWTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29sbGlzaW9uLnRhbmdlbnQueCA9IC1ub3JtYWwueTtcbiAgICAgICAgY29sbGlzaW9uLnRhbmdlbnQueSA9IG5vcm1hbC54O1xuXG4gICAgICAgIGNvbGxpc2lvbi5kZXB0aCA9IG1pbk92ZXJsYXAub3ZlcmxhcDtcblxuICAgICAgICBjb2xsaXNpb24ucGVuZXRyYXRpb24ueCA9IG5vcm1hbC54ICogY29sbGlzaW9uLmRlcHRoO1xuICAgICAgICBjb2xsaXNpb24ucGVuZXRyYXRpb24ueSA9IG5vcm1hbC55ICogY29sbGlzaW9uLmRlcHRoO1xuXG4gICAgICAgIC8vIGZpbmQgc3VwcG9ydCBwb2ludHMsIHRoZXJlIGlzIGFsd2F5cyBlaXRoZXIgZXhhY3RseSBvbmUgb3IgdHdvXG4gICAgICAgIHZhciBzdXBwb3J0c0IgPSBDb2xsaXNpb24uX2ZpbmRTdXBwb3J0cyhib2R5QSwgYm9keUIsIG5vcm1hbCwgMSksXG4gICAgICAgICAgICBzdXBwb3J0Q291bnQgPSAwO1xuXG4gICAgICAgIC8vIGZpbmQgdGhlIHN1cHBvcnRzIGZyb20gYm9keUIgdGhhdCBhcmUgaW5zaWRlIGJvZHlBXG4gICAgICAgIGlmIChWZXJ0aWNlcy5jb250YWlucyhib2R5QS52ZXJ0aWNlcywgc3VwcG9ydHNCWzBdKSkge1xuICAgICAgICAgICAgc3VwcG9ydHNbc3VwcG9ydENvdW50KytdID0gc3VwcG9ydHNCWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKFZlcnRpY2VzLmNvbnRhaW5zKGJvZHlBLnZlcnRpY2VzLCBzdXBwb3J0c0JbMV0pKSB7XG4gICAgICAgICAgICBzdXBwb3J0c1tzdXBwb3J0Q291bnQrK10gPSBzdXBwb3J0c0JbMV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaW5kIHRoZSBzdXBwb3J0cyBmcm9tIGJvZHlBIHRoYXQgYXJlIGluc2lkZSBib2R5QlxuICAgICAgICBpZiAoc3VwcG9ydENvdW50IDwgMikge1xuICAgICAgICAgICAgdmFyIHN1cHBvcnRzQSA9IENvbGxpc2lvbi5fZmluZFN1cHBvcnRzKGJvZHlCLCBib2R5QSwgbm9ybWFsLCAtMSk7XG5cbiAgICAgICAgICAgIGlmIChWZXJ0aWNlcy5jb250YWlucyhib2R5Qi52ZXJ0aWNlcywgc3VwcG9ydHNBWzBdKSkge1xuICAgICAgICAgICAgICAgIHN1cHBvcnRzW3N1cHBvcnRDb3VudCsrXSA9IHN1cHBvcnRzQVswXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHN1cHBvcnRDb3VudCA8IDIgJiYgVmVydGljZXMuY29udGFpbnMoYm9keUIudmVydGljZXMsIHN1cHBvcnRzQVsxXSkpIHtcbiAgICAgICAgICAgICAgICBzdXBwb3J0c1tzdXBwb3J0Q291bnQrK10gPSBzdXBwb3J0c0FbMV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhY2NvdW50IGZvciB0aGUgZWRnZSBjYXNlIG9mIG92ZXJsYXBwaW5nIGJ1dCBubyB2ZXJ0ZXggY29udGFpbm1lbnRcbiAgICAgICAgaWYgKHN1cHBvcnRDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgc3VwcG9ydHNbc3VwcG9ydENvdW50KytdID0gc3VwcG9ydHNCWzBdO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIHN1cHBvcnRzIGFycmF5IHNpemVcbiAgICAgICAgc3VwcG9ydHMubGVuZ3RoID0gc3VwcG9ydENvdW50O1xuXG4gICAgICAgIHJldHVybiBjb2xsaXNpb247XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZpbmQgdGhlIG92ZXJsYXAgYmV0d2VlbiB0d28gc2V0cyBvZiB2ZXJ0aWNlcy5cbiAgICAgKiBAbWV0aG9kIF9vdmVybGFwQXhlc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHJlc3VsdFxuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzQVxuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzQlxuICAgICAqIEBwYXJhbSB7YXhlc30gYXhlc1xuICAgICAqL1xuICAgIENvbGxpc2lvbi5fb3ZlcmxhcEF4ZXMgPSBmdW5jdGlvbihyZXN1bHQsIHZlcnRpY2VzQSwgdmVydGljZXNCLCBheGVzKSB7XG4gICAgICAgIHZhciB2ZXJ0aWNlc0FMZW5ndGggPSB2ZXJ0aWNlc0EubGVuZ3RoLFxuICAgICAgICAgICAgdmVydGljZXNCTGVuZ3RoID0gdmVydGljZXNCLmxlbmd0aCxcbiAgICAgICAgICAgIHZlcnRpY2VzQVggPSB2ZXJ0aWNlc0FbMF0ueCxcbiAgICAgICAgICAgIHZlcnRpY2VzQVkgPSB2ZXJ0aWNlc0FbMF0ueSxcbiAgICAgICAgICAgIHZlcnRpY2VzQlggPSB2ZXJ0aWNlc0JbMF0ueCxcbiAgICAgICAgICAgIHZlcnRpY2VzQlkgPSB2ZXJ0aWNlc0JbMF0ueSxcbiAgICAgICAgICAgIGF4ZXNMZW5ndGggPSBheGVzLmxlbmd0aCxcbiAgICAgICAgICAgIG92ZXJsYXBNaW4gPSBOdW1iZXIuTUFYX1ZBTFVFLFxuICAgICAgICAgICAgb3ZlcmxhcEF4aXNOdW1iZXIgPSAwLFxuICAgICAgICAgICAgb3ZlcmxhcCxcbiAgICAgICAgICAgIG92ZXJsYXBBQixcbiAgICAgICAgICAgIG92ZXJsYXBCQSxcbiAgICAgICAgICAgIGRvdCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBheGVzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBheGlzID0gYXhlc1tpXSxcbiAgICAgICAgICAgICAgICBheGlzWCA9IGF4aXMueCxcbiAgICAgICAgICAgICAgICBheGlzWSA9IGF4aXMueSxcbiAgICAgICAgICAgICAgICBtaW5BID0gdmVydGljZXNBWCAqIGF4aXNYICsgdmVydGljZXNBWSAqIGF4aXNZLFxuICAgICAgICAgICAgICAgIG1pbkIgPSB2ZXJ0aWNlc0JYICogYXhpc1ggKyB2ZXJ0aWNlc0JZICogYXhpc1ksXG4gICAgICAgICAgICAgICAgbWF4QSA9IG1pbkEsXG4gICAgICAgICAgICAgICAgbWF4QiA9IG1pbkI7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAoaiA9IDE7IGogPCB2ZXJ0aWNlc0FMZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgIGRvdCA9IHZlcnRpY2VzQVtqXS54ICogYXhpc1ggKyB2ZXJ0aWNlc0Fbal0ueSAqIGF4aXNZO1xuXG4gICAgICAgICAgICAgICAgaWYgKGRvdCA+IG1heEEpIHsgXG4gICAgICAgICAgICAgICAgICAgIG1heEEgPSBkb3Q7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkb3QgPCBtaW5BKSB7IFxuICAgICAgICAgICAgICAgICAgICBtaW5BID0gZG90O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChqID0gMTsgaiA8IHZlcnRpY2VzQkxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgICAgICAgICAgZG90ID0gdmVydGljZXNCW2pdLnggKiBheGlzWCArIHZlcnRpY2VzQltqXS55ICogYXhpc1k7XG5cbiAgICAgICAgICAgICAgICBpZiAoZG90ID4gbWF4QikgeyBcbiAgICAgICAgICAgICAgICAgICAgbWF4QiA9IGRvdDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRvdCA8IG1pbkIpIHsgXG4gICAgICAgICAgICAgICAgICAgIG1pbkIgPSBkb3Q7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvdmVybGFwQUIgPSBtYXhBIC0gbWluQjtcbiAgICAgICAgICAgIG92ZXJsYXBCQSA9IG1heEIgLSBtaW5BO1xuICAgICAgICAgICAgb3ZlcmxhcCA9IG92ZXJsYXBBQiA8IG92ZXJsYXBCQSA/IG92ZXJsYXBBQiA6IG92ZXJsYXBCQTtcblxuICAgICAgICAgICAgaWYgKG92ZXJsYXAgPCBvdmVybGFwTWluKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmxhcE1pbiA9IG92ZXJsYXA7XG4gICAgICAgICAgICAgICAgb3ZlcmxhcEF4aXNOdW1iZXIgPSBpO1xuXG4gICAgICAgICAgICAgICAgaWYgKG92ZXJsYXAgPD0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjYW4gbm90IGJlIGludGVyc2VjdGluZ1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IFxuICAgICAgICB9XG5cbiAgICAgICAgcmVzdWx0LmF4aXMgPSBheGVzW292ZXJsYXBBeGlzTnVtYmVyXTtcbiAgICAgICAgcmVzdWx0Lm92ZXJsYXAgPSBvdmVybGFwTWluO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQcm9qZWN0cyB2ZXJ0aWNlcyBvbiBhbiBheGlzIGFuZCByZXR1cm5zIGFuIGludGVydmFsLlxuICAgICAqIEBtZXRob2QgX3Byb2plY3RUb0F4aXNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7fSBwcm9qZWN0aW9uXG4gICAgICogQHBhcmFtIHt9IHZlcnRpY2VzXG4gICAgICogQHBhcmFtIHt9IGF4aXNcbiAgICAgKi9cbiAgICBDb2xsaXNpb24uX3Byb2plY3RUb0F4aXMgPSBmdW5jdGlvbihwcm9qZWN0aW9uLCB2ZXJ0aWNlcywgYXhpcykge1xuICAgICAgICB2YXIgbWluID0gdmVydGljZXNbMF0ueCAqIGF4aXMueCArIHZlcnRpY2VzWzBdLnkgKiBheGlzLnksXG4gICAgICAgICAgICBtYXggPSBtaW47XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGRvdCA9IHZlcnRpY2VzW2ldLnggKiBheGlzLnggKyB2ZXJ0aWNlc1tpXS55ICogYXhpcy55O1xuXG4gICAgICAgICAgICBpZiAoZG90ID4gbWF4KSB7IFxuICAgICAgICAgICAgICAgIG1heCA9IGRvdDsgXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRvdCA8IG1pbikgeyBcbiAgICAgICAgICAgICAgICBtaW4gPSBkb3Q7IFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcHJvamVjdGlvbi5taW4gPSBtaW47XG4gICAgICAgIHByb2plY3Rpb24ubWF4ID0gbWF4O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyBzdXBwb3J0aW5nIHZlcnRpY2VzIGdpdmVuIHR3byBib2RpZXMgYWxvbmcgYSBnaXZlbiBkaXJlY3Rpb24gdXNpbmcgaGlsbC1jbGltYmluZy5cbiAgICAgKiBAbWV0aG9kIF9maW5kU3VwcG9ydHNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keUFcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlCXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IG5vcm1hbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkaXJlY3Rpb25cbiAgICAgKiBAcmV0dXJuIFt2ZWN0b3JdXG4gICAgICovXG4gICAgQ29sbGlzaW9uLl9maW5kU3VwcG9ydHMgPSBmdW5jdGlvbihib2R5QSwgYm9keUIsIG5vcm1hbCwgZGlyZWN0aW9uKSB7XG4gICAgICAgIHZhciB2ZXJ0aWNlcyA9IGJvZHlCLnZlcnRpY2VzLFxuICAgICAgICAgICAgdmVydGljZXNMZW5ndGggPSB2ZXJ0aWNlcy5sZW5ndGgsXG4gICAgICAgICAgICBib2R5QVBvc2l0aW9uWCA9IGJvZHlBLnBvc2l0aW9uLngsXG4gICAgICAgICAgICBib2R5QVBvc2l0aW9uWSA9IGJvZHlBLnBvc2l0aW9uLnksXG4gICAgICAgICAgICBub3JtYWxYID0gbm9ybWFsLnggKiBkaXJlY3Rpb24sXG4gICAgICAgICAgICBub3JtYWxZID0gbm9ybWFsLnkgKiBkaXJlY3Rpb24sXG4gICAgICAgICAgICBuZWFyZXN0RGlzdGFuY2UgPSBOdW1iZXIuTUFYX1ZBTFVFLFxuICAgICAgICAgICAgdmVydGV4QSxcbiAgICAgICAgICAgIHZlcnRleEIsXG4gICAgICAgICAgICB2ZXJ0ZXhDLFxuICAgICAgICAgICAgZGlzdGFuY2UsXG4gICAgICAgICAgICBqO1xuXG4gICAgICAgIC8vIGZpbmQgZGVlcGVzdCB2ZXJ0ZXggcmVsYXRpdmUgdG8gdGhlIGF4aXNcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IHZlcnRpY2VzTGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgICAgIHZlcnRleEIgPSB2ZXJ0aWNlc1tqXTtcbiAgICAgICAgICAgIGRpc3RhbmNlID0gbm9ybWFsWCAqIChib2R5QVBvc2l0aW9uWCAtIHZlcnRleEIueCkgKyBub3JtYWxZICogKGJvZHlBUG9zaXRpb25ZIC0gdmVydGV4Qi55KTtcblxuICAgICAgICAgICAgLy8gY29udmV4IGhpbGwtY2xpbWJpbmdcbiAgICAgICAgICAgIGlmIChkaXN0YW5jZSA8IG5lYXJlc3REaXN0YW5jZSkge1xuICAgICAgICAgICAgICAgIG5lYXJlc3REaXN0YW5jZSA9IGRpc3RhbmNlO1xuICAgICAgICAgICAgICAgIHZlcnRleEEgPSB2ZXJ0ZXhCO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gbWVhc3VyZSBuZXh0IHZlcnRleFxuICAgICAgICB2ZXJ0ZXhDID0gdmVydGljZXNbKHZlcnRpY2VzTGVuZ3RoICsgdmVydGV4QS5pbmRleCAtIDEpICUgdmVydGljZXNMZW5ndGhdO1xuICAgICAgICBuZWFyZXN0RGlzdGFuY2UgPSBub3JtYWxYICogKGJvZHlBUG9zaXRpb25YIC0gdmVydGV4Qy54KSArIG5vcm1hbFkgKiAoYm9keUFQb3NpdGlvblkgLSB2ZXJ0ZXhDLnkpO1xuXG4gICAgICAgIC8vIGNvbXBhcmUgd2l0aCBwcmV2aW91cyB2ZXJ0ZXhcbiAgICAgICAgdmVydGV4QiA9IHZlcnRpY2VzWyh2ZXJ0ZXhBLmluZGV4ICsgMSkgJSB2ZXJ0aWNlc0xlbmd0aF07XG4gICAgICAgIGlmIChub3JtYWxYICogKGJvZHlBUG9zaXRpb25YIC0gdmVydGV4Qi54KSArIG5vcm1hbFkgKiAoYm9keUFQb3NpdGlvblkgLSB2ZXJ0ZXhCLnkpIDwgbmVhcmVzdERpc3RhbmNlKSB7XG4gICAgICAgICAgICBfc3VwcG9ydHNbMF0gPSB2ZXJ0ZXhBO1xuICAgICAgICAgICAgX3N1cHBvcnRzWzFdID0gdmVydGV4QjtcblxuICAgICAgICAgICAgcmV0dXJuIF9zdXBwb3J0cztcbiAgICAgICAgfVxuXG4gICAgICAgIF9zdXBwb3J0c1swXSA9IHZlcnRleEE7XG4gICAgICAgIF9zdXBwb3J0c1sxXSA9IHZlcnRleEM7XG5cbiAgICAgICAgcmV0dXJuIF9zdXBwb3J0cztcbiAgICB9O1xuXG4gICAgLypcbiAgICAqXG4gICAgKiAgUHJvcGVydGllcyBEb2N1bWVudGF0aW9uXG4gICAgKlxuICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgcGFpciB1c2luZyB0aGlzIGNvbGxpc2lvbiByZWNvcmQsIGlmIHRoZXJlIGlzIG9uZS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBwYWlyXG4gICAgICogQHR5cGUge3BhaXJ8bnVsbH1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdGhhdCBpbmRpY2F0ZXMgaWYgdGhlIGJvZGllcyB3ZXJlIGNvbGxpZGluZyB3aGVuIHRoZSBjb2xsaXNpb24gd2FzIGxhc3QgdXBkYXRlZC5cbiAgICAgKiBcbiAgICAgKiBAcHJvcGVydHkgY29sbGlkZWRcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBmaXJzdCBib2R5IHBhcnQgcmVwcmVzZW50ZWQgYnkgdGhlIGNvbGxpc2lvbiAoc2VlIGFsc28gYGNvbGxpc2lvbi5wYXJlbnRBYCkuXG4gICAgICogXG4gICAgICogQHByb3BlcnR5IGJvZHlBXG4gICAgICogQHR5cGUgYm9keVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNlY29uZCBib2R5IHBhcnQgcmVwcmVzZW50ZWQgYnkgdGhlIGNvbGxpc2lvbiAoc2VlIGFsc28gYGNvbGxpc2lvbi5wYXJlbnRCYCkuXG4gICAgICogXG4gICAgICogQHByb3BlcnR5IGJvZHlCXG4gICAgICogQHR5cGUgYm9keVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZpcnN0IGJvZHkgcmVwcmVzZW50ZWQgYnkgdGhlIGNvbGxpc2lvbiAoaS5lLiBgY29sbGlzaW9uLmJvZHlBLnBhcmVudGApLlxuICAgICAqIFxuICAgICAqIEBwcm9wZXJ0eSBwYXJlbnRBXG4gICAgICogQHR5cGUgYm9keVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNlY29uZCBib2R5IHJlcHJlc2VudGVkIGJ5IHRoZSBjb2xsaXNpb24gKGkuZS4gYGNvbGxpc2lvbi5ib2R5Qi5wYXJlbnRgKS5cbiAgICAgKiBcbiAgICAgKiBAcHJvcGVydHkgcGFyZW50QlxuICAgICAqIEB0eXBlIGJvZHlcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCByZXByZXNlbnRzIHRoZSBtaW5pbXVtIHNlcGFyYXRpbmcgZGlzdGFuY2UgYmV0d2VlbiB0aGUgYm9kaWVzIGFsb25nIHRoZSBjb2xsaXNpb24gbm9ybWFsLlxuICAgICAqXG4gICAgICogQHJlYWRPbmx5XG4gICAgICogQHByb3BlcnR5IGRlcHRoXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBub3JtYWxpc2VkIGBWZWN0b3JgIHRoYXQgcmVwcmVzZW50cyB0aGUgZGlyZWN0aW9uIGJldHdlZW4gdGhlIGJvZGllcyB0aGF0IHByb3ZpZGVzIHRoZSBtaW5pbXVtIHNlcGFyYXRpbmcgZGlzdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgbm9ybWFsXG4gICAgICogQHR5cGUgdmVjdG9yXG4gICAgICogQGRlZmF1bHQgeyB4OiAwLCB5OiAwIH1cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgbm9ybWFsaXNlZCBgVmVjdG9yYCB0aGF0IGlzIHRoZSB0YW5nZW50IGRpcmVjdGlvbiB0byB0aGUgY29sbGlzaW9uIG5vcm1hbC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB0YW5nZW50XG4gICAgICogQHR5cGUgdmVjdG9yXG4gICAgICogQGRlZmF1bHQgeyB4OiAwLCB5OiAwIH1cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYFZlY3RvcmAgdGhhdCByZXByZXNlbnRzIHRoZSBkaXJlY3Rpb24gYW5kIGRlcHRoIG9mIHRoZSBjb2xsaXNpb24uXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcGVuZXRyYXRpb25cbiAgICAgKiBAdHlwZSB2ZWN0b3JcbiAgICAgKiBAZGVmYXVsdCB7IHg6IDAsIHk6IDAgfVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgYm9keSB2ZXJ0aWNlcyB0aGF0IHJlcHJlc2VudCB0aGUgc3VwcG9ydCBwb2ludHMgaW4gdGhlIGNvbGxpc2lvbi5cbiAgICAgKiBUaGVzZSBhcmUgdGhlIGRlZXBlc3QgdmVydGljZXMgKGFsb25nIHRoZSBjb2xsaXNpb24gbm9ybWFsKSBvZiBlYWNoIGJvZHkgdGhhdCBhcmUgY29udGFpbmVkIGJ5IHRoZSBvdGhlciBib2R5J3MgdmVydGljZXMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgc3VwcG9ydHNcbiAgICAgKiBAdHlwZSB2ZWN0b3JbXVxuICAgICAqIEBkZWZhdWx0IFtdXG4gICAgICovXG5cbn0pKCk7XG5cblxuLyoqKi8gfSksXG4vKiA5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qKlxuKiBUaGUgYE1hdHRlci5QYWlyYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyBjb2xsaXNpb24gcGFpcnMuXG4qXG4qIEBjbGFzcyBQYWlyXG4qL1xuXG52YXIgUGFpciA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFBhaXI7XG5cbnZhciBDb250YWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XG5cbihmdW5jdGlvbigpIHtcbiAgICBcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcGFpci5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7Y29sbGlzaW9ufSBjb2xsaXNpb25cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZXN0YW1wXG4gICAgICogQHJldHVybiB7cGFpcn0gQSBuZXcgcGFpclxuICAgICAqL1xuICAgIFBhaXIuY3JlYXRlID0gZnVuY3Rpb24oY29sbGlzaW9uLCB0aW1lc3RhbXApIHtcbiAgICAgICAgdmFyIGJvZHlBID0gY29sbGlzaW9uLmJvZHlBLFxuICAgICAgICAgICAgYm9keUIgPSBjb2xsaXNpb24uYm9keUI7XG5cbiAgICAgICAgdmFyIHBhaXIgPSB7XG4gICAgICAgICAgICBpZDogUGFpci5pZChib2R5QSwgYm9keUIpLFxuICAgICAgICAgICAgYm9keUE6IGJvZHlBLFxuICAgICAgICAgICAgYm9keUI6IGJvZHlCLFxuICAgICAgICAgICAgY29sbGlzaW9uOiBjb2xsaXNpb24sXG4gICAgICAgICAgICBjb250YWN0czogW10sXG4gICAgICAgICAgICBhY3RpdmVDb250YWN0czogW10sXG4gICAgICAgICAgICBzZXBhcmF0aW9uOiAwLFxuICAgICAgICAgICAgaXNBY3RpdmU6IHRydWUsXG4gICAgICAgICAgICBjb25maXJtZWRBY3RpdmU6IHRydWUsXG4gICAgICAgICAgICBpc1NlbnNvcjogYm9keUEuaXNTZW5zb3IgfHwgYm9keUIuaXNTZW5zb3IsXG4gICAgICAgICAgICB0aW1lQ3JlYXRlZDogdGltZXN0YW1wLFxuICAgICAgICAgICAgdGltZVVwZGF0ZWQ6IHRpbWVzdGFtcCxcbiAgICAgICAgICAgIGludmVyc2VNYXNzOiAwLFxuICAgICAgICAgICAgZnJpY3Rpb246IDAsXG4gICAgICAgICAgICBmcmljdGlvblN0YXRpYzogMCxcbiAgICAgICAgICAgIHJlc3RpdHV0aW9uOiAwLFxuICAgICAgICAgICAgc2xvcDogMFxuICAgICAgICB9O1xuXG4gICAgICAgIFBhaXIudXBkYXRlKHBhaXIsIGNvbGxpc2lvbiwgdGltZXN0YW1wKTtcblxuICAgICAgICByZXR1cm4gcGFpcjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBhIHBhaXIgZ2l2ZW4gYSBjb2xsaXNpb24uXG4gICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAgKiBAcGFyYW0ge3BhaXJ9IHBhaXJcbiAgICAgKiBAcGFyYW0ge2NvbGxpc2lvbn0gY29sbGlzaW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVzdGFtcFxuICAgICAqL1xuICAgIFBhaXIudXBkYXRlID0gZnVuY3Rpb24ocGFpciwgY29sbGlzaW9uLCB0aW1lc3RhbXApIHtcbiAgICAgICAgdmFyIGNvbnRhY3RzID0gcGFpci5jb250YWN0cyxcbiAgICAgICAgICAgIHN1cHBvcnRzID0gY29sbGlzaW9uLnN1cHBvcnRzLFxuICAgICAgICAgICAgYWN0aXZlQ29udGFjdHMgPSBwYWlyLmFjdGl2ZUNvbnRhY3RzLFxuICAgICAgICAgICAgcGFyZW50QSA9IGNvbGxpc2lvbi5wYXJlbnRBLFxuICAgICAgICAgICAgcGFyZW50QiA9IGNvbGxpc2lvbi5wYXJlbnRCLFxuICAgICAgICAgICAgcGFyZW50QVZlcnRpY2VzTGVuZ3RoID0gcGFyZW50QS52ZXJ0aWNlcy5sZW5ndGg7XG4gICAgICAgIFxuICAgICAgICBwYWlyLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgcGFpci50aW1lVXBkYXRlZCA9IHRpbWVzdGFtcDtcbiAgICAgICAgcGFpci5jb2xsaXNpb24gPSBjb2xsaXNpb247XG4gICAgICAgIHBhaXIuc2VwYXJhdGlvbiA9IGNvbGxpc2lvbi5kZXB0aDtcbiAgICAgICAgcGFpci5pbnZlcnNlTWFzcyA9IHBhcmVudEEuaW52ZXJzZU1hc3MgKyBwYXJlbnRCLmludmVyc2VNYXNzO1xuICAgICAgICBwYWlyLmZyaWN0aW9uID0gcGFyZW50QS5mcmljdGlvbiA8IHBhcmVudEIuZnJpY3Rpb24gPyBwYXJlbnRBLmZyaWN0aW9uIDogcGFyZW50Qi5mcmljdGlvbjtcbiAgICAgICAgcGFpci5mcmljdGlvblN0YXRpYyA9IHBhcmVudEEuZnJpY3Rpb25TdGF0aWMgPiBwYXJlbnRCLmZyaWN0aW9uU3RhdGljID8gcGFyZW50QS5mcmljdGlvblN0YXRpYyA6IHBhcmVudEIuZnJpY3Rpb25TdGF0aWM7XG4gICAgICAgIHBhaXIucmVzdGl0dXRpb24gPSBwYXJlbnRBLnJlc3RpdHV0aW9uID4gcGFyZW50Qi5yZXN0aXR1dGlvbiA/IHBhcmVudEEucmVzdGl0dXRpb24gOiBwYXJlbnRCLnJlc3RpdHV0aW9uO1xuICAgICAgICBwYWlyLnNsb3AgPSBwYXJlbnRBLnNsb3AgPiBwYXJlbnRCLnNsb3AgPyBwYXJlbnRBLnNsb3AgOiBwYXJlbnRCLnNsb3A7XG5cbiAgICAgICAgY29sbGlzaW9uLnBhaXIgPSBwYWlyO1xuICAgICAgICBhY3RpdmVDb250YWN0cy5sZW5ndGggPSAwO1xuICAgICAgICBcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdXBwb3J0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHN1cHBvcnQgPSBzdXBwb3J0c1tpXSxcbiAgICAgICAgICAgICAgICBjb250YWN0SWQgPSBzdXBwb3J0LmJvZHkgPT09IHBhcmVudEEgPyBzdXBwb3J0LmluZGV4IDogcGFyZW50QVZlcnRpY2VzTGVuZ3RoICsgc3VwcG9ydC5pbmRleCxcbiAgICAgICAgICAgICAgICBjb250YWN0ID0gY29udGFjdHNbY29udGFjdElkXTtcblxuICAgICAgICAgICAgaWYgKGNvbnRhY3QpIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVDb250YWN0cy5wdXNoKGNvbnRhY3QpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhY3RpdmVDb250YWN0cy5wdXNoKGNvbnRhY3RzW2NvbnRhY3RJZF0gPSBDb250YWN0LmNyZWF0ZShzdXBwb3J0KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIFNldCBhIHBhaXIgYXMgYWN0aXZlIG9yIGluYWN0aXZlLlxuICAgICAqIEBtZXRob2Qgc2V0QWN0aXZlXG4gICAgICogQHBhcmFtIHtwYWlyfSBwYWlyXG4gICAgICogQHBhcmFtIHtib29sfSBpc0FjdGl2ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB0aW1lc3RhbXBcbiAgICAgKi9cbiAgICBQYWlyLnNldEFjdGl2ZSA9IGZ1bmN0aW9uKHBhaXIsIGlzQWN0aXZlLCB0aW1lc3RhbXApIHtcbiAgICAgICAgaWYgKGlzQWN0aXZlKSB7XG4gICAgICAgICAgICBwYWlyLmlzQWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgICAgIHBhaXIudGltZVVwZGF0ZWQgPSB0aW1lc3RhbXA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwYWlyLmlzQWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICBwYWlyLmFjdGl2ZUNvbnRhY3RzLmxlbmd0aCA9IDA7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBpZCBmb3IgdGhlIGdpdmVuIHBhaXIuXG4gICAgICogQG1ldGhvZCBpZFxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keUFcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlCXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBVbmlxdWUgcGFpcklkXG4gICAgICovXG4gICAgUGFpci5pZCA9IGZ1bmN0aW9uKGJvZHlBLCBib2R5Qikge1xuICAgICAgICBpZiAoYm9keUEuaWQgPCBib2R5Qi5pZCkge1xuICAgICAgICAgICAgcmV0dXJuICdBJyArIGJvZHlBLmlkICsgJ0InICsgYm9keUIuaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ0EnICsgYm9keUIuaWQgKyAnQicgKyBib2R5QS5pZDtcbiAgICAgICAgfVxuICAgIH07XG5cbn0pKCk7XG5cblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKipcbiogVGhlIGBNYXR0ZXIuQ29uc3RyYWludGAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIGFuZCBtYW5pcHVsYXRpbmcgY29uc3RyYWludHMuXG4qIENvbnN0cmFpbnRzIGFyZSB1c2VkIGZvciBzcGVjaWZ5aW5nIHRoYXQgYSBmaXhlZCBkaXN0YW5jZSBtdXN0IGJlIG1haW50YWluZWQgYmV0d2VlbiB0d28gYm9kaWVzIChvciBhIGJvZHkgYW5kIGEgZml4ZWQgd29ybGQtc3BhY2UgcG9zaXRpb24pLlxuKiBUaGUgc3RpZmZuZXNzIG9mIGNvbnN0cmFpbnRzIGNhbiBiZSBtb2RpZmllZCB0byBjcmVhdGUgc3ByaW5ncyBvciBlbGFzdGljLlxuKlxuKiBTZWUgdGhlIGluY2x1ZGVkIHVzYWdlIFtleGFtcGxlc10oaHR0cHM6Ly9naXRodWIuY29tL2xpYWJydS9tYXR0ZXItanMvdHJlZS9tYXN0ZXIvZXhhbXBsZXMpLlxuKlxuKiBAY2xhc3MgQ29uc3RyYWludFxuKi9cblxudmFyIENvbnN0cmFpbnQgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBDb25zdHJhaW50O1xuXG52YXIgVmVydGljZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xudmFyIFZlY3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG52YXIgU2xlZXBpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xudmFyIEJvdW5kcyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgQXhlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xudmFyIENvbW1vbiA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIENvbnN0cmFpbnQuX3dhcm1pbmcgPSAwLjQ7XG4gICAgQ29uc3RyYWludC5fdG9ycXVlRGFtcGVuID0gMTtcbiAgICBDb25zdHJhaW50Ll9taW5MZW5ndGggPSAwLjAwMDAwMTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgY29uc3RyYWludC5cbiAgICAgKiBBbGwgcHJvcGVydGllcyBoYXZlIGRlZmF1bHQgdmFsdWVzLCBhbmQgbWFueSBhcmUgcHJlLWNhbGN1bGF0ZWQgYXV0b21hdGljYWxseSBiYXNlZCBvbiBvdGhlciBwcm9wZXJ0aWVzLlxuICAgICAqIFRvIHNpbXVsYXRlIGEgcmV2b2x1dGUgY29uc3RyYWludCAob3IgcGluIGpvaW50KSBzZXQgYGxlbmd0aDogMGAgYW5kIGEgaGlnaCBgc3RpZmZuZXNzYCB2YWx1ZSAoZS5nLiBgMC43YCBvciBhYm92ZSkuXG4gICAgICogSWYgdGhlIGNvbnN0cmFpbnQgaXMgdW5zdGFibGUsIHRyeSBsb3dlcmluZyB0aGUgYHN0aWZmbmVzc2AgdmFsdWUgYW5kIC8gb3IgaW5jcmVhc2luZyBgZW5naW5lLmNvbnN0cmFpbnRJdGVyYXRpb25zYC5cbiAgICAgKiBGb3IgY29tcG91bmQgYm9kaWVzLCBjb25zdHJhaW50cyBtdXN0IGJlIGFwcGxpZWQgdG8gdGhlIHBhcmVudCBib2R5IChub3Qgb25lIG9mIGl0cyBwYXJ0cykuXG4gICAgICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gYmVsb3cgZm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgeW91IGNhbiBwYXNzIHZpYSB0aGUgYG9wdGlvbnNgIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7Y29uc3RyYWludH0gY29uc3RyYWludFxuICAgICAqL1xuICAgIENvbnN0cmFpbnQuY3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgY29uc3RyYWludCA9IG9wdGlvbnM7XG5cbiAgICAgICAgLy8gaWYgYm9kaWVzIGRlZmluZWQgYnV0IG5vIHBvaW50cywgdXNlIGJvZHkgY2VudHJlXG4gICAgICAgIGlmIChjb25zdHJhaW50LmJvZHlBICYmICFjb25zdHJhaW50LnBvaW50QSlcbiAgICAgICAgICAgIGNvbnN0cmFpbnQucG9pbnRBID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIGlmIChjb25zdHJhaW50LmJvZHlCICYmICFjb25zdHJhaW50LnBvaW50QilcbiAgICAgICAgICAgIGNvbnN0cmFpbnQucG9pbnRCID0geyB4OiAwLCB5OiAwIH07XG5cbiAgICAgICAgLy8gY2FsY3VsYXRlIHN0YXRpYyBsZW5ndGggdXNpbmcgaW5pdGlhbCB3b3JsZCBzcGFjZSBwb2ludHNcbiAgICAgICAgdmFyIGluaXRpYWxQb2ludEEgPSBjb25zdHJhaW50LmJvZHlBID8gVmVjdG9yLmFkZChjb25zdHJhaW50LmJvZHlBLnBvc2l0aW9uLCBjb25zdHJhaW50LnBvaW50QSkgOiBjb25zdHJhaW50LnBvaW50QSxcbiAgICAgICAgICAgIGluaXRpYWxQb2ludEIgPSBjb25zdHJhaW50LmJvZHlCID8gVmVjdG9yLmFkZChjb25zdHJhaW50LmJvZHlCLnBvc2l0aW9uLCBjb25zdHJhaW50LnBvaW50QikgOiBjb25zdHJhaW50LnBvaW50QixcbiAgICAgICAgICAgIGxlbmd0aCA9IFZlY3Rvci5tYWduaXR1ZGUoVmVjdG9yLnN1Yihpbml0aWFsUG9pbnRBLCBpbml0aWFsUG9pbnRCKSk7XG4gICAgXG4gICAgICAgIGNvbnN0cmFpbnQubGVuZ3RoID0gdHlwZW9mIGNvbnN0cmFpbnQubGVuZ3RoICE9PSAndW5kZWZpbmVkJyA/IGNvbnN0cmFpbnQubGVuZ3RoIDogbGVuZ3RoO1xuXG4gICAgICAgIC8vIG9wdGlvbiBkZWZhdWx0c1xuICAgICAgICBjb25zdHJhaW50LmlkID0gY29uc3RyYWludC5pZCB8fCBDb21tb24ubmV4dElkKCk7XG4gICAgICAgIGNvbnN0cmFpbnQubGFiZWwgPSBjb25zdHJhaW50LmxhYmVsIHx8ICdDb25zdHJhaW50JztcbiAgICAgICAgY29uc3RyYWludC50eXBlID0gJ2NvbnN0cmFpbnQnO1xuICAgICAgICBjb25zdHJhaW50LnN0aWZmbmVzcyA9IGNvbnN0cmFpbnQuc3RpZmZuZXNzIHx8IChjb25zdHJhaW50Lmxlbmd0aCA+IDAgPyAxIDogMC43KTtcbiAgICAgICAgY29uc3RyYWludC5kYW1waW5nID0gY29uc3RyYWludC5kYW1waW5nIHx8IDA7XG4gICAgICAgIGNvbnN0cmFpbnQuYW5ndWxhclN0aWZmbmVzcyA9IGNvbnN0cmFpbnQuYW5ndWxhclN0aWZmbmVzcyB8fCAwO1xuICAgICAgICBjb25zdHJhaW50LmFuZ2xlQSA9IGNvbnN0cmFpbnQuYm9keUEgPyBjb25zdHJhaW50LmJvZHlBLmFuZ2xlIDogY29uc3RyYWludC5hbmdsZUE7XG4gICAgICAgIGNvbnN0cmFpbnQuYW5nbGVCID0gY29uc3RyYWludC5ib2R5QiA/IGNvbnN0cmFpbnQuYm9keUIuYW5nbGUgOiBjb25zdHJhaW50LmFuZ2xlQjtcbiAgICAgICAgY29uc3RyYWludC5wbHVnaW4gPSB7fTtcblxuICAgICAgICAvLyByZW5kZXJcbiAgICAgICAgdmFyIHJlbmRlciA9IHtcbiAgICAgICAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICAgICAgICBsaW5lV2lkdGg6IDIsXG4gICAgICAgICAgICBzdHJva2VTdHlsZTogJyNmZmZmZmYnLFxuICAgICAgICAgICAgdHlwZTogJ2xpbmUnLFxuICAgICAgICAgICAgYW5jaG9yczogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChjb25zdHJhaW50Lmxlbmd0aCA9PT0gMCAmJiBjb25zdHJhaW50LnN0aWZmbmVzcyA+IDAuMSkge1xuICAgICAgICAgICAgcmVuZGVyLnR5cGUgPSAncGluJztcbiAgICAgICAgICAgIHJlbmRlci5hbmNob3JzID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSBpZiAoY29uc3RyYWludC5zdGlmZm5lc3MgPCAwLjkpIHtcbiAgICAgICAgICAgIHJlbmRlci50eXBlID0gJ3NwcmluZyc7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdHJhaW50LnJlbmRlciA9IENvbW1vbi5leHRlbmQocmVuZGVyLCBjb25zdHJhaW50LnJlbmRlcik7XG5cbiAgICAgICAgcmV0dXJuIGNvbnN0cmFpbnQ7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFByZXBhcmVzIGZvciBzb2x2aW5nIGJ5IGNvbnN0cmFpbnQgd2FybWluZy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgcHJlU29sdmVBbGxcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICovXG4gICAgQ29uc3RyYWludC5wcmVTb2x2ZUFsbCA9IGZ1bmN0aW9uKGJvZGllcykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV0sXG4gICAgICAgICAgICAgICAgaW1wdWxzZSA9IGJvZHkuY29uc3RyYWludEltcHVsc2U7XG5cbiAgICAgICAgICAgIGlmIChib2R5LmlzU3RhdGljIHx8IChpbXB1bHNlLnggPT09IDAgJiYgaW1wdWxzZS55ID09PSAwICYmIGltcHVsc2UuYW5nbGUgPT09IDApKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGJvZHkucG9zaXRpb24ueCArPSBpbXB1bHNlLng7XG4gICAgICAgICAgICBib2R5LnBvc2l0aW9uLnkgKz0gaW1wdWxzZS55O1xuICAgICAgICAgICAgYm9keS5hbmdsZSArPSBpbXB1bHNlLmFuZ2xlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNvbHZlcyBhbGwgY29uc3RyYWludHMgaW4gYSBsaXN0IG9mIGNvbGxpc2lvbnMuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIHNvbHZlQWxsXG4gICAgICogQHBhcmFtIHtjb25zdHJhaW50W119IGNvbnN0cmFpbnRzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhXG4gICAgICovXG4gICAgQ29uc3RyYWludC5zb2x2ZUFsbCA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzLCBkZWx0YSkge1xuICAgICAgICB2YXIgdGltZVNjYWxlID0gQ29tbW9uLmNsYW1wKGRlbHRhIC8gQ29tbW9uLl9iYXNlRGVsdGEsIDAsIDEpO1xuXG4gICAgICAgIC8vIFNvbHZlIGZpeGVkIGNvbnN0cmFpbnRzIGZpcnN0LlxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnN0cmFpbnRzLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICB2YXIgY29uc3RyYWludCA9IGNvbnN0cmFpbnRzW2ldLFxuICAgICAgICAgICAgICAgIGZpeGVkQSA9ICFjb25zdHJhaW50LmJvZHlBIHx8IChjb25zdHJhaW50LmJvZHlBICYmIGNvbnN0cmFpbnQuYm9keUEuaXNTdGF0aWMpLFxuICAgICAgICAgICAgICAgIGZpeGVkQiA9ICFjb25zdHJhaW50LmJvZHlCIHx8IChjb25zdHJhaW50LmJvZHlCICYmIGNvbnN0cmFpbnQuYm9keUIuaXNTdGF0aWMpO1xuXG4gICAgICAgICAgICBpZiAoZml4ZWRBIHx8IGZpeGVkQikge1xuICAgICAgICAgICAgICAgIENvbnN0cmFpbnQuc29sdmUoY29uc3RyYWludHNbaV0sIHRpbWVTY2FsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTb2x2ZSBmcmVlIGNvbnN0cmFpbnRzIGxhc3QuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb25zdHJhaW50cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3RyYWludCA9IGNvbnN0cmFpbnRzW2ldO1xuICAgICAgICAgICAgZml4ZWRBID0gIWNvbnN0cmFpbnQuYm9keUEgfHwgKGNvbnN0cmFpbnQuYm9keUEgJiYgY29uc3RyYWludC5ib2R5QS5pc1N0YXRpYyk7XG4gICAgICAgICAgICBmaXhlZEIgPSAhY29uc3RyYWludC5ib2R5QiB8fCAoY29uc3RyYWludC5ib2R5QiAmJiBjb25zdHJhaW50LmJvZHlCLmlzU3RhdGljKTtcblxuICAgICAgICAgICAgaWYgKCFmaXhlZEEgJiYgIWZpeGVkQikge1xuICAgICAgICAgICAgICAgIENvbnN0cmFpbnQuc29sdmUoY29uc3RyYWludHNbaV0sIHRpbWVTY2FsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogU29sdmVzIGEgZGlzdGFuY2UgY29uc3RyYWludCB3aXRoIEdhdXNzLVNpZWRlbCBtZXRob2QuXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIHNvbHZlXG4gICAgICogQHBhcmFtIHtjb25zdHJhaW50fSBjb25zdHJhaW50XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHRpbWVTY2FsZVxuICAgICAqL1xuICAgIENvbnN0cmFpbnQuc29sdmUgPSBmdW5jdGlvbihjb25zdHJhaW50LCB0aW1lU2NhbGUpIHtcbiAgICAgICAgdmFyIGJvZHlBID0gY29uc3RyYWludC5ib2R5QSxcbiAgICAgICAgICAgIGJvZHlCID0gY29uc3RyYWludC5ib2R5QixcbiAgICAgICAgICAgIHBvaW50QSA9IGNvbnN0cmFpbnQucG9pbnRBLFxuICAgICAgICAgICAgcG9pbnRCID0gY29uc3RyYWludC5wb2ludEI7XG5cbiAgICAgICAgaWYgKCFib2R5QSAmJiAhYm9keUIpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgLy8gdXBkYXRlIHJlZmVyZW5jZSBhbmdsZVxuICAgICAgICBpZiAoYm9keUEgJiYgIWJvZHlBLmlzU3RhdGljKSB7XG4gICAgICAgICAgICBWZWN0b3Iucm90YXRlKHBvaW50QSwgYm9keUEuYW5nbGUgLSBjb25zdHJhaW50LmFuZ2xlQSwgcG9pbnRBKTtcbiAgICAgICAgICAgIGNvbnN0cmFpbnQuYW5nbGVBID0gYm9keUEuYW5nbGU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIHVwZGF0ZSByZWZlcmVuY2UgYW5nbGVcbiAgICAgICAgaWYgKGJvZHlCICYmICFib2R5Qi5pc1N0YXRpYykge1xuICAgICAgICAgICAgVmVjdG9yLnJvdGF0ZShwb2ludEIsIGJvZHlCLmFuZ2xlIC0gY29uc3RyYWludC5hbmdsZUIsIHBvaW50Qik7XG4gICAgICAgICAgICBjb25zdHJhaW50LmFuZ2xlQiA9IGJvZHlCLmFuZ2xlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvaW50QVdvcmxkID0gcG9pbnRBLFxuICAgICAgICAgICAgcG9pbnRCV29ybGQgPSBwb2ludEI7XG5cbiAgICAgICAgaWYgKGJvZHlBKSBwb2ludEFXb3JsZCA9IFZlY3Rvci5hZGQoYm9keUEucG9zaXRpb24sIHBvaW50QSk7XG4gICAgICAgIGlmIChib2R5QikgcG9pbnRCV29ybGQgPSBWZWN0b3IuYWRkKGJvZHlCLnBvc2l0aW9uLCBwb2ludEIpO1xuXG4gICAgICAgIGlmICghcG9pbnRBV29ybGQgfHwgIXBvaW50QldvcmxkKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIHZhciBkZWx0YSA9IFZlY3Rvci5zdWIocG9pbnRBV29ybGQsIHBvaW50QldvcmxkKSxcbiAgICAgICAgICAgIGN1cnJlbnRMZW5ndGggPSBWZWN0b3IubWFnbml0dWRlKGRlbHRhKTtcblxuICAgICAgICAvLyBwcmV2ZW50IHNpbmd1bGFyaXR5XG4gICAgICAgIGlmIChjdXJyZW50TGVuZ3RoIDwgQ29uc3RyYWludC5fbWluTGVuZ3RoKSB7XG4gICAgICAgICAgICBjdXJyZW50TGVuZ3RoID0gQ29uc3RyYWludC5fbWluTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc29sdmUgZGlzdGFuY2UgY29uc3RyYWludCB3aXRoIEdhdXNzLVNpZWRlbCBtZXRob2RcbiAgICAgICAgdmFyIGRpZmZlcmVuY2UgPSAoY3VycmVudExlbmd0aCAtIGNvbnN0cmFpbnQubGVuZ3RoKSAvIGN1cnJlbnRMZW5ndGgsXG4gICAgICAgICAgICBpc1JpZ2lkID0gY29uc3RyYWludC5zdGlmZm5lc3MgPj0gMSB8fCBjb25zdHJhaW50Lmxlbmd0aCA9PT0gMCxcbiAgICAgICAgICAgIHN0aWZmbmVzcyA9IGlzUmlnaWQgPyBjb25zdHJhaW50LnN0aWZmbmVzcyAqIHRpbWVTY2FsZSBcbiAgICAgICAgICAgICAgICA6IGNvbnN0cmFpbnQuc3RpZmZuZXNzICogdGltZVNjYWxlICogdGltZVNjYWxlLFxuICAgICAgICAgICAgZGFtcGluZyA9IGNvbnN0cmFpbnQuZGFtcGluZyAqIHRpbWVTY2FsZSxcbiAgICAgICAgICAgIGZvcmNlID0gVmVjdG9yLm11bHQoZGVsdGEsIGRpZmZlcmVuY2UgKiBzdGlmZm5lc3MpLFxuICAgICAgICAgICAgbWFzc1RvdGFsID0gKGJvZHlBID8gYm9keUEuaW52ZXJzZU1hc3MgOiAwKSArIChib2R5QiA/IGJvZHlCLmludmVyc2VNYXNzIDogMCksXG4gICAgICAgICAgICBpbmVydGlhVG90YWwgPSAoYm9keUEgPyBib2R5QS5pbnZlcnNlSW5lcnRpYSA6IDApICsgKGJvZHlCID8gYm9keUIuaW52ZXJzZUluZXJ0aWEgOiAwKSxcbiAgICAgICAgICAgIHJlc2lzdGFuY2VUb3RhbCA9IG1hc3NUb3RhbCArIGluZXJ0aWFUb3RhbCxcbiAgICAgICAgICAgIHRvcnF1ZSxcbiAgICAgICAgICAgIHNoYXJlLFxuICAgICAgICAgICAgbm9ybWFsLFxuICAgICAgICAgICAgbm9ybWFsVmVsb2NpdHksXG4gICAgICAgICAgICByZWxhdGl2ZVZlbG9jaXR5O1xuICAgIFxuICAgICAgICBpZiAoZGFtcGluZyA+IDApIHtcbiAgICAgICAgICAgIHZhciB6ZXJvID0gVmVjdG9yLmNyZWF0ZSgpO1xuICAgICAgICAgICAgbm9ybWFsID0gVmVjdG9yLmRpdihkZWx0YSwgY3VycmVudExlbmd0aCk7XG5cbiAgICAgICAgICAgIHJlbGF0aXZlVmVsb2NpdHkgPSBWZWN0b3Iuc3ViKFxuICAgICAgICAgICAgICAgIGJvZHlCICYmIFZlY3Rvci5zdWIoYm9keUIucG9zaXRpb24sIGJvZHlCLnBvc2l0aW9uUHJldikgfHwgemVybyxcbiAgICAgICAgICAgICAgICBib2R5QSAmJiBWZWN0b3Iuc3ViKGJvZHlBLnBvc2l0aW9uLCBib2R5QS5wb3NpdGlvblByZXYpIHx8IHplcm9cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIG5vcm1hbFZlbG9jaXR5ID0gVmVjdG9yLmRvdChub3JtYWwsIHJlbGF0aXZlVmVsb2NpdHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJvZHlBICYmICFib2R5QS5pc1N0YXRpYykge1xuICAgICAgICAgICAgc2hhcmUgPSBib2R5QS5pbnZlcnNlTWFzcyAvIG1hc3NUb3RhbDtcblxuICAgICAgICAgICAgLy8ga2VlcCB0cmFjayBvZiBhcHBsaWVkIGltcHVsc2VzIGZvciBwb3N0IHNvbHZpbmdcbiAgICAgICAgICAgIGJvZHlBLmNvbnN0cmFpbnRJbXB1bHNlLnggLT0gZm9yY2UueCAqIHNoYXJlO1xuICAgICAgICAgICAgYm9keUEuY29uc3RyYWludEltcHVsc2UueSAtPSBmb3JjZS55ICogc2hhcmU7XG5cbiAgICAgICAgICAgIC8vIGFwcGx5IGZvcmNlc1xuICAgICAgICAgICAgYm9keUEucG9zaXRpb24ueCAtPSBmb3JjZS54ICogc2hhcmU7XG4gICAgICAgICAgICBib2R5QS5wb3NpdGlvbi55IC09IGZvcmNlLnkgKiBzaGFyZTtcblxuICAgICAgICAgICAgLy8gYXBwbHkgZGFtcGluZ1xuICAgICAgICAgICAgaWYgKGRhbXBpbmcgPiAwKSB7XG4gICAgICAgICAgICAgICAgYm9keUEucG9zaXRpb25QcmV2LnggLT0gZGFtcGluZyAqIG5vcm1hbC54ICogbm9ybWFsVmVsb2NpdHkgKiBzaGFyZTtcbiAgICAgICAgICAgICAgICBib2R5QS5wb3NpdGlvblByZXYueSAtPSBkYW1waW5nICogbm9ybWFsLnkgKiBub3JtYWxWZWxvY2l0eSAqIHNoYXJlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBhcHBseSB0b3JxdWVcbiAgICAgICAgICAgIHRvcnF1ZSA9IChWZWN0b3IuY3Jvc3MocG9pbnRBLCBmb3JjZSkgLyByZXNpc3RhbmNlVG90YWwpICogQ29uc3RyYWludC5fdG9ycXVlRGFtcGVuICogYm9keUEuaW52ZXJzZUluZXJ0aWEgKiAoMSAtIGNvbnN0cmFpbnQuYW5ndWxhclN0aWZmbmVzcyk7XG4gICAgICAgICAgICBib2R5QS5jb25zdHJhaW50SW1wdWxzZS5hbmdsZSAtPSB0b3JxdWU7XG4gICAgICAgICAgICBib2R5QS5hbmdsZSAtPSB0b3JxdWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYm9keUIgJiYgIWJvZHlCLmlzU3RhdGljKSB7XG4gICAgICAgICAgICBzaGFyZSA9IGJvZHlCLmludmVyc2VNYXNzIC8gbWFzc1RvdGFsO1xuXG4gICAgICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIGFwcGxpZWQgaW1wdWxzZXMgZm9yIHBvc3Qgc29sdmluZ1xuICAgICAgICAgICAgYm9keUIuY29uc3RyYWludEltcHVsc2UueCArPSBmb3JjZS54ICogc2hhcmU7XG4gICAgICAgICAgICBib2R5Qi5jb25zdHJhaW50SW1wdWxzZS55ICs9IGZvcmNlLnkgKiBzaGFyZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gYXBwbHkgZm9yY2VzXG4gICAgICAgICAgICBib2R5Qi5wb3NpdGlvbi54ICs9IGZvcmNlLnggKiBzaGFyZTtcbiAgICAgICAgICAgIGJvZHlCLnBvc2l0aW9uLnkgKz0gZm9yY2UueSAqIHNoYXJlO1xuXG4gICAgICAgICAgICAvLyBhcHBseSBkYW1waW5nXG4gICAgICAgICAgICBpZiAoZGFtcGluZyA+IDApIHtcbiAgICAgICAgICAgICAgICBib2R5Qi5wb3NpdGlvblByZXYueCArPSBkYW1waW5nICogbm9ybWFsLnggKiBub3JtYWxWZWxvY2l0eSAqIHNoYXJlO1xuICAgICAgICAgICAgICAgIGJvZHlCLnBvc2l0aW9uUHJldi55ICs9IGRhbXBpbmcgKiBub3JtYWwueSAqIG5vcm1hbFZlbG9jaXR5ICogc2hhcmU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGFwcGx5IHRvcnF1ZVxuICAgICAgICAgICAgdG9ycXVlID0gKFZlY3Rvci5jcm9zcyhwb2ludEIsIGZvcmNlKSAvIHJlc2lzdGFuY2VUb3RhbCkgKiBDb25zdHJhaW50Ll90b3JxdWVEYW1wZW4gKiBib2R5Qi5pbnZlcnNlSW5lcnRpYSAqICgxIC0gY29uc3RyYWludC5hbmd1bGFyU3RpZmZuZXNzKTtcbiAgICAgICAgICAgIGJvZHlCLmNvbnN0cmFpbnRJbXB1bHNlLmFuZ2xlICs9IHRvcnF1ZTtcbiAgICAgICAgICAgIGJvZHlCLmFuZ2xlICs9IHRvcnF1ZTtcbiAgICAgICAgfVxuXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGJvZHkgdXBkYXRlcyByZXF1aXJlZCBhZnRlciBzb2x2aW5nIGNvbnN0cmFpbnRzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBwb3N0U29sdmVBbGxcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICovXG4gICAgQ29uc3RyYWludC5wb3N0U29sdmVBbGwgPSBmdW5jdGlvbihib2RpZXMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldLFxuICAgICAgICAgICAgICAgIGltcHVsc2UgPSBib2R5LmNvbnN0cmFpbnRJbXB1bHNlO1xuXG4gICAgICAgICAgICBpZiAoYm9keS5pc1N0YXRpYyB8fCAoaW1wdWxzZS54ID09PSAwICYmIGltcHVsc2UueSA9PT0gMCAmJiBpbXB1bHNlLmFuZ2xlID09PSAwKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBTbGVlcGluZy5zZXQoYm9keSwgZmFsc2UpO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgZ2VvbWV0cnkgYW5kIHJlc2V0XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGJvZHkucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFydCA9IGJvZHkucGFydHNbal07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgVmVydGljZXMudHJhbnNsYXRlKHBhcnQudmVydGljZXMsIGltcHVsc2UpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnQucG9zaXRpb24ueCArPSBpbXB1bHNlLng7XG4gICAgICAgICAgICAgICAgICAgIHBhcnQucG9zaXRpb24ueSArPSBpbXB1bHNlLnk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGltcHVsc2UuYW5nbGUgIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgVmVydGljZXMucm90YXRlKHBhcnQudmVydGljZXMsIGltcHVsc2UuYW5nbGUsIGJvZHkucG9zaXRpb24pO1xuICAgICAgICAgICAgICAgICAgICBBeGVzLnJvdGF0ZShwYXJ0LmF4ZXMsIGltcHVsc2UuYW5nbGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaiA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFZlY3Rvci5yb3RhdGVBYm91dChwYXJ0LnBvc2l0aW9uLCBpbXB1bHNlLmFuZ2xlLCBib2R5LnBvc2l0aW9uLCBwYXJ0LnBvc2l0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIEJvdW5kcy51cGRhdGUocGFydC5ib3VuZHMsIHBhcnQudmVydGljZXMsIGJvZHkudmVsb2NpdHkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBkYW1wZW4gdGhlIGNhY2hlZCBpbXB1bHNlIGZvciB3YXJtaW5nIG5leHQgc3RlcFxuICAgICAgICAgICAgaW1wdWxzZS5hbmdsZSAqPSBDb25zdHJhaW50Ll93YXJtaW5nO1xuICAgICAgICAgICAgaW1wdWxzZS54ICo9IENvbnN0cmFpbnQuX3dhcm1pbmc7XG4gICAgICAgICAgICBpbXB1bHNlLnkgKj0gQ29uc3RyYWludC5fd2FybWluZztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB3b3JsZC1zcGFjZSBwb3NpdGlvbiBvZiBgY29uc3RyYWludC5wb2ludEFgLCBhY2NvdW50aW5nIGZvciBgY29uc3RyYWludC5ib2R5QWAuXG4gICAgICogQG1ldGhvZCBwb2ludEFXb3JsZFxuICAgICAqIEBwYXJhbSB7Y29uc3RyYWludH0gY29uc3RyYWludFxuICAgICAqIEByZXR1cm5zIHt2ZWN0b3J9IHRoZSB3b3JsZC1zcGFjZSBwb3NpdGlvblxuICAgICAqL1xuICAgIENvbnN0cmFpbnQucG9pbnRBV29ybGQgPSBmdW5jdGlvbihjb25zdHJhaW50KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiAoY29uc3RyYWludC5ib2R5QSA/IGNvbnN0cmFpbnQuYm9keUEucG9zaXRpb24ueCA6IDApIFxuICAgICAgICAgICAgICAgICsgKGNvbnN0cmFpbnQucG9pbnRBID8gY29uc3RyYWludC5wb2ludEEueCA6IDApLFxuICAgICAgICAgICAgeTogKGNvbnN0cmFpbnQuYm9keUEgPyBjb25zdHJhaW50LmJvZHlBLnBvc2l0aW9uLnkgOiAwKSBcbiAgICAgICAgICAgICAgICArIChjb25zdHJhaW50LnBvaW50QSA/IGNvbnN0cmFpbnQucG9pbnRBLnkgOiAwKVxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB3b3JsZC1zcGFjZSBwb3NpdGlvbiBvZiBgY29uc3RyYWludC5wb2ludEJgLCBhY2NvdW50aW5nIGZvciBgY29uc3RyYWludC5ib2R5QmAuXG4gICAgICogQG1ldGhvZCBwb2ludEJXb3JsZFxuICAgICAqIEBwYXJhbSB7Y29uc3RyYWludH0gY29uc3RyYWludFxuICAgICAqIEByZXR1cm5zIHt2ZWN0b3J9IHRoZSB3b3JsZC1zcGFjZSBwb3NpdGlvblxuICAgICAqL1xuICAgIENvbnN0cmFpbnQucG9pbnRCV29ybGQgPSBmdW5jdGlvbihjb25zdHJhaW50KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiAoY29uc3RyYWludC5ib2R5QiA/IGNvbnN0cmFpbnQuYm9keUIucG9zaXRpb24ueCA6IDApIFxuICAgICAgICAgICAgICAgICsgKGNvbnN0cmFpbnQucG9pbnRCID8gY29uc3RyYWludC5wb2ludEIueCA6IDApLFxuICAgICAgICAgICAgeTogKGNvbnN0cmFpbnQuYm9keUIgPyBjb25zdHJhaW50LmJvZHlCLnBvc2l0aW9uLnkgOiAwKSBcbiAgICAgICAgICAgICAgICArIChjb25zdHJhaW50LnBvaW50QiA/IGNvbnN0cmFpbnQucG9pbnRCLnkgOiAwKVxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICAvKlxuICAgICpcbiAgICAqICBQcm9wZXJ0aWVzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGludGVnZXIgYE51bWJlcmAgdW5pcXVlbHkgaWRlbnRpZnlpbmcgbnVtYmVyIGdlbmVyYXRlZCBpbiBgQ29tcG9zaXRlLmNyZWF0ZWAgYnkgYENvbW1vbi5uZXh0SWRgLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGlkXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBTdHJpbmdgIGRlbm90aW5nIHRoZSB0eXBlIG9mIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB0eXBlXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICogQGRlZmF1bHQgXCJjb25zdHJhaW50XCJcbiAgICAgKiBAcmVhZE9ubHlcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGFyYml0cmFyeSBgU3RyaW5nYCBuYW1lIHRvIGhlbHAgdGhlIHVzZXIgaWRlbnRpZnkgYW5kIG1hbmFnZSBib2RpZXMuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgbGFiZWxcbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKiBAZGVmYXVsdCBcIkNvbnN0cmFpbnRcIlxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYE9iamVjdGAgdGhhdCBkZWZpbmVzIHRoZSByZW5kZXJpbmcgcHJvcGVydGllcyB0byBiZSBjb25zdW1lZCBieSB0aGUgbW9kdWxlIGBNYXR0ZXIuUmVuZGVyYC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXJcbiAgICAgKiBAdHlwZSBvYmplY3RcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0aGF0IGluZGljYXRlcyBpZiB0aGUgY29uc3RyYWludCBzaG91bGQgYmUgcmVuZGVyZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyLnZpc2libGVcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IGRlZmluZXMgdGhlIGxpbmUgd2lkdGggdG8gdXNlIHdoZW4gcmVuZGVyaW5nIHRoZSBjb25zdHJhaW50IG91dGxpbmUuXG4gICAgICogQSB2YWx1ZSBvZiBgMGAgbWVhbnMgbm8gb3V0bGluZSB3aWxsIGJlIHJlbmRlcmVkLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHJlbmRlci5saW5lV2lkdGhcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAyXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBTdHJpbmdgIHRoYXQgZGVmaW5lcyB0aGUgc3Ryb2tlIHN0eWxlIHRvIHVzZSB3aGVuIHJlbmRlcmluZyB0aGUgY29uc3RyYWludCBvdXRsaW5lLlxuICAgICAqIEl0IGlzIHRoZSBzYW1lIGFzIHdoZW4gdXNpbmcgYSBjYW52YXMsIHNvIGl0IGFjY2VwdHMgQ1NTIHN0eWxlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIuc3Ryb2tlU3R5bGVcbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKiBAZGVmYXVsdCBhIHJhbmRvbSBjb2xvdXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYFN0cmluZ2AgdGhhdCBkZWZpbmVzIHRoZSBjb25zdHJhaW50IHJlbmRlcmluZyB0eXBlLiBcbiAgICAgKiBUaGUgcG9zc2libGUgdmFsdWVzIGFyZSAnbGluZScsICdwaW4nLCAnc3ByaW5nJy5cbiAgICAgKiBBbiBhcHByb3ByaWF0ZSByZW5kZXIgdHlwZSB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgY2hvc2VuIHVubGVzcyBvbmUgaXMgZ2l2ZW4gaW4gb3B0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSByZW5kZXIudHlwZVxuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqIEBkZWZhdWx0ICdsaW5lJ1xuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgQm9vbGVhbmAgdGhhdCBkZWZpbmVzIGlmIHRoZSBjb25zdHJhaW50J3MgYW5jaG9yIHBvaW50cyBzaG91bGQgYmUgcmVuZGVyZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcmVuZGVyLmFuY2hvcnNcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIGZpcnN0IHBvc3NpYmxlIGBCb2R5YCB0aGF0IHRoaXMgY29uc3RyYWludCBpcyBhdHRhY2hlZCB0by5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBib2R5QVxuICAgICAqIEB0eXBlIGJvZHlcbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgc2Vjb25kIHBvc3NpYmxlIGBCb2R5YCB0aGF0IHRoaXMgY29uc3RyYWludCBpcyBhdHRhY2hlZCB0by5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBib2R5QlxuICAgICAqIEB0eXBlIGJvZHlcbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBWZWN0b3JgIHRoYXQgc3BlY2lmaWVzIHRoZSBvZmZzZXQgb2YgdGhlIGNvbnN0cmFpbnQgZnJvbSBjZW50ZXIgb2YgdGhlIGBjb25zdHJhaW50LmJvZHlBYCBpZiBkZWZpbmVkLCBvdGhlcndpc2UgYSB3b3JsZC1zcGFjZSBwb3NpdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBwb2ludEFcbiAgICAgKiBAdHlwZSB2ZWN0b3JcbiAgICAgKiBAZGVmYXVsdCB7IHg6IDAsIHk6IDAgfVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgVmVjdG9yYCB0aGF0IHNwZWNpZmllcyB0aGUgb2Zmc2V0IG9mIHRoZSBjb25zdHJhaW50IGZyb20gY2VudGVyIG9mIHRoZSBgY29uc3RyYWludC5ib2R5QmAgaWYgZGVmaW5lZCwgb3RoZXJ3aXNlIGEgd29ybGQtc3BhY2UgcG9zaXRpb24uXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgcG9pbnRCXG4gICAgICogQHR5cGUgdmVjdG9yXG4gICAgICogQGRlZmF1bHQgeyB4OiAwLCB5OiAwIH1cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgdGhlIHN0aWZmbmVzcyBvZiB0aGUgY29uc3RyYWludCwgaS5lLiB0aGUgcmF0ZSBhdCB3aGljaCBpdCByZXR1cm5zIHRvIGl0cyByZXN0aW5nIGBjb25zdHJhaW50Lmxlbmd0aGAuXG4gICAgICogQSB2YWx1ZSBvZiBgMWAgbWVhbnMgdGhlIGNvbnN0cmFpbnQgc2hvdWxkIGJlIHZlcnkgc3RpZmYuXG4gICAgICogQSB2YWx1ZSBvZiBgMC4yYCBtZWFucyB0aGUgY29uc3RyYWludCBhY3RzIGxpa2UgYSBzb2Z0IHNwcmluZy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBzdGlmZm5lc3NcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCAxXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgc3BlY2lmaWVzIHRoZSBkYW1waW5nIG9mIHRoZSBjb25zdHJhaW50LCBcbiAgICAgKiBpLmUuIHRoZSBhbW91bnQgb2YgcmVzaXN0YW5jZSBhcHBsaWVkIHRvIGVhY2ggYm9keSBiYXNlZCBvbiB0aGVpciB2ZWxvY2l0aWVzIHRvIGxpbWl0IHRoZSBhbW91bnQgb2Ygb3NjaWxsYXRpb24uXG4gICAgICogRGFtcGluZyB3aWxsIG9ubHkgYmUgYXBwYXJlbnQgd2hlbiB0aGUgY29uc3RyYWludCBhbHNvIGhhcyBhIHZlcnkgbG93IGBzdGlmZm5lc3NgLlxuICAgICAqIEEgdmFsdWUgb2YgYDAuMWAgbWVhbnMgdGhlIGNvbnN0cmFpbnQgd2lsbCBhcHBseSBoZWF2eSBkYW1waW5nLCByZXN1bHRpbmcgaW4gbGl0dGxlIHRvIG5vIG9zY2lsbGF0aW9uLlxuICAgICAqIEEgdmFsdWUgb2YgYDBgIG1lYW5zIHRoZSBjb25zdHJhaW50IHdpbGwgYXBwbHkgbm8gZGFtcGluZy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBkYW1waW5nXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IHNwZWNpZmllcyB0aGUgdGFyZ2V0IHJlc3RpbmcgbGVuZ3RoIG9mIHRoZSBjb25zdHJhaW50LiBcbiAgICAgKiBJdCBpcyBjYWxjdWxhdGVkIGF1dG9tYXRpY2FsbHkgaW4gYENvbnN0cmFpbnQuY3JlYXRlYCBmcm9tIGluaXRpYWwgcG9zaXRpb25zIG9mIHRoZSBgY29uc3RyYWludC5ib2R5QWAgYW5kIGBjb25zdHJhaW50LmJvZHlCYC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBsZW5ndGhcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIG9iamVjdCByZXNlcnZlZCBmb3Igc3RvcmluZyBwbHVnaW4tc3BlY2lmaWMgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBwbHVnaW5cbiAgICAgKiBAdHlwZSB7fVxuICAgICAqL1xuXG59KSgpO1xuXG5cbi8qKiovIH0pLFxuLyogMTEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyoqXG4qIFRoZSBgTWF0dGVyLkF4ZXNgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIHNldHMgb2YgYXhlcy5cbipcbiogQGNsYXNzIEF4ZXNcbiovXG5cbnZhciBBeGVzID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gQXhlcztcblxudmFyIFZlY3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG52YXIgQ29tbW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBzZXQgb2YgYXhlcyBmcm9tIHRoZSBnaXZlbiB2ZXJ0aWNlcy5cbiAgICAgKiBAbWV0aG9kIGZyb21WZXJ0aWNlc1xuICAgICAqIEBwYXJhbSB7dmVydGljZXN9IHZlcnRpY2VzXG4gICAgICogQHJldHVybiB7YXhlc30gQSBuZXcgYXhlcyBmcm9tIHRoZSBnaXZlbiB2ZXJ0aWNlc1xuICAgICAqL1xuICAgIEF4ZXMuZnJvbVZlcnRpY2VzID0gZnVuY3Rpb24odmVydGljZXMpIHtcbiAgICAgICAgdmFyIGF4ZXMgPSB7fTtcblxuICAgICAgICAvLyBmaW5kIHRoZSB1bmlxdWUgYXhlcywgdXNpbmcgZWRnZSBub3JtYWwgZ3JhZGllbnRzXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmVydGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBqID0gKGkgKyAxKSAlIHZlcnRpY2VzLmxlbmd0aCwgXG4gICAgICAgICAgICAgICAgbm9ybWFsID0gVmVjdG9yLm5vcm1hbGlzZSh7IFxuICAgICAgICAgICAgICAgICAgICB4OiB2ZXJ0aWNlc1tqXS55IC0gdmVydGljZXNbaV0ueSwgXG4gICAgICAgICAgICAgICAgICAgIHk6IHZlcnRpY2VzW2ldLnggLSB2ZXJ0aWNlc1tqXS54XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgZ3JhZGllbnQgPSAobm9ybWFsLnkgPT09IDApID8gSW5maW5pdHkgOiAobm9ybWFsLnggLyBub3JtYWwueSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIGxpbWl0IHByZWNpc2lvblxuICAgICAgICAgICAgZ3JhZGllbnQgPSBncmFkaWVudC50b0ZpeGVkKDMpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICBheGVzW2dyYWRpZW50XSA9IG5vcm1hbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBDb21tb24udmFsdWVzKGF4ZXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSb3RhdGVzIGEgc2V0IG9mIGF4ZXMgYnkgdGhlIGdpdmVuIGFuZ2xlLlxuICAgICAqIEBtZXRob2Qgcm90YXRlXG4gICAgICogQHBhcmFtIHtheGVzfSBheGVzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlXG4gICAgICovXG4gICAgQXhlcy5yb3RhdGUgPSBmdW5jdGlvbihheGVzLCBhbmdsZSkge1xuICAgICAgICBpZiAoYW5nbGUgPT09IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIFxuICAgICAgICB2YXIgY29zID0gTWF0aC5jb3MoYW5nbGUpLFxuICAgICAgICAgICAgc2luID0gTWF0aC5zaW4oYW5nbGUpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXhlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGF4aXMgPSBheGVzW2ldLFxuICAgICAgICAgICAgICAgIHh4O1xuICAgICAgICAgICAgeHggPSBheGlzLnggKiBjb3MgLSBheGlzLnkgKiBzaW47XG4gICAgICAgICAgICBheGlzLnkgPSBheGlzLnggKiBzaW4gKyBheGlzLnkgKiBjb3M7XG4gICAgICAgICAgICBheGlzLnggPSB4eDtcbiAgICAgICAgfVxuICAgIH07XG5cbn0pKCk7XG5cblxuLyoqKi8gfSksXG4vKiAxMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKipcbiogVGhlIGBNYXR0ZXIuQm9kaWVzYCBtb2R1bGUgY29udGFpbnMgZmFjdG9yeSBtZXRob2RzIGZvciBjcmVhdGluZyByaWdpZCBib2R5IG1vZGVscyBcbiogd2l0aCBjb21tb25seSB1c2VkIGJvZHkgY29uZmlndXJhdGlvbnMgKHN1Y2ggYXMgcmVjdGFuZ2xlcywgY2lyY2xlcyBhbmQgb3RoZXIgcG9seWdvbnMpLlxuKlxuKiBTZWUgdGhlIGluY2x1ZGVkIHVzYWdlIFtleGFtcGxlc10oaHR0cHM6Ly9naXRodWIuY29tL2xpYWJydS9tYXR0ZXItanMvdHJlZS9tYXN0ZXIvZXhhbXBsZXMpLlxuKlxuKiBAY2xhc3MgQm9kaWVzXG4qL1xuXG4vLyBUT0RPOiB0cnVlIGNpcmNsZSBib2RpZXNcblxudmFyIEJvZGllcyA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJvZGllcztcblxudmFyIFZlcnRpY2VzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcbnZhciBDb21tb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIEJvZHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIEJvdW5kcyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgVmVjdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByaWdpZCBib2R5IG1vZGVsIHdpdGggYSByZWN0YW5nbGUgaHVsbC4gXG4gICAgICogVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyBhbnkgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gb2YgdGhlIGBNYXR0ZXIuQm9keWAgbW9kdWxlIGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgICogQG1ldGhvZCByZWN0YW5nbGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICAgKiBAcmV0dXJuIHtib2R5fSBBIG5ldyByZWN0YW5nbGUgYm9keVxuICAgICAqL1xuICAgIEJvZGllcy5yZWN0YW5nbGUgPSBmdW5jdGlvbih4LCB5LCB3aWR0aCwgaGVpZ2h0LCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIHZhciByZWN0YW5nbGUgPSB7IFxuICAgICAgICAgICAgbGFiZWw6ICdSZWN0YW5nbGUgQm9keScsXG4gICAgICAgICAgICBwb3NpdGlvbjogeyB4OiB4LCB5OiB5IH0sXG4gICAgICAgICAgICB2ZXJ0aWNlczogVmVydGljZXMuZnJvbVBhdGgoJ0wgMCAwIEwgJyArIHdpZHRoICsgJyAwIEwgJyArIHdpZHRoICsgJyAnICsgaGVpZ2h0ICsgJyBMIDAgJyArIGhlaWdodClcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAob3B0aW9ucy5jaGFtZmVyKSB7XG4gICAgICAgICAgICB2YXIgY2hhbWZlciA9IG9wdGlvbnMuY2hhbWZlcjtcbiAgICAgICAgICAgIHJlY3RhbmdsZS52ZXJ0aWNlcyA9IFZlcnRpY2VzLmNoYW1mZXIocmVjdGFuZ2xlLnZlcnRpY2VzLCBjaGFtZmVyLnJhZGl1cywgXG4gICAgICAgICAgICAgICAgY2hhbWZlci5xdWFsaXR5LCBjaGFtZmVyLnF1YWxpdHlNaW4sIGNoYW1mZXIucXVhbGl0eU1heCk7XG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5jaGFtZmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIEJvZHkuY3JlYXRlKENvbW1vbi5leHRlbmQoe30sIHJlY3RhbmdsZSwgb3B0aW9ucykpO1xuICAgIH07XG4gICAgXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByaWdpZCBib2R5IG1vZGVsIHdpdGggYSB0cmFwZXpvaWQgaHVsbC4gXG4gICAgICogVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyBhbnkgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gb2YgdGhlIGBNYXR0ZXIuQm9keWAgbW9kdWxlIGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgICogQG1ldGhvZCB0cmFwZXpvaWRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzbG9wZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICAgKiBAcmV0dXJuIHtib2R5fSBBIG5ldyB0cmFwZXpvaWQgYm9keVxuICAgICAqL1xuICAgIEJvZGllcy50cmFwZXpvaWQgPSBmdW5jdGlvbih4LCB5LCB3aWR0aCwgaGVpZ2h0LCBzbG9wZSwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICBzbG9wZSAqPSAwLjU7XG4gICAgICAgIHZhciByb29mID0gKDEgLSAoc2xvcGUgKiAyKSkgKiB3aWR0aDtcbiAgICAgICAgXG4gICAgICAgIHZhciB4MSA9IHdpZHRoICogc2xvcGUsXG4gICAgICAgICAgICB4MiA9IHgxICsgcm9vZixcbiAgICAgICAgICAgIHgzID0geDIgKyB4MSxcbiAgICAgICAgICAgIHZlcnRpY2VzUGF0aDtcblxuICAgICAgICBpZiAoc2xvcGUgPCAwLjUpIHtcbiAgICAgICAgICAgIHZlcnRpY2VzUGF0aCA9ICdMIDAgMCBMICcgKyB4MSArICcgJyArICgtaGVpZ2h0KSArICcgTCAnICsgeDIgKyAnICcgKyAoLWhlaWdodCkgKyAnIEwgJyArIHgzICsgJyAwJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZlcnRpY2VzUGF0aCA9ICdMIDAgMCBMICcgKyB4MiArICcgJyArICgtaGVpZ2h0KSArICcgTCAnICsgeDMgKyAnIDAnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRyYXBlem9pZCA9IHsgXG4gICAgICAgICAgICBsYWJlbDogJ1RyYXBlem9pZCBCb2R5JyxcbiAgICAgICAgICAgIHBvc2l0aW9uOiB7IHg6IHgsIHk6IHkgfSxcbiAgICAgICAgICAgIHZlcnRpY2VzOiBWZXJ0aWNlcy5mcm9tUGF0aCh2ZXJ0aWNlc1BhdGgpXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuY2hhbWZlcikge1xuICAgICAgICAgICAgdmFyIGNoYW1mZXIgPSBvcHRpb25zLmNoYW1mZXI7XG4gICAgICAgICAgICB0cmFwZXpvaWQudmVydGljZXMgPSBWZXJ0aWNlcy5jaGFtZmVyKHRyYXBlem9pZC52ZXJ0aWNlcywgY2hhbWZlci5yYWRpdXMsIFxuICAgICAgICAgICAgICAgIGNoYW1mZXIucXVhbGl0eSwgY2hhbWZlci5xdWFsaXR5TWluLCBjaGFtZmVyLnF1YWxpdHlNYXgpO1xuICAgICAgICAgICAgZGVsZXRlIG9wdGlvbnMuY2hhbWZlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBCb2R5LmNyZWF0ZShDb21tb24uZXh0ZW5kKHt9LCB0cmFwZXpvaWQsIG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByaWdpZCBib2R5IG1vZGVsIHdpdGggYSBjaXJjbGUgaHVsbC4gXG4gICAgICogVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyBhbnkgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gb2YgdGhlIGBNYXR0ZXIuQm9keWAgbW9kdWxlIGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgICogQG1ldGhvZCBjaXJjbGVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJhZGl1c1xuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW21heFNpZGVzXVxuICAgICAqIEByZXR1cm4ge2JvZHl9IEEgbmV3IGNpcmNsZSBib2R5XG4gICAgICovXG4gICAgQm9kaWVzLmNpcmNsZSA9IGZ1bmN0aW9uKHgsIHksIHJhZGl1cywgb3B0aW9ucywgbWF4U2lkZXMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgdmFyIGNpcmNsZSA9IHtcbiAgICAgICAgICAgIGxhYmVsOiAnQ2lyY2xlIEJvZHknLFxuICAgICAgICAgICAgY2lyY2xlUmFkaXVzOiByYWRpdXNcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8vIGFwcHJveGltYXRlIGNpcmNsZXMgd2l0aCBwb2x5Z29ucyB1bnRpbCB0cnVlIGNpcmNsZXMgaW1wbGVtZW50ZWQgaW4gU0FUXG4gICAgICAgIG1heFNpZGVzID0gbWF4U2lkZXMgfHwgMjU7XG4gICAgICAgIHZhciBzaWRlcyA9IE1hdGguY2VpbChNYXRoLm1heCgxMCwgTWF0aC5taW4obWF4U2lkZXMsIHJhZGl1cykpKTtcblxuICAgICAgICAvLyBvcHRpbWlzYXRpb246IGFsd2F5cyB1c2UgZXZlbiBudW1iZXIgb2Ygc2lkZXMgKGhhbGYgdGhlIG51bWJlciBvZiB1bmlxdWUgYXhlcylcbiAgICAgICAgaWYgKHNpZGVzICUgMiA9PT0gMSlcbiAgICAgICAgICAgIHNpZGVzICs9IDE7XG5cbiAgICAgICAgcmV0dXJuIEJvZGllcy5wb2x5Z29uKHgsIHksIHNpZGVzLCByYWRpdXMsIENvbW1vbi5leHRlbmQoe30sIGNpcmNsZSwgb3B0aW9ucykpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHJpZ2lkIGJvZHkgbW9kZWwgd2l0aCBhIHJlZ3VsYXIgcG9seWdvbiBodWxsIHdpdGggdGhlIGdpdmVuIG51bWJlciBvZiBzaWRlcy4gXG4gICAgICogVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyBhbnkgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gb2YgdGhlIGBNYXR0ZXIuQm9keWAgbW9kdWxlIGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgICogQG1ldGhvZCBwb2x5Z29uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaWRlc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXNcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAgICogQHJldHVybiB7Ym9keX0gQSBuZXcgcmVndWxhciBwb2x5Z29uIGJvZHlcbiAgICAgKi9cbiAgICBCb2RpZXMucG9seWdvbiA9IGZ1bmN0aW9uKHgsIHksIHNpZGVzLCByYWRpdXMsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAgICAgaWYgKHNpZGVzIDwgMylcbiAgICAgICAgICAgIHJldHVybiBCb2RpZXMuY2lyY2xlKHgsIHksIHJhZGl1cywgb3B0aW9ucyk7XG5cbiAgICAgICAgdmFyIHRoZXRhID0gMiAqIE1hdGguUEkgLyBzaWRlcyxcbiAgICAgICAgICAgIHBhdGggPSAnJyxcbiAgICAgICAgICAgIG9mZnNldCA9IHRoZXRhICogMC41O1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2lkZXM7IGkgKz0gMSkge1xuICAgICAgICAgICAgdmFyIGFuZ2xlID0gb2Zmc2V0ICsgKGkgKiB0aGV0YSksXG4gICAgICAgICAgICAgICAgeHggPSBNYXRoLmNvcyhhbmdsZSkgKiByYWRpdXMsXG4gICAgICAgICAgICAgICAgeXkgPSBNYXRoLnNpbihhbmdsZSkgKiByYWRpdXM7XG5cbiAgICAgICAgICAgIHBhdGggKz0gJ0wgJyArIHh4LnRvRml4ZWQoMykgKyAnICcgKyB5eS50b0ZpeGVkKDMpICsgJyAnO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBvbHlnb24gPSB7IFxuICAgICAgICAgICAgbGFiZWw6ICdQb2x5Z29uIEJvZHknLFxuICAgICAgICAgICAgcG9zaXRpb246IHsgeDogeCwgeTogeSB9LFxuICAgICAgICAgICAgdmVydGljZXM6IFZlcnRpY2VzLmZyb21QYXRoKHBhdGgpXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuY2hhbWZlcikge1xuICAgICAgICAgICAgdmFyIGNoYW1mZXIgPSBvcHRpb25zLmNoYW1mZXI7XG4gICAgICAgICAgICBwb2x5Z29uLnZlcnRpY2VzID0gVmVydGljZXMuY2hhbWZlcihwb2x5Z29uLnZlcnRpY2VzLCBjaGFtZmVyLnJhZGl1cywgXG4gICAgICAgICAgICAgICAgY2hhbWZlci5xdWFsaXR5LCBjaGFtZmVyLnF1YWxpdHlNaW4sIGNoYW1mZXIucXVhbGl0eU1heCk7XG4gICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5jaGFtZmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIEJvZHkuY3JlYXRlKENvbW1vbi5leHRlbmQoe30sIHBvbHlnb24sIG9wdGlvbnMpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXRpbGl0eSB0byBjcmVhdGUgYSBjb21wb3VuZCBib2R5IGJhc2VkIG9uIHNldChzKSBvZiB2ZXJ0aWNlcy5cbiAgICAgKiBcbiAgICAgKiBfTm90ZTpfIFRvIG9wdGlvbmFsbHkgZW5hYmxlIGF1dG9tYXRpYyBjb25jYXZlIHZlcnRpY2VzIGRlY29tcG9zaXRpb24gdGhlIFtwb2x5LWRlY29tcF0oaHR0cHM6Ly9naXRodWIuY29tL3NjaHRlcHBlL3BvbHktZGVjb21wLmpzKSBcbiAgICAgKiBwYWNrYWdlIG11c3QgYmUgZmlyc3QgaW5zdGFsbGVkIGFuZCBwcm92aWRlZCBzZWUgYENvbW1vbi5zZXREZWNvbXBgLCBvdGhlcndpc2UgdGhlIGNvbnZleCBodWxsIG9mIGVhY2ggdmVydGV4IHNldCB3aWxsIGJlIHVzZWQuXG4gICAgICogXG4gICAgICogVGhlIHJlc3VsdGluZyB2ZXJ0aWNlcyBhcmUgcmVvcmllbnRhdGVkIGFib3V0IHRoZWlyIGNlbnRyZSBvZiBtYXNzLFxuICAgICAqIGFuZCBvZmZzZXQgc3VjaCB0aGF0IGBib2R5LnBvc2l0aW9uYCBjb3JyZXNwb25kcyB0byB0aGlzIHBvaW50LlxuICAgICAqIFxuICAgICAqIFRoZSByZXN1bHRpbmcgb2Zmc2V0IG1heSBiZSBmb3VuZCBpZiBuZWVkZWQgYnkgc3VidHJhY3RpbmcgYGJvZHkuYm91bmRzYCBmcm9tIHRoZSBvcmlnaW5hbCBpbnB1dCBib3VuZHMuXG4gICAgICogVG8gbGF0ZXIgbW92ZSB0aGUgY2VudHJlIG9mIG1hc3Mgc2VlIGBCb2R5LnNldENlbnRyZWAuXG4gICAgICogXG4gICAgICogTm90ZSB0aGF0IGF1dG9tYXRpYyBjb25jb25jYXZlIGRlY29tcG9zaXRpb24gcmVzdWx0cyBhcmUgbm90IGFsd2F5cyBvcHRpbWFsLiBcbiAgICAgKiBGb3IgYmVzdCByZXN1bHRzLCBzaW1wbGlmeSB0aGUgaW5wdXQgdmVydGljZXMgYXMgbXVjaCBhcyBwb3NzaWJsZSBmaXJzdC5cbiAgICAgKiBCeSBkZWZhdWx0IHRoaXMgZnVuY3Rpb24gYXBwbGllcyBzb21lIGFkZHRpb25hbCBzaW1wbGlmaWNhdGlvbiB0byBoZWxwLlxuICAgICAqIFxuICAgICAqIFNvbWUgb3V0cHV0cyBtYXkgYWxzbyByZXF1aXJlIGZ1cnRoZXIgbWFudWFsIHByb2Nlc3NpbmcgYWZ0ZXJ3YXJkcyB0byBiZSByb2J1c3QuXG4gICAgICogSW4gcGFydGljdWxhciBzb21lIHBhcnRzIG1heSBuZWVkIHRvIGJlIG92ZXJsYXBwZWQgdG8gYXZvaWQgY29sbGlzaW9uIGdhcHMuXG4gICAgICogVGhpbiBwYXJ0cyBhbmQgc2hhcnAgcG9pbnRzIHNob3VsZCBiZSBhdm9pZGVkIG9yIHJlbW92ZWQgd2hlcmUgcG9zc2libGUuXG4gICAgICpcbiAgICAgKiBUaGUgb3B0aW9ucyBwYXJhbWV0ZXIgb2JqZWN0IHNwZWNpZmllcyBhbnkgYE1hdHRlci5Cb2R5YCBwcm9wZXJ0aWVzIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0cy5cbiAgICAgKiBcbiAgICAgKiBTZWUgdGhlIHByb3BlcnRpZXMgc2VjdGlvbiBvZiB0aGUgYE1hdHRlci5Cb2R5YCBtb2R1bGUgZm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgeW91IGNhbiBwYXNzIHZpYSB0aGUgYG9wdGlvbnNgIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIGZyb21WZXJ0aWNlc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHlcbiAgICAgKiBAcGFyYW0ge2FycmF5fSB2ZXJ0ZXhTZXRzIE9uZSBvciBtb3JlIGFycmF5cyBvZiB2ZXJ0ZXggcG9pbnRzIGUuZy4gYFtbeyB4OiAwLCB5OiAwIH0uLi5dLCAuLi5dYC5cbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIFRoZSBib2R5IG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHtib29sfSBbZmxhZ0ludGVybmFsPWZhbHNlXSBPcHRpb25hbGx5IG1hcmtzIGludGVybmFsIGVkZ2VzIHdpdGggYGlzSW50ZXJuYWxgLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcmVtb3ZlQ29sbGluZWFyPTAuMDFdIFRocmVzaG9sZCB3aGVuIHNpbXBsaWZ5aW5nIHZlcnRpY2VzIGFsb25nIHRoZSBzYW1lIGVkZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFttaW5pbXVtQXJlYT0xMF0gVGhyZXNob2xkIHdoZW4gcmVtb3Zpbmcgc21hbGwgcGFydHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtyZW1vdmVEdXBsaWNhdGVQb2ludHM9MC4wMV0gVGhyZXNob2xkIHdoZW4gc2ltcGxpZnlpbmcgbmVhcmJ5IHZlcnRpY2VzLlxuICAgICAqIEByZXR1cm4ge2JvZHl9XG4gICAgICovXG4gICAgQm9kaWVzLmZyb21WZXJ0aWNlcyA9IGZ1bmN0aW9uKHgsIHksIHZlcnRleFNldHMsIG9wdGlvbnMsIGZsYWdJbnRlcm5hbCwgcmVtb3ZlQ29sbGluZWFyLCBtaW5pbXVtQXJlYSwgcmVtb3ZlRHVwbGljYXRlUG9pbnRzKSB7XG4gICAgICAgIHZhciBkZWNvbXAgPSBDb21tb24uZ2V0RGVjb21wKCksXG4gICAgICAgICAgICBjYW5EZWNvbXAsXG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgcGFydHMsXG4gICAgICAgICAgICBpc0NvbnZleCxcbiAgICAgICAgICAgIGlzQ29uY2F2ZSxcbiAgICAgICAgICAgIHZlcnRpY2VzLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGosXG4gICAgICAgICAgICBrLFxuICAgICAgICAgICAgdixcbiAgICAgICAgICAgIHo7XG5cbiAgICAgICAgLy8gY2hlY2sgZGVjb21wIGlzIGFzIGV4cGVjdGVkXG4gICAgICAgIGNhbkRlY29tcCA9IEJvb2xlYW4oZGVjb21wICYmIGRlY29tcC5xdWlja0RlY29tcCk7XG5cbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHBhcnRzID0gW107XG5cbiAgICAgICAgZmxhZ0ludGVybmFsID0gdHlwZW9mIGZsYWdJbnRlcm5hbCAhPT0gJ3VuZGVmaW5lZCcgPyBmbGFnSW50ZXJuYWwgOiBmYWxzZTtcbiAgICAgICAgcmVtb3ZlQ29sbGluZWFyID0gdHlwZW9mIHJlbW92ZUNvbGxpbmVhciAhPT0gJ3VuZGVmaW5lZCcgPyByZW1vdmVDb2xsaW5lYXIgOiAwLjAxO1xuICAgICAgICBtaW5pbXVtQXJlYSA9IHR5cGVvZiBtaW5pbXVtQXJlYSAhPT0gJ3VuZGVmaW5lZCcgPyBtaW5pbXVtQXJlYSA6IDEwO1xuICAgICAgICByZW1vdmVEdXBsaWNhdGVQb2ludHMgPSB0eXBlb2YgcmVtb3ZlRHVwbGljYXRlUG9pbnRzICE9PSAndW5kZWZpbmVkJyA/IHJlbW92ZUR1cGxpY2F0ZVBvaW50cyA6IDAuMDE7XG5cbiAgICAgICAgLy8gZW5zdXJlIHZlcnRleFNldHMgaXMgYW4gYXJyYXkgb2YgYXJyYXlzXG4gICAgICAgIGlmICghQ29tbW9uLmlzQXJyYXkodmVydGV4U2V0c1swXSkpIHtcbiAgICAgICAgICAgIHZlcnRleFNldHMgPSBbdmVydGV4U2V0c107XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHYgPSAwOyB2IDwgdmVydGV4U2V0cy5sZW5ndGg7IHYgKz0gMSkge1xuICAgICAgICAgICAgdmVydGljZXMgPSB2ZXJ0ZXhTZXRzW3ZdO1xuICAgICAgICAgICAgaXNDb252ZXggPSBWZXJ0aWNlcy5pc0NvbnZleCh2ZXJ0aWNlcyk7XG4gICAgICAgICAgICBpc0NvbmNhdmUgPSAhaXNDb252ZXg7XG5cbiAgICAgICAgICAgIGlmIChpc0NvbmNhdmUgJiYgIWNhbkRlY29tcCkge1xuICAgICAgICAgICAgICAgIENvbW1vbi53YXJuT25jZShcbiAgICAgICAgICAgICAgICAgICAgJ0JvZGllcy5mcm9tVmVydGljZXM6IEluc3RhbGwgdGhlIFxcJ3BvbHktZGVjb21wXFwnIGxpYnJhcnkgYW5kIHVzZSBDb21tb24uc2V0RGVjb21wIG9yIHByb3ZpZGUgXFwnZGVjb21wXFwnIGFzIGEgZ2xvYmFsIHRvIGRlY29tcG9zZSBjb25jYXZlIHZlcnRpY2VzLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoaXNDb252ZXggfHwgIWNhbkRlY29tcCkge1xuICAgICAgICAgICAgICAgIGlmIChpc0NvbnZleCkge1xuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlcyA9IFZlcnRpY2VzLmNsb2Nrd2lzZVNvcnQodmVydGljZXMpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGZhbGxiYWNrIHRvIGNvbnZleCBodWxsIHdoZW4gZGVjb21wb3NpdGlvbiBpcyBub3QgcG9zc2libGVcbiAgICAgICAgICAgICAgICAgICAgdmVydGljZXMgPSBWZXJ0aWNlcy5odWxsKHZlcnRpY2VzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHsgeDogeCwgeTogeSB9LFxuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlczogdmVydGljZXNcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaW5pdGlhbGlzZSBhIGRlY29tcG9zaXRpb25cbiAgICAgICAgICAgICAgICB2YXIgY29uY2F2ZSA9IHZlcnRpY2VzLm1hcChmdW5jdGlvbih2ZXJ0ZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt2ZXJ0ZXgueCwgdmVydGV4LnldO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgLy8gdmVydGljZXMgYXJlIGNvbmNhdmUgYW5kIHNpbXBsZSwgd2UgY2FuIGRlY29tcG9zZSBpbnRvIHBhcnRzXG4gICAgICAgICAgICAgICAgZGVjb21wLm1ha2VDQ1coY29uY2F2ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHJlbW92ZUNvbGxpbmVhciAhPT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIGRlY29tcC5yZW1vdmVDb2xsaW5lYXJQb2ludHMoY29uY2F2ZSwgcmVtb3ZlQ29sbGluZWFyKTtcbiAgICAgICAgICAgICAgICBpZiAocmVtb3ZlRHVwbGljYXRlUG9pbnRzICE9PSBmYWxzZSAmJiBkZWNvbXAucmVtb3ZlRHVwbGljYXRlUG9pbnRzKVxuICAgICAgICAgICAgICAgICAgICBkZWNvbXAucmVtb3ZlRHVwbGljYXRlUG9pbnRzKGNvbmNhdmUsIHJlbW92ZUR1cGxpY2F0ZVBvaW50cyk7XG5cbiAgICAgICAgICAgICAgICAvLyB1c2UgdGhlIHF1aWNrIGRlY29tcG9zaXRpb24gYWxnb3JpdGhtIChCYXlheml0KVxuICAgICAgICAgICAgICAgIHZhciBkZWNvbXBvc2VkID0gZGVjb21wLnF1aWNrRGVjb21wKGNvbmNhdmUpO1xuXG4gICAgICAgICAgICAgICAgLy8gZm9yIGVhY2ggZGVjb21wb3NlZCBjaHVua1xuICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBkZWNvbXBvc2VkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjaHVuayA9IGRlY29tcG9zZWRbaV07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY29udmVydCB2ZXJ0aWNlcyBpbnRvIHRoZSBjb3JyZWN0IHN0cnVjdHVyZVxuICAgICAgICAgICAgICAgICAgICB2YXIgY2h1bmtWZXJ0aWNlcyA9IGNodW5rLm1hcChmdW5jdGlvbih2ZXJ0aWNlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4OiB2ZXJ0aWNlc1swXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5OiB2ZXJ0aWNlc1sxXVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gc2tpcCBzbWFsbCBjaHVua3NcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1pbmltdW1BcmVhID4gMCAmJiBWZXJ0aWNlcy5hcmVhKGNodW5rVmVydGljZXMpIDwgbWluaW11bUFyZWEpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgICAgICAvLyBjcmVhdGUgYSBjb21wb3VuZCBwYXJ0XG4gICAgICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFZlcnRpY2VzLmNlbnRyZShjaHVua1ZlcnRpY2VzKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRpY2VzOiBjaHVua1ZlcnRpY2VzXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNyZWF0ZSBib2R5IHBhcnRzXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcGFydHNbaV0gPSBCb2R5LmNyZWF0ZShDb21tb24uZXh0ZW5kKHBhcnRzW2ldLCBvcHRpb25zKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmbGFnIGludGVybmFsIGVkZ2VzIChjb2luY2lkZW50IHBhcnQgZWRnZXMpXG4gICAgICAgIGlmIChmbGFnSW50ZXJuYWwpIHtcbiAgICAgICAgICAgIHZhciBjb2luY2lkZW50X21heF9kaXN0ID0gNTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcnRBID0gcGFydHNbaV07XG5cbiAgICAgICAgICAgICAgICBmb3IgKGogPSBpICsgMTsgaiA8IHBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0QiA9IHBhcnRzW2pdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChCb3VuZHMub3ZlcmxhcHMocGFydEEuYm91bmRzLCBwYXJ0Qi5ib3VuZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGF2ID0gcGFydEEudmVydGljZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGJ2ID0gcGFydEIudmVydGljZXM7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0ZXJhdGUgdmVydGljZXMgb2YgYm90aCBwYXJ0c1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IHBhcnRBLnZlcnRpY2VzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh6ID0gMDsgeiA8IHBhcnRCLnZlcnRpY2VzLmxlbmd0aDsgeisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZpbmQgZGlzdGFuY2VzIGJldHdlZW4gdGhlIHZlcnRpY2VzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYSA9IFZlY3Rvci5tYWduaXR1ZGVTcXVhcmVkKFZlY3Rvci5zdWIocGF2WyhrICsgMSkgJSBwYXYubGVuZ3RoXSwgcGJ2W3pdKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYiA9IFZlY3Rvci5tYWduaXR1ZGVTcXVhcmVkKFZlY3Rvci5zdWIocGF2W2tdLCBwYnZbKHogKyAxKSAlIHBidi5sZW5ndGhdKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWYgYm90aCB2ZXJ0aWNlcyBhcmUgdmVyeSBjbG9zZSwgY29uc2lkZXIgdGhlIGVkZ2UgY29uY2lkZW50IChpbnRlcm5hbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhIDwgY29pbmNpZGVudF9tYXhfZGlzdCAmJiBkYiA8IGNvaW5jaWRlbnRfbWF4X2Rpc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdltrXS5pc0ludGVybmFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBidlt6XS5pc0ludGVybmFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgIC8vIGNyZWF0ZSB0aGUgcGFyZW50IGJvZHkgdG8gYmUgcmV0dXJuZWQsIHRoYXQgY29udGFpbnMgZ2VuZXJhdGVkIGNvbXBvdW5kIHBhcnRzXG4gICAgICAgICAgICBib2R5ID0gQm9keS5jcmVhdGUoQ29tbW9uLmV4dGVuZCh7IHBhcnRzOiBwYXJ0cy5zbGljZSgwKSB9LCBvcHRpb25zKSk7XG5cbiAgICAgICAgICAgIC8vIG9mZnNldCBzdWNoIHRoYXQgYm9keS5wb3NpdGlvbiBpcyBhdCB0aGUgY2VudHJlIG9mZiBtYXNzXG4gICAgICAgICAgICBCb2R5LnNldFBvc2l0aW9uKGJvZHksIHsgeDogeCwgeTogeSB9KTtcblxuICAgICAgICAgICAgcmV0dXJuIGJvZHk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcGFydHNbMF07XG4gICAgICAgIH1cbiAgICB9O1xuXG59KSgpO1xuXG5cbi8qKiovIH0pLFxuLyogMTMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyoqXG4qIFRoZSBgTWF0dGVyLkRldGVjdG9yYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgZWZmaWNpZW50bHkgZGV0ZWN0aW5nIGNvbGxpc2lvbnMgYmV0d2VlbiBhIGxpc3Qgb2YgYm9kaWVzIHVzaW5nIGEgYnJvYWRwaGFzZSBhbGdvcml0aG0uXG4qXG4qIEBjbGFzcyBEZXRlY3RvclxuKi9cblxudmFyIERldGVjdG9yID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gRGV0ZWN0b3I7XG5cbnZhciBDb21tb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIENvbGxpc2lvbiA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgY29sbGlzaW9uIGRldGVjdG9yLlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHt9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtkZXRlY3Rvcn0gQSBuZXcgY29sbGlzaW9uIGRldGVjdG9yXG4gICAgICovXG4gICAgRGV0ZWN0b3IuY3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICBib2RpZXM6IFtdLFxuICAgICAgICAgICAgcGFpcnM6IG51bGxcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gQ29tbW9uLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGxpc3Qgb2YgYm9kaWVzIGluIHRoZSBkZXRlY3Rvci5cbiAgICAgKiBAbWV0aG9kIHNldEJvZGllc1xuICAgICAqIEBwYXJhbSB7ZGV0ZWN0b3J9IGRldGVjdG9yXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqL1xuICAgIERldGVjdG9yLnNldEJvZGllcyA9IGZ1bmN0aW9uKGRldGVjdG9yLCBib2RpZXMpIHtcbiAgICAgICAgZGV0ZWN0b3IuYm9kaWVzID0gYm9kaWVzLnNsaWNlKDApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIGRldGVjdG9yIGluY2x1ZGluZyBpdHMgbGlzdCBvZiBib2RpZXMuXG4gICAgICogQG1ldGhvZCBjbGVhclxuICAgICAqIEBwYXJhbSB7ZGV0ZWN0b3J9IGRldGVjdG9yXG4gICAgICovXG4gICAgRGV0ZWN0b3IuY2xlYXIgPSBmdW5jdGlvbihkZXRlY3Rvcikge1xuICAgICAgICBkZXRlY3Rvci5ib2RpZXMgPSBbXTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRWZmaWNpZW50bHkgZmluZHMgYWxsIGNvbGxpc2lvbnMgYW1vbmcgYWxsIHRoZSBib2RpZXMgaW4gYGRldGVjdG9yLmJvZGllc2AgdXNpbmcgYSBicm9hZHBoYXNlIGFsZ29yaXRobS5cbiAgICAgKiBcbiAgICAgKiBfTm90ZTpfIFRoZSBzcGVjaWZpYyBvcmRlcmluZyBvZiBjb2xsaXNpb25zIHJldHVybmVkIGlzIG5vdCBndWFyYW50ZWVkIGJldHdlZW4gcmVsZWFzZXMgYW5kIG1heSBjaGFuZ2UgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMuXG4gICAgICogSWYgYSBzcGVjaWZpYyBvcmRlcmluZyBpcyByZXF1aXJlZCB0aGVuIGFwcGx5IGEgc29ydCB0byB0aGUgcmVzdWx0aW5nIGFycmF5LlxuICAgICAqIEBtZXRob2QgY29sbGlzaW9uc1xuICAgICAqIEBwYXJhbSB7ZGV0ZWN0b3J9IGRldGVjdG9yXG4gICAgICogQHJldHVybiB7Y29sbGlzaW9uW119IGNvbGxpc2lvbnNcbiAgICAgKi9cbiAgICBEZXRlY3Rvci5jb2xsaXNpb25zID0gZnVuY3Rpb24oZGV0ZWN0b3IpIHtcbiAgICAgICAgdmFyIGNvbGxpc2lvbnMgPSBbXSxcbiAgICAgICAgICAgIHBhaXJzID0gZGV0ZWN0b3IucGFpcnMsXG4gICAgICAgICAgICBib2RpZXMgPSBkZXRlY3Rvci5ib2RpZXMsXG4gICAgICAgICAgICBib2RpZXNMZW5ndGggPSBib2RpZXMubGVuZ3RoLFxuICAgICAgICAgICAgY2FuQ29sbGlkZSA9IERldGVjdG9yLmNhbkNvbGxpZGUsXG4gICAgICAgICAgICBjb2xsaWRlcyA9IENvbGxpc2lvbi5jb2xsaWRlcyxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqO1xuXG4gICAgICAgIGJvZGllcy5zb3J0KERldGVjdG9yLl9jb21wYXJlQm91bmRzWCk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keUEgPSBib2RpZXNbaV0sXG4gICAgICAgICAgICAgICAgYm91bmRzQSA9IGJvZHlBLmJvdW5kcyxcbiAgICAgICAgICAgICAgICBib3VuZFhNYXggPSBib2R5QS5ib3VuZHMubWF4LngsXG4gICAgICAgICAgICAgICAgYm91bmRZTWF4ID0gYm9keUEuYm91bmRzLm1heC55LFxuICAgICAgICAgICAgICAgIGJvdW5kWU1pbiA9IGJvZHlBLmJvdW5kcy5taW4ueSxcbiAgICAgICAgICAgICAgICBib2R5QVN0YXRpYyA9IGJvZHlBLmlzU3RhdGljIHx8IGJvZHlBLmlzU2xlZXBpbmcsXG4gICAgICAgICAgICAgICAgcGFydHNBTGVuZ3RoID0gYm9keUEucGFydHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHBhcnRzQVNpbmdsZSA9IHBhcnRzQUxlbmd0aCA9PT0gMTtcblxuICAgICAgICAgICAgZm9yIChqID0gaSArIDE7IGogPCBib2RpZXNMZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBib2R5QiA9IGJvZGllc1tqXSxcbiAgICAgICAgICAgICAgICAgICAgYm91bmRzQiA9IGJvZHlCLmJvdW5kcztcblxuICAgICAgICAgICAgICAgIGlmIChib3VuZHNCLm1pbi54ID4gYm91bmRYTWF4KSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChib3VuZFlNYXggPCBib3VuZHNCLm1pbi55IHx8IGJvdW5kWU1pbiA+IGJvdW5kc0IubWF4LnkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGJvZHlBU3RhdGljICYmIChib2R5Qi5pc1N0YXRpYyB8fCBib2R5Qi5pc1NsZWVwaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIWNhbkNvbGxpZGUoYm9keUEuY29sbGlzaW9uRmlsdGVyLCBib2R5Qi5jb2xsaXNpb25GaWx0ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHZhciBwYXJ0c0JMZW5ndGggPSBib2R5Qi5wYXJ0cy5sZW5ndGg7XG5cbiAgICAgICAgICAgICAgICBpZiAocGFydHNBU2luZ2xlICYmIHBhcnRzQkxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29sbGlzaW9uID0gY29sbGlkZXMoYm9keUEsIGJvZHlCLCBwYWlycyk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbGxpc2lvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9ucy5wdXNoKGNvbGxpc2lvbik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydHNBU3RhcnQgPSBwYXJ0c0FMZW5ndGggPiAxID8gMSA6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0c0JTdGFydCA9IHBhcnRzQkxlbmd0aCA+IDEgPyAxIDogMDtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSBwYXJ0c0FTdGFydDsgayA8IHBhcnRzQUxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydEEgPSBib2R5QS5wYXJ0c1trXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3VuZHNBID0gcGFydEEuYm91bmRzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB6ID0gcGFydHNCU3RhcnQ7IHogPCBwYXJ0c0JMZW5ndGg7IHorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0QiA9IGJvZHlCLnBhcnRzW3pdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3VuZHNCID0gcGFydEIuYm91bmRzO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGJvdW5kc0EubWluLnggPiBib3VuZHNCLm1heC54IHx8IGJvdW5kc0EubWF4LnggPCBib3VuZHNCLm1pbi54XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IGJvdW5kc0EubWF4LnkgPCBib3VuZHNCLm1pbi55IHx8IGJvdW5kc0EubWluLnkgPiBib3VuZHNCLm1heC55KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xsaXNpb24gPSBjb2xsaWRlcyhwYXJ0QSwgcGFydEIsIHBhaXJzKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2xsaXNpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9ucy5wdXNoKGNvbGxpc2lvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbGxpc2lvbnM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIGJvdGggc3VwcGxpZWQgY29sbGlzaW9uIGZpbHRlcnMgd2lsbCBhbGxvdyBhIGNvbGxpc2lvbiB0byBvY2N1ci5cbiAgICAgKiBTZWUgYGJvZHkuY29sbGlzaW9uRmlsdGVyYCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKiBAbWV0aG9kIGNhbkNvbGxpZGVcbiAgICAgKiBAcGFyYW0ge30gZmlsdGVyQVxuICAgICAqIEBwYXJhbSB7fSBmaWx0ZXJCXG4gICAgICogQHJldHVybiB7Ym9vbH0gYHRydWVgIGlmIGNvbGxpc2lvbiBjYW4gb2NjdXJcbiAgICAgKi9cbiAgICBEZXRlY3Rvci5jYW5Db2xsaWRlID0gZnVuY3Rpb24oZmlsdGVyQSwgZmlsdGVyQikge1xuICAgICAgICBpZiAoZmlsdGVyQS5ncm91cCA9PT0gZmlsdGVyQi5ncm91cCAmJiBmaWx0ZXJBLmdyb3VwICE9PSAwKVxuICAgICAgICAgICAgcmV0dXJuIGZpbHRlckEuZ3JvdXAgPiAwO1xuXG4gICAgICAgIHJldHVybiAoZmlsdGVyQS5tYXNrICYgZmlsdGVyQi5jYXRlZ29yeSkgIT09IDAgJiYgKGZpbHRlckIubWFzayAmIGZpbHRlckEuY2F0ZWdvcnkpICE9PSAwO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29tcGFyaXNvbiBmdW5jdGlvbiB1c2VkIGluIHRoZSBicm9hZHBoYXNlIGFsZ29yaXRobS5cbiAgICAgKiBSZXR1cm5zIHRoZSBzaWduZWQgZGVsdGEgb2YgdGhlIGJvZGllcyBib3VuZHMgb24gdGhlIHgtYXhpcy5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgX3NvcnRDb21wYXJlXG4gICAgICogQHBhcmFtIHtib2R5fSBib2R5QVxuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keUJcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9IFRoZSBzaWduZWQgZGVsdGEgdXNlZCBmb3Igc29ydGluZ1xuICAgICAqL1xuICAgIERldGVjdG9yLl9jb21wYXJlQm91bmRzWCA9IGZ1bmN0aW9uKGJvZHlBLCBib2R5Qikge1xuICAgICAgICByZXR1cm4gYm9keUEuYm91bmRzLm1pbi54IC0gYm9keUIuYm91bmRzLm1pbi54O1xuICAgIH07XG5cbiAgICAvKlxuICAgICpcbiAgICAqICBQcm9wZXJ0aWVzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBhcnJheSBvZiBgTWF0dGVyLkJvZHlgIGJldHdlZW4gd2hpY2ggdGhlIGRldGVjdG9yIGZpbmRzIGNvbGxpc2lvbnMuXG4gICAgICogXG4gICAgICogX05vdGU6XyBUaGUgb3JkZXIgb2YgYm9kaWVzIGluIHRoaXMgYXJyYXkgX2lzIG5vdCBmaXhlZF8gYW5kIHdpbGwgYmUgY29udGludWFsbHkgbWFuYWdlZCBieSB0aGUgZGV0ZWN0b3IuXG4gICAgICogQHByb3BlcnR5IGJvZGllc1xuICAgICAqIEB0eXBlIGJvZHlbXVxuICAgICAqIEBkZWZhdWx0IFtdXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBPcHRpb25hbC4gQSBgTWF0dGVyLlBhaXJzYCBvYmplY3QgZnJvbSB3aGljaCBwcmV2aW91cyBjb2xsaXNpb24gb2JqZWN0cyBtYXkgYmUgcmV1c2VkLiBJbnRlbmRlZCBmb3IgaW50ZXJuYWwgYE1hdHRlci5FbmdpbmVgIHVzYWdlLlxuICAgICAqIEBwcm9wZXJ0eSBwYWlyc1xuICAgICAqIEB0eXBlIHtwYWlyc3xudWxsfVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cblxufSkoKTtcblxuXG4vKioqLyB9KSxcbi8qIDE0ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qKlxuKiBUaGUgYE1hdHRlci5Nb3VzZWAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIGFuZCBtYW5pcHVsYXRpbmcgbW91c2UgaW5wdXRzLlxuKlxuKiBAY2xhc3MgTW91c2VcbiovXG5cbnZhciBNb3VzZSA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IE1vdXNlO1xuXG52YXIgQ29tbW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG1vdXNlIGlucHV0LlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICAgICAqIEByZXR1cm4ge21vdXNlfSBBIG5ldyBtb3VzZVxuICAgICAqL1xuICAgIE1vdXNlLmNyZWF0ZSA9IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgdmFyIG1vdXNlID0ge307XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICBDb21tb24ubG9nKCdNb3VzZS5jcmVhdGU6IGVsZW1lbnQgd2FzIHVuZGVmaW5lZCwgZGVmYXVsdGluZyB0byBkb2N1bWVudC5ib2R5JywgJ3dhcm4nKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgbW91c2UuZWxlbWVudCA9IGVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keTtcbiAgICAgICAgbW91c2UuYWJzb2x1dGUgPSB7IHg6IDAsIHk6IDAgfTtcbiAgICAgICAgbW91c2UucG9zaXRpb24gPSB7IHg6IDAsIHk6IDAgfTtcbiAgICAgICAgbW91c2UubW91c2Vkb3duUG9zaXRpb24gPSB7IHg6IDAsIHk6IDAgfTtcbiAgICAgICAgbW91c2UubW91c2V1cFBvc2l0aW9uID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIG1vdXNlLm9mZnNldCA9IHsgeDogMCwgeTogMCB9O1xuICAgICAgICBtb3VzZS5zY2FsZSA9IHsgeDogMSwgeTogMSB9O1xuICAgICAgICBtb3VzZS53aGVlbERlbHRhID0gMDtcbiAgICAgICAgbW91c2UuYnV0dG9uID0gLTE7XG4gICAgICAgIG1vdXNlLnBpeGVsUmF0aW8gPSBwYXJzZUludChtb3VzZS5lbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1waXhlbC1yYXRpbycpLCAxMCkgfHwgMTtcblxuICAgICAgICBtb3VzZS5zb3VyY2VFdmVudHMgPSB7XG4gICAgICAgICAgICBtb3VzZW1vdmU6IG51bGwsXG4gICAgICAgICAgICBtb3VzZWRvd246IG51bGwsXG4gICAgICAgICAgICBtb3VzZXVwOiBudWxsLFxuICAgICAgICAgICAgbW91c2V3aGVlbDogbnVsbFxuICAgICAgICB9O1xuICAgICAgICBcbiAgICAgICAgbW91c2UubW91c2Vtb3ZlID0gZnVuY3Rpb24oZXZlbnQpIHsgXG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBNb3VzZS5fZ2V0UmVsYXRpdmVNb3VzZVBvc2l0aW9uKGV2ZW50LCBtb3VzZS5lbGVtZW50LCBtb3VzZS5waXhlbFJhdGlvKSxcbiAgICAgICAgICAgICAgICB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXM7XG5cbiAgICAgICAgICAgIGlmICh0b3VjaGVzKSB7XG4gICAgICAgICAgICAgICAgbW91c2UuYnV0dG9uID0gMDtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBtb3VzZS5hYnNvbHV0ZS54ID0gcG9zaXRpb24ueDtcbiAgICAgICAgICAgIG1vdXNlLmFic29sdXRlLnkgPSBwb3NpdGlvbi55O1xuICAgICAgICAgICAgbW91c2UucG9zaXRpb24ueCA9IG1vdXNlLmFic29sdXRlLnggKiBtb3VzZS5zY2FsZS54ICsgbW91c2Uub2Zmc2V0Lng7XG4gICAgICAgICAgICBtb3VzZS5wb3NpdGlvbi55ID0gbW91c2UuYWJzb2x1dGUueSAqIG1vdXNlLnNjYWxlLnkgKyBtb3VzZS5vZmZzZXQueTtcbiAgICAgICAgICAgIG1vdXNlLnNvdXJjZUV2ZW50cy5tb3VzZW1vdmUgPSBldmVudDtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIG1vdXNlLm1vdXNlZG93biA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBNb3VzZS5fZ2V0UmVsYXRpdmVNb3VzZVBvc2l0aW9uKGV2ZW50LCBtb3VzZS5lbGVtZW50LCBtb3VzZS5waXhlbFJhdGlvKSxcbiAgICAgICAgICAgICAgICB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXM7XG5cbiAgICAgICAgICAgIGlmICh0b3VjaGVzKSB7XG4gICAgICAgICAgICAgICAgbW91c2UuYnV0dG9uID0gMDtcbiAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBtb3VzZS5idXR0b24gPSBldmVudC5idXR0b247XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG1vdXNlLmFic29sdXRlLnggPSBwb3NpdGlvbi54O1xuICAgICAgICAgICAgbW91c2UuYWJzb2x1dGUueSA9IHBvc2l0aW9uLnk7XG4gICAgICAgICAgICBtb3VzZS5wb3NpdGlvbi54ID0gbW91c2UuYWJzb2x1dGUueCAqIG1vdXNlLnNjYWxlLnggKyBtb3VzZS5vZmZzZXQueDtcbiAgICAgICAgICAgIG1vdXNlLnBvc2l0aW9uLnkgPSBtb3VzZS5hYnNvbHV0ZS55ICogbW91c2Uuc2NhbGUueSArIG1vdXNlLm9mZnNldC55O1xuICAgICAgICAgICAgbW91c2UubW91c2Vkb3duUG9zaXRpb24ueCA9IG1vdXNlLnBvc2l0aW9uLng7XG4gICAgICAgICAgICBtb3VzZS5tb3VzZWRvd25Qb3NpdGlvbi55ID0gbW91c2UucG9zaXRpb24ueTtcbiAgICAgICAgICAgIG1vdXNlLnNvdXJjZUV2ZW50cy5tb3VzZWRvd24gPSBldmVudDtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIG1vdXNlLm1vdXNldXAgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIHBvc2l0aW9uID0gTW91c2UuX2dldFJlbGF0aXZlTW91c2VQb3NpdGlvbihldmVudCwgbW91c2UuZWxlbWVudCwgbW91c2UucGl4ZWxSYXRpbyksXG4gICAgICAgICAgICAgICAgdG91Y2hlcyA9IGV2ZW50LmNoYW5nZWRUb3VjaGVzO1xuXG4gICAgICAgICAgICBpZiAodG91Y2hlcykge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIG1vdXNlLmJ1dHRvbiA9IC0xO1xuICAgICAgICAgICAgbW91c2UuYWJzb2x1dGUueCA9IHBvc2l0aW9uLng7XG4gICAgICAgICAgICBtb3VzZS5hYnNvbHV0ZS55ID0gcG9zaXRpb24ueTtcbiAgICAgICAgICAgIG1vdXNlLnBvc2l0aW9uLnggPSBtb3VzZS5hYnNvbHV0ZS54ICogbW91c2Uuc2NhbGUueCArIG1vdXNlLm9mZnNldC54O1xuICAgICAgICAgICAgbW91c2UucG9zaXRpb24ueSA9IG1vdXNlLmFic29sdXRlLnkgKiBtb3VzZS5zY2FsZS55ICsgbW91c2Uub2Zmc2V0Lnk7XG4gICAgICAgICAgICBtb3VzZS5tb3VzZXVwUG9zaXRpb24ueCA9IG1vdXNlLnBvc2l0aW9uLng7XG4gICAgICAgICAgICBtb3VzZS5tb3VzZXVwUG9zaXRpb24ueSA9IG1vdXNlLnBvc2l0aW9uLnk7XG4gICAgICAgICAgICBtb3VzZS5zb3VyY2VFdmVudHMubW91c2V1cCA9IGV2ZW50O1xuICAgICAgICB9O1xuXG4gICAgICAgIG1vdXNlLm1vdXNld2hlZWwgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgbW91c2Uud2hlZWxEZWx0YSA9IE1hdGgubWF4KC0xLCBNYXRoLm1pbigxLCBldmVudC53aGVlbERlbHRhIHx8IC1ldmVudC5kZXRhaWwpKTtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgTW91c2Uuc2V0RWxlbWVudChtb3VzZSwgbW91c2UuZWxlbWVudCk7XG5cbiAgICAgICAgcmV0dXJuIG1vdXNlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBlbGVtZW50IHRoZSBtb3VzZSBpcyBib3VuZCB0byAoYW5kIHJlbGF0aXZlIHRvKS5cbiAgICAgKiBAbWV0aG9kIHNldEVsZW1lbnRcbiAgICAgKiBAcGFyYW0ge21vdXNlfSBtb3VzZVxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAgICAgKi9cbiAgICBNb3VzZS5zZXRFbGVtZW50ID0gZnVuY3Rpb24obW91c2UsIGVsZW1lbnQpIHtcbiAgICAgICAgbW91c2UuZWxlbWVudCA9IGVsZW1lbnQ7XG5cbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBtb3VzZS5tb3VzZW1vdmUpO1xuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG1vdXNlLm1vdXNlZG93bik7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG1vdXNlLm1vdXNldXApO1xuICAgICAgICBcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXdoZWVsJywgbW91c2UubW91c2V3aGVlbCk7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NTW91c2VTY3JvbGwnLCBtb3VzZS5tb3VzZXdoZWVsKTtcblxuICAgICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNobW92ZScsIG1vdXNlLm1vdXNlbW92ZSk7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG1vdXNlLm1vdXNlZG93bik7XG4gICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBtb3VzZS5tb3VzZXVwKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2xlYXJzIGFsbCBjYXB0dXJlZCBzb3VyY2UgZXZlbnRzLlxuICAgICAqIEBtZXRob2QgY2xlYXJTb3VyY2VFdmVudHNcbiAgICAgKiBAcGFyYW0ge21vdXNlfSBtb3VzZVxuICAgICAqL1xuICAgIE1vdXNlLmNsZWFyU291cmNlRXZlbnRzID0gZnVuY3Rpb24obW91c2UpIHtcbiAgICAgICAgbW91c2Uuc291cmNlRXZlbnRzLm1vdXNlbW92ZSA9IG51bGw7XG4gICAgICAgIG1vdXNlLnNvdXJjZUV2ZW50cy5tb3VzZWRvd24gPSBudWxsO1xuICAgICAgICBtb3VzZS5zb3VyY2VFdmVudHMubW91c2V1cCA9IG51bGw7XG4gICAgICAgIG1vdXNlLnNvdXJjZUV2ZW50cy5tb3VzZXdoZWVsID0gbnVsbDtcbiAgICAgICAgbW91c2Uud2hlZWxEZWx0YSA9IDA7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIG1vdXNlIHBvc2l0aW9uIG9mZnNldC5cbiAgICAgKiBAbWV0aG9kIHNldE9mZnNldFxuICAgICAqIEBwYXJhbSB7bW91c2V9IG1vdXNlXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IG9mZnNldFxuICAgICAqL1xuICAgIE1vdXNlLnNldE9mZnNldCA9IGZ1bmN0aW9uKG1vdXNlLCBvZmZzZXQpIHtcbiAgICAgICAgbW91c2Uub2Zmc2V0LnggPSBvZmZzZXQueDtcbiAgICAgICAgbW91c2Uub2Zmc2V0LnkgPSBvZmZzZXQueTtcbiAgICAgICAgbW91c2UucG9zaXRpb24ueCA9IG1vdXNlLmFic29sdXRlLnggKiBtb3VzZS5zY2FsZS54ICsgbW91c2Uub2Zmc2V0Lng7XG4gICAgICAgIG1vdXNlLnBvc2l0aW9uLnkgPSBtb3VzZS5hYnNvbHV0ZS55ICogbW91c2Uuc2NhbGUueSArIG1vdXNlLm9mZnNldC55O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBtb3VzZSBwb3NpdGlvbiBzY2FsZS5cbiAgICAgKiBAbWV0aG9kIHNldFNjYWxlXG4gICAgICogQHBhcmFtIHttb3VzZX0gbW91c2VcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gc2NhbGVcbiAgICAgKi9cbiAgICBNb3VzZS5zZXRTY2FsZSA9IGZ1bmN0aW9uKG1vdXNlLCBzY2FsZSkge1xuICAgICAgICBtb3VzZS5zY2FsZS54ID0gc2NhbGUueDtcbiAgICAgICAgbW91c2Uuc2NhbGUueSA9IHNjYWxlLnk7XG4gICAgICAgIG1vdXNlLnBvc2l0aW9uLnggPSBtb3VzZS5hYnNvbHV0ZS54ICogbW91c2Uuc2NhbGUueCArIG1vdXNlLm9mZnNldC54O1xuICAgICAgICBtb3VzZS5wb3NpdGlvbi55ID0gbW91c2UuYWJzb2x1dGUueSAqIG1vdXNlLnNjYWxlLnkgKyBtb3VzZS5vZmZzZXQueTtcbiAgICB9O1xuICAgIFxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1vdXNlIHBvc2l0aW9uIHJlbGF0aXZlIHRvIGFuIGVsZW1lbnQgZ2l2ZW4gYSBzY3JlZW4gcGl4ZWwgcmF0aW8uXG4gICAgICogQG1ldGhvZCBfZ2V0UmVsYXRpdmVNb3VzZVBvc2l0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gZXZlbnRcbiAgICAgKiBAcGFyYW0ge30gZWxlbWVudFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwaXhlbFJhdGlvXG4gICAgICogQHJldHVybiB7fVxuICAgICAqL1xuICAgIE1vdXNlLl9nZXRSZWxhdGl2ZU1vdXNlUG9zaXRpb24gPSBmdW5jdGlvbihldmVudCwgZWxlbWVudCwgcGl4ZWxSYXRpbykge1xuICAgICAgICB2YXIgZWxlbWVudEJvdW5kcyA9IGVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgICByb290Tm9kZSA9IChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgfHwgZG9jdW1lbnQuYm9keS5wYXJlbnROb2RlIHx8IGRvY3VtZW50LmJvZHkpLFxuICAgICAgICAgICAgc2Nyb2xsWCA9ICh3aW5kb3cucGFnZVhPZmZzZXQgIT09IHVuZGVmaW5lZCkgPyB3aW5kb3cucGFnZVhPZmZzZXQgOiByb290Tm9kZS5zY3JvbGxMZWZ0LFxuICAgICAgICAgICAgc2Nyb2xsWSA9ICh3aW5kb3cucGFnZVlPZmZzZXQgIT09IHVuZGVmaW5lZCkgPyB3aW5kb3cucGFnZVlPZmZzZXQgOiByb290Tm9kZS5zY3JvbGxUb3AsXG4gICAgICAgICAgICB0b3VjaGVzID0gZXZlbnQuY2hhbmdlZFRvdWNoZXMsXG4gICAgICAgICAgICB4LCB5O1xuICAgICAgICBcbiAgICAgICAgaWYgKHRvdWNoZXMpIHtcbiAgICAgICAgICAgIHggPSB0b3VjaGVzWzBdLnBhZ2VYIC0gZWxlbWVudEJvdW5kcy5sZWZ0IC0gc2Nyb2xsWDtcbiAgICAgICAgICAgIHkgPSB0b3VjaGVzWzBdLnBhZ2VZIC0gZWxlbWVudEJvdW5kcy50b3AgLSBzY3JvbGxZO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgeCA9IGV2ZW50LnBhZ2VYIC0gZWxlbWVudEJvdW5kcy5sZWZ0IC0gc2Nyb2xsWDtcbiAgICAgICAgICAgIHkgPSBldmVudC5wYWdlWSAtIGVsZW1lbnRCb3VuZHMudG9wIC0gc2Nyb2xsWTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IFxuICAgICAgICAgICAgeDogeCAvIChlbGVtZW50LmNsaWVudFdpZHRoIC8gKGVsZW1lbnQud2lkdGggfHwgZWxlbWVudC5jbGllbnRXaWR0aCkgKiBwaXhlbFJhdGlvKSxcbiAgICAgICAgICAgIHk6IHkgLyAoZWxlbWVudC5jbGllbnRIZWlnaHQgLyAoZWxlbWVudC5oZWlnaHQgfHwgZWxlbWVudC5jbGllbnRIZWlnaHQpICogcGl4ZWxSYXRpbylcbiAgICAgICAgfTtcbiAgICB9O1xuXG59KSgpO1xuXG5cbi8qKiovIH0pLFxuLyogMTUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyoqXG4qIFRoZSBgTWF0dGVyLlBsdWdpbmAgbW9kdWxlIGNvbnRhaW5zIGZ1bmN0aW9ucyBmb3IgcmVnaXN0ZXJpbmcgYW5kIGluc3RhbGxpbmcgcGx1Z2lucyBvbiBtb2R1bGVzLlxuKlxuKiBAY2xhc3MgUGx1Z2luXG4qL1xuXG52YXIgUGx1Z2luID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gUGx1Z2luO1xuXG52YXIgQ29tbW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgUGx1Z2luLl9yZWdpc3RyeSA9IHt9O1xuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXJzIGEgcGx1Z2luIG9iamVjdCBzbyBpdCBjYW4gYmUgcmVzb2x2ZWQgbGF0ZXIgYnkgbmFtZS5cbiAgICAgKiBAbWV0aG9kIHJlZ2lzdGVyXG4gICAgICogQHBhcmFtIHBsdWdpbiB7fSBUaGUgcGx1Z2luIHRvIHJlZ2lzdGVyLlxuICAgICAqIEByZXR1cm4ge29iamVjdH0gVGhlIHBsdWdpbi5cbiAgICAgKi9cbiAgICBQbHVnaW4ucmVnaXN0ZXIgPSBmdW5jdGlvbihwbHVnaW4pIHtcbiAgICAgICAgaWYgKCFQbHVnaW4uaXNQbHVnaW4ocGx1Z2luKSkge1xuICAgICAgICAgICAgQ29tbW9uLndhcm4oJ1BsdWdpbi5yZWdpc3RlcjonLCBQbHVnaW4udG9TdHJpbmcocGx1Z2luKSwgJ2RvZXMgbm90IGltcGxlbWVudCBhbGwgcmVxdWlyZWQgZmllbGRzLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBsdWdpbi5uYW1lIGluIFBsdWdpbi5fcmVnaXN0cnkpIHtcbiAgICAgICAgICAgIHZhciByZWdpc3RlcmVkID0gUGx1Z2luLl9yZWdpc3RyeVtwbHVnaW4ubmFtZV0sXG4gICAgICAgICAgICAgICAgcGx1Z2luVmVyc2lvbiA9IFBsdWdpbi52ZXJzaW9uUGFyc2UocGx1Z2luLnZlcnNpb24pLm51bWJlcixcbiAgICAgICAgICAgICAgICByZWdpc3RlcmVkVmVyc2lvbiA9IFBsdWdpbi52ZXJzaW9uUGFyc2UocmVnaXN0ZXJlZC52ZXJzaW9uKS5udW1iZXI7XG5cbiAgICAgICAgICAgIGlmIChwbHVnaW5WZXJzaW9uID4gcmVnaXN0ZXJlZFZlcnNpb24pIHtcbiAgICAgICAgICAgICAgICBDb21tb24ud2FybignUGx1Z2luLnJlZ2lzdGVyOicsIFBsdWdpbi50b1N0cmluZyhyZWdpc3RlcmVkKSwgJ3dhcyB1cGdyYWRlZCB0bycsIFBsdWdpbi50b1N0cmluZyhwbHVnaW4pKTtcbiAgICAgICAgICAgICAgICBQbHVnaW4uX3JlZ2lzdHJ5W3BsdWdpbi5uYW1lXSA9IHBsdWdpbjtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocGx1Z2luVmVyc2lvbiA8IHJlZ2lzdGVyZWRWZXJzaW9uKSB7XG4gICAgICAgICAgICAgICAgQ29tbW9uLndhcm4oJ1BsdWdpbi5yZWdpc3RlcjonLCBQbHVnaW4udG9TdHJpbmcocmVnaXN0ZXJlZCksICdjYW4gbm90IGJlIGRvd25ncmFkZWQgdG8nLCBQbHVnaW4udG9TdHJpbmcocGx1Z2luKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBsdWdpbiAhPT0gcmVnaXN0ZXJlZCkge1xuICAgICAgICAgICAgICAgIENvbW1vbi53YXJuKCdQbHVnaW4ucmVnaXN0ZXI6JywgUGx1Z2luLnRvU3RyaW5nKHBsdWdpbiksICdpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgdG8gZGlmZmVyZW50IHBsdWdpbiBvYmplY3QnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIFBsdWdpbi5fcmVnaXN0cnlbcGx1Z2luLm5hbWVdID0gcGx1Z2luO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBsdWdpbjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVzb2x2ZXMgYSBkZXBlbmRlbmN5IHRvIGEgcGx1Z2luIG9iamVjdCBmcm9tIHRoZSByZWdpc3RyeSBpZiBpdCBleGlzdHMuIFxuICAgICAqIFRoZSBgZGVwZW5kZW5jeWAgbWF5IGNvbnRhaW4gYSB2ZXJzaW9uLCBidXQgb25seSB0aGUgbmFtZSBtYXR0ZXJzIHdoZW4gcmVzb2x2aW5nLlxuICAgICAqIEBtZXRob2QgcmVzb2x2ZVxuICAgICAqIEBwYXJhbSBkZXBlbmRlbmN5IHtzdHJpbmd9IFRoZSBkZXBlbmRlbmN5LlxuICAgICAqIEByZXR1cm4ge29iamVjdH0gVGhlIHBsdWdpbiBpZiByZXNvbHZlZCwgb3RoZXJ3aXNlIGB1bmRlZmluZWRgLlxuICAgICAqL1xuICAgIFBsdWdpbi5yZXNvbHZlID0gZnVuY3Rpb24oZGVwZW5kZW5jeSkge1xuICAgICAgICByZXR1cm4gUGx1Z2luLl9yZWdpc3RyeVtQbHVnaW4uZGVwZW5kZW5jeVBhcnNlKGRlcGVuZGVuY3kpLm5hbWVdO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgcHJldHR5IHByaW50ZWQgcGx1Z2luIG5hbWUgYW5kIHZlcnNpb24uXG4gICAgICogQG1ldGhvZCB0b1N0cmluZ1xuICAgICAqIEBwYXJhbSBwbHVnaW4ge30gVGhlIHBsdWdpbi5cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9IFByZXR0eSBwcmludGVkIHBsdWdpbiBuYW1lIGFuZCB2ZXJzaW9uLlxuICAgICAqL1xuICAgIFBsdWdpbi50b1N0cmluZyA9IGZ1bmN0aW9uKHBsdWdpbikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHBsdWdpbiA9PT0gJ3N0cmluZycgPyBwbHVnaW4gOiAocGx1Z2luLm5hbWUgfHwgJ2Fub255bW91cycpICsgJ0AnICsgKHBsdWdpbi52ZXJzaW9uIHx8IHBsdWdpbi5yYW5nZSB8fCAnMC4wLjAnKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdCBtZWV0cyB0aGUgbWluaW11bSBzdGFuZGFyZCB0byBiZSBjb25zaWRlcmVkIGEgcGx1Z2luLlxuICAgICAqIFRoaXMgbWVhbnMgaXQgbXVzdCBkZWZpbmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgICAqIC0gYG5hbWVgXG4gICAgICogLSBgdmVyc2lvbmBcbiAgICAgKiAtIGBpbnN0YWxsYFxuICAgICAqIEBtZXRob2QgaXNQbHVnaW5cbiAgICAgKiBAcGFyYW0gb2JqIHt9IFRoZSBvYmogdG8gdGVzdC5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIG9iamVjdCBjYW4gYmUgY29uc2lkZXJlZCBhIHBsdWdpbiBvdGhlcndpc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBQbHVnaW4uaXNQbHVnaW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiBvYmoubmFtZSAmJiBvYmoudmVyc2lvbiAmJiBvYmouaW5zdGFsbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBgdHJ1ZWAgaWYgYSBwbHVnaW4gd2l0aCB0aGUgZ2l2ZW4gYG5hbWVgIGJlZW4gaW5zdGFsbGVkIG9uIGBtb2R1bGVgLlxuICAgICAqIEBtZXRob2QgaXNVc2VkXG4gICAgICogQHBhcmFtIG1vZHVsZSB7fSBUaGUgbW9kdWxlLlxuICAgICAqIEBwYXJhbSBuYW1lIHtzdHJpbmd9IFRoZSBwbHVnaW4gbmFtZS5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgYSBwbHVnaW4gd2l0aCB0aGUgZ2l2ZW4gYG5hbWVgIGJlZW4gaW5zdGFsbGVkIG9uIGBtb2R1bGVgLCBvdGhlcndpc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBQbHVnaW4uaXNVc2VkID0gZnVuY3Rpb24obW9kdWxlLCBuYW1lKSB7XG4gICAgICAgIHJldHVybiBtb2R1bGUudXNlZC5pbmRleE9mKG5hbWUpID4gLTE7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYHRydWVgIGlmIGBwbHVnaW4uZm9yYCBpcyBhcHBsaWNhYmxlIHRvIGBtb2R1bGVgIGJ5IGNvbXBhcmluZyBhZ2FpbnN0IGBtb2R1bGUubmFtZWAgYW5kIGBtb2R1bGUudmVyc2lvbmAuXG4gICAgICogSWYgYHBsdWdpbi5mb3JgIGlzIG5vdCBzcGVjaWZpZWQgdGhlbiBpdCBpcyBhc3N1bWVkIHRvIGJlIGFwcGxpY2FibGUuXG4gICAgICogVGhlIHZhbHVlIG9mIGBwbHVnaW4uZm9yYCBpcyBhIHN0cmluZyBvZiB0aGUgZm9ybWF0IGAnbW9kdWxlLW5hbWUnYCBvciBgJ21vZHVsZS1uYW1lQHZlcnNpb24nYC5cbiAgICAgKiBAbWV0aG9kIGlzRm9yXG4gICAgICogQHBhcmFtIHBsdWdpbiB7fSBUaGUgcGx1Z2luLlxuICAgICAqIEBwYXJhbSBtb2R1bGUge30gVGhlIG1vZHVsZS5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgYHBsdWdpbi5mb3JgIGlzIGFwcGxpY2FibGUgdG8gYG1vZHVsZWAsIG90aGVyd2lzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIFBsdWdpbi5pc0ZvciA9IGZ1bmN0aW9uKHBsdWdpbiwgbW9kdWxlKSB7XG4gICAgICAgIHZhciBwYXJzZWQgPSBwbHVnaW4uZm9yICYmIFBsdWdpbi5kZXBlbmRlbmN5UGFyc2UocGx1Z2luLmZvcik7XG4gICAgICAgIHJldHVybiAhcGx1Z2luLmZvciB8fCAobW9kdWxlLm5hbWUgPT09IHBhcnNlZC5uYW1lICYmIFBsdWdpbi52ZXJzaW9uU2F0aXNmaWVzKG1vZHVsZS52ZXJzaW9uLCBwYXJzZWQucmFuZ2UpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogSW5zdGFsbHMgdGhlIHBsdWdpbnMgYnkgY2FsbGluZyBgcGx1Z2luLmluc3RhbGxgIG9uIGVhY2ggcGx1Z2luIHNwZWNpZmllZCBpbiBgcGx1Z2luc2AgaWYgcGFzc2VkLCBvdGhlcndpc2UgYG1vZHVsZS51c2VzYC5cbiAgICAgKiBGb3IgaW5zdGFsbGluZyBwbHVnaW5zIG9uIGBNYXR0ZXJgIHNlZSB0aGUgY29udmVuaWVuY2UgZnVuY3Rpb24gYE1hdHRlci51c2VgLlxuICAgICAqIFBsdWdpbnMgbWF5IGJlIHNwZWNpZmllZCBlaXRoZXIgYnkgdGhlaXIgbmFtZSBvciBhIHJlZmVyZW5jZSB0byB0aGUgcGx1Z2luIG9iamVjdC5cbiAgICAgKiBQbHVnaW5zIHRoZW1zZWx2ZXMgbWF5IHNwZWNpZnkgZnVydGhlciBkZXBlbmRlbmNpZXMsIGJ1dCBlYWNoIHBsdWdpbiBpcyBpbnN0YWxsZWQgb25seSBvbmNlLlxuICAgICAqIE9yZGVyIGlzIGltcG9ydGFudCwgYSB0b3BvbG9naWNhbCBzb3J0IGlzIHBlcmZvcm1lZCB0byBmaW5kIHRoZSBiZXN0IHJlc3VsdGluZyBvcmRlciBvZiBpbnN0YWxsYXRpb24uXG4gICAgICogVGhpcyBzb3J0aW5nIGF0dGVtcHRzIHRvIHNhdGlzZnkgZXZlcnkgZGVwZW5kZW5jeSdzIHJlcXVlc3RlZCBvcmRlcmluZywgYnV0IG1heSBub3QgYmUgZXhhY3QgaW4gYWxsIGNhc2VzLlxuICAgICAqIFRoaXMgZnVuY3Rpb24gbG9ncyB0aGUgcmVzdWx0aW5nIHN0YXR1cyBvZiBlYWNoIGRlcGVuZGVuY3kgaW4gdGhlIGNvbnNvbGUsIGFsb25nIHdpdGggYW55IHdhcm5pbmdzLlxuICAgICAqIC0gQSBncmVlbiB0aWNrIOKchSBpbmRpY2F0ZXMgYSBkZXBlbmRlbmN5IHdhcyByZXNvbHZlZCBhbmQgaW5zdGFsbGVkLlxuICAgICAqIC0gQW4gb3JhbmdlIGRpYW1vbmQg8J+UtiBpbmRpY2F0ZXMgYSBkZXBlbmRlbmN5IHdhcyByZXNvbHZlZCBidXQgYSB3YXJuaW5nIHdhcyB0aHJvd24gZm9yIGl0IG9yIG9uZSBpZiBpdHMgZGVwZW5kZW5jaWVzLlxuICAgICAqIC0gQSByZWQgY3Jvc3Mg4p2MIGluZGljYXRlcyBhIGRlcGVuZGVuY3kgY291bGQgbm90IGJlIHJlc29sdmVkLlxuICAgICAqIEF2b2lkIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiBtdWx0aXBsZSB0aW1lcyBvbiB0aGUgc2FtZSBtb2R1bGUgdW5sZXNzIHlvdSBpbnRlbmQgdG8gbWFudWFsbHkgY29udHJvbCBpbnN0YWxsYXRpb24gb3JkZXIuXG4gICAgICogQG1ldGhvZCB1c2VcbiAgICAgKiBAcGFyYW0gbW9kdWxlIHt9IFRoZSBtb2R1bGUgaW5zdGFsbCBwbHVnaW5zIG9uLlxuICAgICAqIEBwYXJhbSBbcGx1Z2lucz1tb2R1bGUudXNlc10ge30gVGhlIHBsdWdpbnMgdG8gaW5zdGFsbCBvbiBtb2R1bGUgKG9wdGlvbmFsLCBkZWZhdWx0cyB0byBgbW9kdWxlLnVzZXNgKS5cbiAgICAgKi9cbiAgICBQbHVnaW4udXNlID0gZnVuY3Rpb24obW9kdWxlLCBwbHVnaW5zKSB7XG4gICAgICAgIG1vZHVsZS51c2VzID0gKG1vZHVsZS51c2VzIHx8IFtdKS5jb25jYXQocGx1Z2lucyB8fCBbXSk7XG5cbiAgICAgICAgaWYgKG1vZHVsZS51c2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgQ29tbW9uLndhcm4oJ1BsdWdpbi51c2U6JywgUGx1Z2luLnRvU3RyaW5nKG1vZHVsZSksICdkb2VzIG5vdCBzcGVjaWZ5IGFueSBkZXBlbmRlbmNpZXMgdG8gaW5zdGFsbC4nKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBkZXBlbmRlbmNpZXMgPSBQbHVnaW4uZGVwZW5kZW5jaWVzKG1vZHVsZSksXG4gICAgICAgICAgICBzb3J0ZWREZXBlbmRlbmNpZXMgPSBDb21tb24udG9wb2xvZ2ljYWxTb3J0KGRlcGVuZGVuY2llcyksXG4gICAgICAgICAgICBzdGF0dXMgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvcnRlZERlcGVuZGVuY2llcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgaWYgKHNvcnRlZERlcGVuZGVuY2llc1tpXSA9PT0gbW9kdWxlLm5hbWUpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBsdWdpbiA9IFBsdWdpbi5yZXNvbHZlKHNvcnRlZERlcGVuZGVuY2llc1tpXSk7XG5cbiAgICAgICAgICAgIGlmICghcGx1Z2luKSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzLnB1c2goJ+KdjCAnICsgc29ydGVkRGVwZW5kZW5jaWVzW2ldKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKFBsdWdpbi5pc1VzZWQobW9kdWxlLCBwbHVnaW4ubmFtZSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFQbHVnaW4uaXNGb3IocGx1Z2luLCBtb2R1bGUpKSB7XG4gICAgICAgICAgICAgICAgQ29tbW9uLndhcm4oJ1BsdWdpbi51c2U6JywgUGx1Z2luLnRvU3RyaW5nKHBsdWdpbiksICdpcyBmb3InLCBwbHVnaW4uZm9yLCAnYnV0IGluc3RhbGxlZCBvbicsIFBsdWdpbi50b1N0cmluZyhtb2R1bGUpICsgJy4nKTtcbiAgICAgICAgICAgICAgICBwbHVnaW4uX3dhcm5lZCA9IHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwbHVnaW4uaW5zdGFsbCkge1xuICAgICAgICAgICAgICAgIHBsdWdpbi5pbnN0YWxsKG1vZHVsZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIENvbW1vbi53YXJuKCdQbHVnaW4udXNlOicsIFBsdWdpbi50b1N0cmluZyhwbHVnaW4pLCAnZG9lcyBub3Qgc3BlY2lmeSBhbiBpbnN0YWxsIGZ1bmN0aW9uLicpO1xuICAgICAgICAgICAgICAgIHBsdWdpbi5fd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHBsdWdpbi5fd2FybmVkKSB7XG4gICAgICAgICAgICAgICAgc3RhdHVzLnB1c2goJ/CflLYgJyArIFBsdWdpbi50b1N0cmluZyhwbHVnaW4pKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgcGx1Z2luLl93YXJuZWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN0YXR1cy5wdXNoKCfinIUgJyArIFBsdWdpbi50b1N0cmluZyhwbHVnaW4pKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbW9kdWxlLnVzZWQucHVzaChwbHVnaW4ubmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RhdHVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIENvbW1vbi5pbmZvKHN0YXR1cy5qb2luKCcgICcpKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmaW5kcyBhbGwgb2YgYSBtb2R1bGUncyBkZXBlbmRlbmNpZXMgYW5kIHJldHVybnMgYSBmbGF0IGRlcGVuZGVuY3kgZ3JhcGguXG4gICAgICogQG1ldGhvZCBkZXBlbmRlbmNpZXNcbiAgICAgKiBAcGFyYW0gbW9kdWxlIHt9IFRoZSBtb2R1bGUuXG4gICAgICogQHJldHVybiB7b2JqZWN0fSBBIGRlcGVuZGVuY3kgZ3JhcGguXG4gICAgICovXG4gICAgUGx1Z2luLmRlcGVuZGVuY2llcyA9IGZ1bmN0aW9uKG1vZHVsZSwgdHJhY2tlZCkge1xuICAgICAgICB2YXIgcGFyc2VkQmFzZSA9IFBsdWdpbi5kZXBlbmRlbmN5UGFyc2UobW9kdWxlKSxcbiAgICAgICAgICAgIG5hbWUgPSBwYXJzZWRCYXNlLm5hbWU7XG5cbiAgICAgICAgdHJhY2tlZCA9IHRyYWNrZWQgfHwge307XG5cbiAgICAgICAgaWYgKG5hbWUgaW4gdHJhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbW9kdWxlID0gUGx1Z2luLnJlc29sdmUobW9kdWxlKSB8fCBtb2R1bGU7XG5cbiAgICAgICAgdHJhY2tlZFtuYW1lXSA9IENvbW1vbi5tYXAobW9kdWxlLnVzZXMgfHwgW10sIGZ1bmN0aW9uKGRlcGVuZGVuY3kpIHtcbiAgICAgICAgICAgIGlmIChQbHVnaW4uaXNQbHVnaW4oZGVwZW5kZW5jeSkpIHtcbiAgICAgICAgICAgICAgICBQbHVnaW4ucmVnaXN0ZXIoZGVwZW5kZW5jeSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwYXJzZWQgPSBQbHVnaW4uZGVwZW5kZW5jeVBhcnNlKGRlcGVuZGVuY3kpLFxuICAgICAgICAgICAgICAgIHJlc29sdmVkID0gUGx1Z2luLnJlc29sdmUoZGVwZW5kZW5jeSk7XG5cbiAgICAgICAgICAgIGlmIChyZXNvbHZlZCAmJiAhUGx1Z2luLnZlcnNpb25TYXRpc2ZpZXMocmVzb2x2ZWQudmVyc2lvbiwgcGFyc2VkLnJhbmdlKSkge1xuICAgICAgICAgICAgICAgIENvbW1vbi53YXJuKFxuICAgICAgICAgICAgICAgICAgICAnUGx1Z2luLmRlcGVuZGVuY2llczonLCBQbHVnaW4udG9TdHJpbmcocmVzb2x2ZWQpLCAnZG9lcyBub3Qgc2F0aXNmeScsXG4gICAgICAgICAgICAgICAgICAgIFBsdWdpbi50b1N0cmluZyhwYXJzZWQpLCAndXNlZCBieScsIFBsdWdpbi50b1N0cmluZyhwYXJzZWRCYXNlKSArICcuJ1xuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICByZXNvbHZlZC5fd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBtb2R1bGUuX3dhcm5lZCA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFyZXNvbHZlZCkge1xuICAgICAgICAgICAgICAgIENvbW1vbi53YXJuKFxuICAgICAgICAgICAgICAgICAgICAnUGx1Z2luLmRlcGVuZGVuY2llczonLCBQbHVnaW4udG9TdHJpbmcoZGVwZW5kZW5jeSksICd1c2VkIGJ5JyxcbiAgICAgICAgICAgICAgICAgICAgUGx1Z2luLnRvU3RyaW5nKHBhcnNlZEJhc2UpLCAnY291bGQgbm90IGJlIHJlc29sdmVkLidcbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgbW9kdWxlLl93YXJuZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gcGFyc2VkLm5hbWU7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdHJhY2tlZFtuYW1lXS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgUGx1Z2luLmRlcGVuZGVuY2llcyh0cmFja2VkW25hbWVdW2ldLCB0cmFja2VkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0cmFja2VkO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSBkZXBlbmRlbmN5IHN0cmluZyBpbnRvIGl0cyBjb21wb25lbnRzLlxuICAgICAqIFRoZSBgZGVwZW5kZW5jeWAgaXMgYSBzdHJpbmcgb2YgdGhlIGZvcm1hdCBgJ21vZHVsZS1uYW1lJ2Agb3IgYCdtb2R1bGUtbmFtZUB2ZXJzaW9uJ2AuXG4gICAgICogU2VlIGRvY3VtZW50YXRpb24gZm9yIGBQbHVnaW4udmVyc2lvblBhcnNlYCBmb3IgYSBkZXNjcmlwdGlvbiBvZiB0aGUgZm9ybWF0LlxuICAgICAqIFRoaXMgZnVuY3Rpb24gY2FuIGFsc28gaGFuZGxlIGRlcGVuZGVuY2llcyB0aGF0IGFyZSBhbHJlYWR5IHJlc29sdmVkIChlLmcuIGEgbW9kdWxlIG9iamVjdCkuXG4gICAgICogQG1ldGhvZCBkZXBlbmRlbmN5UGFyc2VcbiAgICAgKiBAcGFyYW0gZGVwZW5kZW5jeSB7c3RyaW5nfSBUaGUgZGVwZW5kZW5jeSBvZiB0aGUgZm9ybWF0IGAnbW9kdWxlLW5hbWUnYCBvciBgJ21vZHVsZS1uYW1lQHZlcnNpb24nYC5cbiAgICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBkZXBlbmRlbmN5IHBhcnNlZCBpbnRvIGl0cyBjb21wb25lbnRzLlxuICAgICAqL1xuICAgIFBsdWdpbi5kZXBlbmRlbmN5UGFyc2UgPSBmdW5jdGlvbihkZXBlbmRlbmN5KSB7XG4gICAgICAgIGlmIChDb21tb24uaXNTdHJpbmcoZGVwZW5kZW5jeSkpIHtcbiAgICAgICAgICAgIHZhciBwYXR0ZXJuID0gL15bXFx3LV0rKEAoXFwqfFtcXF5+XT9cXGQrXFwuXFxkK1xcLlxcZCsoLVswLTlBLVphLXotK10rKT8pKT8kLztcblxuICAgICAgICAgICAgaWYgKCFwYXR0ZXJuLnRlc3QoZGVwZW5kZW5jeSkpIHtcbiAgICAgICAgICAgICAgICBDb21tb24ud2FybignUGx1Z2luLmRlcGVuZGVuY3lQYXJzZTonLCBkZXBlbmRlbmN5LCAnaXMgbm90IGEgdmFsaWQgZGVwZW5kZW5jeSBzdHJpbmcuJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogZGVwZW5kZW5jeS5zcGxpdCgnQCcpWzBdLFxuICAgICAgICAgICAgICAgIHJhbmdlOiBkZXBlbmRlbmN5LnNwbGl0KCdAJylbMV0gfHwgJyonXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IGRlcGVuZGVuY3kubmFtZSxcbiAgICAgICAgICAgIHJhbmdlOiBkZXBlbmRlbmN5LnJhbmdlIHx8IGRlcGVuZGVuY3kudmVyc2lvblxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgYSB2ZXJzaW9uIHN0cmluZyBpbnRvIGl0cyBjb21wb25lbnRzLiAgXG4gICAgICogVmVyc2lvbnMgYXJlIHN0cmljdGx5IG9mIHRoZSBmb3JtYXQgYHgueS56YCAoYXMgaW4gW3NlbXZlcl0oaHR0cDovL3NlbXZlci5vcmcvKSkuXG4gICAgICogVmVyc2lvbnMgbWF5IG9wdGlvbmFsbHkgaGF2ZSBhIHByZXJlbGVhc2UgdGFnIGluIHRoZSBmb3JtYXQgYHgueS56LWFscGhhYC5cbiAgICAgKiBSYW5nZXMgYXJlIGEgc3RyaWN0IHN1YnNldCBvZiBbbnBtIHJhbmdlc10oaHR0cHM6Ly9kb2NzLm5wbWpzLmNvbS9taXNjL3NlbXZlciNhZHZhbmNlZC1yYW5nZS1zeW50YXgpLlxuICAgICAqIE9ubHkgdGhlIGZvbGxvd2luZyByYW5nZSB0eXBlcyBhcmUgc3VwcG9ydGVkOlxuICAgICAqIC0gVGlsZGUgcmFuZ2VzIGUuZy4gYH4xLjIuM2BcbiAgICAgKiAtIENhcmV0IHJhbmdlcyBlLmcuIGBeMS4yLjNgXG4gICAgICogLSBHcmVhdGVyIHRoYW4gcmFuZ2VzIGUuZy4gYD4xLjIuM2BcbiAgICAgKiAtIEdyZWF0ZXIgdGhhbiBvciBlcXVhbCByYW5nZXMgZS5nLiBgPj0xLjIuM2BcbiAgICAgKiAtIEV4YWN0IHZlcnNpb24gZS5nLiBgMS4yLjNgXG4gICAgICogLSBBbnkgdmVyc2lvbiBgKmBcbiAgICAgKiBAbWV0aG9kIHZlcnNpb25QYXJzZVxuICAgICAqIEBwYXJhbSByYW5nZSB7c3RyaW5nfSBUaGUgdmVyc2lvbiBzdHJpbmcuXG4gICAgICogQHJldHVybiB7b2JqZWN0fSBUaGUgdmVyc2lvbiByYW5nZSBwYXJzZWQgaW50byBpdHMgY29tcG9uZW50cy5cbiAgICAgKi9cbiAgICBQbHVnaW4udmVyc2lvblBhcnNlID0gZnVuY3Rpb24ocmFuZ2UpIHtcbiAgICAgICAgdmFyIHBhdHRlcm4gPSAvXihcXCopfChcXF58fnw+PXw+KT9cXHMqKChcXGQrKVxcLihcXGQrKVxcLihcXGQrKSkoLVswLTlBLVphLXotK10rKT8kLztcblxuICAgICAgICBpZiAoIXBhdHRlcm4udGVzdChyYW5nZSkpIHtcbiAgICAgICAgICAgIENvbW1vbi53YXJuKCdQbHVnaW4udmVyc2lvblBhcnNlOicsIHJhbmdlLCAnaXMgbm90IGEgdmFsaWQgdmVyc2lvbiBvciByYW5nZS4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBwYXJ0cyA9IHBhdHRlcm4uZXhlYyhyYW5nZSk7XG4gICAgICAgIHZhciBtYWpvciA9IE51bWJlcihwYXJ0c1s0XSk7XG4gICAgICAgIHZhciBtaW5vciA9IE51bWJlcihwYXJ0c1s1XSk7XG4gICAgICAgIHZhciBwYXRjaCA9IE51bWJlcihwYXJ0c1s2XSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGlzUmFuZ2U6IEJvb2xlYW4ocGFydHNbMV0gfHwgcGFydHNbMl0pLFxuICAgICAgICAgICAgdmVyc2lvbjogcGFydHNbM10sXG4gICAgICAgICAgICByYW5nZTogcmFuZ2UsXG4gICAgICAgICAgICBvcGVyYXRvcjogcGFydHNbMV0gfHwgcGFydHNbMl0gfHwgJycsXG4gICAgICAgICAgICBtYWpvcjogbWFqb3IsXG4gICAgICAgICAgICBtaW5vcjogbWlub3IsXG4gICAgICAgICAgICBwYXRjaDogcGF0Y2gsXG4gICAgICAgICAgICBwYXJ0czogW21ham9yLCBtaW5vciwgcGF0Y2hdLFxuICAgICAgICAgICAgcHJlcmVsZWFzZTogcGFydHNbN10sXG4gICAgICAgICAgICBudW1iZXI6IG1ham9yICogMWU4ICsgbWlub3IgKiAxZTQgKyBwYXRjaFxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGB0cnVlYCBpZiBgdmVyc2lvbmAgc2F0aXNmaWVzIHRoZSBnaXZlbiBgcmFuZ2VgLlxuICAgICAqIFNlZSBkb2N1bWVudGF0aW9uIGZvciBgUGx1Z2luLnZlcnNpb25QYXJzZWAgZm9yIGEgZGVzY3JpcHRpb24gb2YgdGhlIGZvcm1hdC5cbiAgICAgKiBJZiBhIHZlcnNpb24gb3IgcmFuZ2UgaXMgbm90IHNwZWNpZmllZCwgdGhlbiBhbnkgdmVyc2lvbiAoYCpgKSBpcyBhc3N1bWVkIHRvIHNhdGlzZnkuXG4gICAgICogQG1ldGhvZCB2ZXJzaW9uU2F0aXNmaWVzXG4gICAgICogQHBhcmFtIHZlcnNpb24ge3N0cmluZ30gVGhlIHZlcnNpb24gc3RyaW5nLlxuICAgICAqIEBwYXJhbSByYW5nZSB7c3RyaW5nfSBUaGUgcmFuZ2Ugc3RyaW5nLlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiBgdmVyc2lvbmAgc2F0aXNmaWVzIGByYW5nZWAsIG90aGVyd2lzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIFBsdWdpbi52ZXJzaW9uU2F0aXNmaWVzID0gZnVuY3Rpb24odmVyc2lvbiwgcmFuZ2UpIHtcbiAgICAgICAgcmFuZ2UgPSByYW5nZSB8fCAnKic7XG5cbiAgICAgICAgdmFyIHIgPSBQbHVnaW4udmVyc2lvblBhcnNlKHJhbmdlKSxcbiAgICAgICAgICAgIHYgPSBQbHVnaW4udmVyc2lvblBhcnNlKHZlcnNpb24pO1xuXG4gICAgICAgIGlmIChyLmlzUmFuZ2UpIHtcbiAgICAgICAgICAgIGlmIChyLm9wZXJhdG9yID09PSAnKicgfHwgdmVyc2lvbiA9PT0gJyonKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyLm9wZXJhdG9yID09PSAnPicpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdi5udW1iZXIgPiByLm51bWJlcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHIub3BlcmF0b3IgPT09ICc+PScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdi5udW1iZXIgPj0gci5udW1iZXI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyLm9wZXJhdG9yID09PSAnficpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdi5tYWpvciA9PT0gci5tYWpvciAmJiB2Lm1pbm9yID09PSByLm1pbm9yICYmIHYucGF0Y2ggPj0gci5wYXRjaDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHIub3BlcmF0b3IgPT09ICdeJykge1xuICAgICAgICAgICAgICAgIGlmIChyLm1ham9yID4gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdi5tYWpvciA9PT0gci5tYWpvciAmJiB2Lm51bWJlciA+PSByLm51bWJlcjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoci5taW5vciA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHYubWlub3IgPT09IHIubWlub3IgJiYgdi5wYXRjaCA+PSByLnBhdGNoO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiB2LnBhdGNoID09PSByLnBhdGNoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZlcnNpb24gPT09IHJhbmdlIHx8IHZlcnNpb24gPT09ICcqJztcbiAgICB9O1xuXG59KSgpO1xuXG5cbi8qKiovIH0pLFxuLyogMTYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuLyoqXG4qIFRoZSBgTWF0dGVyLkNvbnRhY3RgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBjcmVhdGluZyBhbmQgbWFuaXB1bGF0aW5nIGNvbGxpc2lvbiBjb250YWN0cy5cbipcbiogQGNsYXNzIENvbnRhY3RcbiovXG5cbnZhciBDb250YWN0ID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gQ29udGFjdDtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBjb250YWN0LlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHt2ZXJ0ZXh9IHZlcnRleFxuICAgICAqIEByZXR1cm4ge2NvbnRhY3R9IEEgbmV3IGNvbnRhY3RcbiAgICAgKi9cbiAgICBDb250YWN0LmNyZWF0ZSA9IGZ1bmN0aW9uKHZlcnRleCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmVydGV4OiB2ZXJ0ZXgsXG4gICAgICAgICAgICBub3JtYWxJbXB1bHNlOiAwLFxuICAgICAgICAgICAgdGFuZ2VudEltcHVsc2U6IDBcbiAgICAgICAgfTtcbiAgICB9O1xuXG59KSgpO1xuXG5cbi8qKiovIH0pLFxuLyogMTcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyoqXG4qIFRoZSBgTWF0dGVyLkVuZ2luZWAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIGFuZCBtYW5pcHVsYXRpbmcgZW5naW5lcy5cbiogQW4gZW5naW5lIGlzIGEgY29udHJvbGxlciB0aGF0IG1hbmFnZXMgdXBkYXRpbmcgdGhlIHNpbXVsYXRpb24gb2YgdGhlIHdvcmxkLlxuKiBTZWUgYE1hdHRlci5SdW5uZXJgIGZvciBhbiBvcHRpb25hbCBnYW1lIGxvb3AgdXRpbGl0eS5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIEVuZ2luZVxuKi9cblxudmFyIEVuZ2luZSA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVuZ2luZTtcblxudmFyIFNsZWVwaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcbnZhciBSZXNvbHZlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xudmFyIERldGVjdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMyk7XG52YXIgUGFpcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE5KTtcbnZhciBFdmVudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xudmFyIENvbXBvc2l0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG52YXIgQ29uc3RyYWludCA9IF9fd2VicGFja19yZXF1aXJlX18oMTApO1xudmFyIENvbW1vbiA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgQm9keSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgZW5naW5lLiBUaGUgb3B0aW9ucyBwYXJhbWV0ZXIgaXMgYW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIGFueSBwcm9wZXJ0aWVzIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0cy5cbiAgICAgKiBBbGwgcHJvcGVydGllcyBoYXZlIGRlZmF1bHQgdmFsdWVzLCBhbmQgbWFueSBhcmUgcHJlLWNhbGN1bGF0ZWQgYXV0b21hdGljYWxseSBiYXNlZCBvbiBvdGhlciBwcm9wZXJ0aWVzLlxuICAgICAqIFNlZSB0aGUgcHJvcGVydGllcyBzZWN0aW9uIGJlbG93IGZvciBkZXRhaWxlZCBpbmZvcm1hdGlvbiBvbiB3aGF0IHlvdSBjYW4gcGFzcyB2aWEgdGhlIGBvcHRpb25zYCBvYmplY3QuXG4gICAgICogQG1ldGhvZCBjcmVhdGVcbiAgICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAgICogQHJldHVybiB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKi9cbiAgICBFbmdpbmUuY3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICBwb3NpdGlvbkl0ZXJhdGlvbnM6IDYsXG4gICAgICAgICAgICB2ZWxvY2l0eUl0ZXJhdGlvbnM6IDQsXG4gICAgICAgICAgICBjb25zdHJhaW50SXRlcmF0aW9uczogMixcbiAgICAgICAgICAgIGVuYWJsZVNsZWVwaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIGV2ZW50czogW10sXG4gICAgICAgICAgICBwbHVnaW46IHt9LFxuICAgICAgICAgICAgZ3Jhdml0eToge1xuICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgeTogMSxcbiAgICAgICAgICAgICAgICBzY2FsZTogMC4wMDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB0aW1pbmc6IHtcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IDAsXG4gICAgICAgICAgICAgICAgdGltZVNjYWxlOiAxLFxuICAgICAgICAgICAgICAgIGxhc3REZWx0YTogMCxcbiAgICAgICAgICAgICAgICBsYXN0RWxhcHNlZDogMFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBlbmdpbmUgPSBDb21tb24uZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgICAgICBlbmdpbmUud29ybGQgPSBvcHRpb25zLndvcmxkIHx8IENvbXBvc2l0ZS5jcmVhdGUoeyBsYWJlbDogJ1dvcmxkJyB9KTtcbiAgICAgICAgZW5naW5lLnBhaXJzID0gb3B0aW9ucy5wYWlycyB8fCBQYWlycy5jcmVhdGUoKTtcbiAgICAgICAgZW5naW5lLmRldGVjdG9yID0gb3B0aW9ucy5kZXRlY3RvciB8fCBEZXRlY3Rvci5jcmVhdGUoKTtcblxuICAgICAgICAvLyBmb3IgdGVtcG9yYXJ5IGJhY2sgY29tcGF0aWJpbGl0eSBvbmx5XG4gICAgICAgIGVuZ2luZS5ncmlkID0geyBidWNrZXRzOiBbXSB9O1xuICAgICAgICBlbmdpbmUud29ybGQuZ3Jhdml0eSA9IGVuZ2luZS5ncmF2aXR5O1xuICAgICAgICBlbmdpbmUuYnJvYWRwaGFzZSA9IGVuZ2luZS5ncmlkO1xuICAgICAgICBlbmdpbmUubWV0cmljcyA9IHt9O1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGVuZ2luZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogTW92ZXMgdGhlIHNpbXVsYXRpb24gZm9yd2FyZCBpbiB0aW1lIGJ5IGBkZWx0YWAgbWlsbGlzZWNvbmRzLlxuICAgICAqIFRyaWdnZXJzIGBiZWZvcmVVcGRhdGVgIGFuZCBgYWZ0ZXJVcGRhdGVgIGV2ZW50cy5cbiAgICAgKiBUcmlnZ2VycyBgY29sbGlzaW9uU3RhcnRgLCBgY29sbGlzaW9uQWN0aXZlYCBhbmQgYGNvbGxpc2lvbkVuZGAgZXZlbnRzLlxuICAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgICogQHBhcmFtIHtlbmdpbmV9IGVuZ2luZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVsdGE9MTYuNjY2XVxuICAgICAqL1xuICAgIEVuZ2luZS51cGRhdGUgPSBmdW5jdGlvbihlbmdpbmUsIGRlbHRhKSB7XG4gICAgICAgIHZhciBzdGFydFRpbWUgPSBDb21tb24ubm93KCk7XG5cbiAgICAgICAgdmFyIHdvcmxkID0gZW5naW5lLndvcmxkLFxuICAgICAgICAgICAgZGV0ZWN0b3IgPSBlbmdpbmUuZGV0ZWN0b3IsXG4gICAgICAgICAgICBwYWlycyA9IGVuZ2luZS5wYWlycyxcbiAgICAgICAgICAgIHRpbWluZyA9IGVuZ2luZS50aW1pbmcsXG4gICAgICAgICAgICB0aW1lc3RhbXAgPSB0aW1pbmcudGltZXN0YW1wLFxuICAgICAgICAgICAgaTtcblxuICAgICAgICBkZWx0YSA9IHR5cGVvZiBkZWx0YSAhPT0gJ3VuZGVmaW5lZCcgPyBkZWx0YSA6IENvbW1vbi5fYmFzZURlbHRhO1xuICAgICAgICBkZWx0YSAqPSB0aW1pbmcudGltZVNjYWxlO1xuXG4gICAgICAgIC8vIGluY3JlbWVudCB0aW1lc3RhbXBcbiAgICAgICAgdGltaW5nLnRpbWVzdGFtcCArPSBkZWx0YTtcbiAgICAgICAgdGltaW5nLmxhc3REZWx0YSA9IGRlbHRhO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBhbiBldmVudCBvYmplY3RcbiAgICAgICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICAgICAgdGltZXN0YW1wOiB0aW1pbmcudGltZXN0YW1wLFxuICAgICAgICAgICAgZGVsdGE6IGRlbHRhXG4gICAgICAgIH07XG5cbiAgICAgICAgRXZlbnRzLnRyaWdnZXIoZW5naW5lLCAnYmVmb3JlVXBkYXRlJywgZXZlbnQpO1xuXG4gICAgICAgIC8vIGdldCBhbGwgYm9kaWVzIGFuZCBhbGwgY29uc3RyYWludHMgaW4gdGhlIHdvcmxkXG4gICAgICAgIHZhciBhbGxCb2RpZXMgPSBDb21wb3NpdGUuYWxsQm9kaWVzKHdvcmxkKSxcbiAgICAgICAgICAgIGFsbENvbnN0cmFpbnRzID0gQ29tcG9zaXRlLmFsbENvbnN0cmFpbnRzKHdvcmxkKTtcblxuICAgICAgICAvLyBpZiB0aGUgd29ybGQgaGFzIGNoYW5nZWRcbiAgICAgICAgaWYgKHdvcmxkLmlzTW9kaWZpZWQpIHtcbiAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgZGV0ZWN0b3IgYm9kaWVzXG4gICAgICAgICAgICBEZXRlY3Rvci5zZXRCb2RpZXMoZGV0ZWN0b3IsIGFsbEJvZGllcyk7XG5cbiAgICAgICAgICAgIC8vIHJlc2V0IGFsbCBjb21wb3NpdGUgbW9kaWZpZWQgZmxhZ3NcbiAgICAgICAgICAgIENvbXBvc2l0ZS5zZXRNb2RpZmllZCh3b3JsZCwgZmFsc2UsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSBzbGVlcGluZyBpZiBlbmFibGVkXG4gICAgICAgIGlmIChlbmdpbmUuZW5hYmxlU2xlZXBpbmcpXG4gICAgICAgICAgICBTbGVlcGluZy51cGRhdGUoYWxsQm9kaWVzLCBkZWx0YSk7XG5cbiAgICAgICAgLy8gYXBwbHkgZ3Jhdml0eSB0byBhbGwgYm9kaWVzXG4gICAgICAgIEVuZ2luZS5fYm9kaWVzQXBwbHlHcmF2aXR5KGFsbEJvZGllcywgZW5naW5lLmdyYXZpdHkpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBhbGwgYm9keSBwb3NpdGlvbiBhbmQgcm90YXRpb24gYnkgaW50ZWdyYXRpb25cbiAgICAgICAgaWYgKGRlbHRhID4gMCkge1xuICAgICAgICAgICAgRW5naW5lLl9ib2RpZXNVcGRhdGUoYWxsQm9kaWVzLCBkZWx0YSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgYWxsIGNvbnN0cmFpbnRzIChmaXJzdCBwYXNzKVxuICAgICAgICBDb25zdHJhaW50LnByZVNvbHZlQWxsKGFsbEJvZGllcyk7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBlbmdpbmUuY29uc3RyYWludEl0ZXJhdGlvbnM7IGkrKykge1xuICAgICAgICAgICAgQ29uc3RyYWludC5zb2x2ZUFsbChhbGxDb25zdHJhaW50cywgZGVsdGEpO1xuICAgICAgICB9XG4gICAgICAgIENvbnN0cmFpbnQucG9zdFNvbHZlQWxsKGFsbEJvZGllcyk7XG5cbiAgICAgICAgLy8gZmluZCBhbGwgY29sbGlzaW9uc1xuICAgICAgICBkZXRlY3Rvci5wYWlycyA9IGVuZ2luZS5wYWlycztcbiAgICAgICAgdmFyIGNvbGxpc2lvbnMgPSBEZXRlY3Rvci5jb2xsaXNpb25zKGRldGVjdG9yKTtcblxuICAgICAgICAvLyB1cGRhdGUgY29sbGlzaW9uIHBhaXJzXG4gICAgICAgIFBhaXJzLnVwZGF0ZShwYWlycywgY29sbGlzaW9ucywgdGltZXN0YW1wKTtcblxuICAgICAgICAvLyB3YWtlIHVwIGJvZGllcyBpbnZvbHZlZCBpbiBjb2xsaXNpb25zXG4gICAgICAgIGlmIChlbmdpbmUuZW5hYmxlU2xlZXBpbmcpXG4gICAgICAgICAgICBTbGVlcGluZy5hZnRlckNvbGxpc2lvbnMocGFpcnMubGlzdCk7XG5cbiAgICAgICAgLy8gdHJpZ2dlciBjb2xsaXNpb24gZXZlbnRzXG4gICAgICAgIGlmIChwYWlycy5jb2xsaXNpb25TdGFydC5sZW5ndGggPiAwKVxuICAgICAgICAgICAgRXZlbnRzLnRyaWdnZXIoZW5naW5lLCAnY29sbGlzaW9uU3RhcnQnLCB7IHBhaXJzOiBwYWlycy5jb2xsaXNpb25TdGFydCB9KTtcblxuICAgICAgICAvLyBpdGVyYXRpdmVseSByZXNvbHZlIHBvc2l0aW9uIGJldHdlZW4gY29sbGlzaW9uc1xuICAgICAgICB2YXIgcG9zaXRpb25EYW1waW5nID0gQ29tbW9uLmNsYW1wKDIwIC8gZW5naW5lLnBvc2l0aW9uSXRlcmF0aW9ucywgMCwgMSk7XG4gICAgICAgIFxuICAgICAgICBSZXNvbHZlci5wcmVTb2x2ZVBvc2l0aW9uKHBhaXJzLmxpc3QpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZW5naW5lLnBvc2l0aW9uSXRlcmF0aW9uczsgaSsrKSB7XG4gICAgICAgICAgICBSZXNvbHZlci5zb2x2ZVBvc2l0aW9uKHBhaXJzLmxpc3QsIGRlbHRhLCBwb3NpdGlvbkRhbXBpbmcpO1xuICAgICAgICB9XG4gICAgICAgIFJlc29sdmVyLnBvc3RTb2x2ZVBvc2l0aW9uKGFsbEJvZGllcyk7XG5cbiAgICAgICAgLy8gdXBkYXRlIGFsbCBjb25zdHJhaW50cyAoc2Vjb25kIHBhc3MpXG4gICAgICAgIENvbnN0cmFpbnQucHJlU29sdmVBbGwoYWxsQm9kaWVzKTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGVuZ2luZS5jb25zdHJhaW50SXRlcmF0aW9uczsgaSsrKSB7XG4gICAgICAgICAgICBDb25zdHJhaW50LnNvbHZlQWxsKGFsbENvbnN0cmFpbnRzLCBkZWx0YSk7XG4gICAgICAgIH1cbiAgICAgICAgQ29uc3RyYWludC5wb3N0U29sdmVBbGwoYWxsQm9kaWVzKTtcblxuICAgICAgICAvLyBpdGVyYXRpdmVseSByZXNvbHZlIHZlbG9jaXR5IGJldHdlZW4gY29sbGlzaW9uc1xuICAgICAgICBSZXNvbHZlci5wcmVTb2x2ZVZlbG9jaXR5KHBhaXJzLmxpc3QpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZW5naW5lLnZlbG9jaXR5SXRlcmF0aW9uczsgaSsrKSB7XG4gICAgICAgICAgICBSZXNvbHZlci5zb2x2ZVZlbG9jaXR5KHBhaXJzLmxpc3QsIGRlbHRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSBib2R5IHNwZWVkIGFuZCB2ZWxvY2l0eSBwcm9wZXJ0aWVzXG4gICAgICAgIEVuZ2luZS5fYm9kaWVzVXBkYXRlVmVsb2NpdGllcyhhbGxCb2RpZXMpO1xuXG4gICAgICAgIC8vIHRyaWdnZXIgY29sbGlzaW9uIGV2ZW50c1xuICAgICAgICBpZiAocGFpcnMuY29sbGlzaW9uQWN0aXZlLmxlbmd0aCA+IDApXG4gICAgICAgICAgICBFdmVudHMudHJpZ2dlcihlbmdpbmUsICdjb2xsaXNpb25BY3RpdmUnLCB7IHBhaXJzOiBwYWlycy5jb2xsaXNpb25BY3RpdmUgfSk7XG5cbiAgICAgICAgaWYgKHBhaXJzLmNvbGxpc2lvbkVuZC5sZW5ndGggPiAwKVxuICAgICAgICAgICAgRXZlbnRzLnRyaWdnZXIoZW5naW5lLCAnY29sbGlzaW9uRW5kJywgeyBwYWlyczogcGFpcnMuY29sbGlzaW9uRW5kIH0pO1xuXG4gICAgICAgIC8vIGNsZWFyIGZvcmNlIGJ1ZmZlcnNcbiAgICAgICAgRW5naW5lLl9ib2RpZXNDbGVhckZvcmNlcyhhbGxCb2RpZXMpO1xuXG4gICAgICAgIEV2ZW50cy50cmlnZ2VyKGVuZ2luZSwgJ2FmdGVyVXBkYXRlJywgZXZlbnQpO1xuXG4gICAgICAgIC8vIGxvZyB0aGUgdGltZSBlbGFwc2VkIGNvbXB1dGluZyB0aGlzIHVwZGF0ZVxuICAgICAgICBlbmdpbmUudGltaW5nLmxhc3RFbGFwc2VkID0gQ29tbW9uLm5vdygpIC0gc3RhcnRUaW1lO1xuXG4gICAgICAgIHJldHVybiBlbmdpbmU7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBNZXJnZXMgdHdvIGVuZ2luZXMgYnkga2VlcGluZyB0aGUgY29uZmlndXJhdGlvbiBvZiBgZW5naW5lQWAgYnV0IHJlcGxhY2luZyB0aGUgd29ybGQgd2l0aCB0aGUgb25lIGZyb20gYGVuZ2luZUJgLlxuICAgICAqIEBtZXRob2QgbWVyZ2VcbiAgICAgKiBAcGFyYW0ge2VuZ2luZX0gZW5naW5lQVxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVCXG4gICAgICovXG4gICAgRW5naW5lLm1lcmdlID0gZnVuY3Rpb24oZW5naW5lQSwgZW5naW5lQikge1xuICAgICAgICBDb21tb24uZXh0ZW5kKGVuZ2luZUEsIGVuZ2luZUIpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGVuZ2luZUIud29ybGQpIHtcbiAgICAgICAgICAgIGVuZ2luZUEud29ybGQgPSBlbmdpbmVCLndvcmxkO1xuXG4gICAgICAgICAgICBFbmdpbmUuY2xlYXIoZW5naW5lQSk7XG5cbiAgICAgICAgICAgIHZhciBib2RpZXMgPSBDb21wb3NpdGUuYWxsQm9kaWVzKGVuZ2luZUEud29ybGQpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldO1xuICAgICAgICAgICAgICAgIFNsZWVwaW5nLnNldChib2R5LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgYm9keS5pZCA9IENvbW1vbi5uZXh0SWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDbGVhcnMgdGhlIGVuZ2luZSBwYWlycyBhbmQgZGV0ZWN0b3IuXG4gICAgICogQG1ldGhvZCBjbGVhclxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKi9cbiAgICBFbmdpbmUuY2xlYXIgPSBmdW5jdGlvbihlbmdpbmUpIHtcbiAgICAgICAgUGFpcnMuY2xlYXIoZW5naW5lLnBhaXJzKTtcbiAgICAgICAgRGV0ZWN0b3IuY2xlYXIoZW5naW5lLmRldGVjdG9yKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogWmVyb2VzIHRoZSBgYm9keS5mb3JjZWAgYW5kIGBib2R5LnRvcnF1ZWAgZm9yY2UgYnVmZmVycy5cbiAgICAgKiBAbWV0aG9kIF9ib2RpZXNDbGVhckZvcmNlc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqL1xuICAgIEVuZ2luZS5fYm9kaWVzQ2xlYXJGb3JjZXMgPSBmdW5jdGlvbihib2RpZXMpIHtcbiAgICAgICAgdmFyIGJvZGllc0xlbmd0aCA9IGJvZGllcy5sZW5ndGg7XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXNMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV07XG5cbiAgICAgICAgICAgIC8vIHJlc2V0IGZvcmNlIGJ1ZmZlcnNcbiAgICAgICAgICAgIGJvZHkuZm9yY2UueCA9IDA7XG4gICAgICAgICAgICBib2R5LmZvcmNlLnkgPSAwO1xuICAgICAgICAgICAgYm9keS50b3JxdWUgPSAwO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgZ3Jhdml0YXRpb25hbCBhY2NlbGVyYXRpb24gdG8gYWxsIGBib2RpZXNgLlxuICAgICAqIFRoaXMgbW9kZWxzIGEgW3VuaWZvcm0gZ3Jhdml0YXRpb25hbCBmaWVsZF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR3Jhdml0eV9vZl9FYXJ0aCksIHNpbWlsYXIgdG8gbmVhciB0aGUgc3VyZmFjZSBvZiBhIHBsYW5ldC5cbiAgICAgKiBcbiAgICAgKiBAbWV0aG9kIF9ib2RpZXNBcHBseUdyYXZpdHlcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gZ3Jhdml0eVxuICAgICAqL1xuICAgIEVuZ2luZS5fYm9kaWVzQXBwbHlHcmF2aXR5ID0gZnVuY3Rpb24oYm9kaWVzLCBncmF2aXR5KSB7XG4gICAgICAgIHZhciBncmF2aXR5U2NhbGUgPSB0eXBlb2YgZ3Jhdml0eS5zY2FsZSAhPT0gJ3VuZGVmaW5lZCcgPyBncmF2aXR5LnNjYWxlIDogMC4wMDEsXG4gICAgICAgICAgICBib2RpZXNMZW5ndGggPSBib2RpZXMubGVuZ3RoO1xuXG4gICAgICAgIGlmICgoZ3Jhdml0eS54ID09PSAwICYmIGdyYXZpdHkueSA9PT0gMCkgfHwgZ3Jhdml0eVNjYWxlID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldO1xuXG4gICAgICAgICAgICBpZiAoYm9keS5pc1N0YXRpYyB8fCBib2R5LmlzU2xlZXBpbmcpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIC8vIGFkZCB0aGUgcmVzdWx0YW50IGZvcmNlIG9mIGdyYXZpdHlcbiAgICAgICAgICAgIGJvZHkuZm9yY2UueSArPSBib2R5Lm1hc3MgKiBncmF2aXR5LnkgKiBncmF2aXR5U2NhbGU7XG4gICAgICAgICAgICBib2R5LmZvcmNlLnggKz0gYm9keS5tYXNzICogZ3Jhdml0eS54ICogZ3Jhdml0eVNjYWxlO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgYEJvZHkudXBkYXRlYCB0byBhbGwgZ2l2ZW4gYGJvZGllc2AuXG4gICAgICogQG1ldGhvZCBfYm9kaWVzVXBkYXRlXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlbHRhIFRoZSBhbW91bnQgb2YgdGltZSBlbGFwc2VkIGJldHdlZW4gdXBkYXRlc1xuICAgICAqL1xuICAgIEVuZ2luZS5fYm9kaWVzVXBkYXRlID0gZnVuY3Rpb24oYm9kaWVzLCBkZWx0YSkge1xuICAgICAgICB2YXIgYm9kaWVzTGVuZ3RoID0gYm9kaWVzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXTtcblxuICAgICAgICAgICAgaWYgKGJvZHkuaXNTdGF0aWMgfHwgYm9keS5pc1NsZWVwaW5nKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBCb2R5LnVwZGF0ZShib2R5LCBkZWx0YSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyBgQm9keS51cGRhdGVWZWxvY2l0aWVzYCB0byBhbGwgZ2l2ZW4gYGJvZGllc2AuXG4gICAgICogQG1ldGhvZCBfYm9kaWVzVXBkYXRlVmVsb2NpdGllc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqL1xuICAgIEVuZ2luZS5fYm9kaWVzVXBkYXRlVmVsb2NpdGllcyA9IGZ1bmN0aW9uKGJvZGllcykge1xuICAgICAgICB2YXIgYm9kaWVzTGVuZ3RoID0gYm9kaWVzLmxlbmd0aDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBCb2R5LnVwZGF0ZVZlbG9jaXRpZXMoYm9kaWVzW2ldKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBIGRlcHJlY2F0ZWQgYWxpYXMgZm9yIGBSdW5uZXIucnVuYCwgdXNlIGBNYXR0ZXIuUnVubmVyLnJ1bihlbmdpbmUpYCBpbnN0ZWFkIGFuZCBzZWUgYE1hdHRlci5SdW5uZXJgIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgICAqIEBkZXByZWNhdGVkIHVzZSBNYXR0ZXIuUnVubmVyLnJ1bihlbmdpbmUpIGluc3RlYWRcbiAgICAgKiBAbWV0aG9kIHJ1blxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQganVzdCBiZWZvcmUgYW4gdXBkYXRlXG4gICAgKlxuICAgICogQGV2ZW50IGJlZm9yZVVwZGF0ZVxuICAgICogQHBhcmFtIHtvYmplY3R9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnQuZGVsdGEgVGhlIGRlbHRhIHRpbWUgaW4gbWlsbGlzZWNvbmRzIHZhbHVlIHVzZWQgaW4gdGhlIHVwZGF0ZVxuICAgICogQHBhcmFtIHtlbmdpbmV9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIGFmdGVyIGVuZ2luZSB1cGRhdGUgYW5kIGFsbCBjb2xsaXNpb24gZXZlbnRzXG4gICAgKlxuICAgICogQGV2ZW50IGFmdGVyVXBkYXRlXG4gICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnQudGltZXN0YW1wIFRoZSBlbmdpbmUudGltaW5nLnRpbWVzdGFtcCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC5kZWx0YSBUaGUgZGVsdGEgdGltZSBpbiBtaWxsaXNlY29uZHMgdmFsdWUgdXNlZCBpbiB0aGUgdXBkYXRlXG4gICAgKiBAcGFyYW0ge2VuZ2luZX0gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYWZ0ZXIgZW5naW5lIHVwZGF0ZSwgcHJvdmlkZXMgYSBsaXN0IG9mIGFsbCBwYWlycyB0aGF0IGhhdmUgc3RhcnRlZCB0byBjb2xsaWRlIGluIHRoZSBjdXJyZW50IHRpY2sgKGlmIGFueSlcbiAgICAqXG4gICAgKiBAZXZlbnQgY29sbGlzaW9uU3RhcnRcbiAgICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7cGFpcltdfSBldmVudC5wYWlycyBMaXN0IG9mIGFmZmVjdGVkIHBhaXJzXG4gICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnQudGltZXN0YW1wIFRoZSBlbmdpbmUudGltaW5nLnRpbWVzdGFtcCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC5kZWx0YSBUaGUgZGVsdGEgdGltZSBpbiBtaWxsaXNlY29uZHMgdmFsdWUgdXNlZCBpbiB0aGUgdXBkYXRlXG4gICAgKiBAcGFyYW0ge2VuZ2luZX0gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYWZ0ZXIgZW5naW5lIHVwZGF0ZSwgcHJvdmlkZXMgYSBsaXN0IG9mIGFsbCBwYWlycyB0aGF0IGFyZSBjb2xsaWRpbmcgaW4gdGhlIGN1cnJlbnQgdGljayAoaWYgYW55KVxuICAgICpcbiAgICAqIEBldmVudCBjb2xsaXNpb25BY3RpdmVcbiAgICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7cGFpcltdfSBldmVudC5wYWlycyBMaXN0IG9mIGFmZmVjdGVkIHBhaXJzXG4gICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnQudGltZXN0YW1wIFRoZSBlbmdpbmUudGltaW5nLnRpbWVzdGFtcCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC5kZWx0YSBUaGUgZGVsdGEgdGltZSBpbiBtaWxsaXNlY29uZHMgdmFsdWUgdXNlZCBpbiB0aGUgdXBkYXRlXG4gICAgKiBAcGFyYW0ge2VuZ2luZX0gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYWZ0ZXIgZW5naW5lIHVwZGF0ZSwgcHJvdmlkZXMgYSBsaXN0IG9mIGFsbCBwYWlycyB0aGF0IGhhdmUgZW5kZWQgY29sbGlzaW9uIGluIHRoZSBjdXJyZW50IHRpY2sgKGlmIGFueSlcbiAgICAqXG4gICAgKiBAZXZlbnQgY29sbGlzaW9uRW5kXG4gICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge3BhaXJbXX0gZXZlbnQucGFpcnMgTGlzdCBvZiBhZmZlY3RlZCBwYWlyc1xuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnQuZGVsdGEgVGhlIGRlbHRhIHRpbWUgaW4gbWlsbGlzZWNvbmRzIHZhbHVlIHVzZWQgaW4gdGhlIHVwZGF0ZVxuICAgICogQHBhcmFtIHtlbmdpbmV9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKlxuICAgICpcbiAgICAqICBQcm9wZXJ0aWVzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGludGVnZXIgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgdGhlIG51bWJlciBvZiBwb3NpdGlvbiBpdGVyYXRpb25zIHRvIHBlcmZvcm0gZWFjaCB1cGRhdGUuXG4gICAgICogVGhlIGhpZ2hlciB0aGUgdmFsdWUsIHRoZSBoaWdoZXIgcXVhbGl0eSB0aGUgc2ltdWxhdGlvbiB3aWxsIGJlIGF0IHRoZSBleHBlbnNlIG9mIHBlcmZvcm1hbmNlLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHBvc2l0aW9uSXRlcmF0aW9uc1xuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDZcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGludGVnZXIgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgdGhlIG51bWJlciBvZiB2ZWxvY2l0eSBpdGVyYXRpb25zIHRvIHBlcmZvcm0gZWFjaCB1cGRhdGUuXG4gICAgICogVGhlIGhpZ2hlciB0aGUgdmFsdWUsIHRoZSBoaWdoZXIgcXVhbGl0eSB0aGUgc2ltdWxhdGlvbiB3aWxsIGJlIGF0IHRoZSBleHBlbnNlIG9mIHBlcmZvcm1hbmNlLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHZlbG9jaXR5SXRlcmF0aW9uc1xuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDRcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGludGVnZXIgYE51bWJlcmAgdGhhdCBzcGVjaWZpZXMgdGhlIG51bWJlciBvZiBjb25zdHJhaW50IGl0ZXJhdGlvbnMgdG8gcGVyZm9ybSBlYWNoIHVwZGF0ZS5cbiAgICAgKiBUaGUgaGlnaGVyIHRoZSB2YWx1ZSwgdGhlIGhpZ2hlciBxdWFsaXR5IHRoZSBzaW11bGF0aW9uIHdpbGwgYmUgYXQgdGhlIGV4cGVuc2Ugb2YgcGVyZm9ybWFuY2UuXG4gICAgICogVGhlIGRlZmF1bHQgdmFsdWUgb2YgYDJgIGlzIHVzdWFsbHkgdmVyeSBhZGVxdWF0ZS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBjb25zdHJhaW50SXRlcmF0aW9uc1xuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDJcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0aGF0IHNwZWNpZmllcyB3aGV0aGVyIHRoZSBlbmdpbmUgc2hvdWxkIGFsbG93IHNsZWVwaW5nIHZpYSB0aGUgYE1hdHRlci5TbGVlcGluZ2AgbW9kdWxlLlxuICAgICAqIFNsZWVwaW5nIGNhbiBpbXByb3ZlIHN0YWJpbGl0eSBhbmQgcGVyZm9ybWFuY2UsIGJ1dCBvZnRlbiBhdCB0aGUgZXhwZW5zZSBvZiBhY2N1cmFjeS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBlbmFibGVTbGVlcGluZ1xuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gYE9iamVjdGAgY29udGFpbmluZyBwcm9wZXJ0aWVzIHJlZ2FyZGluZyB0aGUgdGltaW5nIHN5c3RlbXMgb2YgdGhlIGVuZ2luZS4gXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgdGltaW5nXG4gICAgICogQHR5cGUgb2JqZWN0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgc3BlY2lmaWVzIHRoZSBnbG9iYWwgc2NhbGluZyBmYWN0b3Igb2YgdGltZSBmb3IgYWxsIGJvZGllcy5cbiAgICAgKiBBIHZhbHVlIG9mIGAwYCBmcmVlemVzIHRoZSBzaW11bGF0aW9uLlxuICAgICAqIEEgdmFsdWUgb2YgYDAuMWAgZ2l2ZXMgYSBzbG93LW1vdGlvbiBlZmZlY3QuXG4gICAgICogQSB2YWx1ZSBvZiBgMS4yYCBnaXZlcyBhIHNwZWVkLXVwIGVmZmVjdC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB0aW1pbmcudGltZVNjYWxlXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IHNwZWNpZmllcyB0aGUgY3VycmVudCBzaW11bGF0aW9uLXRpbWUgaW4gbWlsbGlzZWNvbmRzIHN0YXJ0aW5nIGZyb20gYDBgLiBcbiAgICAgKiBJdCBpcyBpbmNyZW1lbnRlZCBvbiBldmVyeSBgRW5naW5lLnVwZGF0ZWAgYnkgdGhlIGdpdmVuIGBkZWx0YWAgYXJndW1lbnQuIFxuICAgICAqIFxuICAgICAqIEBwcm9wZXJ0eSB0aW1pbmcudGltZXN0YW1wXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IHJlcHJlc2VudHMgdGhlIHRvdGFsIGV4ZWN1dGlvbiB0aW1lIGVsYXBzZWQgZHVyaW5nIHRoZSBsYXN0IGBFbmdpbmUudXBkYXRlYCBpbiBtaWxsaXNlY29uZHMuXG4gICAgICogSXQgaXMgdXBkYXRlZCBieSB0aW1pbmcgZnJvbSB0aGUgc3RhcnQgb2YgdGhlIGxhc3QgYEVuZ2luZS51cGRhdGVgIGNhbGwgdW50aWwgaXQgZW5kcy5cbiAgICAgKlxuICAgICAqIFRoaXMgdmFsdWUgd2lsbCBhbHNvIGluY2x1ZGUgdGhlIHRvdGFsIGV4ZWN1dGlvbiB0aW1lIG9mIGFsbCBldmVudCBoYW5kbGVycyBkaXJlY3RseSBvciBpbmRpcmVjdGx5IHRyaWdnZXJlZCBieSB0aGUgZW5naW5lIHVwZGF0ZS5cbiAgICAgKiBcbiAgICAgKiBAcHJvcGVydHkgdGltaW5nLmxhc3RFbGFwc2VkXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTnVtYmVyYCB0aGF0IHJlcHJlc2VudHMgdGhlIGBkZWx0YWAgdmFsdWUgdXNlZCBpbiB0aGUgbGFzdCBlbmdpbmUgdXBkYXRlLlxuICAgICAqIFxuICAgICAqIEBwcm9wZXJ0eSB0aW1pbmcubGFzdERlbHRhXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBgTWF0dGVyLkRldGVjdG9yYCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBkZXRlY3RvclxuICAgICAqIEB0eXBlIGRldGVjdG9yXG4gICAgICogQGRlZmF1bHQgYSBNYXR0ZXIuRGV0ZWN0b3IgaW5zdGFuY2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYE1hdHRlci5HcmlkYCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIHJlcGxhY2VkIGJ5IGBlbmdpbmUuZGV0ZWN0b3JgXG4gICAgICogQHByb3BlcnR5IGdyaWRcbiAgICAgKiBAdHlwZSBncmlkXG4gICAgICogQGRlZmF1bHQgYSBNYXR0ZXIuR3JpZCBpbnN0YW5jZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZWQgYnkgYW5kIG5vdyBhbGlhcyBmb3IgYGVuZ2luZS5ncmlkYC5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIHJlcGxhY2VkIGJ5IGBlbmdpbmUuZGV0ZWN0b3JgXG4gICAgICogQHByb3BlcnR5IGJyb2FkcGhhc2VcbiAgICAgKiBAdHlwZSBncmlkXG4gICAgICogQGRlZmF1bHQgYSBNYXR0ZXIuR3JpZCBpbnN0YW5jZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJvb3QgYE1hdHRlci5Db21wb3NpdGVgIGluc3RhbmNlIHRoYXQgd2lsbCBjb250YWluIGFsbCBib2RpZXMsIGNvbnN0cmFpbnRzIGFuZCBvdGhlciBjb21wb3NpdGVzIHRvIGJlIHNpbXVsYXRlZCBieSB0aGlzIGVuZ2luZS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSB3b3JsZFxuICAgICAqIEB0eXBlIGNvbXBvc2l0ZVxuICAgICAqIEBkZWZhdWx0IGEgTWF0dGVyLkNvbXBvc2l0ZSBpbnN0YW5jZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IHJlc2VydmVkIGZvciBzdG9yaW5nIHBsdWdpbi1zcGVjaWZpYyBwcm9wZXJ0aWVzLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHBsdWdpblxuICAgICAqIEB0eXBlIHt9XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBbiBvcHRpb25hbCBncmF2aXRhdGlvbmFsIGFjY2VsZXJhdGlvbiBhcHBsaWVkIHRvIGFsbCBib2RpZXMgaW4gYGVuZ2luZS53b3JsZGAgb24gZXZlcnkgdXBkYXRlLlxuICAgICAqIFxuICAgICAqIFRoaXMgbW9kZWxzIGEgW3VuaWZvcm0gZ3Jhdml0YXRpb25hbCBmaWVsZF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR3Jhdml0eV9vZl9FYXJ0aCksIHNpbWlsYXIgdG8gbmVhciB0aGUgc3VyZmFjZSBvZiBhIHBsYW5ldC4gRm9yIGdyYXZpdHkgaW4gb3RoZXIgY29udGV4dHMsIGRpc2FibGUgdGhpcyBhbmQgYXBwbHkgZm9yY2VzIGFzIG5lZWRlZC5cbiAgICAgKiBcbiAgICAgKiBUbyBkaXNhYmxlIHNldCB0aGUgYHNjYWxlYCBjb21wb25lbnQgdG8gYDBgLlxuICAgICAqIFxuICAgICAqIFRoaXMgaXMgc3BsaXQgaW50byB0aHJlZSBjb21wb25lbnRzIGZvciBlYXNlIG9mIHVzZTogIFxuICAgICAqIGEgbm9ybWFsaXNlZCBkaXJlY3Rpb24gKGB4YCBhbmQgYHlgKSBhbmQgbWFnbml0dWRlIChgc2NhbGVgKS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBncmF2aXR5XG4gICAgICogQHR5cGUgb2JqZWN0XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgZ3Jhdml0YXRpb25hbCBkaXJlY3Rpb24gbm9ybWFsIGB4YCBjb21wb25lbnQsIHRvIGJlIG11bHRpcGxpZWQgYnkgYGdyYXZpdHkuc2NhbGVgLlxuICAgICAqIFxuICAgICAqIEBwcm9wZXJ0eSBncmF2aXR5LnhcbiAgICAgKiBAdHlwZSBvYmplY3RcbiAgICAgKiBAZGVmYXVsdCAwXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgZ3Jhdml0YXRpb25hbCBkaXJlY3Rpb24gbm9ybWFsIGB5YCBjb21wb25lbnQsIHRvIGJlIG11bHRpcGxpZWQgYnkgYGdyYXZpdHkuc2NhbGVgLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGdyYXZpdHkueVxuICAgICAqIEB0eXBlIG9iamVjdFxuICAgICAqIEBkZWZhdWx0IDFcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBtYWduaXR1ZGUgb2YgdGhlIGdyYXZpdGF0aW9uYWwgYWNjZWxlcmF0aW9uLlxuICAgICAqIFxuICAgICAqIEBwcm9wZXJ0eSBncmF2aXR5LnNjYWxlXG4gICAgICogQHR5cGUgb2JqZWN0XG4gICAgICogQGRlZmF1bHQgMC4wMDFcbiAgICAgKi9cblxufSkoKTtcblxuXG4vKioqLyB9KSxcbi8qIDE4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qKlxuKiBUaGUgYE1hdHRlci5SZXNvbHZlcmAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIHJlc29sdmluZyBjb2xsaXNpb24gcGFpcnMuXG4qXG4qIEBjbGFzcyBSZXNvbHZlclxuKi9cblxudmFyIFJlc29sdmVyID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gUmVzb2x2ZXI7XG5cbnZhciBWZXJ0aWNlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG52YXIgQ29tbW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBCb3VuZHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICBSZXNvbHZlci5fcmVzdGluZ1RocmVzaCA9IDI7XG4gICAgUmVzb2x2ZXIuX3Jlc3RpbmdUaHJlc2hUYW5nZW50ID0gTWF0aC5zcXJ0KDYpO1xuICAgIFJlc29sdmVyLl9wb3NpdGlvbkRhbXBlbiA9IDAuOTtcbiAgICBSZXNvbHZlci5fcG9zaXRpb25XYXJtaW5nID0gMC44O1xuICAgIFJlc29sdmVyLl9mcmljdGlvbk5vcm1hbE11bHRpcGxpZXIgPSA1O1xuICAgIFJlc29sdmVyLl9mcmljdGlvbk1heFN0YXRpYyA9IE51bWJlci5NQVhfVkFMVUU7XG5cbiAgICAvKipcbiAgICAgKiBQcmVwYXJlIHBhaXJzIGZvciBwb3NpdGlvbiBzb2x2aW5nLlxuICAgICAqIEBtZXRob2QgcHJlU29sdmVQb3NpdGlvblxuICAgICAqIEBwYXJhbSB7cGFpcltdfSBwYWlyc1xuICAgICAqL1xuICAgIFJlc29sdmVyLnByZVNvbHZlUG9zaXRpb24gPSBmdW5jdGlvbihwYWlycykge1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIHBhaXIsXG4gICAgICAgICAgICBhY3RpdmVDb3VudCxcbiAgICAgICAgICAgIHBhaXJzTGVuZ3RoID0gcGFpcnMubGVuZ3RoO1xuXG4gICAgICAgIC8vIGZpbmQgdG90YWwgY29udGFjdHMgb24gZWFjaCBib2R5XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYWlyc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNbaV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghcGFpci5pc0FjdGl2ZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgYWN0aXZlQ291bnQgPSBwYWlyLmFjdGl2ZUNvbnRhY3RzLmxlbmd0aDtcbiAgICAgICAgICAgIHBhaXIuY29sbGlzaW9uLnBhcmVudEEudG90YWxDb250YWN0cyArPSBhY3RpdmVDb3VudDtcbiAgICAgICAgICAgIHBhaXIuY29sbGlzaW9uLnBhcmVudEIudG90YWxDb250YWN0cyArPSBhY3RpdmVDb3VudDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBGaW5kIGEgc29sdXRpb24gZm9yIHBhaXIgcG9zaXRpb25zLlxuICAgICAqIEBtZXRob2Qgc29sdmVQb3NpdGlvblxuICAgICAqIEBwYXJhbSB7cGFpcltdfSBwYWlyc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWx0YVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGFtcGluZz0xXVxuICAgICAqL1xuICAgIFJlc29sdmVyLnNvbHZlUG9zaXRpb24gPSBmdW5jdGlvbihwYWlycywgZGVsdGEsIGRhbXBpbmcpIHtcbiAgICAgICAgdmFyIGksXG4gICAgICAgICAgICBwYWlyLFxuICAgICAgICAgICAgY29sbGlzaW9uLFxuICAgICAgICAgICAgYm9keUEsXG4gICAgICAgICAgICBib2R5QixcbiAgICAgICAgICAgIG5vcm1hbCxcbiAgICAgICAgICAgIGNvbnRhY3RTaGFyZSxcbiAgICAgICAgICAgIHBvc2l0aW9uSW1wdWxzZSxcbiAgICAgICAgICAgIHBvc2l0aW9uRGFtcGVuID0gUmVzb2x2ZXIuX3Bvc2l0aW9uRGFtcGVuICogKGRhbXBpbmcgfHwgMSksXG4gICAgICAgICAgICBzbG9wRGFtcGVuID0gQ29tbW9uLmNsYW1wKGRlbHRhIC8gQ29tbW9uLl9iYXNlRGVsdGEsIDAsIDEpLFxuICAgICAgICAgICAgcGFpcnNMZW5ndGggPSBwYWlycy5sZW5ndGg7XG5cbiAgICAgICAgLy8gZmluZCBpbXB1bHNlcyByZXF1aXJlZCB0byByZXNvbHZlIHBlbmV0cmF0aW9uXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYWlyc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNbaV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghcGFpci5pc0FjdGl2ZSB8fCBwYWlyLmlzU2Vuc29yKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjb2xsaXNpb24gPSBwYWlyLmNvbGxpc2lvbjtcbiAgICAgICAgICAgIGJvZHlBID0gY29sbGlzaW9uLnBhcmVudEE7XG4gICAgICAgICAgICBib2R5QiA9IGNvbGxpc2lvbi5wYXJlbnRCO1xuICAgICAgICAgICAgbm9ybWFsID0gY29sbGlzaW9uLm5vcm1hbDtcblxuICAgICAgICAgICAgLy8gZ2V0IGN1cnJlbnQgc2VwYXJhdGlvbiBiZXR3ZWVuIGJvZHkgZWRnZXMgaW52b2x2ZWQgaW4gY29sbGlzaW9uXG4gICAgICAgICAgICBwYWlyLnNlcGFyYXRpb24gPSBcbiAgICAgICAgICAgICAgICBub3JtYWwueCAqIChib2R5Qi5wb3NpdGlvbkltcHVsc2UueCArIGNvbGxpc2lvbi5wZW5ldHJhdGlvbi54IC0gYm9keUEucG9zaXRpb25JbXB1bHNlLngpXG4gICAgICAgICAgICAgICAgKyBub3JtYWwueSAqIChib2R5Qi5wb3NpdGlvbkltcHVsc2UueSArIGNvbGxpc2lvbi5wZW5ldHJhdGlvbi55IC0gYm9keUEucG9zaXRpb25JbXB1bHNlLnkpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFpcnNMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcGFpciA9IHBhaXJzW2ldO1xuXG4gICAgICAgICAgICBpZiAoIXBhaXIuaXNBY3RpdmUgfHwgcGFpci5pc1NlbnNvcilcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb247XG4gICAgICAgICAgICBib2R5QSA9IGNvbGxpc2lvbi5wYXJlbnRBO1xuICAgICAgICAgICAgYm9keUIgPSBjb2xsaXNpb24ucGFyZW50QjtcbiAgICAgICAgICAgIG5vcm1hbCA9IGNvbGxpc2lvbi5ub3JtYWw7XG4gICAgICAgICAgICBwb3NpdGlvbkltcHVsc2UgPSBwYWlyLnNlcGFyYXRpb24gLSBwYWlyLnNsb3AgKiBzbG9wRGFtcGVuO1xuXG4gICAgICAgICAgICBpZiAoYm9keUEuaXNTdGF0aWMgfHwgYm9keUIuaXNTdGF0aWMpXG4gICAgICAgICAgICAgICAgcG9zaXRpb25JbXB1bHNlICo9IDI7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghKGJvZHlBLmlzU3RhdGljIHx8IGJvZHlBLmlzU2xlZXBpbmcpKSB7XG4gICAgICAgICAgICAgICAgY29udGFjdFNoYXJlID0gcG9zaXRpb25EYW1wZW4gLyBib2R5QS50b3RhbENvbnRhY3RzO1xuICAgICAgICAgICAgICAgIGJvZHlBLnBvc2l0aW9uSW1wdWxzZS54ICs9IG5vcm1hbC54ICogcG9zaXRpb25JbXB1bHNlICogY29udGFjdFNoYXJlO1xuICAgICAgICAgICAgICAgIGJvZHlBLnBvc2l0aW9uSW1wdWxzZS55ICs9IG5vcm1hbC55ICogcG9zaXRpb25JbXB1bHNlICogY29udGFjdFNoYXJlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIShib2R5Qi5pc1N0YXRpYyB8fCBib2R5Qi5pc1NsZWVwaW5nKSkge1xuICAgICAgICAgICAgICAgIGNvbnRhY3RTaGFyZSA9IHBvc2l0aW9uRGFtcGVuIC8gYm9keUIudG90YWxDb250YWN0cztcbiAgICAgICAgICAgICAgICBib2R5Qi5wb3NpdGlvbkltcHVsc2UueCAtPSBub3JtYWwueCAqIHBvc2l0aW9uSW1wdWxzZSAqIGNvbnRhY3RTaGFyZTtcbiAgICAgICAgICAgICAgICBib2R5Qi5wb3NpdGlvbkltcHVsc2UueSAtPSBub3JtYWwueSAqIHBvc2l0aW9uSW1wdWxzZSAqIGNvbnRhY3RTaGFyZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBcHBseSBwb3NpdGlvbiByZXNvbHV0aW9uLlxuICAgICAqIEBtZXRob2QgcG9zdFNvbHZlUG9zaXRpb25cbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICovXG4gICAgUmVzb2x2ZXIucG9zdFNvbHZlUG9zaXRpb24gPSBmdW5jdGlvbihib2RpZXMpIHtcbiAgICAgICAgdmFyIHBvc2l0aW9uV2FybWluZyA9IFJlc29sdmVyLl9wb3NpdGlvbldhcm1pbmcsXG4gICAgICAgICAgICBib2RpZXNMZW5ndGggPSBib2RpZXMubGVuZ3RoLFxuICAgICAgICAgICAgdmVydGljZXNUcmFuc2xhdGUgPSBWZXJ0aWNlcy50cmFuc2xhdGUsXG4gICAgICAgICAgICBib3VuZHNVcGRhdGUgPSBCb3VuZHMudXBkYXRlO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uSW1wdWxzZSA9IGJvZHkucG9zaXRpb25JbXB1bHNlLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uSW1wdWxzZVggPSBwb3NpdGlvbkltcHVsc2UueCxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbkltcHVsc2VZID0gcG9zaXRpb25JbXB1bHNlLnksXG4gICAgICAgICAgICAgICAgdmVsb2NpdHkgPSBib2R5LnZlbG9jaXR5O1xuXG4gICAgICAgICAgICAvLyByZXNldCBjb250YWN0IGNvdW50XG4gICAgICAgICAgICBib2R5LnRvdGFsQ29udGFjdHMgPSAwO1xuXG4gICAgICAgICAgICBpZiAocG9zaXRpb25JbXB1bHNlWCAhPT0gMCB8fCBwb3NpdGlvbkltcHVsc2VZICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIGJvZHkgZ2VvbWV0cnlcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGJvZHkucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnQgPSBib2R5LnBhcnRzW2pdO1xuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNlc1RyYW5zbGF0ZShwYXJ0LnZlcnRpY2VzLCBwb3NpdGlvbkltcHVsc2UpO1xuICAgICAgICAgICAgICAgICAgICBib3VuZHNVcGRhdGUocGFydC5ib3VuZHMsIHBhcnQudmVydGljZXMsIHZlbG9jaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgcGFydC5wb3NpdGlvbi54ICs9IHBvc2l0aW9uSW1wdWxzZVg7XG4gICAgICAgICAgICAgICAgICAgIHBhcnQucG9zaXRpb24ueSArPSBwb3NpdGlvbkltcHVsc2VZO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIG1vdmUgdGhlIGJvZHkgd2l0aG91dCBjaGFuZ2luZyB2ZWxvY2l0eVxuICAgICAgICAgICAgICAgIGJvZHkucG9zaXRpb25QcmV2LnggKz0gcG9zaXRpb25JbXB1bHNlWDtcbiAgICAgICAgICAgICAgICBib2R5LnBvc2l0aW9uUHJldi55ICs9IHBvc2l0aW9uSW1wdWxzZVk7XG5cbiAgICAgICAgICAgICAgICBpZiAocG9zaXRpb25JbXB1bHNlWCAqIHZlbG9jaXR5LnggKyBwb3NpdGlvbkltcHVsc2VZICogdmVsb2NpdHkueSA8IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVzZXQgY2FjaGVkIGltcHVsc2UgaWYgdGhlIGJvZHkgaGFzIHZlbG9jaXR5IGFsb25nIGl0XG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uSW1wdWxzZS54ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25JbXB1bHNlLnkgPSAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHdhcm0gdGhlIG5leHQgaXRlcmF0aW9uXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uSW1wdWxzZS54ICo9IHBvc2l0aW9uV2FybWluZztcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25JbXB1bHNlLnkgKj0gcG9zaXRpb25XYXJtaW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBQcmVwYXJlIHBhaXJzIGZvciB2ZWxvY2l0eSBzb2x2aW5nLlxuICAgICAqIEBtZXRob2QgcHJlU29sdmVWZWxvY2l0eVxuICAgICAqIEBwYXJhbSB7cGFpcltdfSBwYWlyc1xuICAgICAqL1xuICAgIFJlc29sdmVyLnByZVNvbHZlVmVsb2NpdHkgPSBmdW5jdGlvbihwYWlycykge1xuICAgICAgICB2YXIgcGFpcnNMZW5ndGggPSBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgajtcbiAgICAgICAgXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYWlyc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2ldO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoIXBhaXIuaXNBY3RpdmUgfHwgcGFpci5pc1NlbnNvcilcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdmFyIGNvbnRhY3RzID0gcGFpci5hY3RpdmVDb250YWN0cyxcbiAgICAgICAgICAgICAgICBjb250YWN0c0xlbmd0aCA9IGNvbnRhY3RzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBjb2xsaXNpb24gPSBwYWlyLmNvbGxpc2lvbixcbiAgICAgICAgICAgICAgICBib2R5QSA9IGNvbGxpc2lvbi5wYXJlbnRBLFxuICAgICAgICAgICAgICAgIGJvZHlCID0gY29sbGlzaW9uLnBhcmVudEIsXG4gICAgICAgICAgICAgICAgbm9ybWFsID0gY29sbGlzaW9uLm5vcm1hbCxcbiAgICAgICAgICAgICAgICB0YW5nZW50ID0gY29sbGlzaW9uLnRhbmdlbnQ7XG4gICAgXG4gICAgICAgICAgICAvLyByZXNvbHZlIGVhY2ggY29udGFjdFxuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGNvbnRhY3RzTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGFjdCA9IGNvbnRhY3RzW2pdLFxuICAgICAgICAgICAgICAgICAgICBjb250YWN0VmVydGV4ID0gY29udGFjdC52ZXJ0ZXgsXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbEltcHVsc2UgPSBjb250YWN0Lm5vcm1hbEltcHVsc2UsXG4gICAgICAgICAgICAgICAgICAgIHRhbmdlbnRJbXB1bHNlID0gY29udGFjdC50YW5nZW50SW1wdWxzZTtcbiAgICBcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsSW1wdWxzZSAhPT0gMCB8fCB0YW5nZW50SW1wdWxzZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0b3RhbCBpbXB1bHNlIGZyb20gY29udGFjdFxuICAgICAgICAgICAgICAgICAgICB2YXIgaW1wdWxzZVggPSBub3JtYWwueCAqIG5vcm1hbEltcHVsc2UgKyB0YW5nZW50LnggKiB0YW5nZW50SW1wdWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGltcHVsc2VZID0gbm9ybWFsLnkgKiBub3JtYWxJbXB1bHNlICsgdGFuZ2VudC55ICogdGFuZ2VudEltcHVsc2U7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBhcHBseSBpbXB1bHNlIGZyb20gY29udGFjdFxuICAgICAgICAgICAgICAgICAgICBpZiAoIShib2R5QS5pc1N0YXRpYyB8fCBib2R5QS5pc1NsZWVwaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUEucG9zaXRpb25QcmV2LnggKz0gaW1wdWxzZVggKiBib2R5QS5pbnZlcnNlTWFzcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlBLnBvc2l0aW9uUHJldi55ICs9IGltcHVsc2VZICogYm9keUEuaW52ZXJzZU1hc3M7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5QS5hbmdsZVByZXYgKz0gYm9keUEuaW52ZXJzZUluZXJ0aWEgKiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKGNvbnRhY3RWZXJ0ZXgueCAtIGJvZHlBLnBvc2l0aW9uLngpICogaW1wdWxzZVlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIChjb250YWN0VmVydGV4LnkgLSBib2R5QS5wb3NpdGlvbi55KSAqIGltcHVsc2VYXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGJvZHlCLmlzU3RhdGljIHx8IGJvZHlCLmlzU2xlZXBpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5Qi5wb3NpdGlvblByZXYueCAtPSBpbXB1bHNlWCAqIGJvZHlCLmludmVyc2VNYXNzO1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUIucG9zaXRpb25QcmV2LnkgLT0gaW1wdWxzZVkgKiBib2R5Qi5pbnZlcnNlTWFzcztcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHlCLmFuZ2xlUHJldiAtPSBib2R5Qi5pbnZlcnNlSW5lcnRpYSAqIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoY29udGFjdFZlcnRleC54IC0gYm9keUIucG9zaXRpb24ueCkgKiBpbXB1bHNlWSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIChjb250YWN0VmVydGV4LnkgLSBib2R5Qi5wb3NpdGlvbi55KSAqIGltcHVsc2VYXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEZpbmQgYSBzb2x1dGlvbiBmb3IgcGFpciB2ZWxvY2l0aWVzLlxuICAgICAqIEBtZXRob2Qgc29sdmVWZWxvY2l0eVxuICAgICAqIEBwYXJhbSB7cGFpcltdfSBwYWlyc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBkZWx0YVxuICAgICAqL1xuICAgIFJlc29sdmVyLnNvbHZlVmVsb2NpdHkgPSBmdW5jdGlvbihwYWlycywgZGVsdGEpIHtcbiAgICAgICAgdmFyIHRpbWVTY2FsZSA9IGRlbHRhIC8gQ29tbW9uLl9iYXNlRGVsdGEsXG4gICAgICAgICAgICB0aW1lU2NhbGVTcXVhcmVkID0gdGltZVNjYWxlICogdGltZVNjYWxlLFxuICAgICAgICAgICAgdGltZVNjYWxlQ3ViZWQgPSB0aW1lU2NhbGVTcXVhcmVkICogdGltZVNjYWxlLFxuICAgICAgICAgICAgcmVzdGluZ1RocmVzaCA9IC1SZXNvbHZlci5fcmVzdGluZ1RocmVzaCAqIHRpbWVTY2FsZSxcbiAgICAgICAgICAgIHJlc3RpbmdUaHJlc2hUYW5nZW50ID0gUmVzb2x2ZXIuX3Jlc3RpbmdUaHJlc2hUYW5nZW50LFxuICAgICAgICAgICAgZnJpY3Rpb25Ob3JtYWxNdWx0aXBsaWVyID0gUmVzb2x2ZXIuX2ZyaWN0aW9uTm9ybWFsTXVsdGlwbGllciAqIHRpbWVTY2FsZSxcbiAgICAgICAgICAgIGZyaWN0aW9uTWF4U3RhdGljID0gUmVzb2x2ZXIuX2ZyaWN0aW9uTWF4U3RhdGljLFxuICAgICAgICAgICAgcGFpcnNMZW5ndGggPSBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgICB0YW5nZW50SW1wdWxzZSxcbiAgICAgICAgICAgIG1heEZyaWN0aW9uLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGo7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhaXJzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwYWlyID0gcGFpcnNbaV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghcGFpci5pc0FjdGl2ZSB8fCBwYWlyLmlzU2Vuc29yKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb24sXG4gICAgICAgICAgICAgICAgYm9keUEgPSBjb2xsaXNpb24ucGFyZW50QSxcbiAgICAgICAgICAgICAgICBib2R5QiA9IGNvbGxpc2lvbi5wYXJlbnRCLFxuICAgICAgICAgICAgICAgIGJvZHlBVmVsb2NpdHkgPSBib2R5QS52ZWxvY2l0eSxcbiAgICAgICAgICAgICAgICBib2R5QlZlbG9jaXR5ID0gYm9keUIudmVsb2NpdHksXG4gICAgICAgICAgICAgICAgbm9ybWFsWCA9IGNvbGxpc2lvbi5ub3JtYWwueCxcbiAgICAgICAgICAgICAgICBub3JtYWxZID0gY29sbGlzaW9uLm5vcm1hbC55LFxuICAgICAgICAgICAgICAgIHRhbmdlbnRYID0gY29sbGlzaW9uLnRhbmdlbnQueCxcbiAgICAgICAgICAgICAgICB0YW5nZW50WSA9IGNvbGxpc2lvbi50YW5nZW50LnksXG4gICAgICAgICAgICAgICAgY29udGFjdHMgPSBwYWlyLmFjdGl2ZUNvbnRhY3RzLFxuICAgICAgICAgICAgICAgIGNvbnRhY3RzTGVuZ3RoID0gY29udGFjdHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIGNvbnRhY3RTaGFyZSA9IDEgLyBjb250YWN0c0xlbmd0aCxcbiAgICAgICAgICAgICAgICBpbnZlcnNlTWFzc1RvdGFsID0gYm9keUEuaW52ZXJzZU1hc3MgKyBib2R5Qi5pbnZlcnNlTWFzcyxcbiAgICAgICAgICAgICAgICBmcmljdGlvbiA9IHBhaXIuZnJpY3Rpb24gKiBwYWlyLmZyaWN0aW9uU3RhdGljICogZnJpY3Rpb25Ob3JtYWxNdWx0aXBsaWVyO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgYm9keSB2ZWxvY2l0aWVzXG4gICAgICAgICAgICBib2R5QVZlbG9jaXR5LnggPSBib2R5QS5wb3NpdGlvbi54IC0gYm9keUEucG9zaXRpb25QcmV2Lng7XG4gICAgICAgICAgICBib2R5QVZlbG9jaXR5LnkgPSBib2R5QS5wb3NpdGlvbi55IC0gYm9keUEucG9zaXRpb25QcmV2Lnk7XG4gICAgICAgICAgICBib2R5QlZlbG9jaXR5LnggPSBib2R5Qi5wb3NpdGlvbi54IC0gYm9keUIucG9zaXRpb25QcmV2Lng7XG4gICAgICAgICAgICBib2R5QlZlbG9jaXR5LnkgPSBib2R5Qi5wb3NpdGlvbi55IC0gYm9keUIucG9zaXRpb25QcmV2Lnk7XG4gICAgICAgICAgICBib2R5QS5hbmd1bGFyVmVsb2NpdHkgPSBib2R5QS5hbmdsZSAtIGJvZHlBLmFuZ2xlUHJldjtcbiAgICAgICAgICAgIGJvZHlCLmFuZ3VsYXJWZWxvY2l0eSA9IGJvZHlCLmFuZ2xlIC0gYm9keUIuYW5nbGVQcmV2O1xuXG4gICAgICAgICAgICAvLyByZXNvbHZlIGVhY2ggY29udGFjdFxuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGNvbnRhY3RzTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY29udGFjdCA9IGNvbnRhY3RzW2pdLFxuICAgICAgICAgICAgICAgICAgICBjb250YWN0VmVydGV4ID0gY29udGFjdC52ZXJ0ZXg7XG5cbiAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0QVggPSBjb250YWN0VmVydGV4LnggLSBib2R5QS5wb3NpdGlvbi54LFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXRBWSA9IGNvbnRhY3RWZXJ0ZXgueSAtIGJvZHlBLnBvc2l0aW9uLnksXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldEJYID0gY29udGFjdFZlcnRleC54IC0gYm9keUIucG9zaXRpb24ueCxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0QlkgPSBjb250YWN0VmVydGV4LnkgLSBib2R5Qi5wb3NpdGlvbi55O1xuIFxuICAgICAgICAgICAgICAgIHZhciB2ZWxvY2l0eVBvaW50QVggPSBib2R5QVZlbG9jaXR5LnggLSBvZmZzZXRBWSAqIGJvZHlBLmFuZ3VsYXJWZWxvY2l0eSxcbiAgICAgICAgICAgICAgICAgICAgdmVsb2NpdHlQb2ludEFZID0gYm9keUFWZWxvY2l0eS55ICsgb2Zmc2V0QVggKiBib2R5QS5hbmd1bGFyVmVsb2NpdHksXG4gICAgICAgICAgICAgICAgICAgIHZlbG9jaXR5UG9pbnRCWCA9IGJvZHlCVmVsb2NpdHkueCAtIG9mZnNldEJZICogYm9keUIuYW5ndWxhclZlbG9jaXR5LFxuICAgICAgICAgICAgICAgICAgICB2ZWxvY2l0eVBvaW50QlkgPSBib2R5QlZlbG9jaXR5LnkgKyBvZmZzZXRCWCAqIGJvZHlCLmFuZ3VsYXJWZWxvY2l0eTtcblxuICAgICAgICAgICAgICAgIHZhciByZWxhdGl2ZVZlbG9jaXR5WCA9IHZlbG9jaXR5UG9pbnRBWCAtIHZlbG9jaXR5UG9pbnRCWCxcbiAgICAgICAgICAgICAgICAgICAgcmVsYXRpdmVWZWxvY2l0eVkgPSB2ZWxvY2l0eVBvaW50QVkgLSB2ZWxvY2l0eVBvaW50Qlk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsVmVsb2NpdHkgPSBub3JtYWxYICogcmVsYXRpdmVWZWxvY2l0eVggKyBub3JtYWxZICogcmVsYXRpdmVWZWxvY2l0eVksXG4gICAgICAgICAgICAgICAgICAgIHRhbmdlbnRWZWxvY2l0eSA9IHRhbmdlbnRYICogcmVsYXRpdmVWZWxvY2l0eVggKyB0YW5nZW50WSAqIHJlbGF0aXZlVmVsb2NpdHlZO1xuXG4gICAgICAgICAgICAgICAgLy8gY291bG9tYiBmcmljdGlvblxuICAgICAgICAgICAgICAgIHZhciBub3JtYWxPdmVybGFwID0gcGFpci5zZXBhcmF0aW9uICsgbm9ybWFsVmVsb2NpdHk7XG4gICAgICAgICAgICAgICAgdmFyIG5vcm1hbEZvcmNlID0gTWF0aC5taW4obm9ybWFsT3ZlcmxhcCwgMSk7XG4gICAgICAgICAgICAgICAgbm9ybWFsRm9yY2UgPSBub3JtYWxPdmVybGFwIDwgMCA/IDAgOiBub3JtYWxGb3JjZTtcblxuICAgICAgICAgICAgICAgIHZhciBmcmljdGlvbkxpbWl0ID0gbm9ybWFsRm9yY2UgKiBmcmljdGlvbjtcblxuICAgICAgICAgICAgICAgIGlmICh0YW5nZW50VmVsb2NpdHkgPCAtZnJpY3Rpb25MaW1pdCB8fCB0YW5nZW50VmVsb2NpdHkgPiBmcmljdGlvbkxpbWl0KSB7XG4gICAgICAgICAgICAgICAgICAgIG1heEZyaWN0aW9uID0gKHRhbmdlbnRWZWxvY2l0eSA+IDAgPyB0YW5nZW50VmVsb2NpdHkgOiAtdGFuZ2VudFZlbG9jaXR5KTtcbiAgICAgICAgICAgICAgICAgICAgdGFuZ2VudEltcHVsc2UgPSBwYWlyLmZyaWN0aW9uICogKHRhbmdlbnRWZWxvY2l0eSA+IDAgPyAxIDogLTEpICogdGltZVNjYWxlQ3ViZWQ7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAodGFuZ2VudEltcHVsc2UgPCAtbWF4RnJpY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhbmdlbnRJbXB1bHNlID0gLW1heEZyaWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRhbmdlbnRJbXB1bHNlID4gbWF4RnJpY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhbmdlbnRJbXB1bHNlID0gbWF4RnJpY3Rpb247XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YW5nZW50SW1wdWxzZSA9IHRhbmdlbnRWZWxvY2l0eTtcbiAgICAgICAgICAgICAgICAgICAgbWF4RnJpY3Rpb24gPSBmcmljdGlvbk1heFN0YXRpYztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBhY2NvdW50IGZvciBtYXNzLCBpbmVydGlhIGFuZCBjb250YWN0IG9mZnNldFxuICAgICAgICAgICAgICAgIHZhciBvQWNOID0gb2Zmc2V0QVggKiBub3JtYWxZIC0gb2Zmc2V0QVkgKiBub3JtYWxYLFxuICAgICAgICAgICAgICAgICAgICBvQmNOID0gb2Zmc2V0QlggKiBub3JtYWxZIC0gb2Zmc2V0QlkgKiBub3JtYWxYLFxuICAgICAgICAgICAgICAgICAgICBzaGFyZSA9IGNvbnRhY3RTaGFyZSAvIChpbnZlcnNlTWFzc1RvdGFsICsgYm9keUEuaW52ZXJzZUluZXJ0aWEgKiBvQWNOICogb0FjTiArIGJvZHlCLmludmVyc2VJbmVydGlhICogb0JjTiAqIG9CY04pO1xuXG4gICAgICAgICAgICAgICAgLy8gcmF3IGltcHVsc2VzXG4gICAgICAgICAgICAgICAgdmFyIG5vcm1hbEltcHVsc2UgPSAoMSArIHBhaXIucmVzdGl0dXRpb24pICogbm9ybWFsVmVsb2NpdHkgKiBzaGFyZTtcbiAgICAgICAgICAgICAgICB0YW5nZW50SW1wdWxzZSAqPSBzaGFyZTtcblxuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBoaWdoIHZlbG9jaXR5IGFuZCByZXN0aW5nIGNvbGxpc2lvbnMgc2VwYXJhdGVseVxuICAgICAgICAgICAgICAgIGlmIChub3JtYWxWZWxvY2l0eSA8IHJlc3RpbmdUaHJlc2gpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaGlnaCBub3JtYWwgdmVsb2NpdHkgc28gY2xlYXIgY2FjaGVkIGNvbnRhY3Qgbm9ybWFsIGltcHVsc2VcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdC5ub3JtYWxJbXB1bHNlID0gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBzb2x2ZSByZXN0aW5nIGNvbGxpc2lvbiBjb25zdHJhaW50cyB1c2luZyBFcmluIENhdHRvJ3MgbWV0aG9kIChHREMwOClcbiAgICAgICAgICAgICAgICAgICAgLy8gaW1wdWxzZSBjb25zdHJhaW50IHRlbmRzIHRvIDBcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRhY3ROb3JtYWxJbXB1bHNlID0gY29udGFjdC5ub3JtYWxJbXB1bHNlO1xuICAgICAgICAgICAgICAgICAgICBjb250YWN0Lm5vcm1hbEltcHVsc2UgKz0gbm9ybWFsSW1wdWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnRhY3Qubm9ybWFsSW1wdWxzZSA+IDApIGNvbnRhY3Qubm9ybWFsSW1wdWxzZSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbEltcHVsc2UgPSBjb250YWN0Lm5vcm1hbEltcHVsc2UgLSBjb250YWN0Tm9ybWFsSW1wdWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBoYW5kbGUgaGlnaCB2ZWxvY2l0eSBhbmQgcmVzdGluZyBjb2xsaXNpb25zIHNlcGFyYXRlbHlcbiAgICAgICAgICAgICAgICBpZiAodGFuZ2VudFZlbG9jaXR5IDwgLXJlc3RpbmdUaHJlc2hUYW5nZW50IHx8IHRhbmdlbnRWZWxvY2l0eSA+IHJlc3RpbmdUaHJlc2hUYW5nZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGhpZ2ggdGFuZ2VudCB2ZWxvY2l0eSBzbyBjbGVhciBjYWNoZWQgY29udGFjdCB0YW5nZW50IGltcHVsc2VcbiAgICAgICAgICAgICAgICAgICAgY29udGFjdC50YW5nZW50SW1wdWxzZSA9IDA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc29sdmUgcmVzdGluZyBjb2xsaXNpb24gY29uc3RyYWludHMgdXNpbmcgRXJpbiBDYXR0bydzIG1ldGhvZCAoR0RDMDgpXG4gICAgICAgICAgICAgICAgICAgIC8vIHRhbmdlbnQgaW1wdWxzZSB0ZW5kcyB0byAtdGFuZ2VudFNwZWVkIG9yICt0YW5nZW50U3BlZWRcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRhY3RUYW5nZW50SW1wdWxzZSA9IGNvbnRhY3QudGFuZ2VudEltcHVsc2U7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhY3QudGFuZ2VudEltcHVsc2UgKz0gdGFuZ2VudEltcHVsc2U7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250YWN0LnRhbmdlbnRJbXB1bHNlIDwgLW1heEZyaWN0aW9uKSBjb250YWN0LnRhbmdlbnRJbXB1bHNlID0gLW1heEZyaWN0aW9uO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGFjdC50YW5nZW50SW1wdWxzZSA+IG1heEZyaWN0aW9uKSBjb250YWN0LnRhbmdlbnRJbXB1bHNlID0gbWF4RnJpY3Rpb247XG4gICAgICAgICAgICAgICAgICAgIHRhbmdlbnRJbXB1bHNlID0gY29udGFjdC50YW5nZW50SW1wdWxzZSAtIGNvbnRhY3RUYW5nZW50SW1wdWxzZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyB0b3RhbCBpbXB1bHNlIGZyb20gY29udGFjdFxuICAgICAgICAgICAgICAgIHZhciBpbXB1bHNlWCA9IG5vcm1hbFggKiBub3JtYWxJbXB1bHNlICsgdGFuZ2VudFggKiB0YW5nZW50SW1wdWxzZSxcbiAgICAgICAgICAgICAgICAgICAgaW1wdWxzZVkgPSBub3JtYWxZICogbm9ybWFsSW1wdWxzZSArIHRhbmdlbnRZICogdGFuZ2VudEltcHVsc2U7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gYXBwbHkgaW1wdWxzZSBmcm9tIGNvbnRhY3RcbiAgICAgICAgICAgICAgICBpZiAoIShib2R5QS5pc1N0YXRpYyB8fCBib2R5QS5pc1NsZWVwaW5nKSkge1xuICAgICAgICAgICAgICAgICAgICBib2R5QS5wb3NpdGlvblByZXYueCArPSBpbXB1bHNlWCAqIGJvZHlBLmludmVyc2VNYXNzO1xuICAgICAgICAgICAgICAgICAgICBib2R5QS5wb3NpdGlvblByZXYueSArPSBpbXB1bHNlWSAqIGJvZHlBLmludmVyc2VNYXNzO1xuICAgICAgICAgICAgICAgICAgICBib2R5QS5hbmdsZVByZXYgKz0gKG9mZnNldEFYICogaW1wdWxzZVkgLSBvZmZzZXRBWSAqIGltcHVsc2VYKSAqIGJvZHlBLmludmVyc2VJbmVydGlhO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghKGJvZHlCLmlzU3RhdGljIHx8IGJvZHlCLmlzU2xlZXBpbmcpKSB7XG4gICAgICAgICAgICAgICAgICAgIGJvZHlCLnBvc2l0aW9uUHJldi54IC09IGltcHVsc2VYICogYm9keUIuaW52ZXJzZU1hc3M7XG4gICAgICAgICAgICAgICAgICAgIGJvZHlCLnBvc2l0aW9uUHJldi55IC09IGltcHVsc2VZICogYm9keUIuaW52ZXJzZU1hc3M7XG4gICAgICAgICAgICAgICAgICAgIGJvZHlCLmFuZ2xlUHJldiAtPSAob2Zmc2V0QlggKiBpbXB1bHNlWSAtIG9mZnNldEJZICogaW1wdWxzZVgpICogYm9keUIuaW52ZXJzZUluZXJ0aWE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxufSkoKTtcblxuXG4vKioqLyB9KSxcbi8qIDE5ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qKlxuKiBUaGUgYE1hdHRlci5QYWlyc2AgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIGFuZCBtYW5pcHVsYXRpbmcgY29sbGlzaW9uIHBhaXIgc2V0cy5cbipcbiogQGNsYXNzIFBhaXJzXG4qL1xuXG52YXIgUGFpcnMgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBQYWlycztcblxudmFyIFBhaXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xudmFyIENvbW1vbiA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgcGFpcnMgc3RydWN0dXJlLlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtwYWlyc30gQSBuZXcgcGFpcnMgc3RydWN0dXJlXG4gICAgICovXG4gICAgUGFpcnMuY3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gQ29tbW9uLmV4dGVuZCh7IFxuICAgICAgICAgICAgdGFibGU6IHt9LFxuICAgICAgICAgICAgbGlzdDogW10sXG4gICAgICAgICAgICBjb2xsaXNpb25TdGFydDogW10sXG4gICAgICAgICAgICBjb2xsaXNpb25BY3RpdmU6IFtdLFxuICAgICAgICAgICAgY29sbGlzaW9uRW5kOiBbXVxuICAgICAgICB9LCBvcHRpb25zKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBwYWlycyBnaXZlbiBhIGxpc3Qgb2YgY29sbGlzaW9ucy5cbiAgICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBwYWlyc1xuICAgICAqIEBwYXJhbSB7Y29sbGlzaW9uW119IGNvbGxpc2lvbnNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZXN0YW1wXG4gICAgICovXG4gICAgUGFpcnMudXBkYXRlID0gZnVuY3Rpb24ocGFpcnMsIGNvbGxpc2lvbnMsIHRpbWVzdGFtcCkge1xuICAgICAgICB2YXIgcGFpcnNMaXN0ID0gcGFpcnMubGlzdCxcbiAgICAgICAgICAgIHBhaXJzTGlzdExlbmd0aCA9IHBhaXJzTGlzdC5sZW5ndGgsXG4gICAgICAgICAgICBwYWlyc1RhYmxlID0gcGFpcnMudGFibGUsXG4gICAgICAgICAgICBjb2xsaXNpb25zTGVuZ3RoID0gY29sbGlzaW9ucy5sZW5ndGgsXG4gICAgICAgICAgICBjb2xsaXNpb25TdGFydCA9IHBhaXJzLmNvbGxpc2lvblN0YXJ0LFxuICAgICAgICAgICAgY29sbGlzaW9uRW5kID0gcGFpcnMuY29sbGlzaW9uRW5kLFxuICAgICAgICAgICAgY29sbGlzaW9uQWN0aXZlID0gcGFpcnMuY29sbGlzaW9uQWN0aXZlLFxuICAgICAgICAgICAgY29sbGlzaW9uLFxuICAgICAgICAgICAgcGFpckluZGV4LFxuICAgICAgICAgICAgcGFpcixcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgLy8gY2xlYXIgY29sbGlzaW9uIHN0YXRlIGFycmF5cywgYnV0IG1haW50YWluIG9sZCByZWZlcmVuY2VcbiAgICAgICAgY29sbGlzaW9uU3RhcnQubGVuZ3RoID0gMDtcbiAgICAgICAgY29sbGlzaW9uRW5kLmxlbmd0aCA9IDA7XG4gICAgICAgIGNvbGxpc2lvbkFjdGl2ZS5sZW5ndGggPSAwO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBwYWlyc0xpc3RMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcGFpcnNMaXN0W2ldLmNvbmZpcm1lZEFjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbGxpc2lvbnNMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29sbGlzaW9uID0gY29sbGlzaW9uc1tpXTtcbiAgICAgICAgICAgIHBhaXIgPSBjb2xsaXNpb24ucGFpcjtcblxuICAgICAgICAgICAgaWYgKHBhaXIpIHtcbiAgICAgICAgICAgICAgICAvLyBwYWlyIGFscmVhZHkgZXhpc3RzIChidXQgbWF5IG9yIG1heSBub3QgYmUgYWN0aXZlKVxuICAgICAgICAgICAgICAgIGlmIChwYWlyLmlzQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHBhaXIgZXhpc3RzIGFuZCBpcyBhY3RpdmVcbiAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9uQWN0aXZlLnB1c2gocGFpcik7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcGFpciBleGlzdHMgYnV0IHdhcyBpbmFjdGl2ZSwgc28gYSBjb2xsaXNpb24gaGFzIGp1c3Qgc3RhcnRlZCBhZ2FpblxuICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25TdGFydC5wdXNoKHBhaXIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSB0aGUgcGFpclxuICAgICAgICAgICAgICAgIFBhaXIudXBkYXRlKHBhaXIsIGNvbGxpc2lvbiwgdGltZXN0YW1wKTtcbiAgICAgICAgICAgICAgICBwYWlyLmNvbmZpcm1lZEFjdGl2ZSA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIHBhaXIgZGlkIG5vdCBleGlzdCwgY3JlYXRlIGEgbmV3IHBhaXJcbiAgICAgICAgICAgICAgICBwYWlyID0gUGFpci5jcmVhdGUoY29sbGlzaW9uLCB0aW1lc3RhbXApO1xuICAgICAgICAgICAgICAgIHBhaXJzVGFibGVbcGFpci5pZF0gPSBwYWlyO1xuXG4gICAgICAgICAgICAgICAgLy8gcHVzaCB0aGUgbmV3IHBhaXJcbiAgICAgICAgICAgICAgICBjb2xsaXNpb25TdGFydC5wdXNoKHBhaXIpO1xuICAgICAgICAgICAgICAgIHBhaXJzTGlzdC5wdXNoKHBhaXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZmluZCBwYWlycyB0aGF0IGFyZSBubyBsb25nZXIgYWN0aXZlXG4gICAgICAgIHZhciByZW1vdmVQYWlySW5kZXggPSBbXTtcbiAgICAgICAgcGFpcnNMaXN0TGVuZ3RoID0gcGFpcnNMaXN0Lmxlbmd0aDtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFpcnNMaXN0TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHBhaXIgPSBwYWlyc0xpc3RbaV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICghcGFpci5jb25maXJtZWRBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICBQYWlyLnNldEFjdGl2ZShwYWlyLCBmYWxzZSwgdGltZXN0YW1wKTtcbiAgICAgICAgICAgICAgICBjb2xsaXNpb25FbmQucHVzaChwYWlyKTtcblxuICAgICAgICAgICAgICAgIGlmICghcGFpci5jb2xsaXNpb24uYm9keUEuaXNTbGVlcGluZyAmJiAhcGFpci5jb2xsaXNpb24uYm9keUIuaXNTbGVlcGluZykge1xuICAgICAgICAgICAgICAgICAgICByZW1vdmVQYWlySW5kZXgucHVzaChpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZW1vdmUgaW5hY3RpdmUgcGFpcnNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHJlbW92ZVBhaXJJbmRleC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcGFpckluZGV4ID0gcmVtb3ZlUGFpckluZGV4W2ldIC0gaTtcbiAgICAgICAgICAgIHBhaXIgPSBwYWlyc0xpc3RbcGFpckluZGV4XTtcbiAgICAgICAgICAgIHBhaXJzTGlzdC5zcGxpY2UocGFpckluZGV4LCAxKTtcbiAgICAgICAgICAgIGRlbGV0ZSBwYWlyc1RhYmxlW3BhaXIuaWRdO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyB0aGUgZ2l2ZW4gcGFpcnMgc3RydWN0dXJlLlxuICAgICAqIEBtZXRob2QgY2xlYXJcbiAgICAgKiBAcGFyYW0ge3BhaXJzfSBwYWlyc1xuICAgICAqIEByZXR1cm4ge3BhaXJzfSBwYWlyc1xuICAgICAqL1xuICAgIFBhaXJzLmNsZWFyID0gZnVuY3Rpb24ocGFpcnMpIHtcbiAgICAgICAgcGFpcnMudGFibGUgPSB7fTtcbiAgICAgICAgcGFpcnMubGlzdC5sZW5ndGggPSAwO1xuICAgICAgICBwYWlycy5jb2xsaXNpb25TdGFydC5sZW5ndGggPSAwO1xuICAgICAgICBwYWlycy5jb2xsaXNpb25BY3RpdmUubGVuZ3RoID0gMDtcbiAgICAgICAgcGFpcnMuY29sbGlzaW9uRW5kLmxlbmd0aCA9IDA7XG4gICAgICAgIHJldHVybiBwYWlycztcbiAgICB9O1xuXG59KSgpO1xuXG5cbi8qKiovIH0pLFxuLyogMjAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxudmFyIE1hdHRlciA9IG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMSk7XHJcblxyXG5NYXR0ZXIuQXhlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTEpO1xyXG5NYXR0ZXIuQm9kaWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMik7XHJcbk1hdHRlci5Cb2R5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcclxuTWF0dGVyLkJvdW5kcyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XHJcbk1hdHRlci5Db2xsaXNpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xyXG5NYXR0ZXIuQ29tbW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcclxuTWF0dGVyLkNvbXBvc2l0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XHJcbk1hdHRlci5Db21wb3NpdGVzID0gX193ZWJwYWNrX3JlcXVpcmVfXygyMik7XHJcbk1hdHRlci5Db25zdHJhaW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XHJcbk1hdHRlci5Db250YWN0ID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNik7XHJcbk1hdHRlci5EZXRlY3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xyXG5NYXR0ZXIuRW5naW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XHJcbk1hdHRlci5FdmVudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xyXG5NYXR0ZXIuR3JpZCA9IF9fd2VicGFja19yZXF1aXJlX18oMjMpO1xyXG5NYXR0ZXIuTW91c2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDE0KTtcclxuTWF0dGVyLk1vdXNlQ29uc3RyYWludCA9IF9fd2VicGFja19yZXF1aXJlX18oMjQpO1xyXG5NYXR0ZXIuUGFpciA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XHJcbk1hdHRlci5QYWlycyA9IF9fd2VicGFja19yZXF1aXJlX18oMTkpO1xyXG5NYXR0ZXIuUGx1Z2luID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XHJcbk1hdHRlci5RdWVyeSA9IF9fd2VicGFja19yZXF1aXJlX18oMjUpO1xyXG5NYXR0ZXIuUmVuZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNik7XHJcbk1hdHRlci5SZXNvbHZlciA9IF9fd2VicGFja19yZXF1aXJlX18oMTgpO1xyXG5NYXR0ZXIuUnVubmVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygyNyk7XHJcbk1hdHRlci5TQVQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDI4KTtcclxuTWF0dGVyLlNsZWVwaW5nID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcclxuTWF0dGVyLlN2ZyA9IF9fd2VicGFja19yZXF1aXJlX18oMjkpO1xyXG5NYXR0ZXIuVmVjdG9yID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcclxuTWF0dGVyLlZlcnRpY2VzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcclxuTWF0dGVyLldvcmxkID0gX193ZWJwYWNrX3JlcXVpcmVfXygzMCk7XHJcblxyXG4vLyB0ZW1wb3JhcnkgYmFjayBjb21wYXRpYmlsaXR5XHJcbk1hdHRlci5FbmdpbmUucnVuID0gTWF0dGVyLlJ1bm5lci5ydW47XHJcbk1hdHRlci5Db21tb24uZGVwcmVjYXRlZChNYXR0ZXIuRW5naW5lLCAncnVuJywgJ0VuZ2luZS5ydW4g4p6kIHVzZSBNYXR0ZXIuUnVubmVyLnJ1bihlbmdpbmUpIGluc3RlYWQnKTtcclxuXG5cbi8qKiovIH0pLFxuLyogMjEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyoqXHJcbiogVGhlIGBNYXR0ZXJgIG1vZHVsZSBpcyB0aGUgdG9wIGxldmVsIG5hbWVzcGFjZS4gSXQgYWxzbyBpbmNsdWRlcyBhIGZ1bmN0aW9uIGZvciBpbnN0YWxsaW5nIHBsdWdpbnMgb24gdG9wIG9mIHRoZSBsaWJyYXJ5LlxyXG4qXHJcbiogQGNsYXNzIE1hdHRlclxyXG4qL1xyXG5cclxudmFyIE1hdHRlciA9IHt9O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBNYXR0ZXI7XHJcblxyXG52YXIgUGx1Z2luID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNSk7XHJcbnZhciBDb21tb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGxpYnJhcnkgbmFtZS5cclxuICAgICAqIEBwcm9wZXJ0eSBuYW1lXHJcbiAgICAgKiBAcmVhZE9ubHlcclxuICAgICAqIEB0eXBlIHtTdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIE1hdHRlci5uYW1lID0gJ21hdHRlci1qcyc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgbGlicmFyeSB2ZXJzaW9uLlxyXG4gICAgICogQHByb3BlcnR5IHZlcnNpb25cclxuICAgICAqIEByZWFkT25seVxyXG4gICAgICogQHR5cGUge1N0cmluZ31cclxuICAgICAqL1xyXG4gICAgTWF0dGVyLnZlcnNpb24gPSAgdHJ1ZSA/IFwiMC4xOS4wXCIgOiB1bmRlZmluZWQ7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBIGxpc3Qgb2YgcGx1Z2luIGRlcGVuZGVuY2llcyB0byBiZSBpbnN0YWxsZWQuIFRoZXNlIGFyZSBub3JtYWxseSBzZXQgYW5kIGluc3RhbGxlZCB0aHJvdWdoIGBNYXR0ZXIudXNlYC5cclxuICAgICAqIEFsdGVybmF0aXZlbHkgeW91IG1heSBzZXQgYE1hdHRlci51c2VzYCBtYW51YWxseSBhbmQgaW5zdGFsbCB0aGVtIGJ5IGNhbGxpbmcgYFBsdWdpbi51c2UoTWF0dGVyKWAuXHJcbiAgICAgKiBAcHJvcGVydHkgdXNlc1xyXG4gICAgICogQHR5cGUge0FycmF5fVxyXG4gICAgICovXHJcbiAgICBNYXR0ZXIudXNlcyA9IFtdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIHBsdWdpbnMgdGhhdCBoYXZlIGJlZW4gaW5zdGFsbGVkIHRocm91Z2ggYE1hdHRlci5QbHVnaW4uaW5zdGFsbGAuIFJlYWQgb25seS5cclxuICAgICAqIEBwcm9wZXJ0eSB1c2VkXHJcbiAgICAgKiBAcmVhZE9ubHlcclxuICAgICAqIEB0eXBlIHtBcnJheX1cclxuICAgICAqL1xyXG4gICAgTWF0dGVyLnVzZWQgPSBbXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluc3RhbGxzIHRoZSBnaXZlbiBwbHVnaW5zIG9uIHRoZSBgTWF0dGVyYCBuYW1lc3BhY2UuXHJcbiAgICAgKiBUaGlzIGlzIGEgc2hvcnQtaGFuZCBmb3IgYFBsdWdpbi51c2VgLCBzZWUgaXQgZm9yIG1vcmUgaW5mb3JtYXRpb24uXHJcbiAgICAgKiBDYWxsIHRoaXMgZnVuY3Rpb24gb25jZSBhdCB0aGUgc3RhcnQgb2YgeW91ciBjb2RlLCB3aXRoIGFsbCBvZiB0aGUgcGx1Z2lucyB5b3Ugd2lzaCB0byBpbnN0YWxsIGFzIGFyZ3VtZW50cy5cclxuICAgICAqIEF2b2lkIGNhbGxpbmcgdGhpcyBmdW5jdGlvbiBtdWx0aXBsZSB0aW1lcyB1bmxlc3MgeW91IGludGVuZCB0byBtYW51YWxseSBjb250cm9sIGluc3RhbGxhdGlvbiBvcmRlci5cclxuICAgICAqIEBtZXRob2QgdXNlXHJcbiAgICAgKiBAcGFyYW0gLi4ucGx1Z2luIHtGdW5jdGlvbn0gVGhlIHBsdWdpbihzKSB0byBpbnN0YWxsIG9uIGBiYXNlYCAobXVsdGktYXJndW1lbnQpLlxyXG4gICAgICovXHJcbiAgICBNYXR0ZXIudXNlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgUGx1Z2luLnVzZShNYXR0ZXIsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cykpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENoYWlucyBhIGZ1bmN0aW9uIHRvIGV4Y3V0ZSBiZWZvcmUgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIG9uIHRoZSBnaXZlbiBgcGF0aGAgcmVsYXRpdmUgdG8gYE1hdHRlcmAuXHJcbiAgICAgKiBTZWUgYWxzbyBkb2NzIGZvciBgQ29tbW9uLmNoYWluYC5cclxuICAgICAqIEBtZXRob2QgYmVmb3JlXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCByZWxhdGl2ZSB0byBgTWF0dGVyYFxyXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hhaW4gYmVmb3JlIHRoZSBvcmlnaW5hbFxyXG4gICAgICogQHJldHVybiB7ZnVuY3Rpb259IFRoZSBjaGFpbmVkIGZ1bmN0aW9uIHRoYXQgcmVwbGFjZWQgdGhlIG9yaWdpbmFsXHJcbiAgICAgKi9cclxuICAgIE1hdHRlci5iZWZvcmUgPSBmdW5jdGlvbihwYXRoLCBmdW5jKSB7XHJcbiAgICAgICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXk1hdHRlci4vLCAnJyk7XHJcbiAgICAgICAgcmV0dXJuIENvbW1vbi5jaGFpblBhdGhCZWZvcmUoTWF0dGVyLCBwYXRoLCBmdW5jKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGFpbnMgYSBmdW5jdGlvbiB0byBleGN1dGUgYWZ0ZXIgdGhlIG9yaWdpbmFsIGZ1bmN0aW9uIG9uIHRoZSBnaXZlbiBgcGF0aGAgcmVsYXRpdmUgdG8gYE1hdHRlcmAuXHJcbiAgICAgKiBTZWUgYWxzbyBkb2NzIGZvciBgQ29tbW9uLmNoYWluYC5cclxuICAgICAqIEBtZXRob2QgYWZ0ZXJcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHJlbGF0aXZlIHRvIGBNYXR0ZXJgXHJcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGFpbiBhZnRlciB0aGUgb3JpZ2luYWxcclxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBUaGUgY2hhaW5lZCBmdW5jdGlvbiB0aGF0IHJlcGxhY2VkIHRoZSBvcmlnaW5hbFxyXG4gICAgICovXHJcbiAgICBNYXR0ZXIuYWZ0ZXIgPSBmdW5jdGlvbihwYXRoLCBmdW5jKSB7XHJcbiAgICAgICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXk1hdHRlci4vLCAnJyk7XHJcbiAgICAgICAgcmV0dXJuIENvbW1vbi5jaGFpblBhdGhBZnRlcihNYXR0ZXIsIHBhdGgsIGZ1bmMpO1xyXG4gICAgfTtcclxuXHJcbn0pKCk7XHJcblxuXG4vKioqLyB9KSxcbi8qIDIyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qKlxuKiBUaGUgYE1hdHRlci5Db21wb3NpdGVzYCBtb2R1bGUgY29udGFpbnMgZmFjdG9yeSBtZXRob2RzIGZvciBjcmVhdGluZyBjb21wb3NpdGUgYm9kaWVzXG4qIHdpdGggY29tbW9ubHkgdXNlZCBjb25maWd1cmF0aW9ucyAoc3VjaCBhcyBzdGFja3MgYW5kIGNoYWlucykuXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG4qXG4qIEBjbGFzcyBDb21wb3NpdGVzXG4qL1xuXG52YXIgQ29tcG9zaXRlcyA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENvbXBvc2l0ZXM7XG5cbnZhciBDb21wb3NpdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xudmFyIENvbnN0cmFpbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcbnZhciBDb21tb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIEJvZHkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xudmFyIEJvZGllcyA9IF9fd2VicGFja19yZXF1aXJlX18oMTIpO1xudmFyIGRlcHJlY2F0ZWQgPSBDb21tb24uZGVwcmVjYXRlZDtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IGNvbXBvc2l0ZSBjb250YWluaW5nIGJvZGllcyBjcmVhdGVkIGluIHRoZSBjYWxsYmFjayBpbiBhIGdyaWQgYXJyYW5nZW1lbnQuXG4gICAgICogVGhpcyBmdW5jdGlvbiB1c2VzIHRoZSBib2R5J3MgYm91bmRzIHRvIHByZXZlbnQgb3ZlcmxhcHMuXG4gICAgICogQG1ldGhvZCBzdGFja1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4eFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5eVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5zXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJvd3NcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uR2FwXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJvd0dhcFxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBBIG5ldyBjb21wb3NpdGUgY29udGFpbmluZyBvYmplY3RzIGNyZWF0ZWQgaW4gdGhlIGNhbGxiYWNrXG4gICAgICovXG4gICAgQ29tcG9zaXRlcy5zdGFjayA9IGZ1bmN0aW9uKHh4LCB5eSwgY29sdW1ucywgcm93cywgY29sdW1uR2FwLCByb3dHYXAsIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBzdGFjayA9IENvbXBvc2l0ZS5jcmVhdGUoeyBsYWJlbDogJ1N0YWNrJyB9KSxcbiAgICAgICAgICAgIHggPSB4eCxcbiAgICAgICAgICAgIHkgPSB5eSxcbiAgICAgICAgICAgIGxhc3RCb2R5LFxuICAgICAgICAgICAgaSA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgcm93ID0gMDsgcm93IDwgcm93czsgcm93KyspIHtcbiAgICAgICAgICAgIHZhciBtYXhIZWlnaHQgPSAwO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKHZhciBjb2x1bW4gPSAwOyBjb2x1bW4gPCBjb2x1bW5zOyBjb2x1bW4rKykge1xuICAgICAgICAgICAgICAgIHZhciBib2R5ID0gY2FsbGJhY2soeCwgeSwgY29sdW1uLCByb3csIGxhc3RCb2R5LCBpKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGJvZHkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJvZHlIZWlnaHQgPSBib2R5LmJvdW5kcy5tYXgueSAtIGJvZHkuYm91bmRzLm1pbi55LFxuICAgICAgICAgICAgICAgICAgICAgICAgYm9keVdpZHRoID0gYm9keS5ib3VuZHMubWF4LnggLSBib2R5LmJvdW5kcy5taW4ueDsgXG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvZHlIZWlnaHQgPiBtYXhIZWlnaHQpXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhIZWlnaHQgPSBib2R5SGVpZ2h0O1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgQm9keS50cmFuc2xhdGUoYm9keSwgeyB4OiBib2R5V2lkdGggKiAwLjUsIHk6IGJvZHlIZWlnaHQgKiAwLjUgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgeCA9IGJvZHkuYm91bmRzLm1heC54ICsgY29sdW1uR2FwO1xuXG4gICAgICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5hZGRCb2R5KHN0YWNrLCBib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIGxhc3RCb2R5ID0gYm9keTtcbiAgICAgICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHggKz0gY29sdW1uR2FwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgeSArPSBtYXhIZWlnaHQgKyByb3dHYXA7XG4gICAgICAgICAgICB4ID0geHg7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RhY2s7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBDaGFpbnMgYWxsIGJvZGllcyBpbiB0aGUgZ2l2ZW4gY29tcG9zaXRlIHRvZ2V0aGVyIHVzaW5nIGNvbnN0cmFpbnRzLlxuICAgICAqIEBtZXRob2QgY2hhaW5cbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHhPZmZzZXRBXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHlPZmZzZXRBXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHhPZmZzZXRCXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHlPZmZzZXRCXG4gICAgICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IEEgbmV3IGNvbXBvc2l0ZSBjb250YWluaW5nIG9iamVjdHMgY2hhaW5lZCB0b2dldGhlciB3aXRoIGNvbnN0cmFpbnRzXG4gICAgICovXG4gICAgQ29tcG9zaXRlcy5jaGFpbiA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwgeE9mZnNldEEsIHlPZmZzZXRBLCB4T2Zmc2V0QiwgeU9mZnNldEIsIG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGJvZGllcyA9IGNvbXBvc2l0ZS5ib2RpZXM7XG4gICAgICAgIFxuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHlBID0gYm9kaWVzW2kgLSAxXSxcbiAgICAgICAgICAgICAgICBib2R5QiA9IGJvZGllc1tpXSxcbiAgICAgICAgICAgICAgICBib2R5QUhlaWdodCA9IGJvZHlBLmJvdW5kcy5tYXgueSAtIGJvZHlBLmJvdW5kcy5taW4ueSxcbiAgICAgICAgICAgICAgICBib2R5QVdpZHRoID0gYm9keUEuYm91bmRzLm1heC54IC0gYm9keUEuYm91bmRzLm1pbi54LCBcbiAgICAgICAgICAgICAgICBib2R5QkhlaWdodCA9IGJvZHlCLmJvdW5kcy5tYXgueSAtIGJvZHlCLmJvdW5kcy5taW4ueSxcbiAgICAgICAgICAgICAgICBib2R5QldpZHRoID0gYm9keUIuYm91bmRzLm1heC54IC0gYm9keUIuYm91bmRzLm1pbi54O1xuICAgICAgICBcbiAgICAgICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgICAgICBib2R5QTogYm9keUEsXG4gICAgICAgICAgICAgICAgcG9pbnRBOiB7IHg6IGJvZHlBV2lkdGggKiB4T2Zmc2V0QSwgeTogYm9keUFIZWlnaHQgKiB5T2Zmc2V0QSB9LFxuICAgICAgICAgICAgICAgIGJvZHlCOiBib2R5QixcbiAgICAgICAgICAgICAgICBwb2ludEI6IHsgeDogYm9keUJXaWR0aCAqIHhPZmZzZXRCLCB5OiBib2R5QkhlaWdodCAqIHlPZmZzZXRCIH1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBjb25zdHJhaW50ID0gQ29tbW9uLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgICAgIFxuICAgICAgICAgICAgQ29tcG9zaXRlLmFkZENvbnN0cmFpbnQoY29tcG9zaXRlLCBDb25zdHJhaW50LmNyZWF0ZShjb25zdHJhaW50KSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb21wb3NpdGUubGFiZWwgKz0gJyBDaGFpbic7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gY29tcG9zaXRlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb25uZWN0cyBib2RpZXMgaW4gdGhlIGNvbXBvc2l0ZSB3aXRoIGNvbnN0cmFpbnRzIGluIGEgZ3JpZCBwYXR0ZXJuLCB3aXRoIG9wdGlvbmFsIGNyb3NzIGJyYWNlcy5cbiAgICAgKiBAbWV0aG9kIG1lc2hcbiAgICAgKiBAcGFyYW0ge2NvbXBvc2l0ZX0gY29tcG9zaXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbnNcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcm93c1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY3Jvc3NCcmFjZVxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBUaGUgY29tcG9zaXRlIGNvbnRhaW5pbmcgb2JqZWN0cyBtZXNoZWQgdG9nZXRoZXIgd2l0aCBjb25zdHJhaW50c1xuICAgICAqL1xuICAgIENvbXBvc2l0ZXMubWVzaCA9IGZ1bmN0aW9uKGNvbXBvc2l0ZSwgY29sdW1ucywgcm93cywgY3Jvc3NCcmFjZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgYm9kaWVzID0gY29tcG9zaXRlLmJvZGllcyxcbiAgICAgICAgICAgIHJvdyxcbiAgICAgICAgICAgIGNvbCxcbiAgICAgICAgICAgIGJvZHlBLFxuICAgICAgICAgICAgYm9keUIsXG4gICAgICAgICAgICBib2R5QztcbiAgICAgICAgXG4gICAgICAgIGZvciAocm93ID0gMDsgcm93IDwgcm93czsgcm93KyspIHtcbiAgICAgICAgICAgIGZvciAoY29sID0gMTsgY29sIDwgY29sdW1uczsgY29sKyspIHtcbiAgICAgICAgICAgICAgICBib2R5QSA9IGJvZGllc1soY29sIC0gMSkgKyAocm93ICogY29sdW1ucyldO1xuICAgICAgICAgICAgICAgIGJvZHlCID0gYm9kaWVzW2NvbCArIChyb3cgKiBjb2x1bW5zKV07XG4gICAgICAgICAgICAgICAgQ29tcG9zaXRlLmFkZENvbnN0cmFpbnQoY29tcG9zaXRlLCBDb25zdHJhaW50LmNyZWF0ZShDb21tb24uZXh0ZW5kKHsgYm9keUE6IGJvZHlBLCBib2R5QjogYm9keUIgfSwgb3B0aW9ucykpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJvdyA+IDApIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbCA9IDA7IGNvbCA8IGNvbHVtbnM7IGNvbCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGJvZHlBID0gYm9kaWVzW2NvbCArICgocm93IC0gMSkgKiBjb2x1bW5zKV07XG4gICAgICAgICAgICAgICAgICAgIGJvZHlCID0gYm9kaWVzW2NvbCArIChyb3cgKiBjb2x1bW5zKV07XG4gICAgICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5hZGRDb25zdHJhaW50KGNvbXBvc2l0ZSwgQ29uc3RyYWludC5jcmVhdGUoQ29tbW9uLmV4dGVuZCh7IGJvZHlBOiBib2R5QSwgYm9keUI6IGJvZHlCIH0sIG9wdGlvbnMpKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNyb3NzQnJhY2UgJiYgY29sID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUMgPSBib2RpZXNbKGNvbCAtIDEpICsgKChyb3cgLSAxKSAqIGNvbHVtbnMpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5hZGRDb25zdHJhaW50KGNvbXBvc2l0ZSwgQ29uc3RyYWludC5jcmVhdGUoQ29tbW9uLmV4dGVuZCh7IGJvZHlBOiBib2R5QywgYm9keUI6IGJvZHlCIH0sIG9wdGlvbnMpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoY3Jvc3NCcmFjZSAmJiBjb2wgPCBjb2x1bW5zIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYm9keUMgPSBib2RpZXNbKGNvbCArIDEpICsgKChyb3cgLSAxKSAqIGNvbHVtbnMpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIENvbXBvc2l0ZS5hZGRDb25zdHJhaW50KGNvbXBvc2l0ZSwgQ29uc3RyYWludC5jcmVhdGUoQ29tbW9uLmV4dGVuZCh7IGJvZHlBOiBib2R5QywgYm9keUI6IGJvZHlCIH0sIG9wdGlvbnMpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb21wb3NpdGUubGFiZWwgKz0gJyBNZXNoJztcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBjb21wb3NpdGU7XG4gICAgfTtcbiAgICBcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgY29tcG9zaXRlIGNvbnRhaW5pbmcgYm9kaWVzIGNyZWF0ZWQgaW4gdGhlIGNhbGxiYWNrIGluIGEgcHlyYW1pZCBhcnJhbmdlbWVudC5cbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHVzZXMgdGhlIGJvZHkncyBib3VuZHMgdG8gcHJldmVudCBvdmVybGFwcy5cbiAgICAgKiBAbWV0aG9kIHB5cmFtaWRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geHhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geXlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3dzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbkdhcFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3dHYXBcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqIEByZXR1cm4ge2NvbXBvc2l0ZX0gQSBuZXcgY29tcG9zaXRlIGNvbnRhaW5pbmcgb2JqZWN0cyBjcmVhdGVkIGluIHRoZSBjYWxsYmFja1xuICAgICAqL1xuICAgIENvbXBvc2l0ZXMucHlyYW1pZCA9IGZ1bmN0aW9uKHh4LCB5eSwgY29sdW1ucywgcm93cywgY29sdW1uR2FwLCByb3dHYXAsIGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiBDb21wb3NpdGVzLnN0YWNrKHh4LCB5eSwgY29sdW1ucywgcm93cywgY29sdW1uR2FwLCByb3dHYXAsIGZ1bmN0aW9uKHgsIHksIGNvbHVtbiwgcm93LCBsYXN0Qm9keSwgaSkge1xuICAgICAgICAgICAgdmFyIGFjdHVhbFJvd3MgPSBNYXRoLm1pbihyb3dzLCBNYXRoLmNlaWwoY29sdW1ucyAvIDIpKSxcbiAgICAgICAgICAgICAgICBsYXN0Qm9keVdpZHRoID0gbGFzdEJvZHkgPyBsYXN0Qm9keS5ib3VuZHMubWF4LnggLSBsYXN0Qm9keS5ib3VuZHMubWluLnggOiAwO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAocm93ID4gYWN0dWFsUm93cylcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIHJldmVyc2Ugcm93IG9yZGVyXG4gICAgICAgICAgICByb3cgPSBhY3R1YWxSb3dzIC0gcm93O1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgc3RhcnQgPSByb3csXG4gICAgICAgICAgICAgICAgZW5kID0gY29sdW1ucyAtIDEgLSByb3c7XG5cbiAgICAgICAgICAgIGlmIChjb2x1bW4gPCBzdGFydCB8fCBjb2x1bW4gPiBlbmQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyByZXRyb2FjdGl2ZWx5IGZpeCB0aGUgZmlyc3QgYm9keSdzIHBvc2l0aW9uLCBzaW5jZSB3aWR0aCB3YXMgdW5rbm93blxuICAgICAgICAgICAgaWYgKGkgPT09IDEpIHtcbiAgICAgICAgICAgICAgICBCb2R5LnRyYW5zbGF0ZShsYXN0Qm9keSwgeyB4OiAoY29sdW1uICsgKGNvbHVtbnMgJSAyID09PSAxID8gMSA6IC0xKSkgKiBsYXN0Qm9keVdpZHRoLCB5OiAwIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgeE9mZnNldCA9IGxhc3RCb2R5ID8gY29sdW1uICogbGFzdEJvZHlXaWR0aCA6IDA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh4eCArIHhPZmZzZXQgKyBjb2x1bW4gKiBjb2x1bW5HYXAsIHksIGNvbHVtbiwgcm93LCBsYXN0Qm9keSwgaSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGhhcyBub3cgbW92ZWQgdG8gdGhlIFtuZXd0b25zQ3JhZGxlIGV4YW1wbGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL2Jsb2IvbWFzdGVyL2V4YW1wbGVzL25ld3RvbnNDcmFkbGUuanMpLCBmb2xsb3cgdGhhdCBpbnN0ZWFkIGFzIHRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZCBoZXJlLlxuICAgICAqIEBkZXByZWNhdGVkIG1vdmVkIHRvIG5ld3RvbnNDcmFkbGUgZXhhbXBsZVxuICAgICAqIEBtZXRob2QgbmV3dG9uc0NyYWRsZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4eFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5eVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGhcbiAgICAgKiBAcmV0dXJuIHtjb21wb3NpdGV9IEEgbmV3IGNvbXBvc2l0ZSBuZXd0b25zQ3JhZGxlIGJvZHlcbiAgICAgKi9cbiAgICBDb21wb3NpdGVzLm5ld3RvbnNDcmFkbGUgPSBmdW5jdGlvbih4eCwgeXksIG51bWJlciwgc2l6ZSwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBuZXd0b25zQ3JhZGxlID0gQ29tcG9zaXRlLmNyZWF0ZSh7IGxhYmVsOiAnTmV3dG9ucyBDcmFkbGUnIH0pO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtYmVyOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzZXBhcmF0aW9uID0gMS45LFxuICAgICAgICAgICAgICAgIGNpcmNsZSA9IEJvZGllcy5jaXJjbGUoeHggKyBpICogKHNpemUgKiBzZXBhcmF0aW9uKSwgeXkgKyBsZW5ndGgsIHNpemUsIFxuICAgICAgICAgICAgICAgICAgICB7IGluZXJ0aWE6IEluZmluaXR5LCByZXN0aXR1dGlvbjogMSwgZnJpY3Rpb246IDAsIGZyaWN0aW9uQWlyOiAwLjAwMDEsIHNsb3A6IDEgfSksXG4gICAgICAgICAgICAgICAgY29uc3RyYWludCA9IENvbnN0cmFpbnQuY3JlYXRlKHsgcG9pbnRBOiB7IHg6IHh4ICsgaSAqIChzaXplICogc2VwYXJhdGlvbiksIHk6IHl5IH0sIGJvZHlCOiBjaXJjbGUgfSk7XG5cbiAgICAgICAgICAgIENvbXBvc2l0ZS5hZGRCb2R5KG5ld3RvbnNDcmFkbGUsIGNpcmNsZSk7XG4gICAgICAgICAgICBDb21wb3NpdGUuYWRkQ29uc3RyYWludChuZXd0b25zQ3JhZGxlLCBjb25zdHJhaW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuZXd0b25zQ3JhZGxlO1xuICAgIH07XG5cbiAgICBkZXByZWNhdGVkKENvbXBvc2l0ZXMsICduZXd0b25zQ3JhZGxlJywgJ0NvbXBvc2l0ZXMubmV3dG9uc0NyYWRsZSDinqQgbW92ZWQgdG8gbmV3dG9uc0NyYWRsZSBleGFtcGxlJyk7XG4gICAgXG4gICAgLyoqXG4gICAgICogVGhpcyBoYXMgbm93IG1vdmVkIHRvIHRoZSBbY2FyIGV4YW1wbGVdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL2Jsb2IvbWFzdGVyL2V4YW1wbGVzL2Nhci5qcyksIGZvbGxvdyB0aGF0IGluc3RlYWQgYXMgdGhpcyBmdW5jdGlvbiBpcyBkZXByZWNhdGVkIGhlcmUuXG4gICAgICogQGRlcHJlY2F0ZWQgbW92ZWQgdG8gY2FyIGV4YW1wbGVcbiAgICAgKiBAbWV0aG9kIGNhclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4eFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5eVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gd2hlZWxTaXplXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBBIG5ldyBjb21wb3NpdGUgY2FyIGJvZHlcbiAgICAgKi9cbiAgICBDb21wb3NpdGVzLmNhciA9IGZ1bmN0aW9uKHh4LCB5eSwgd2lkdGgsIGhlaWdodCwgd2hlZWxTaXplKSB7XG4gICAgICAgIHZhciBncm91cCA9IEJvZHkubmV4dEdyb3VwKHRydWUpLFxuICAgICAgICAgICAgd2hlZWxCYXNlID0gMjAsXG4gICAgICAgICAgICB3aGVlbEFPZmZzZXQgPSAtd2lkdGggKiAwLjUgKyB3aGVlbEJhc2UsXG4gICAgICAgICAgICB3aGVlbEJPZmZzZXQgPSB3aWR0aCAqIDAuNSAtIHdoZWVsQmFzZSxcbiAgICAgICAgICAgIHdoZWVsWU9mZnNldCA9IDA7XG4gICAgXG4gICAgICAgIHZhciBjYXIgPSBDb21wb3NpdGUuY3JlYXRlKHsgbGFiZWw6ICdDYXInIH0pLFxuICAgICAgICAgICAgYm9keSA9IEJvZGllcy5yZWN0YW5nbGUoeHgsIHl5LCB3aWR0aCwgaGVpZ2h0LCB7IFxuICAgICAgICAgICAgICAgIGNvbGxpc2lvbkZpbHRlcjoge1xuICAgICAgICAgICAgICAgICAgICBncm91cDogZ3JvdXBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGNoYW1mZXI6IHtcbiAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiBoZWlnaHQgKiAwLjVcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGRlbnNpdHk6IDAuMDAwMlxuICAgICAgICAgICAgfSk7XG4gICAgXG4gICAgICAgIHZhciB3aGVlbEEgPSBCb2RpZXMuY2lyY2xlKHh4ICsgd2hlZWxBT2Zmc2V0LCB5eSArIHdoZWVsWU9mZnNldCwgd2hlZWxTaXplLCB7IFxuICAgICAgICAgICAgY29sbGlzaW9uRmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgZ3JvdXA6IGdyb3VwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnJpY3Rpb246IDAuOFxuICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIHZhciB3aGVlbEIgPSBCb2RpZXMuY2lyY2xlKHh4ICsgd2hlZWxCT2Zmc2V0LCB5eSArIHdoZWVsWU9mZnNldCwgd2hlZWxTaXplLCB7IFxuICAgICAgICAgICAgY29sbGlzaW9uRmlsdGVyOiB7XG4gICAgICAgICAgICAgICAgZ3JvdXA6IGdyb3VwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZnJpY3Rpb246IDAuOFxuICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIHZhciBheGVsQSA9IENvbnN0cmFpbnQuY3JlYXRlKHtcbiAgICAgICAgICAgIGJvZHlCOiBib2R5LFxuICAgICAgICAgICAgcG9pbnRCOiB7IHg6IHdoZWVsQU9mZnNldCwgeTogd2hlZWxZT2Zmc2V0IH0sXG4gICAgICAgICAgICBib2R5QTogd2hlZWxBLFxuICAgICAgICAgICAgc3RpZmZuZXNzOiAxLFxuICAgICAgICAgICAgbGVuZ3RoOiAwXG4gICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIHZhciBheGVsQiA9IENvbnN0cmFpbnQuY3JlYXRlKHtcbiAgICAgICAgICAgIGJvZHlCOiBib2R5LFxuICAgICAgICAgICAgcG9pbnRCOiB7IHg6IHdoZWVsQk9mZnNldCwgeTogd2hlZWxZT2Zmc2V0IH0sXG4gICAgICAgICAgICBib2R5QTogd2hlZWxCLFxuICAgICAgICAgICAgc3RpZmZuZXNzOiAxLFxuICAgICAgICAgICAgbGVuZ3RoOiAwXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgQ29tcG9zaXRlLmFkZEJvZHkoY2FyLCBib2R5KTtcbiAgICAgICAgQ29tcG9zaXRlLmFkZEJvZHkoY2FyLCB3aGVlbEEpO1xuICAgICAgICBDb21wb3NpdGUuYWRkQm9keShjYXIsIHdoZWVsQik7XG4gICAgICAgIENvbXBvc2l0ZS5hZGRDb25zdHJhaW50KGNhciwgYXhlbEEpO1xuICAgICAgICBDb21wb3NpdGUuYWRkQ29uc3RyYWludChjYXIsIGF4ZWxCKTtcblxuICAgICAgICByZXR1cm4gY2FyO1xuICAgIH07XG5cbiAgICBkZXByZWNhdGVkKENvbXBvc2l0ZXMsICdjYXInLCAnQ29tcG9zaXRlcy5jYXIg4p6kIG1vdmVkIHRvIGNhciBleGFtcGxlJyk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGhhcyBub3cgbW92ZWQgdG8gdGhlIFtzb2Z0Qm9keSBleGFtcGxlXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy9ibG9iL21hc3Rlci9leGFtcGxlcy9zb2Z0Qm9keS5qcylcbiAgICAgKiBhbmQgdGhlIFtjbG90aCBleGFtcGxlXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy9ibG9iL21hc3Rlci9leGFtcGxlcy9jbG90aC5qcyksIGZvbGxvdyB0aG9zZSBpbnN0ZWFkIGFzIHRoaXMgZnVuY3Rpb24gaXMgZGVwcmVjYXRlZCBoZXJlLlxuICAgICAqIEBkZXByZWNhdGVkIG1vdmVkIHRvIHNvZnRCb2R5IGFuZCBjbG90aCBleGFtcGxlc1xuICAgICAqIEBtZXRob2Qgc29mdEJvZHlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geHhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geXlcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3dzXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGNvbHVtbkdhcFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByb3dHYXBcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNyb3NzQnJhY2VcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcGFydGljbGVSYWRpdXNcbiAgICAgKiBAcGFyYW0ge30gcGFydGljbGVPcHRpb25zXG4gICAgICogQHBhcmFtIHt9IGNvbnN0cmFpbnRPcHRpb25zXG4gICAgICogQHJldHVybiB7Y29tcG9zaXRlfSBBIG5ldyBjb21wb3NpdGUgc29mdEJvZHlcbiAgICAgKi9cbiAgICBDb21wb3NpdGVzLnNvZnRCb2R5ID0gZnVuY3Rpb24oeHgsIHl5LCBjb2x1bW5zLCByb3dzLCBjb2x1bW5HYXAsIHJvd0dhcCwgY3Jvc3NCcmFjZSwgcGFydGljbGVSYWRpdXMsIHBhcnRpY2xlT3B0aW9ucywgY29uc3RyYWludE9wdGlvbnMpIHtcbiAgICAgICAgcGFydGljbGVPcHRpb25zID0gQ29tbW9uLmV4dGVuZCh7IGluZXJ0aWE6IEluZmluaXR5IH0sIHBhcnRpY2xlT3B0aW9ucyk7XG4gICAgICAgIGNvbnN0cmFpbnRPcHRpb25zID0gQ29tbW9uLmV4dGVuZCh7IHN0aWZmbmVzczogMC4yLCByZW5kZXI6IHsgdHlwZTogJ2xpbmUnLCBhbmNob3JzOiBmYWxzZSB9IH0sIGNvbnN0cmFpbnRPcHRpb25zKTtcblxuICAgICAgICB2YXIgc29mdEJvZHkgPSBDb21wb3NpdGVzLnN0YWNrKHh4LCB5eSwgY29sdW1ucywgcm93cywgY29sdW1uR2FwLCByb3dHYXAsIGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgICAgICAgIHJldHVybiBCb2RpZXMuY2lyY2xlKHgsIHksIHBhcnRpY2xlUmFkaXVzLCBwYXJ0aWNsZU9wdGlvbnMpO1xuICAgICAgICB9KTtcblxuICAgICAgICBDb21wb3NpdGVzLm1lc2goc29mdEJvZHksIGNvbHVtbnMsIHJvd3MsIGNyb3NzQnJhY2UsIGNvbnN0cmFpbnRPcHRpb25zKTtcblxuICAgICAgICBzb2Z0Qm9keS5sYWJlbCA9ICdTb2Z0IEJvZHknO1xuXG4gICAgICAgIHJldHVybiBzb2Z0Qm9keTtcbiAgICB9O1xuXG4gICAgZGVwcmVjYXRlZChDb21wb3NpdGVzLCAnc29mdEJvZHknLCAnQ29tcG9zaXRlcy5zb2Z0Qm9keSDinqQgbW92ZWQgdG8gc29mdEJvZHkgYW5kIGNsb3RoIGV4YW1wbGVzJyk7XG59KSgpO1xuXG5cbi8qKiovIH0pLFxuLyogMjMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyoqXG4qIFRoaXMgbW9kdWxlIGhhcyBub3cgYmVlbiByZXBsYWNlZCBieSBgTWF0dGVyLkRldGVjdG9yYC5cbipcbiogQWxsIHVzYWdlIHNob3VsZCBiZSBtaWdyYXRlZCB0byBgTWF0dGVyLkRldGVjdG9yYCBvciBhbm90aGVyIGFsdGVybmF0aXZlLlxuKiBGb3IgYmFjay1jb21wYXRpYmlsaXR5IHB1cnBvc2VzIHRoaXMgbW9kdWxlIHdpbGwgcmVtYWluIGZvciBhIHNob3J0IHRlcm0gYW5kIHRoZW4gbGF0ZXIgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLlxuKlxuKiBUaGUgYE1hdHRlci5HcmlkYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY3JlYXRpbmcgYW5kIG1hbmlwdWxhdGluZyBjb2xsaXNpb24gYnJvYWRwaGFzZSBncmlkIHN0cnVjdHVyZXMuXG4qXG4qIEBjbGFzcyBHcmlkXG4qIEBkZXByZWNhdGVkXG4qL1xuXG52YXIgR3JpZCA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEdyaWQ7XG5cbnZhciBQYWlyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg5KTtcbnZhciBDb21tb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xudmFyIGRlcHJlY2F0ZWQgPSBDb21tb24uZGVwcmVjYXRlZDtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBncmlkLlxuICAgICAqIEBkZXByZWNhdGVkIHJlcGxhY2VkIGJ5IE1hdHRlci5EZXRlY3RvclxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHt9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtncmlkfSBBIG5ldyBncmlkXG4gICAgICovXG4gICAgR3JpZC5jcmVhdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHtcbiAgICAgICAgICAgIGJ1Y2tldHM6IHt9LFxuICAgICAgICAgICAgcGFpcnM6IHt9LFxuICAgICAgICAgICAgcGFpcnNMaXN0OiBbXSxcbiAgICAgICAgICAgIGJ1Y2tldFdpZHRoOiA0OCxcbiAgICAgICAgICAgIGJ1Y2tldEhlaWdodDogNDhcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gQ29tbW9uLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB3aWR0aCBvZiBhIHNpbmdsZSBncmlkIGJ1Y2tldC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBidWNrZXRXaWR0aFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDQ4XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgaGVpZ2h0IG9mIGEgc2luZ2xlIGdyaWQgYnVja2V0LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGJ1Y2tldEhlaWdodFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDQ4XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBncmlkLlxuICAgICAqIEBkZXByZWNhdGVkIHJlcGxhY2VkIGJ5IE1hdHRlci5EZXRlY3RvclxuICAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgICogQHBhcmFtIHtncmlkfSBncmlkXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGZvcmNlVXBkYXRlXG4gICAgICovXG4gICAgR3JpZC51cGRhdGUgPSBmdW5jdGlvbihncmlkLCBib2RpZXMsIGVuZ2luZSwgZm9yY2VVcGRhdGUpIHtcbiAgICAgICAgdmFyIGksIGNvbCwgcm93LFxuICAgICAgICAgICAgd29ybGQgPSBlbmdpbmUud29ybGQsXG4gICAgICAgICAgICBidWNrZXRzID0gZ3JpZC5idWNrZXRzLFxuICAgICAgICAgICAgYnVja2V0LFxuICAgICAgICAgICAgYnVja2V0SWQsXG4gICAgICAgICAgICBncmlkQ2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldO1xuXG4gICAgICAgICAgICBpZiAoYm9keS5pc1NsZWVwaW5nICYmICFmb3JjZVVwZGF0ZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgLy8gdGVtcG9yYXJ5IGJhY2sgY29tcGF0aWJpbGl0eSBib3VuZHMgY2hlY2tcbiAgICAgICAgICAgIGlmICh3b3JsZC5ib3VuZHMgJiYgKGJvZHkuYm91bmRzLm1heC54IDwgd29ybGQuYm91bmRzLm1pbi54IHx8IGJvZHkuYm91bmRzLm1pbi54ID4gd29ybGQuYm91bmRzLm1heC54XG4gICAgICAgICAgICAgICAgfHwgYm9keS5ib3VuZHMubWF4LnkgPCB3b3JsZC5ib3VuZHMubWluLnkgfHwgYm9keS5ib3VuZHMubWluLnkgPiB3b3JsZC5ib3VuZHMubWF4LnkpKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICB2YXIgbmV3UmVnaW9uID0gR3JpZC5fZ2V0UmVnaW9uKGdyaWQsIGJvZHkpO1xuXG4gICAgICAgICAgICAvLyBpZiB0aGUgYm9keSBoYXMgY2hhbmdlZCBncmlkIHJlZ2lvblxuICAgICAgICAgICAgaWYgKCFib2R5LnJlZ2lvbiB8fCBuZXdSZWdpb24uaWQgIT09IGJvZHkucmVnaW9uLmlkIHx8IGZvcmNlVXBkYXRlKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWJvZHkucmVnaW9uIHx8IGZvcmNlVXBkYXRlKVxuICAgICAgICAgICAgICAgICAgICBib2R5LnJlZ2lvbiA9IG5ld1JlZ2lvbjtcblxuICAgICAgICAgICAgICAgIHZhciB1bmlvbiA9IEdyaWQuX3JlZ2lvblVuaW9uKG5ld1JlZ2lvbiwgYm9keS5yZWdpb24pO1xuXG4gICAgICAgICAgICAgICAgLy8gdXBkYXRlIGdyaWQgYnVja2V0cyBhZmZlY3RlZCBieSByZWdpb24gY2hhbmdlXG4gICAgICAgICAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSB1bmlvbiBvZiBib3RoIHJlZ2lvbnNcbiAgICAgICAgICAgICAgICBmb3IgKGNvbCA9IHVuaW9uLnN0YXJ0Q29sOyBjb2wgPD0gdW5pb24uZW5kQ29sOyBjb2wrKykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHJvdyA9IHVuaW9uLnN0YXJ0Um93OyByb3cgPD0gdW5pb24uZW5kUm93OyByb3crKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYnVja2V0SWQgPSBHcmlkLl9nZXRCdWNrZXRJZChjb2wsIHJvdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBidWNrZXQgPSBidWNrZXRzW2J1Y2tldElkXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzSW5zaWRlTmV3UmVnaW9uID0gKGNvbCA+PSBuZXdSZWdpb24uc3RhcnRDb2wgJiYgY29sIDw9IG5ld1JlZ2lvbi5lbmRDb2xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIHJvdyA+PSBuZXdSZWdpb24uc3RhcnRSb3cgJiYgcm93IDw9IG5ld1JlZ2lvbi5lbmRSb3cpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNJbnNpZGVPbGRSZWdpb24gPSAoY29sID49IGJvZHkucmVnaW9uLnN0YXJ0Q29sICYmIGNvbCA8PSBib2R5LnJlZ2lvbi5lbmRDb2xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICYmIHJvdyA+PSBib2R5LnJlZ2lvbi5zdGFydFJvdyAmJiByb3cgPD0gYm9keS5yZWdpb24uZW5kUm93KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGZyb20gb2xkIHJlZ2lvbiBidWNrZXRzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzSW5zaWRlTmV3UmVnaW9uICYmIGlzSW5zaWRlT2xkUmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzSW5zaWRlT2xkUmVnaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChidWNrZXQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHcmlkLl9idWNrZXRSZW1vdmVCb2R5KGdyaWQsIGJ1Y2tldCwgYm9keSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgdG8gbmV3IHJlZ2lvbiBidWNrZXRzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYm9keS5yZWdpb24gPT09IG5ld1JlZ2lvbiB8fCAoaXNJbnNpZGVOZXdSZWdpb24gJiYgIWlzSW5zaWRlT2xkUmVnaW9uKSB8fCBmb3JjZVVwZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYnVja2V0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWNrZXQgPSBHcmlkLl9jcmVhdGVCdWNrZXQoYnVja2V0cywgYnVja2V0SWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdyaWQuX2J1Y2tldEFkZEJvZHkoZ3JpZCwgYnVja2V0LCBib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHNldCB0aGUgbmV3IHJlZ2lvblxuICAgICAgICAgICAgICAgIGJvZHkucmVnaW9uID0gbmV3UmVnaW9uO1xuXG4gICAgICAgICAgICAgICAgLy8gZmxhZyBjaGFuZ2VzIHNvIHdlIGNhbiB1cGRhdGUgcGFpcnNcbiAgICAgICAgICAgICAgICBncmlkQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgcGFpcnMgbGlzdCBvbmx5IGlmIHBhaXJzIGNoYW5nZWQgKGkuZS4gYSBib2R5IGNoYW5nZWQgcmVnaW9uKVxuICAgICAgICBpZiAoZ3JpZENoYW5nZWQpXG4gICAgICAgICAgICBncmlkLnBhaXJzTGlzdCA9IEdyaWQuX2NyZWF0ZUFjdGl2ZVBhaXJzTGlzdChncmlkKTtcbiAgICB9O1xuXG4gICAgZGVwcmVjYXRlZChHcmlkLCAndXBkYXRlJywgJ0dyaWQudXBkYXRlIOKepCByZXBsYWNlZCBieSBNYXR0ZXIuRGV0ZWN0b3InKTtcblxuICAgIC8qKlxuICAgICAqIENsZWFycyB0aGUgZ3JpZC5cbiAgICAgKiBAZGVwcmVjYXRlZCByZXBsYWNlZCBieSBNYXR0ZXIuRGV0ZWN0b3JcbiAgICAgKiBAbWV0aG9kIGNsZWFyXG4gICAgICogQHBhcmFtIHtncmlkfSBncmlkXG4gICAgICovXG4gICAgR3JpZC5jbGVhciA9IGZ1bmN0aW9uKGdyaWQpIHtcbiAgICAgICAgZ3JpZC5idWNrZXRzID0ge307XG4gICAgICAgIGdyaWQucGFpcnMgPSB7fTtcbiAgICAgICAgZ3JpZC5wYWlyc0xpc3QgPSBbXTtcbiAgICB9O1xuXG4gICAgZGVwcmVjYXRlZChHcmlkLCAnY2xlYXInLCAnR3JpZC5jbGVhciDinqQgcmVwbGFjZWQgYnkgTWF0dGVyLkRldGVjdG9yJyk7XG5cbiAgICAvKipcbiAgICAgKiBGaW5kcyB0aGUgdW5pb24gb2YgdHdvIHJlZ2lvbnMuXG4gICAgICogQG1ldGhvZCBfcmVnaW9uVW5pb25cbiAgICAgKiBAZGVwcmVjYXRlZCByZXBsYWNlZCBieSBNYXR0ZXIuRGV0ZWN0b3JcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7fSByZWdpb25BXG4gICAgICogQHBhcmFtIHt9IHJlZ2lvbkJcbiAgICAgKiBAcmV0dXJuIHt9IHJlZ2lvblxuICAgICAqL1xuICAgIEdyaWQuX3JlZ2lvblVuaW9uID0gZnVuY3Rpb24ocmVnaW9uQSwgcmVnaW9uQikge1xuICAgICAgICB2YXIgc3RhcnRDb2wgPSBNYXRoLm1pbihyZWdpb25BLnN0YXJ0Q29sLCByZWdpb25CLnN0YXJ0Q29sKSxcbiAgICAgICAgICAgIGVuZENvbCA9IE1hdGgubWF4KHJlZ2lvbkEuZW5kQ29sLCByZWdpb25CLmVuZENvbCksXG4gICAgICAgICAgICBzdGFydFJvdyA9IE1hdGgubWluKHJlZ2lvbkEuc3RhcnRSb3csIHJlZ2lvbkIuc3RhcnRSb3cpLFxuICAgICAgICAgICAgZW5kUm93ID0gTWF0aC5tYXgocmVnaW9uQS5lbmRSb3csIHJlZ2lvbkIuZW5kUm93KTtcblxuICAgICAgICByZXR1cm4gR3JpZC5fY3JlYXRlUmVnaW9uKHN0YXJ0Q29sLCBlbmRDb2wsIHN0YXJ0Um93LCBlbmRSb3cpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSByZWdpb24gYSBnaXZlbiBib2R5IGZhbGxzIGluIGZvciBhIGdpdmVuIGdyaWQuXG4gICAgICogQG1ldGhvZCBfZ2V0UmVnaW9uXG4gICAgICogQGRlcHJlY2F0ZWQgcmVwbGFjZWQgYnkgTWF0dGVyLkRldGVjdG9yXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gZ3JpZFxuICAgICAqIEBwYXJhbSB7fSBib2R5XG4gICAgICogQHJldHVybiB7fSByZWdpb25cbiAgICAgKi9cbiAgICBHcmlkLl9nZXRSZWdpb24gPSBmdW5jdGlvbihncmlkLCBib2R5KSB7XG4gICAgICAgIHZhciBib3VuZHMgPSBib2R5LmJvdW5kcyxcbiAgICAgICAgICAgIHN0YXJ0Q29sID0gTWF0aC5mbG9vcihib3VuZHMubWluLnggLyBncmlkLmJ1Y2tldFdpZHRoKSxcbiAgICAgICAgICAgIGVuZENvbCA9IE1hdGguZmxvb3IoYm91bmRzLm1heC54IC8gZ3JpZC5idWNrZXRXaWR0aCksXG4gICAgICAgICAgICBzdGFydFJvdyA9IE1hdGguZmxvb3IoYm91bmRzLm1pbi55IC8gZ3JpZC5idWNrZXRIZWlnaHQpLFxuICAgICAgICAgICAgZW5kUm93ID0gTWF0aC5mbG9vcihib3VuZHMubWF4LnkgLyBncmlkLmJ1Y2tldEhlaWdodCk7XG5cbiAgICAgICAgcmV0dXJuIEdyaWQuX2NyZWF0ZVJlZ2lvbihzdGFydENvbCwgZW5kQ29sLCBzdGFydFJvdywgZW5kUm93KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHJlZ2lvbi5cbiAgICAgKiBAbWV0aG9kIF9jcmVhdGVSZWdpb25cbiAgICAgKiBAZGVwcmVjYXRlZCByZXBsYWNlZCBieSBNYXR0ZXIuRGV0ZWN0b3JcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7fSBzdGFydENvbFxuICAgICAqIEBwYXJhbSB7fSBlbmRDb2xcbiAgICAgKiBAcGFyYW0ge30gc3RhcnRSb3dcbiAgICAgKiBAcGFyYW0ge30gZW5kUm93XG4gICAgICogQHJldHVybiB7fSByZWdpb25cbiAgICAgKi9cbiAgICBHcmlkLl9jcmVhdGVSZWdpb24gPSBmdW5jdGlvbihzdGFydENvbCwgZW5kQ29sLCBzdGFydFJvdywgZW5kUm93KSB7XG4gICAgICAgIHJldHVybiB7IFxuICAgICAgICAgICAgaWQ6IHN0YXJ0Q29sICsgJywnICsgZW5kQ29sICsgJywnICsgc3RhcnRSb3cgKyAnLCcgKyBlbmRSb3csXG4gICAgICAgICAgICBzdGFydENvbDogc3RhcnRDb2wsIFxuICAgICAgICAgICAgZW5kQ29sOiBlbmRDb2wsIFxuICAgICAgICAgICAgc3RhcnRSb3c6IHN0YXJ0Um93LCBcbiAgICAgICAgICAgIGVuZFJvdzogZW5kUm93IFxuICAgICAgICB9O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBidWNrZXQgaWQgYXQgdGhlIGdpdmVuIHBvc2l0aW9uLlxuICAgICAqIEBtZXRob2QgX2dldEJ1Y2tldElkXG4gICAgICogQGRlcHJlY2F0ZWQgcmVwbGFjZWQgYnkgTWF0dGVyLkRldGVjdG9yXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gY29sdW1uXG4gICAgICogQHBhcmFtIHt9IHJvd1xuICAgICAqIEByZXR1cm4ge3N0cmluZ30gYnVja2V0IGlkXG4gICAgICovXG4gICAgR3JpZC5fZ2V0QnVja2V0SWQgPSBmdW5jdGlvbihjb2x1bW4sIHJvdykge1xuICAgICAgICByZXR1cm4gJ0MnICsgY29sdW1uICsgJ1InICsgcm93O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYnVja2V0LlxuICAgICAqIEBtZXRob2QgX2NyZWF0ZUJ1Y2tldFxuICAgICAqIEBkZXByZWNhdGVkIHJlcGxhY2VkIGJ5IE1hdHRlci5EZXRlY3RvclxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHt9IGJ1Y2tldHNcbiAgICAgKiBAcGFyYW0ge30gYnVja2V0SWRcbiAgICAgKiBAcmV0dXJuIHt9IGJ1Y2tldFxuICAgICAqL1xuICAgIEdyaWQuX2NyZWF0ZUJ1Y2tldCA9IGZ1bmN0aW9uKGJ1Y2tldHMsIGJ1Y2tldElkKSB7XG4gICAgICAgIHZhciBidWNrZXQgPSBidWNrZXRzW2J1Y2tldElkXSA9IFtdO1xuICAgICAgICByZXR1cm4gYnVja2V0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgYm9keSB0byBhIGJ1Y2tldC5cbiAgICAgKiBAbWV0aG9kIF9idWNrZXRBZGRCb2R5XG4gICAgICogQGRlcHJlY2F0ZWQgcmVwbGFjZWQgYnkgTWF0dGVyLkRldGVjdG9yXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gZ3JpZFxuICAgICAqIEBwYXJhbSB7fSBidWNrZXRcbiAgICAgKiBAcGFyYW0ge30gYm9keVxuICAgICAqL1xuICAgIEdyaWQuX2J1Y2tldEFkZEJvZHkgPSBmdW5jdGlvbihncmlkLCBidWNrZXQsIGJvZHkpIHtcbiAgICAgICAgdmFyIGdyaWRQYWlycyA9IGdyaWQucGFpcnMsXG4gICAgICAgICAgICBwYWlySWQgPSBQYWlyLmlkLFxuICAgICAgICAgICAgYnVja2V0TGVuZ3RoID0gYnVja2V0Lmxlbmd0aCxcbiAgICAgICAgICAgIGk7XG5cbiAgICAgICAgLy8gYWRkIG5ldyBwYWlyc1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYnVja2V0TGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5QiA9IGJ1Y2tldFtpXTtcblxuICAgICAgICAgICAgaWYgKGJvZHkuaWQgPT09IGJvZHlCLmlkIHx8IChib2R5LmlzU3RhdGljICYmIGJvZHlCLmlzU3RhdGljKSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgLy8ga2VlcCB0cmFjayBvZiB0aGUgbnVtYmVyIG9mIGJ1Y2tldHMgdGhlIHBhaXIgZXhpc3RzIGluXG4gICAgICAgICAgICAvLyBpbXBvcnRhbnQgZm9yIEdyaWQudXBkYXRlIHRvIHdvcmtcbiAgICAgICAgICAgIHZhciBpZCA9IHBhaXJJZChib2R5LCBib2R5QiksXG4gICAgICAgICAgICAgICAgcGFpciA9IGdyaWRQYWlyc1tpZF07XG5cbiAgICAgICAgICAgIGlmIChwYWlyKSB7XG4gICAgICAgICAgICAgICAgcGFpclsyXSArPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBncmlkUGFpcnNbaWRdID0gW2JvZHksIGJvZHlCLCAxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGFkZCB0byBib2RpZXMgKGFmdGVyIHBhaXJzLCBvdGhlcndpc2UgcGFpcnMgd2l0aCBzZWxmKVxuICAgICAgICBidWNrZXQucHVzaChib2R5KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIGJvZHkgZnJvbSBhIGJ1Y2tldC5cbiAgICAgKiBAbWV0aG9kIF9idWNrZXRSZW1vdmVCb2R5XG4gICAgICogQGRlcHJlY2F0ZWQgcmVwbGFjZWQgYnkgTWF0dGVyLkRldGVjdG9yXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gZ3JpZFxuICAgICAqIEBwYXJhbSB7fSBidWNrZXRcbiAgICAgKiBAcGFyYW0ge30gYm9keVxuICAgICAqL1xuICAgIEdyaWQuX2J1Y2tldFJlbW92ZUJvZHkgPSBmdW5jdGlvbihncmlkLCBidWNrZXQsIGJvZHkpIHtcbiAgICAgICAgdmFyIGdyaWRQYWlycyA9IGdyaWQucGFpcnMsXG4gICAgICAgICAgICBwYWlySWQgPSBQYWlyLmlkLFxuICAgICAgICAgICAgaTtcblxuICAgICAgICAvLyByZW1vdmUgZnJvbSBidWNrZXRcbiAgICAgICAgYnVja2V0LnNwbGljZShDb21tb24uaW5kZXhPZihidWNrZXQsIGJvZHkpLCAxKTtcblxuICAgICAgICB2YXIgYnVja2V0TGVuZ3RoID0gYnVja2V0Lmxlbmd0aDtcblxuICAgICAgICAvLyB1cGRhdGUgcGFpciBjb3VudHNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJ1Y2tldExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyBrZWVwIHRyYWNrIG9mIHRoZSBudW1iZXIgb2YgYnVja2V0cyB0aGUgcGFpciBleGlzdHMgaW5cbiAgICAgICAgICAgIC8vIGltcG9ydGFudCBmb3IgX2NyZWF0ZUFjdGl2ZVBhaXJzTGlzdCB0byB3b3JrXG4gICAgICAgICAgICB2YXIgcGFpciA9IGdyaWRQYWlyc1twYWlySWQoYm9keSwgYnVja2V0W2ldKV07XG5cbiAgICAgICAgICAgIGlmIChwYWlyKVxuICAgICAgICAgICAgICAgIHBhaXJbMl0gLT0gMTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBsaXN0IG9mIHRoZSBhY3RpdmUgcGFpcnMgaW4gdGhlIGdyaWQuXG4gICAgICogQG1ldGhvZCBfY3JlYXRlQWN0aXZlUGFpcnNMaXN0XG4gICAgICogQGRlcHJlY2F0ZWQgcmVwbGFjZWQgYnkgTWF0dGVyLkRldGVjdG9yXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge30gZ3JpZFxuICAgICAqIEByZXR1cm4gW10gcGFpcnNcbiAgICAgKi9cbiAgICBHcmlkLl9jcmVhdGVBY3RpdmVQYWlyc0xpc3QgPSBmdW5jdGlvbihncmlkKSB7XG4gICAgICAgIHZhciBwYWlyLFxuICAgICAgICAgICAgZ3JpZFBhaXJzID0gZ3JpZC5wYWlycyxcbiAgICAgICAgICAgIHBhaXJLZXlzID0gQ29tbW9uLmtleXMoZ3JpZFBhaXJzKSxcbiAgICAgICAgICAgIHBhaXJLZXlzTGVuZ3RoID0gcGFpcktleXMubGVuZ3RoLFxuICAgICAgICAgICAgcGFpcnMgPSBbXSxcbiAgICAgICAgICAgIGs7XG5cbiAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIGdyaWQucGFpcnNcbiAgICAgICAgZm9yIChrID0gMDsgayA8IHBhaXJLZXlzTGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgIHBhaXIgPSBncmlkUGFpcnNbcGFpcktleXNba11dO1xuXG4gICAgICAgICAgICAvLyBpZiBwYWlyIGV4aXN0cyBpbiBhdCBsZWFzdCBvbmUgYnVja2V0XG4gICAgICAgICAgICAvLyBpdCBpcyBhIHBhaXIgdGhhdCBuZWVkcyBmdXJ0aGVyIGNvbGxpc2lvbiB0ZXN0aW5nIHNvIHB1c2ggaXRcbiAgICAgICAgICAgIGlmIChwYWlyWzJdID4gMCkge1xuICAgICAgICAgICAgICAgIHBhaXJzLnB1c2gocGFpcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBncmlkUGFpcnNbcGFpcktleXNba11dO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHBhaXJzO1xuICAgIH07XG4gICAgXG59KSgpO1xuXG5cbi8qKiovIH0pLFxuLyogMjQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyoqXG4qIFRoZSBgTWF0dGVyLk1vdXNlQ29uc3RyYWludGAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIGNyZWF0aW5nIG1vdXNlIGNvbnN0cmFpbnRzLlxuKiBNb3VzZSBjb25zdHJhaW50cyBhcmUgdXNlZCBmb3IgYWxsb3dpbmcgdXNlciBpbnRlcmFjdGlvbiwgcHJvdmlkaW5nIHRoZSBhYmlsaXR5IHRvIG1vdmUgYm9kaWVzIHZpYSB0aGUgbW91c2Ugb3IgdG91Y2guXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG4qXG4qIEBjbGFzcyBNb3VzZUNvbnN0cmFpbnRcbiovXG5cbnZhciBNb3VzZUNvbnN0cmFpbnQgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBNb3VzZUNvbnN0cmFpbnQ7XG5cbnZhciBWZXJ0aWNlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG52YXIgU2xlZXBpbmcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcpO1xudmFyIE1vdXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG52YXIgRXZlbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcbnZhciBEZXRlY3RvciA9IF9fd2VicGFja19yZXF1aXJlX18oMTMpO1xudmFyIENvbnN0cmFpbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcbnZhciBDb21wb3NpdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xudmFyIENvbW1vbiA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgQm91bmRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBtb3VzZSBjb25zdHJhaW50LlxuICAgICAqIEFsbCBwcm9wZXJ0aWVzIGhhdmUgZGVmYXVsdCB2YWx1ZXMsIGFuZCBtYW55IGFyZSBwcmUtY2FsY3VsYXRlZCBhdXRvbWF0aWNhbGx5IGJhc2VkIG9uIG90aGVyIHByb3BlcnRpZXMuXG4gICAgICogU2VlIHRoZSBwcm9wZXJ0aWVzIHNlY3Rpb24gYmVsb3cgZm9yIGRldGFpbGVkIGluZm9ybWF0aW9uIG9uIHdoYXQgeW91IGNhbiBwYXNzIHZpYSB0aGUgYG9wdGlvbnNgIG9iamVjdC5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKiBAcGFyYW0ge30gb3B0aW9uc1xuICAgICAqIEByZXR1cm4ge01vdXNlQ29uc3RyYWludH0gQSBuZXcgTW91c2VDb25zdHJhaW50XG4gICAgICovXG4gICAgTW91c2VDb25zdHJhaW50LmNyZWF0ZSA9IGZ1bmN0aW9uKGVuZ2luZSwgb3B0aW9ucykge1xuICAgICAgICB2YXIgbW91c2UgPSAoZW5naW5lID8gZW5naW5lLm1vdXNlIDogbnVsbCkgfHwgKG9wdGlvbnMgPyBvcHRpb25zLm1vdXNlIDogbnVsbCk7XG5cbiAgICAgICAgaWYgKCFtb3VzZSkge1xuICAgICAgICAgICAgaWYgKGVuZ2luZSAmJiBlbmdpbmUucmVuZGVyICYmIGVuZ2luZS5yZW5kZXIuY2FudmFzKSB7XG4gICAgICAgICAgICAgICAgbW91c2UgPSBNb3VzZS5jcmVhdGUoZW5naW5lLnJlbmRlci5jYW52YXMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIG1vdXNlID0gTW91c2UuY3JlYXRlKG9wdGlvbnMuZWxlbWVudCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG1vdXNlID0gTW91c2UuY3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgQ29tbW9uLndhcm4oJ01vdXNlQ29uc3RyYWludC5jcmVhdGU6IG9wdGlvbnMubW91c2Ugd2FzIHVuZGVmaW5lZCwgb3B0aW9ucy5lbGVtZW50IHdhcyB1bmRlZmluZWQsIG1heSBub3QgZnVuY3Rpb24gYXMgZXhwZWN0ZWQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb25zdHJhaW50ID0gQ29uc3RyYWludC5jcmVhdGUoeyBcbiAgICAgICAgICAgIGxhYmVsOiAnTW91c2UgQ29uc3RyYWludCcsXG4gICAgICAgICAgICBwb2ludEE6IG1vdXNlLnBvc2l0aW9uLFxuICAgICAgICAgICAgcG9pbnRCOiB7IHg6IDAsIHk6IDAgfSxcbiAgICAgICAgICAgIGxlbmd0aDogMC4wMSwgXG4gICAgICAgICAgICBzdGlmZm5lc3M6IDAuMSxcbiAgICAgICAgICAgIGFuZ3VsYXJTdGlmZm5lc3M6IDEsXG4gICAgICAgICAgICByZW5kZXI6IHtcbiAgICAgICAgICAgICAgICBzdHJva2VTdHlsZTogJyM5MEVFOTAnLFxuICAgICAgICAgICAgICAgIGxpbmVXaWR0aDogM1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICB0eXBlOiAnbW91c2VDb25zdHJhaW50JyxcbiAgICAgICAgICAgIG1vdXNlOiBtb3VzZSxcbiAgICAgICAgICAgIGVsZW1lbnQ6IG51bGwsXG4gICAgICAgICAgICBib2R5OiBudWxsLFxuICAgICAgICAgICAgY29uc3RyYWludDogY29uc3RyYWludCxcbiAgICAgICAgICAgIGNvbGxpc2lvbkZpbHRlcjoge1xuICAgICAgICAgICAgICAgIGNhdGVnb3J5OiAweDAwMDEsXG4gICAgICAgICAgICAgICAgbWFzazogMHhGRkZGRkZGRixcbiAgICAgICAgICAgICAgICBncm91cDogMFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBtb3VzZUNvbnN0cmFpbnQgPSBDb21tb24uZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgICAgICBFdmVudHMub24oZW5naW5lLCAnYmVmb3JlVXBkYXRlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgYWxsQm9kaWVzID0gQ29tcG9zaXRlLmFsbEJvZGllcyhlbmdpbmUud29ybGQpO1xuICAgICAgICAgICAgTW91c2VDb25zdHJhaW50LnVwZGF0ZShtb3VzZUNvbnN0cmFpbnQsIGFsbEJvZGllcyk7XG4gICAgICAgICAgICBNb3VzZUNvbnN0cmFpbnQuX3RyaWdnZXJFdmVudHMobW91c2VDb25zdHJhaW50KTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG1vdXNlQ29uc3RyYWludDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgZ2l2ZW4gbW91c2UgY29uc3RyYWludC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgICogQHBhcmFtIHtNb3VzZUNvbnN0cmFpbnR9IG1vdXNlQ29uc3RyYWludFxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKi9cbiAgICBNb3VzZUNvbnN0cmFpbnQudXBkYXRlID0gZnVuY3Rpb24obW91c2VDb25zdHJhaW50LCBib2RpZXMpIHtcbiAgICAgICAgdmFyIG1vdXNlID0gbW91c2VDb25zdHJhaW50Lm1vdXNlLFxuICAgICAgICAgICAgY29uc3RyYWludCA9IG1vdXNlQ29uc3RyYWludC5jb25zdHJhaW50LFxuICAgICAgICAgICAgYm9keSA9IG1vdXNlQ29uc3RyYWludC5ib2R5O1xuXG4gICAgICAgIGlmIChtb3VzZS5idXR0b24gPT09IDApIHtcbiAgICAgICAgICAgIGlmICghY29uc3RyYWludC5ib2R5Qikge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGJvZHkgPSBib2RpZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIGlmIChCb3VuZHMuY29udGFpbnMoYm9keS5ib3VuZHMsIG1vdXNlLnBvc2l0aW9uKSBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAmJiBEZXRlY3Rvci5jYW5Db2xsaWRlKGJvZHkuY29sbGlzaW9uRmlsdGVyLCBtb3VzZUNvbnN0cmFpbnQuY29sbGlzaW9uRmlsdGVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IGJvZHkucGFydHMubGVuZ3RoID4gMSA/IDEgOiAwOyBqIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJ0ID0gYm9keS5wYXJ0c1tqXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoVmVydGljZXMuY29udGFpbnMocGFydC52ZXJ0aWNlcywgbW91c2UucG9zaXRpb24pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbnQucG9pbnRBID0gbW91c2UucG9zaXRpb247XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbnQuYm9keUIgPSBtb3VzZUNvbnN0cmFpbnQuYm9keSA9IGJvZHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbnQucG9pbnRCID0geyB4OiBtb3VzZS5wb3NpdGlvbi54IC0gYm9keS5wb3NpdGlvbi54LCB5OiBtb3VzZS5wb3NpdGlvbi55IC0gYm9keS5wb3NpdGlvbi55IH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbnQuYW5nbGVCID0gYm9keS5hbmdsZTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTbGVlcGluZy5zZXQoYm9keSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudHMudHJpZ2dlcihtb3VzZUNvbnN0cmFpbnQsICdzdGFydGRyYWcnLCB7IG1vdXNlOiBtb3VzZSwgYm9keTogYm9keSB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFNsZWVwaW5nLnNldChjb25zdHJhaW50LmJvZHlCLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgY29uc3RyYWludC5wb2ludEEgPSBtb3VzZS5wb3NpdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0cmFpbnQuYm9keUIgPSBtb3VzZUNvbnN0cmFpbnQuYm9keSA9IG51bGw7XG4gICAgICAgICAgICBjb25zdHJhaW50LnBvaW50QiA9IG51bGw7XG5cbiAgICAgICAgICAgIGlmIChib2R5KVxuICAgICAgICAgICAgICAgIEV2ZW50cy50cmlnZ2VyKG1vdXNlQ29uc3RyYWludCwgJ2VuZGRyYWcnLCB7IG1vdXNlOiBtb3VzZSwgYm9keTogYm9keSB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VycyBtb3VzZSBjb25zdHJhaW50IGV2ZW50cy5cbiAgICAgKiBAbWV0aG9kIF90cmlnZ2VyRXZlbnRzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge21vdXNlfSBtb3VzZUNvbnN0cmFpbnRcbiAgICAgKi9cbiAgICBNb3VzZUNvbnN0cmFpbnQuX3RyaWdnZXJFdmVudHMgPSBmdW5jdGlvbihtb3VzZUNvbnN0cmFpbnQpIHtcbiAgICAgICAgdmFyIG1vdXNlID0gbW91c2VDb25zdHJhaW50Lm1vdXNlLFxuICAgICAgICAgICAgbW91c2VFdmVudHMgPSBtb3VzZS5zb3VyY2VFdmVudHM7XG5cbiAgICAgICAgaWYgKG1vdXNlRXZlbnRzLm1vdXNlbW92ZSlcbiAgICAgICAgICAgIEV2ZW50cy50cmlnZ2VyKG1vdXNlQ29uc3RyYWludCwgJ21vdXNlbW92ZScsIHsgbW91c2U6IG1vdXNlIH0pO1xuXG4gICAgICAgIGlmIChtb3VzZUV2ZW50cy5tb3VzZWRvd24pXG4gICAgICAgICAgICBFdmVudHMudHJpZ2dlcihtb3VzZUNvbnN0cmFpbnQsICdtb3VzZWRvd24nLCB7IG1vdXNlOiBtb3VzZSB9KTtcblxuICAgICAgICBpZiAobW91c2VFdmVudHMubW91c2V1cClcbiAgICAgICAgICAgIEV2ZW50cy50cmlnZ2VyKG1vdXNlQ29uc3RyYWludCwgJ21vdXNldXAnLCB7IG1vdXNlOiBtb3VzZSB9KTtcblxuICAgICAgICAvLyByZXNldCB0aGUgbW91c2Ugc3RhdGUgcmVhZHkgZm9yIHRoZSBuZXh0IHN0ZXBcbiAgICAgICAgTW91c2UuY2xlYXJTb3VyY2VFdmVudHMobW91c2UpO1xuICAgIH07XG5cbiAgICAvKlxuICAgICpcbiAgICAqICBFdmVudHMgRG9jdW1lbnRhdGlvblxuICAgICpcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCB3aGVuIHRoZSBtb3VzZSBoYXMgbW92ZWQgKG9yIGEgdG91Y2ggbW92ZXMpIGR1cmluZyB0aGUgbGFzdCBzdGVwXG4gICAgKlxuICAgICogQGV2ZW50IG1vdXNlbW92ZVxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHttb3VzZX0gZXZlbnQubW91c2UgVGhlIGVuZ2luZSdzIG1vdXNlIGluc3RhbmNlXG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgd2hlbiB0aGUgbW91c2UgaXMgZG93biAob3IgYSB0b3VjaCBoYXMgc3RhcnRlZCkgZHVyaW5nIHRoZSBsYXN0IHN0ZXBcbiAgICAqXG4gICAgKiBAZXZlbnQgbW91c2Vkb3duXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge21vdXNlfSBldmVudC5tb3VzZSBUaGUgZW5naW5lJ3MgbW91c2UgaW5zdGFuY2VcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCB3aGVuIHRoZSBtb3VzZSBpcyB1cCAob3IgYSB0b3VjaCBoYXMgZW5kZWQpIGR1cmluZyB0aGUgbGFzdCBzdGVwXG4gICAgKlxuICAgICogQGV2ZW50IG1vdXNldXBcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bW91c2V9IGV2ZW50Lm1vdXNlIFRoZSBlbmdpbmUncyBtb3VzZSBpbnN0YW5jZVxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIHdoZW4gdGhlIHVzZXIgc3RhcnRzIGRyYWdnaW5nIGEgYm9keVxuICAgICpcbiAgICAqIEBldmVudCBzdGFydGRyYWdcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bW91c2V9IGV2ZW50Lm1vdXNlIFRoZSBlbmdpbmUncyBtb3VzZSBpbnN0YW5jZVxuICAgICogQHBhcmFtIHtib2R5fSBldmVudC5ib2R5IFRoZSBib2R5IGJlaW5nIGRyYWdnZWRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCB3aGVuIHRoZSB1c2VyIGVuZHMgZHJhZ2dpbmcgYSBib2R5XG4gICAgKlxuICAgICogQGV2ZW50IGVuZGRyYWdcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bW91c2V9IGV2ZW50Lm1vdXNlIFRoZSBlbmdpbmUncyBtb3VzZSBpbnN0YW5jZVxuICAgICogQHBhcmFtIHtib2R5fSBldmVudC5ib2R5IFRoZSBib2R5IHRoYXQgaGFzIHN0b3BwZWQgYmVpbmcgZHJhZ2dlZFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKlxuICAgICpcbiAgICAqICBQcm9wZXJ0aWVzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYFN0cmluZ2AgZGVub3RpbmcgdGhlIHR5cGUgb2Ygb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHR5cGVcbiAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgKiBAZGVmYXVsdCBcImNvbnN0cmFpbnRcIlxuICAgICAqIEByZWFkT25seVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIGBNb3VzZWAgaW5zdGFuY2UgaW4gdXNlLiBJZiBub3Qgc3VwcGxpZWQgaW4gYE1vdXNlQ29uc3RyYWludC5jcmVhdGVgLCBvbmUgd2lsbCBiZSBjcmVhdGVkLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IG1vdXNlXG4gICAgICogQHR5cGUgbW91c2VcbiAgICAgKiBAZGVmYXVsdCBtb3VzZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIGBCb2R5YCB0aGF0IGlzIGN1cnJlbnRseSBiZWluZyBtb3ZlZCBieSB0aGUgdXNlciwgb3IgYG51bGxgIGlmIG5vIGJvZHkuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgYm9keVxuICAgICAqIEB0eXBlIGJvZHlcbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgYENvbnN0cmFpbnRgIG9iamVjdCB0aGF0IGlzIHVzZWQgdG8gbW92ZSB0aGUgYm9keSBkdXJpbmcgaW50ZXJhY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgY29uc3RyYWludFxuICAgICAqIEB0eXBlIGNvbnN0cmFpbnRcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEFuIGBPYmplY3RgIHRoYXQgc3BlY2lmaWVzIHRoZSBjb2xsaXNpb24gZmlsdGVyIHByb3BlcnRpZXMuXG4gICAgICogVGhlIGNvbGxpc2lvbiBmaWx0ZXIgYWxsb3dzIHRoZSB1c2VyIHRvIGRlZmluZSB3aGljaCB0eXBlcyBvZiBib2R5IHRoaXMgbW91c2UgY29uc3RyYWludCBjYW4gaW50ZXJhY3Qgd2l0aC5cbiAgICAgKiBTZWUgYGJvZHkuY29sbGlzaW9uRmlsdGVyYCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBjb2xsaXNpb25GaWx0ZXJcbiAgICAgKiBAdHlwZSBvYmplY3RcbiAgICAgKi9cblxufSkoKTtcblxuXG4vKioqLyB9KSxcbi8qIDI1ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cbi8qKlxuKiBUaGUgYE1hdHRlci5RdWVyeWAgbW9kdWxlIGNvbnRhaW5zIG1ldGhvZHMgZm9yIHBlcmZvcm1pbmcgY29sbGlzaW9uIHF1ZXJpZXMuXG4qXG4qIFNlZSB0aGUgaW5jbHVkZWQgdXNhZ2UgW2V4YW1wbGVzXShodHRwczovL2dpdGh1Yi5jb20vbGlhYnJ1L21hdHRlci1qcy90cmVlL21hc3Rlci9leGFtcGxlcykuXG4qXG4qIEBjbGFzcyBRdWVyeVxuKi9cblxudmFyIFF1ZXJ5ID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gUXVlcnk7XG5cbnZhciBWZWN0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xudmFyIENvbGxpc2lvbiA9IF9fd2VicGFja19yZXF1aXJlX18oOCk7XG52YXIgQm91bmRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcbnZhciBCb2RpZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKTtcbnZhciBWZXJ0aWNlcyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBsaXN0IG9mIGNvbGxpc2lvbnMgYmV0d2VlbiBgYm9keWAgYW5kIGBib2RpZXNgLlxuICAgICAqIEBtZXRob2QgY29sbGlkZXNcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHJldHVybiB7Y29sbGlzaW9uW119IENvbGxpc2lvbnNcbiAgICAgKi9cbiAgICBRdWVyeS5jb2xsaWRlcyA9IGZ1bmN0aW9uKGJvZHksIGJvZGllcykge1xuICAgICAgICB2YXIgY29sbGlzaW9ucyA9IFtdLFxuICAgICAgICAgICAgYm9kaWVzTGVuZ3RoID0gYm9kaWVzLmxlbmd0aCxcbiAgICAgICAgICAgIGJvdW5kcyA9IGJvZHkuYm91bmRzLFxuICAgICAgICAgICAgY29sbGlkZXMgPSBDb2xsaXNpb24uY29sbGlkZXMsXG4gICAgICAgICAgICBvdmVybGFwcyA9IEJvdW5kcy5vdmVybGFwcztcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllc0xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keUEgPSBib2RpZXNbaV0sXG4gICAgICAgICAgICAgICAgcGFydHNBTGVuZ3RoID0gYm9keUEucGFydHMubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHBhcnRzQVN0YXJ0ID0gcGFydHNBTGVuZ3RoID09PSAxID8gMCA6IDE7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChvdmVybGFwcyhib2R5QS5ib3VuZHMsIGJvdW5kcykpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gcGFydHNBU3RhcnQ7IGogPCBwYXJ0c0FMZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydCA9IGJvZHlBLnBhcnRzW2pdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvdmVybGFwcyhwYXJ0LmJvdW5kcywgYm91bmRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbGxpc2lvbiA9IGNvbGxpZGVzKHBhcnQsIGJvZHkpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGlzaW9uKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9ucy5wdXNoKGNvbGxpc2lvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29sbGlzaW9ucztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYSByYXkgc2VnbWVudCBhZ2FpbnN0IGEgc2V0IG9mIGJvZGllcyBhbmQgcmV0dXJucyBhbGwgY29sbGlzaW9ucywgcmF5IHdpZHRoIGlzIG9wdGlvbmFsLiBJbnRlcnNlY3Rpb24gcG9pbnRzIGFyZSBub3QgcHJvdmlkZWQuXG4gICAgICogQG1ldGhvZCByYXlcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHN0YXJ0UG9pbnRcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gZW5kUG9pbnRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JheVdpZHRoXVxuICAgICAqIEByZXR1cm4ge2NvbGxpc2lvbltdfSBDb2xsaXNpb25zXG4gICAgICovXG4gICAgUXVlcnkucmF5ID0gZnVuY3Rpb24oYm9kaWVzLCBzdGFydFBvaW50LCBlbmRQb2ludCwgcmF5V2lkdGgpIHtcbiAgICAgICAgcmF5V2lkdGggPSByYXlXaWR0aCB8fCAxZS0xMDA7XG5cbiAgICAgICAgdmFyIHJheUFuZ2xlID0gVmVjdG9yLmFuZ2xlKHN0YXJ0UG9pbnQsIGVuZFBvaW50KSxcbiAgICAgICAgICAgIHJheUxlbmd0aCA9IFZlY3Rvci5tYWduaXR1ZGUoVmVjdG9yLnN1YihzdGFydFBvaW50LCBlbmRQb2ludCkpLFxuICAgICAgICAgICAgcmF5WCA9IChlbmRQb2ludC54ICsgc3RhcnRQb2ludC54KSAqIDAuNSxcbiAgICAgICAgICAgIHJheVkgPSAoZW5kUG9pbnQueSArIHN0YXJ0UG9pbnQueSkgKiAwLjUsXG4gICAgICAgICAgICByYXkgPSBCb2RpZXMucmVjdGFuZ2xlKHJheVgsIHJheVksIHJheUxlbmd0aCwgcmF5V2lkdGgsIHsgYW5nbGU6IHJheUFuZ2xlIH0pLFxuICAgICAgICAgICAgY29sbGlzaW9ucyA9IFF1ZXJ5LmNvbGxpZGVzKHJheSwgYm9kaWVzKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbGxpc2lvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBjb2xsaXNpb24gPSBjb2xsaXNpb25zW2ldO1xuICAgICAgICAgICAgY29sbGlzaW9uLmJvZHkgPSBjb2xsaXNpb24uYm9keUIgPSBjb2xsaXNpb24uYm9keUE7ICAgICAgICAgICAgXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29sbGlzaW9ucztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbGwgYm9kaWVzIHdob3NlIGJvdW5kcyBhcmUgaW5zaWRlIChvciBvdXRzaWRlIGlmIHNldCkgdGhlIGdpdmVuIHNldCBvZiBib3VuZHMsIGZyb20gdGhlIGdpdmVuIHNldCBvZiBib2RpZXMuXG4gICAgICogQG1ldGhvZCByZWdpb25cbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHtib3VuZHN9IGJvdW5kc1xuICAgICAqIEBwYXJhbSB7Ym9vbH0gW291dHNpZGU9ZmFsc2VdXG4gICAgICogQHJldHVybiB7Ym9keVtdfSBUaGUgYm9kaWVzIG1hdGNoaW5nIHRoZSBxdWVyeVxuICAgICAqL1xuICAgIFF1ZXJ5LnJlZ2lvbiA9IGZ1bmN0aW9uKGJvZGllcywgYm91bmRzLCBvdXRzaWRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV0sXG4gICAgICAgICAgICAgICAgb3ZlcmxhcHMgPSBCb3VuZHMub3ZlcmxhcHMoYm9keS5ib3VuZHMsIGJvdW5kcyk7XG4gICAgICAgICAgICBpZiAoKG92ZXJsYXBzICYmICFvdXRzaWRlKSB8fCAoIW92ZXJsYXBzICYmIG91dHNpZGUpKVxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGJvZHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhbGwgYm9kaWVzIHdob3NlIHZlcnRpY2VzIGNvbnRhaW4gdGhlIGdpdmVuIHBvaW50LCBmcm9tIHRoZSBnaXZlbiBzZXQgb2YgYm9kaWVzLlxuICAgICAqIEBtZXRob2QgcG9pbnRcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHt2ZWN0b3J9IHBvaW50XG4gICAgICogQHJldHVybiB7Ym9keVtdfSBUaGUgYm9kaWVzIG1hdGNoaW5nIHRoZSBxdWVyeVxuICAgICAqL1xuICAgIFF1ZXJ5LnBvaW50ID0gZnVuY3Rpb24oYm9kaWVzLCBwb2ludCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gW107XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBib2R5ID0gYm9kaWVzW2ldO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoQm91bmRzLmNvbnRhaW5zKGJvZHkuYm91bmRzLCBwb2ludCkpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gYm9keS5wYXJ0cy5sZW5ndGggPT09IDEgPyAwIDogMTsgaiA8IGJvZHkucGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnQgPSBib2R5LnBhcnRzW2pdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChCb3VuZHMuY29udGFpbnMocGFydC5ib3VuZHMsIHBvaW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgJiYgVmVydGljZXMuY29udGFpbnMocGFydC52ZXJ0aWNlcywgcG9pbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaChib2R5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG59KSgpO1xuXG5cbi8qKiovIH0pLFxuLyogMjYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyoqXG4qIFRoZSBgTWF0dGVyLlJlbmRlcmAgbW9kdWxlIGlzIGEgc2ltcGxlIGNhbnZhcyBiYXNlZCByZW5kZXJlciBmb3IgdmlzdWFsaXNpbmcgaW5zdGFuY2VzIG9mIGBNYXR0ZXIuRW5naW5lYC5cbiogSXQgaXMgaW50ZW5kZWQgZm9yIGRldmVsb3BtZW50IGFuZCBkZWJ1Z2dpbmcgcHVycG9zZXMsIGJ1dCBtYXkgYWxzbyBiZSBzdWl0YWJsZSBmb3Igc2ltcGxlIGdhbWVzLlxuKiBJdCBpbmNsdWRlcyBhIG51bWJlciBvZiBkcmF3aW5nIG9wdGlvbnMgaW5jbHVkaW5nIHdpcmVmcmFtZSwgdmVjdG9yIHdpdGggc3VwcG9ydCBmb3Igc3ByaXRlcyBhbmQgdmlld3BvcnRzLlxuKlxuKiBAY2xhc3MgUmVuZGVyXG4qL1xuXG52YXIgUmVuZGVyID0ge307XG5cbm1vZHVsZS5leHBvcnRzID0gUmVuZGVyO1xuXG52YXIgQm9keSA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG52YXIgQ29tbW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcbnZhciBDb21wb3NpdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYpO1xudmFyIEJvdW5kcyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgRXZlbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcbnZhciBWZWN0b3IgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xudmFyIE1vdXNlID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNCk7XG5cbihmdW5jdGlvbigpIHtcblxuICAgIHZhciBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lLFxuICAgICAgICBfY2FuY2VsQW5pbWF0aW9uRnJhbWU7XG5cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgX3JlcXVlc3RBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBmdW5jdGlvbihjYWxsYmFjayl7IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyBjYWxsYmFjayhDb21tb24ubm93KCkpOyB9LCAxMDAwIC8gNjApOyB9O1xuXG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgd2luZG93LndlYmtpdENhbmNlbEFuaW1hdGlvbkZyYW1lIHx8IHdpbmRvdy5tc0NhbmNlbEFuaW1hdGlvbkZyYW1lO1xuICAgIH1cblxuICAgIFJlbmRlci5fZ29vZEZwcyA9IDMwO1xuICAgIFJlbmRlci5fZ29vZERlbHRhID0gMTAwMCAvIDYwO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByZW5kZXJlci4gVGhlIG9wdGlvbnMgcGFyYW1ldGVyIGlzIGFuIG9iamVjdCB0aGF0IHNwZWNpZmllcyBhbnkgcHJvcGVydGllcyB5b3Ugd2lzaCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdHMuXG4gICAgICogQWxsIHByb3BlcnRpZXMgaGF2ZSBkZWZhdWx0IHZhbHVlcywgYW5kIG1hbnkgYXJlIHByZS1jYWxjdWxhdGVkIGF1dG9tYXRpY2FsbHkgYmFzZWQgb24gb3RoZXIgcHJvcGVydGllcy5cbiAgICAgKiBTZWUgdGhlIHByb3BlcnRpZXMgc2VjdGlvbiBiZWxvdyBmb3IgZGV0YWlsZWQgaW5mb3JtYXRpb24gb24gd2hhdCB5b3UgY2FuIHBhc3MgdmlhIHRoZSBgb3B0aW9uc2Agb2JqZWN0LlxuICAgICAqIEBtZXRob2QgY3JlYXRlXG4gICAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgICAqIEByZXR1cm4ge3JlbmRlcn0gQSBuZXcgcmVuZGVyZXJcbiAgICAgKi9cbiAgICBSZW5kZXIuY3JlYXRlID0gZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICB2YXIgZGVmYXVsdHMgPSB7XG4gICAgICAgICAgICBlbmdpbmU6IG51bGwsXG4gICAgICAgICAgICBlbGVtZW50OiBudWxsLFxuICAgICAgICAgICAgY2FudmFzOiBudWxsLFxuICAgICAgICAgICAgbW91c2U6IG51bGwsXG4gICAgICAgICAgICBmcmFtZVJlcXVlc3RJZDogbnVsbCxcbiAgICAgICAgICAgIHRpbWluZzoge1xuICAgICAgICAgICAgICAgIGhpc3RvcnlTaXplOiA2MCxcbiAgICAgICAgICAgICAgICBkZWx0YTogMCxcbiAgICAgICAgICAgICAgICBkZWx0YUhpc3Rvcnk6IFtdLFxuICAgICAgICAgICAgICAgIGxhc3RUaW1lOiAwLFxuICAgICAgICAgICAgICAgIGxhc3RUaW1lc3RhbXA6IDAsXG4gICAgICAgICAgICAgICAgbGFzdEVsYXBzZWQ6IDAsXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wRWxhcHNlZDogMCxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXBFbGFwc2VkSGlzdG9yeTogW10sXG4gICAgICAgICAgICAgICAgZW5naW5lRGVsdGFIaXN0b3J5OiBbXSxcbiAgICAgICAgICAgICAgICBlbmdpbmVFbGFwc2VkSGlzdG9yeTogW10sXG4gICAgICAgICAgICAgICAgZWxhcHNlZEhpc3Rvcnk6IFtdXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgIHdpZHRoOiA4MDAsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiA2MDAsXG4gICAgICAgICAgICAgICAgcGl4ZWxSYXRpbzogMSxcbiAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kOiAnIzE0MTUxZicsXG4gICAgICAgICAgICAgICAgd2lyZWZyYW1lQmFja2dyb3VuZDogJyMxNDE1MWYnLFxuICAgICAgICAgICAgICAgIGhhc0JvdW5kczogISFvcHRpb25zLmJvdW5kcyxcbiAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgIHdpcmVmcmFtZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgc2hvd1NsZWVwaW5nOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNob3dEZWJ1ZzogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd1N0YXRzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBzaG93UGVyZm9ybWFuY2U6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dCb3VuZHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dWZWxvY2l0eTogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0NvbGxpc2lvbnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dTZXBhcmF0aW9uczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0F4ZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dQb3NpdGlvbnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dBbmdsZUluZGljYXRvcjogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0lkczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd1ZlcnRleE51bWJlcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dDb252ZXhIdWxsczogZmFsc2UsXG4gICAgICAgICAgICAgICAgc2hvd0ludGVybmFsRWRnZXM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHNob3dNb3VzZVBvc2l0aW9uOiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciByZW5kZXIgPSBDb21tb24uZXh0ZW5kKGRlZmF1bHRzLCBvcHRpb25zKTtcblxuICAgICAgICBpZiAocmVuZGVyLmNhbnZhcykge1xuICAgICAgICAgICAgcmVuZGVyLmNhbnZhcy53aWR0aCA9IHJlbmRlci5vcHRpb25zLndpZHRoIHx8IHJlbmRlci5jYW52YXMud2lkdGg7XG4gICAgICAgICAgICByZW5kZXIuY2FudmFzLmhlaWdodCA9IHJlbmRlci5vcHRpb25zLmhlaWdodCB8fCByZW5kZXIuY2FudmFzLmhlaWdodDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlbmRlci5tb3VzZSA9IG9wdGlvbnMubW91c2U7XG4gICAgICAgIHJlbmRlci5lbmdpbmUgPSBvcHRpb25zLmVuZ2luZTtcbiAgICAgICAgcmVuZGVyLmNhbnZhcyA9IHJlbmRlci5jYW52YXMgfHwgX2NyZWF0ZUNhbnZhcyhyZW5kZXIub3B0aW9ucy53aWR0aCwgcmVuZGVyLm9wdGlvbnMuaGVpZ2h0KTtcbiAgICAgICAgcmVuZGVyLmNvbnRleHQgPSByZW5kZXIuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgICAgIHJlbmRlci50ZXh0dXJlcyA9IHt9O1xuXG4gICAgICAgIHJlbmRlci5ib3VuZHMgPSByZW5kZXIuYm91bmRzIHx8IHtcbiAgICAgICAgICAgIG1pbjoge1xuICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgeTogMFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1heDoge1xuICAgICAgICAgICAgICAgIHg6IHJlbmRlci5jYW52YXMud2lkdGgsXG4gICAgICAgICAgICAgICAgeTogcmVuZGVyLmNhbnZhcy5oZWlnaHRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICAvLyBmb3IgdGVtcG9yYXJ5IGJhY2sgY29tcGF0aWJpbGl0eSBvbmx5XG4gICAgICAgIHJlbmRlci5jb250cm9sbGVyID0gUmVuZGVyO1xuICAgICAgICByZW5kZXIub3B0aW9ucy5zaG93QnJvYWRwaGFzZSA9IGZhbHNlO1xuXG4gICAgICAgIGlmIChyZW5kZXIub3B0aW9ucy5waXhlbFJhdGlvICE9PSAxKSB7XG4gICAgICAgICAgICBSZW5kZXIuc2V0UGl4ZWxSYXRpbyhyZW5kZXIsIHJlbmRlci5vcHRpb25zLnBpeGVsUmF0aW8pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKENvbW1vbi5pc0VsZW1lbnQocmVuZGVyLmVsZW1lbnQpKSB7XG4gICAgICAgICAgICByZW5kZXIuZWxlbWVudC5hcHBlbmRDaGlsZChyZW5kZXIuY2FudmFzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZW5kZXI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnRpbnVvdXNseSB1cGRhdGVzIHRoZSByZW5kZXIgY2FudmFzIG9uIHRoZSBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCBldmVudC5cbiAgICAgKiBAbWV0aG9kIHJ1blxuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKi9cbiAgICBSZW5kZXIucnVuID0gZnVuY3Rpb24ocmVuZGVyKSB7XG4gICAgICAgIChmdW5jdGlvbiBsb29wKHRpbWUpe1xuICAgICAgICAgICAgcmVuZGVyLmZyYW1lUmVxdWVzdElkID0gX3JlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgX3VwZGF0ZVRpbWluZyhyZW5kZXIsIHRpbWUpO1xuXG4gICAgICAgICAgICBSZW5kZXIud29ybGQocmVuZGVyLCB0aW1lKTtcblxuICAgICAgICAgICAgaWYgKHJlbmRlci5vcHRpb25zLnNob3dTdGF0cyB8fCByZW5kZXIub3B0aW9ucy5zaG93RGVidWcpIHtcbiAgICAgICAgICAgICAgICBSZW5kZXIuc3RhdHMocmVuZGVyLCByZW5kZXIuY29udGV4dCwgdGltZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZW5kZXIub3B0aW9ucy5zaG93UGVyZm9ybWFuY2UgfHwgcmVuZGVyLm9wdGlvbnMuc2hvd0RlYnVnKSB7XG4gICAgICAgICAgICAgICAgUmVuZGVyLnBlcmZvcm1hbmNlKHJlbmRlciwgcmVuZGVyLmNvbnRleHQsIHRpbWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFbmRzIGV4ZWN1dGlvbiBvZiBgUmVuZGVyLnJ1bmAgb24gdGhlIGdpdmVuIGByZW5kZXJgLCBieSBjYW5jZWxpbmcgdGhlIGFuaW1hdGlvbiBmcmFtZSByZXF1ZXN0IGV2ZW50IGxvb3AuXG4gICAgICogQG1ldGhvZCBzdG9wXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqL1xuICAgIFJlbmRlci5zdG9wID0gZnVuY3Rpb24ocmVuZGVyKSB7XG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZShyZW5kZXIuZnJhbWVSZXF1ZXN0SWQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwaXhlbCByYXRpbyBvZiB0aGUgcmVuZGVyZXIgYW5kIHVwZGF0ZXMgdGhlIGNhbnZhcy5cbiAgICAgKiBUbyBhdXRvbWF0aWNhbGx5IGRldGVjdCB0aGUgY29ycmVjdCByYXRpbywgcGFzcyB0aGUgc3RyaW5nIGAnYXV0bydgIGZvciBgcGl4ZWxSYXRpb2AuXG4gICAgICogQG1ldGhvZCBzZXRQaXhlbFJhdGlvXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBwaXhlbFJhdGlvXG4gICAgICovXG4gICAgUmVuZGVyLnNldFBpeGVsUmF0aW8gPSBmdW5jdGlvbihyZW5kZXIsIHBpeGVsUmF0aW8pIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSByZW5kZXIub3B0aW9ucyxcbiAgICAgICAgICAgIGNhbnZhcyA9IHJlbmRlci5jYW52YXM7XG5cbiAgICAgICAgaWYgKHBpeGVsUmF0aW8gPT09ICdhdXRvJykge1xuICAgICAgICAgICAgcGl4ZWxSYXRpbyA9IF9nZXRQaXhlbFJhdGlvKGNhbnZhcyk7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zLnBpeGVsUmF0aW8gPSBwaXhlbFJhdGlvO1xuICAgICAgICBjYW52YXMuc2V0QXR0cmlidXRlKCdkYXRhLXBpeGVsLXJhdGlvJywgcGl4ZWxSYXRpbyk7XG4gICAgICAgIGNhbnZhcy53aWR0aCA9IG9wdGlvbnMud2lkdGggKiBwaXhlbFJhdGlvO1xuICAgICAgICBjYW52YXMuaGVpZ2h0ID0gb3B0aW9ucy5oZWlnaHQgKiBwaXhlbFJhdGlvO1xuICAgICAgICBjYW52YXMuc3R5bGUud2lkdGggPSBvcHRpb25zLndpZHRoICsgJ3B4JztcbiAgICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IG9wdGlvbnMuaGVpZ2h0ICsgJ3B4JztcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUG9zaXRpb25zIGFuZCBzaXplcyB0aGUgdmlld3BvcnQgYXJvdW5kIHRoZSBnaXZlbiBvYmplY3QgYm91bmRzLlxuICAgICAqIE9iamVjdHMgbXVzdCBoYXZlIGF0IGxlYXN0IG9uZSBvZiB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gICAgICogLSBgb2JqZWN0LmJvdW5kc2BcbiAgICAgKiAtIGBvYmplY3QucG9zaXRpb25gXG4gICAgICogLSBgb2JqZWN0Lm1pbmAgYW5kIGBvYmplY3QubWF4YFxuICAgICAqIC0gYG9iamVjdC54YCBhbmQgYG9iamVjdC55YFxuICAgICAqIEBtZXRob2QgbG9va0F0XG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7b2JqZWN0W119IG9iamVjdHNcbiAgICAgKiBAcGFyYW0ge3ZlY3Rvcn0gW3BhZGRpbmddXG4gICAgICogQHBhcmFtIHtib29sfSBbY2VudGVyPXRydWVdXG4gICAgICovXG4gICAgUmVuZGVyLmxvb2tBdCA9IGZ1bmN0aW9uKHJlbmRlciwgb2JqZWN0cywgcGFkZGluZywgY2VudGVyKSB7XG4gICAgICAgIGNlbnRlciA9IHR5cGVvZiBjZW50ZXIgIT09ICd1bmRlZmluZWQnID8gY2VudGVyIDogdHJ1ZTtcbiAgICAgICAgb2JqZWN0cyA9IENvbW1vbi5pc0FycmF5KG9iamVjdHMpID8gb2JqZWN0cyA6IFtvYmplY3RzXTtcbiAgICAgICAgcGFkZGluZyA9IHBhZGRpbmcgfHwge1xuICAgICAgICAgICAgeDogMCxcbiAgICAgICAgICAgIHk6IDBcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBmaW5kIGJvdW5kcyBvZiBhbGwgb2JqZWN0c1xuICAgICAgICB2YXIgYm91bmRzID0ge1xuICAgICAgICAgICAgbWluOiB7IHg6IEluZmluaXR5LCB5OiBJbmZpbml0eSB9LFxuICAgICAgICAgICAgbWF4OiB7IHg6IC1JbmZpbml0eSwgeTogLUluZmluaXR5IH1cbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iamVjdHMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSBvYmplY3RzW2ldLFxuICAgICAgICAgICAgICAgIG1pbiA9IG9iamVjdC5ib3VuZHMgPyBvYmplY3QuYm91bmRzLm1pbiA6IChvYmplY3QubWluIHx8IG9iamVjdC5wb3NpdGlvbiB8fCBvYmplY3QpLFxuICAgICAgICAgICAgICAgIG1heCA9IG9iamVjdC5ib3VuZHMgPyBvYmplY3QuYm91bmRzLm1heCA6IChvYmplY3QubWF4IHx8IG9iamVjdC5wb3NpdGlvbiB8fCBvYmplY3QpO1xuXG4gICAgICAgICAgICBpZiAobWluICYmIG1heCkge1xuICAgICAgICAgICAgICAgIGlmIChtaW4ueCA8IGJvdW5kcy5taW4ueClcbiAgICAgICAgICAgICAgICAgICAgYm91bmRzLm1pbi54ID0gbWluLng7XG5cbiAgICAgICAgICAgICAgICBpZiAobWF4LnggPiBib3VuZHMubWF4LngpXG4gICAgICAgICAgICAgICAgICAgIGJvdW5kcy5tYXgueCA9IG1heC54O1xuXG4gICAgICAgICAgICAgICAgaWYgKG1pbi55IDwgYm91bmRzLm1pbi55KVxuICAgICAgICAgICAgICAgICAgICBib3VuZHMubWluLnkgPSBtaW4ueTtcblxuICAgICAgICAgICAgICAgIGlmIChtYXgueSA+IGJvdW5kcy5tYXgueSlcbiAgICAgICAgICAgICAgICAgICAgYm91bmRzLm1heC55ID0gbWF4Lnk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmaW5kIHJhdGlvc1xuICAgICAgICB2YXIgd2lkdGggPSAoYm91bmRzLm1heC54IC0gYm91bmRzLm1pbi54KSArIDIgKiBwYWRkaW5nLngsXG4gICAgICAgICAgICBoZWlnaHQgPSAoYm91bmRzLm1heC55IC0gYm91bmRzLm1pbi55KSArIDIgKiBwYWRkaW5nLnksXG4gICAgICAgICAgICB2aWV3SGVpZ2h0ID0gcmVuZGVyLmNhbnZhcy5oZWlnaHQsXG4gICAgICAgICAgICB2aWV3V2lkdGggPSByZW5kZXIuY2FudmFzLndpZHRoLFxuICAgICAgICAgICAgb3V0ZXJSYXRpbyA9IHZpZXdXaWR0aCAvIHZpZXdIZWlnaHQsXG4gICAgICAgICAgICBpbm5lclJhdGlvID0gd2lkdGggLyBoZWlnaHQsXG4gICAgICAgICAgICBzY2FsZVggPSAxLFxuICAgICAgICAgICAgc2NhbGVZID0gMTtcblxuICAgICAgICAvLyBmaW5kIHNjYWxlIGZhY3RvclxuICAgICAgICBpZiAoaW5uZXJSYXRpbyA+IG91dGVyUmF0aW8pIHtcbiAgICAgICAgICAgIHNjYWxlWSA9IGlubmVyUmF0aW8gLyBvdXRlclJhdGlvO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2NhbGVYID0gb3V0ZXJSYXRpbyAvIGlubmVyUmF0aW87XG4gICAgICAgIH1cblxuICAgICAgICAvLyBlbmFibGUgYm91bmRzXG4gICAgICAgIHJlbmRlci5vcHRpb25zLmhhc0JvdW5kcyA9IHRydWU7XG5cbiAgICAgICAgLy8gcG9zaXRpb24gYW5kIHNpemVcbiAgICAgICAgcmVuZGVyLmJvdW5kcy5taW4ueCA9IGJvdW5kcy5taW4ueDtcbiAgICAgICAgcmVuZGVyLmJvdW5kcy5tYXgueCA9IGJvdW5kcy5taW4ueCArIHdpZHRoICogc2NhbGVYO1xuICAgICAgICByZW5kZXIuYm91bmRzLm1pbi55ID0gYm91bmRzLm1pbi55O1xuICAgICAgICByZW5kZXIuYm91bmRzLm1heC55ID0gYm91bmRzLm1pbi55ICsgaGVpZ2h0ICogc2NhbGVZO1xuXG4gICAgICAgIC8vIGNlbnRlclxuICAgICAgICBpZiAoY2VudGVyKSB7XG4gICAgICAgICAgICByZW5kZXIuYm91bmRzLm1pbi54ICs9IHdpZHRoICogMC41IC0gKHdpZHRoICogc2NhbGVYKSAqIDAuNTtcbiAgICAgICAgICAgIHJlbmRlci5ib3VuZHMubWF4LnggKz0gd2lkdGggKiAwLjUgLSAod2lkdGggKiBzY2FsZVgpICogMC41O1xuICAgICAgICAgICAgcmVuZGVyLmJvdW5kcy5taW4ueSArPSBoZWlnaHQgKiAwLjUgLSAoaGVpZ2h0ICogc2NhbGVZKSAqIDAuNTtcbiAgICAgICAgICAgIHJlbmRlci5ib3VuZHMubWF4LnkgKz0gaGVpZ2h0ICogMC41IC0gKGhlaWdodCAqIHNjYWxlWSkgKiAwLjU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBwYWRkaW5nXG4gICAgICAgIHJlbmRlci5ib3VuZHMubWluLnggLT0gcGFkZGluZy54O1xuICAgICAgICByZW5kZXIuYm91bmRzLm1heC54IC09IHBhZGRpbmcueDtcbiAgICAgICAgcmVuZGVyLmJvdW5kcy5taW4ueSAtPSBwYWRkaW5nLnk7XG4gICAgICAgIHJlbmRlci5ib3VuZHMubWF4LnkgLT0gcGFkZGluZy55O1xuXG4gICAgICAgIC8vIHVwZGF0ZSBtb3VzZVxuICAgICAgICBpZiAocmVuZGVyLm1vdXNlKSB7XG4gICAgICAgICAgICBNb3VzZS5zZXRTY2FsZShyZW5kZXIubW91c2UsIHtcbiAgICAgICAgICAgICAgICB4OiAocmVuZGVyLmJvdW5kcy5tYXgueCAtIHJlbmRlci5ib3VuZHMubWluLngpIC8gcmVuZGVyLmNhbnZhcy53aWR0aCxcbiAgICAgICAgICAgICAgICB5OiAocmVuZGVyLmJvdW5kcy5tYXgueSAtIHJlbmRlci5ib3VuZHMubWluLnkpIC8gcmVuZGVyLmNhbnZhcy5oZWlnaHRcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBNb3VzZS5zZXRPZmZzZXQocmVuZGVyLm1vdXNlLCByZW5kZXIuYm91bmRzLm1pbik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyB2aWV3cG9ydCB0cmFuc2Zvcm1zIGJhc2VkIG9uIGByZW5kZXIuYm91bmRzYCB0byBhIHJlbmRlciBjb250ZXh0LlxuICAgICAqIEBtZXRob2Qgc3RhcnRWaWV3VHJhbnNmb3JtXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqL1xuICAgIFJlbmRlci5zdGFydFZpZXdUcmFuc2Zvcm0gPSBmdW5jdGlvbihyZW5kZXIpIHtcbiAgICAgICAgdmFyIGJvdW5kc1dpZHRoID0gcmVuZGVyLmJvdW5kcy5tYXgueCAtIHJlbmRlci5ib3VuZHMubWluLngsXG4gICAgICAgICAgICBib3VuZHNIZWlnaHQgPSByZW5kZXIuYm91bmRzLm1heC55IC0gcmVuZGVyLmJvdW5kcy5taW4ueSxcbiAgICAgICAgICAgIGJvdW5kc1NjYWxlWCA9IGJvdW5kc1dpZHRoIC8gcmVuZGVyLm9wdGlvbnMud2lkdGgsXG4gICAgICAgICAgICBib3VuZHNTY2FsZVkgPSBib3VuZHNIZWlnaHQgLyByZW5kZXIub3B0aW9ucy5oZWlnaHQ7XG5cbiAgICAgICAgcmVuZGVyLmNvbnRleHQuc2V0VHJhbnNmb3JtKFxuICAgICAgICAgICAgcmVuZGVyLm9wdGlvbnMucGl4ZWxSYXRpbyAvIGJvdW5kc1NjYWxlWCwgMCwgMCwgXG4gICAgICAgICAgICByZW5kZXIub3B0aW9ucy5waXhlbFJhdGlvIC8gYm91bmRzU2NhbGVZLCAwLCAwXG4gICAgICAgICk7XG4gICAgICAgIFxuICAgICAgICByZW5kZXIuY29udGV4dC50cmFuc2xhdGUoLXJlbmRlci5ib3VuZHMubWluLngsIC1yZW5kZXIuYm91bmRzLm1pbi55KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVzZXRzIGFsbCB0cmFuc2Zvcm1zIG9uIHRoZSByZW5kZXIgY29udGV4dC5cbiAgICAgKiBAbWV0aG9kIGVuZFZpZXdUcmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICovXG4gICAgUmVuZGVyLmVuZFZpZXdUcmFuc2Zvcm0gPSBmdW5jdGlvbihyZW5kZXIpIHtcbiAgICAgICAgcmVuZGVyLmNvbnRleHQuc2V0VHJhbnNmb3JtKHJlbmRlci5vcHRpb25zLnBpeGVsUmF0aW8sIDAsIDAsIHJlbmRlci5vcHRpb25zLnBpeGVsUmF0aW8sIDAsIDApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXJzIHRoZSBnaXZlbiBgZW5naW5lYCdzIGBNYXR0ZXIuV29ybGRgIG9iamVjdC5cbiAgICAgKiBUaGlzIGlzIHRoZSBlbnRyeSBwb2ludCBmb3IgYWxsIHJlbmRlcmluZyBhbmQgc2hvdWxkIGJlIGNhbGxlZCBldmVyeSB0aW1lIHRoZSBzY2VuZSBjaGFuZ2VzLlxuICAgICAqIEBtZXRob2Qgd29ybGRcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICovXG4gICAgUmVuZGVyLndvcmxkID0gZnVuY3Rpb24ocmVuZGVyLCB0aW1lKSB7XG4gICAgICAgIHZhciBzdGFydFRpbWUgPSBDb21tb24ubm93KCksXG4gICAgICAgICAgICBlbmdpbmUgPSByZW5kZXIuZW5naW5lLFxuICAgICAgICAgICAgd29ybGQgPSBlbmdpbmUud29ybGQsXG4gICAgICAgICAgICBjYW52YXMgPSByZW5kZXIuY2FudmFzLFxuICAgICAgICAgICAgY29udGV4dCA9IHJlbmRlci5jb250ZXh0LFxuICAgICAgICAgICAgb3B0aW9ucyA9IHJlbmRlci5vcHRpb25zLFxuICAgICAgICAgICAgdGltaW5nID0gcmVuZGVyLnRpbWluZztcblxuICAgICAgICB2YXIgYWxsQm9kaWVzID0gQ29tcG9zaXRlLmFsbEJvZGllcyh3b3JsZCksXG4gICAgICAgICAgICBhbGxDb25zdHJhaW50cyA9IENvbXBvc2l0ZS5hbGxDb25zdHJhaW50cyh3b3JsZCksXG4gICAgICAgICAgICBiYWNrZ3JvdW5kID0gb3B0aW9ucy53aXJlZnJhbWVzID8gb3B0aW9ucy53aXJlZnJhbWVCYWNrZ3JvdW5kIDogb3B0aW9ucy5iYWNrZ3JvdW5kLFxuICAgICAgICAgICAgYm9kaWVzID0gW10sXG4gICAgICAgICAgICBjb25zdHJhaW50cyA9IFtdLFxuICAgICAgICAgICAgaTtcblxuICAgICAgICB2YXIgZXZlbnQgPSB7XG4gICAgICAgICAgICB0aW1lc3RhbXA6IGVuZ2luZS50aW1pbmcudGltZXN0YW1wXG4gICAgICAgIH07XG5cbiAgICAgICAgRXZlbnRzLnRyaWdnZXIocmVuZGVyLCAnYmVmb3JlUmVuZGVyJywgZXZlbnQpO1xuXG4gICAgICAgIC8vIGFwcGx5IGJhY2tncm91bmQgaWYgaXQgaGFzIGNoYW5nZWRcbiAgICAgICAgaWYgKHJlbmRlci5jdXJyZW50QmFja2dyb3VuZCAhPT0gYmFja2dyb3VuZClcbiAgICAgICAgICAgIF9hcHBseUJhY2tncm91bmQocmVuZGVyLCBiYWNrZ3JvdW5kKTtcblxuICAgICAgICAvLyBjbGVhciB0aGUgY2FudmFzIHdpdGggYSB0cmFuc3BhcmVudCBmaWxsLCB0byBhbGxvdyB0aGUgY2FudmFzIGJhY2tncm91bmQgdG8gc2hvd1xuICAgICAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdzb3VyY2UtaW4nO1xuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IFwidHJhbnNwYXJlbnRcIjtcbiAgICAgICAgY29udGV4dC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICBjb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdzb3VyY2Utb3Zlcic7XG5cbiAgICAgICAgLy8gaGFuZGxlIGJvdW5kc1xuICAgICAgICBpZiAob3B0aW9ucy5oYXNCb3VuZHMpIHtcbiAgICAgICAgICAgIC8vIGZpbHRlciBvdXQgYm9kaWVzIHRoYXQgYXJlIG5vdCBpbiB2aWV3XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYWxsQm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJvZHkgPSBhbGxCb2RpZXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKEJvdW5kcy5vdmVybGFwcyhib2R5LmJvdW5kcywgcmVuZGVyLmJvdW5kcykpXG4gICAgICAgICAgICAgICAgICAgIGJvZGllcy5wdXNoKGJvZHkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBmaWx0ZXIgb3V0IGNvbnN0cmFpbnRzIHRoYXQgYXJlIG5vdCBpbiB2aWV3XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYWxsQ29uc3RyYWludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY29uc3RyYWludCA9IGFsbENvbnN0cmFpbnRzW2ldLFxuICAgICAgICAgICAgICAgICAgICBib2R5QSA9IGNvbnN0cmFpbnQuYm9keUEsXG4gICAgICAgICAgICAgICAgICAgIGJvZHlCID0gY29uc3RyYWludC5ib2R5QixcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRBV29ybGQgPSBjb25zdHJhaW50LnBvaW50QSxcbiAgICAgICAgICAgICAgICAgICAgcG9pbnRCV29ybGQgPSBjb25zdHJhaW50LnBvaW50QjtcblxuICAgICAgICAgICAgICAgIGlmIChib2R5QSkgcG9pbnRBV29ybGQgPSBWZWN0b3IuYWRkKGJvZHlBLnBvc2l0aW9uLCBjb25zdHJhaW50LnBvaW50QSk7XG4gICAgICAgICAgICAgICAgaWYgKGJvZHlCKSBwb2ludEJXb3JsZCA9IFZlY3Rvci5hZGQoYm9keUIucG9zaXRpb24sIGNvbnN0cmFpbnQucG9pbnRCKTtcblxuICAgICAgICAgICAgICAgIGlmICghcG9pbnRBV29ybGQgfHwgIXBvaW50QldvcmxkKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIGlmIChCb3VuZHMuY29udGFpbnMocmVuZGVyLmJvdW5kcywgcG9pbnRBV29ybGQpIHx8IEJvdW5kcy5jb250YWlucyhyZW5kZXIuYm91bmRzLCBwb2ludEJXb3JsZCkpXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cmFpbnRzLnB1c2goY29uc3RyYWludCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIHRyYW5zZm9ybSB0aGUgdmlld1xuICAgICAgICAgICAgUmVuZGVyLnN0YXJ0Vmlld1RyYW5zZm9ybShyZW5kZXIpO1xuXG4gICAgICAgICAgICAvLyB1cGRhdGUgbW91c2VcbiAgICAgICAgICAgIGlmIChyZW5kZXIubW91c2UpIHtcbiAgICAgICAgICAgICAgICBNb3VzZS5zZXRTY2FsZShyZW5kZXIubW91c2UsIHtcbiAgICAgICAgICAgICAgICAgICAgeDogKHJlbmRlci5ib3VuZHMubWF4LnggLSByZW5kZXIuYm91bmRzLm1pbi54KSAvIHJlbmRlci5vcHRpb25zLndpZHRoLFxuICAgICAgICAgICAgICAgICAgICB5OiAocmVuZGVyLmJvdW5kcy5tYXgueSAtIHJlbmRlci5ib3VuZHMubWluLnkpIC8gcmVuZGVyLm9wdGlvbnMuaGVpZ2h0XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBNb3VzZS5zZXRPZmZzZXQocmVuZGVyLm1vdXNlLCByZW5kZXIuYm91bmRzLm1pbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdHJhaW50cyA9IGFsbENvbnN0cmFpbnRzO1xuICAgICAgICAgICAgYm9kaWVzID0gYWxsQm9kaWVzO1xuXG4gICAgICAgICAgICBpZiAocmVuZGVyLm9wdGlvbnMucGl4ZWxSYXRpbyAhPT0gMSkge1xuICAgICAgICAgICAgICAgIHJlbmRlci5jb250ZXh0LnNldFRyYW5zZm9ybShyZW5kZXIub3B0aW9ucy5waXhlbFJhdGlvLCAwLCAwLCByZW5kZXIub3B0aW9ucy5waXhlbFJhdGlvLCAwLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghb3B0aW9ucy53aXJlZnJhbWVzIHx8IChlbmdpbmUuZW5hYmxlU2xlZXBpbmcgJiYgb3B0aW9ucy5zaG93U2xlZXBpbmcpKSB7XG4gICAgICAgICAgICAvLyBmdWxseSBmZWF0dXJlZCByZW5kZXJpbmcgb2YgYm9kaWVzXG4gICAgICAgICAgICBSZW5kZXIuYm9kaWVzKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3dDb252ZXhIdWxscylcbiAgICAgICAgICAgICAgICBSZW5kZXIuYm9keUNvbnZleEh1bGxzKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KTtcblxuICAgICAgICAgICAgLy8gb3B0aW1pc2VkIG1ldGhvZCBmb3Igd2lyZWZyYW1lcyBvbmx5XG4gICAgICAgICAgICBSZW5kZXIuYm9keVdpcmVmcmFtZXMocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2hvd0JvdW5kcylcbiAgICAgICAgICAgIFJlbmRlci5ib2R5Qm91bmRzKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zaG93QXhlcyB8fCBvcHRpb25zLnNob3dBbmdsZUluZGljYXRvcilcbiAgICAgICAgICAgIFJlbmRlci5ib2R5QXhlcyhyZW5kZXIsIGJvZGllcywgY29udGV4dCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2hvd1Bvc2l0aW9ucylcbiAgICAgICAgICAgIFJlbmRlci5ib2R5UG9zaXRpb25zKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zaG93VmVsb2NpdHkpXG4gICAgICAgICAgICBSZW5kZXIuYm9keVZlbG9jaXR5KHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zaG93SWRzKVxuICAgICAgICAgICAgUmVuZGVyLmJvZHlJZHMocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnNob3dTZXBhcmF0aW9ucylcbiAgICAgICAgICAgIFJlbmRlci5zZXBhcmF0aW9ucyhyZW5kZXIsIGVuZ2luZS5wYWlycy5saXN0LCBjb250ZXh0KTtcblxuICAgICAgICBpZiAob3B0aW9ucy5zaG93Q29sbGlzaW9ucylcbiAgICAgICAgICAgIFJlbmRlci5jb2xsaXNpb25zKHJlbmRlciwgZW5naW5lLnBhaXJzLmxpc3QsIGNvbnRleHQpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnNob3dWZXJ0ZXhOdW1iZXJzKVxuICAgICAgICAgICAgUmVuZGVyLnZlcnRleE51bWJlcnMocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLnNob3dNb3VzZVBvc2l0aW9uKVxuICAgICAgICAgICAgUmVuZGVyLm1vdXNlUG9zaXRpb24ocmVuZGVyLCByZW5kZXIubW91c2UsIGNvbnRleHQpO1xuXG4gICAgICAgIFJlbmRlci5jb25zdHJhaW50cyhjb25zdHJhaW50cywgY29udGV4dCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzQm91bmRzKSB7XG4gICAgICAgICAgICAvLyByZXZlcnQgdmlldyB0cmFuc2Zvcm1zXG4gICAgICAgICAgICBSZW5kZXIuZW5kVmlld1RyYW5zZm9ybShyZW5kZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgRXZlbnRzLnRyaWdnZXIocmVuZGVyLCAnYWZ0ZXJSZW5kZXInLCBldmVudCk7XG5cbiAgICAgICAgLy8gbG9nIHRoZSB0aW1lIGVsYXBzZWQgY29tcHV0aW5nIHRoaXMgdXBkYXRlXG4gICAgICAgIHRpbWluZy5sYXN0RWxhcHNlZCA9IENvbW1vbi5ub3coKSAtIHN0YXJ0VGltZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyBzdGF0aXN0aWNzIGFib3V0IHRoZSBlbmdpbmUgYW5kIHdvcmxkIHVzZWZ1bCBmb3IgZGVidWdnaW5nLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBzdGF0c1xuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdGltZVxuICAgICAqL1xuICAgIFJlbmRlci5zdGF0cyA9IGZ1bmN0aW9uKHJlbmRlciwgY29udGV4dCwgdGltZSkge1xuICAgICAgICB2YXIgZW5naW5lID0gcmVuZGVyLmVuZ2luZSxcbiAgICAgICAgICAgIHdvcmxkID0gZW5naW5lLndvcmxkLFxuICAgICAgICAgICAgYm9kaWVzID0gQ29tcG9zaXRlLmFsbEJvZGllcyh3b3JsZCksXG4gICAgICAgICAgICBwYXJ0cyA9IDAsXG4gICAgICAgICAgICB3aWR0aCA9IDU1LFxuICAgICAgICAgICAgaGVpZ2h0ID0gNDQsXG4gICAgICAgICAgICB4ID0gMCxcbiAgICAgICAgICAgIHkgPSAwO1xuICAgICAgICBcbiAgICAgICAgLy8gY291bnQgcGFydHNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIHBhcnRzICs9IGJvZGllc1tpXS5wYXJ0cy5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzZWN0aW9uc1xuICAgICAgICB2YXIgc2VjdGlvbnMgPSB7XG4gICAgICAgICAgICAnUGFydCc6IHBhcnRzLFxuICAgICAgICAgICAgJ0JvZHknOiBib2RpZXMubGVuZ3RoLFxuICAgICAgICAgICAgJ0NvbnMnOiBDb21wb3NpdGUuYWxsQ29uc3RyYWludHMod29ybGQpLmxlbmd0aCxcbiAgICAgICAgICAgICdDb21wJzogQ29tcG9zaXRlLmFsbENvbXBvc2l0ZXMod29ybGQpLmxlbmd0aCxcbiAgICAgICAgICAgICdQYWlyJzogZW5naW5lLnBhaXJzLmxpc3QubGVuZ3RoXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gYmFja2dyb3VuZFxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICcjMGUwZjE5JztcbiAgICAgICAgY29udGV4dC5maWxsUmVjdCh4LCB5LCB3aWR0aCAqIDUuNSwgaGVpZ2h0KTtcblxuICAgICAgICBjb250ZXh0LmZvbnQgPSAnMTJweCBBcmlhbCc7XG4gICAgICAgIGNvbnRleHQudGV4dEJhc2VsaW5lID0gJ3RvcCc7XG4gICAgICAgIGNvbnRleHQudGV4dEFsaWduID0gJ3JpZ2h0JztcblxuICAgICAgICAvLyBzZWN0aW9uc1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gc2VjdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBzZWN0aW9uID0gc2VjdGlvbnNba2V5XTtcbiAgICAgICAgICAgIC8vIGxhYmVsXG4gICAgICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICcjYWFhJztcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFRleHQoa2V5LCB4ICsgd2lkdGgsIHkgKyA4KTtcblxuICAgICAgICAgICAgLy8gdmFsdWVcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJyNlZWUnO1xuICAgICAgICAgICAgY29udGV4dC5maWxsVGV4dChzZWN0aW9uLCB4ICsgd2lkdGgsIHkgKyAyNik7XG5cbiAgICAgICAgICAgIHggKz0gd2lkdGg7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyBlbmdpbmUgYW5kIHJlbmRlciBwZXJmb3JtYW5jZSBpbmZvcm1hdGlvbi5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgcGVyZm9ybWFuY2VcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0fSBjb250ZXh0XG4gICAgICovXG4gICAgUmVuZGVyLnBlcmZvcm1hbmNlID0gZnVuY3Rpb24ocmVuZGVyLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBlbmdpbmUgPSByZW5kZXIuZW5naW5lLFxuICAgICAgICAgICAgdGltaW5nID0gcmVuZGVyLnRpbWluZyxcbiAgICAgICAgICAgIGRlbHRhSGlzdG9yeSA9IHRpbWluZy5kZWx0YUhpc3RvcnksXG4gICAgICAgICAgICBlbGFwc2VkSGlzdG9yeSA9IHRpbWluZy5lbGFwc2VkSGlzdG9yeSxcbiAgICAgICAgICAgIHRpbWVzdGFtcEVsYXBzZWRIaXN0b3J5ID0gdGltaW5nLnRpbWVzdGFtcEVsYXBzZWRIaXN0b3J5LFxuICAgICAgICAgICAgZW5naW5lRGVsdGFIaXN0b3J5ID0gdGltaW5nLmVuZ2luZURlbHRhSGlzdG9yeSxcbiAgICAgICAgICAgIGVuZ2luZUVsYXBzZWRIaXN0b3J5ID0gdGltaW5nLmVuZ2luZUVsYXBzZWRIaXN0b3J5LFxuICAgICAgICAgICAgbGFzdEVuZ2luZURlbHRhID0gZW5naW5lLnRpbWluZy5sYXN0RGVsdGE7XG4gICAgICAgIFxuICAgICAgICB2YXIgZGVsdGFNZWFuID0gX21lYW4oZGVsdGFIaXN0b3J5KSxcbiAgICAgICAgICAgIGVsYXBzZWRNZWFuID0gX21lYW4oZWxhcHNlZEhpc3RvcnkpLFxuICAgICAgICAgICAgZW5naW5lRGVsdGFNZWFuID0gX21lYW4oZW5naW5lRGVsdGFIaXN0b3J5KSxcbiAgICAgICAgICAgIGVuZ2luZUVsYXBzZWRNZWFuID0gX21lYW4oZW5naW5lRWxhcHNlZEhpc3RvcnkpLFxuICAgICAgICAgICAgdGltZXN0YW1wRWxhcHNlZE1lYW4gPSBfbWVhbih0aW1lc3RhbXBFbGFwc2VkSGlzdG9yeSksXG4gICAgICAgICAgICByYXRlTWVhbiA9ICh0aW1lc3RhbXBFbGFwc2VkTWVhbiAvIGRlbHRhTWVhbikgfHwgMCxcbiAgICAgICAgICAgIGZwcyA9ICgxMDAwIC8gZGVsdGFNZWFuKSB8fCAwO1xuXG4gICAgICAgIHZhciBncmFwaEhlaWdodCA9IDQsXG4gICAgICAgICAgICBnYXAgPSAxMixcbiAgICAgICAgICAgIHdpZHRoID0gNjAsXG4gICAgICAgICAgICBoZWlnaHQgPSAzNCxcbiAgICAgICAgICAgIHggPSAxMCxcbiAgICAgICAgICAgIHkgPSA2OTtcblxuICAgICAgICAvLyBiYWNrZ3JvdW5kXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJyMwZTBmMTknO1xuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KDAsIDUwLCBnYXAgKiA0ICsgd2lkdGggKiA1ICsgMjIsIGhlaWdodCk7XG5cbiAgICAgICAgLy8gc2hvdyBGUFNcbiAgICAgICAgUmVuZGVyLnN0YXR1cyhcbiAgICAgICAgICAgIGNvbnRleHQsIHgsIHksIHdpZHRoLCBncmFwaEhlaWdodCwgZGVsdGFIaXN0b3J5Lmxlbmd0aCwgXG4gICAgICAgICAgICBNYXRoLnJvdW5kKGZwcykgKyAnIGZwcycsIFxuICAgICAgICAgICAgZnBzIC8gUmVuZGVyLl9nb29kRnBzLFxuICAgICAgICAgICAgZnVuY3Rpb24oaSkgeyByZXR1cm4gKGRlbHRhSGlzdG9yeVtpXSAvIGRlbHRhTWVhbikgLSAxOyB9XG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gc2hvdyBlbmdpbmUgZGVsdGFcbiAgICAgICAgUmVuZGVyLnN0YXR1cyhcbiAgICAgICAgICAgIGNvbnRleHQsIHggKyBnYXAgKyB3aWR0aCwgeSwgd2lkdGgsIGdyYXBoSGVpZ2h0LCBlbmdpbmVEZWx0YUhpc3RvcnkubGVuZ3RoLFxuICAgICAgICAgICAgbGFzdEVuZ2luZURlbHRhLnRvRml4ZWQoMikgKyAnIGR0JywgXG4gICAgICAgICAgICBSZW5kZXIuX2dvb2REZWx0YSAvIGxhc3RFbmdpbmVEZWx0YSxcbiAgICAgICAgICAgIGZ1bmN0aW9uKGkpIHsgcmV0dXJuIChlbmdpbmVEZWx0YUhpc3RvcnlbaV0gLyBlbmdpbmVEZWx0YU1lYW4pIC0gMTsgfVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHNob3cgZW5naW5lIHVwZGF0ZSB0aW1lXG4gICAgICAgIFJlbmRlci5zdGF0dXMoXG4gICAgICAgICAgICBjb250ZXh0LCB4ICsgKGdhcCArIHdpZHRoKSAqIDIsIHksIHdpZHRoLCBncmFwaEhlaWdodCwgZW5naW5lRWxhcHNlZEhpc3RvcnkubGVuZ3RoLFxuICAgICAgICAgICAgZW5naW5lRWxhcHNlZE1lYW4udG9GaXhlZCgyKSArICcgdXQnLCBcbiAgICAgICAgICAgIDEgLSAoZW5naW5lRWxhcHNlZE1lYW4gLyBSZW5kZXIuX2dvb2RGcHMpLFxuICAgICAgICAgICAgZnVuY3Rpb24oaSkgeyByZXR1cm4gKGVuZ2luZUVsYXBzZWRIaXN0b3J5W2ldIC8gZW5naW5lRWxhcHNlZE1lYW4pIC0gMTsgfVxuICAgICAgICApO1xuXG4gICAgICAgIC8vIHNob3cgcmVuZGVyIHRpbWVcbiAgICAgICAgUmVuZGVyLnN0YXR1cyhcbiAgICAgICAgICAgIGNvbnRleHQsIHggKyAoZ2FwICsgd2lkdGgpICogMywgeSwgd2lkdGgsIGdyYXBoSGVpZ2h0LCBlbGFwc2VkSGlzdG9yeS5sZW5ndGgsXG4gICAgICAgICAgICBlbGFwc2VkTWVhbi50b0ZpeGVkKDIpICsgJyBydCcsIFxuICAgICAgICAgICAgMSAtIChlbGFwc2VkTWVhbiAvIFJlbmRlci5fZ29vZEZwcyksXG4gICAgICAgICAgICBmdW5jdGlvbihpKSB7IHJldHVybiAoZWxhcHNlZEhpc3RvcnlbaV0gLyBlbGFwc2VkTWVhbikgLSAxOyB9XG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gc2hvdyBlZmZlY3RpdmUgc3BlZWRcbiAgICAgICAgUmVuZGVyLnN0YXR1cyhcbiAgICAgICAgICAgIGNvbnRleHQsIHggKyAoZ2FwICsgd2lkdGgpICogNCwgeSwgd2lkdGgsIGdyYXBoSGVpZ2h0LCB0aW1lc3RhbXBFbGFwc2VkSGlzdG9yeS5sZW5ndGgsIFxuICAgICAgICAgICAgcmF0ZU1lYW4udG9GaXhlZCgyKSArICcgeCcsIFxuICAgICAgICAgICAgcmF0ZU1lYW4gKiByYXRlTWVhbiAqIHJhdGVNZWFuLFxuICAgICAgICAgICAgZnVuY3Rpb24oaSkgeyByZXR1cm4gKCgodGltZXN0YW1wRWxhcHNlZEhpc3RvcnlbaV0gLyBkZWx0YUhpc3RvcnlbaV0pIC8gcmF0ZU1lYW4pIHx8IDApIC0gMTsgfVxuICAgICAgICApO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZW5kZXJzIGEgbGFiZWwsIGluZGljYXRvciBhbmQgYSBjaGFydC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2Qgc3RhdHVzXG4gICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0fSBjb250ZXh0XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gY291bnRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGFiZWxcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaW5kaWNhdG9yXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gcGxvdFlcbiAgICAgKi9cbiAgICBSZW5kZXIuc3RhdHVzID0gZnVuY3Rpb24oY29udGV4dCwgeCwgeSwgd2lkdGgsIGhlaWdodCwgY291bnQsIGxhYmVsLCBpbmRpY2F0b3IsIHBsb3RZKSB7XG4gICAgICAgIC8vIGJhY2tncm91bmRcbiAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9ICcjODg4JztcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAnIzQ0NCc7XG4gICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gMTtcbiAgICAgICAgY29udGV4dC5maWxsUmVjdCh4LCB5ICsgNywgd2lkdGgsIDEpO1xuXG4gICAgICAgIC8vIGNoYXJ0XG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgIGNvbnRleHQubW92ZVRvKHgsIHkgKyA3IC0gaGVpZ2h0ICogQ29tbW9uLmNsYW1wKDAuNCAqIHBsb3RZKDApLCAtMiwgMikpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHdpZHRoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGNvbnRleHQubGluZVRvKHggKyBpLCB5ICsgNyAtIChpIDwgY291bnQgPyBoZWlnaHQgKiBDb21tb24uY2xhbXAoMC40ICogcGxvdFkoaSksIC0yLCAyKSA6IDApKTtcbiAgICAgICAgfVxuICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICAgIC8vIGluZGljYXRvclxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICdoc2woJyArIENvbW1vbi5jbGFtcCgyNSArIDk1ICogaW5kaWNhdG9yLCAwLCAxMjApICsgJywxMDAlLDYwJSknO1xuICAgICAgICBjb250ZXh0LmZpbGxSZWN0KHgsIHkgLSA3LCA0LCA0KTtcblxuICAgICAgICAvLyBsYWJlbFxuICAgICAgICBjb250ZXh0LmZvbnQgPSAnMTJweCBBcmlhbCc7XG4gICAgICAgIGNvbnRleHQudGV4dEJhc2VsaW5lID0gJ21pZGRsZSc7XG4gICAgICAgIGNvbnRleHQudGV4dEFsaWduID0gJ3JpZ2h0JztcbiAgICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAnI2VlZSc7XG4gICAgICAgIGNvbnRleHQuZmlsbFRleHQobGFiZWwsIHggKyB3aWR0aCwgeSAtIDUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBjb25zdHJhaW50c1xuICAgICAqIEBwYXJhbSB7Y29uc3RyYWludFtdfSBjb25zdHJhaW50c1xuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5jb25zdHJhaW50cyA9IGZ1bmN0aW9uKGNvbnN0cmFpbnRzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dDtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbnN0cmFpbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgY29uc3RyYWludCA9IGNvbnN0cmFpbnRzW2ldO1xuXG4gICAgICAgICAgICBpZiAoIWNvbnN0cmFpbnQucmVuZGVyLnZpc2libGUgfHwgIWNvbnN0cmFpbnQucG9pbnRBIHx8ICFjb25zdHJhaW50LnBvaW50QilcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgdmFyIGJvZHlBID0gY29uc3RyYWludC5ib2R5QSxcbiAgICAgICAgICAgICAgICBib2R5QiA9IGNvbnN0cmFpbnQuYm9keUIsXG4gICAgICAgICAgICAgICAgc3RhcnQsXG4gICAgICAgICAgICAgICAgZW5kO1xuXG4gICAgICAgICAgICBpZiAoYm9keUEpIHtcbiAgICAgICAgICAgICAgICBzdGFydCA9IFZlY3Rvci5hZGQoYm9keUEucG9zaXRpb24sIGNvbnN0cmFpbnQucG9pbnRBKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc3RhcnQgPSBjb25zdHJhaW50LnBvaW50QTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNvbnN0cmFpbnQucmVuZGVyLnR5cGUgPT09ICdwaW4nKSB7XG4gICAgICAgICAgICAgICAgYy5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjLmFyYyhzdGFydC54LCBzdGFydC55LCAzLCAwLCAyICogTWF0aC5QSSk7XG4gICAgICAgICAgICAgICAgYy5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGJvZHlCKSB7XG4gICAgICAgICAgICAgICAgICAgIGVuZCA9IFZlY3Rvci5hZGQoYm9keUIucG9zaXRpb24sIGNvbnN0cmFpbnQucG9pbnRCKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBjb25zdHJhaW50LnBvaW50QjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjLmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGMubW92ZVRvKHN0YXJ0LngsIHN0YXJ0LnkpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGNvbnN0cmFpbnQucmVuZGVyLnR5cGUgPT09ICdzcHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWx0YSA9IFZlY3Rvci5zdWIoZW5kLCBzdGFydCksXG4gICAgICAgICAgICAgICAgICAgICAgICBub3JtYWwgPSBWZWN0b3IucGVycChWZWN0b3Iubm9ybWFsaXNlKGRlbHRhKSksXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2lscyA9IE1hdGguY2VpbChDb21tb24uY2xhbXAoY29uc3RyYWludC5sZW5ndGggLyA1LCAxMiwgMjApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IGNvaWxzOyBqICs9IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldCA9IGogJSAyID09PSAwID8gMSA6IC0xO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBjLmxpbmVUbyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydC54ICsgZGVsdGEueCAqIChqIC8gY29pbHMpICsgbm9ybWFsLnggKiBvZmZzZXQgKiA0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0LnkgKyBkZWx0YS55ICogKGogLyBjb2lscykgKyBub3JtYWwueSAqIG9mZnNldCAqIDRcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjLmxpbmVUbyhlbmQueCwgZW5kLnkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29uc3RyYWludC5yZW5kZXIubGluZVdpZHRoKSB7XG4gICAgICAgICAgICAgICAgYy5saW5lV2lkdGggPSBjb25zdHJhaW50LnJlbmRlci5saW5lV2lkdGg7XG4gICAgICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9IGNvbnN0cmFpbnQucmVuZGVyLnN0cm9rZVN0eWxlO1xuICAgICAgICAgICAgICAgIGMuc3Ryb2tlKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChjb25zdHJhaW50LnJlbmRlci5hbmNob3JzKSB7XG4gICAgICAgICAgICAgICAgYy5maWxsU3R5bGUgPSBjb25zdHJhaW50LnJlbmRlci5zdHJva2VTdHlsZTtcbiAgICAgICAgICAgICAgICBjLmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgIGMuYXJjKHN0YXJ0LngsIHN0YXJ0LnksIDMsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgICAgICBjLmFyYyhlbmQueCwgZW5kLnksIDMsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgICAgICBjLmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgIGMuZmlsbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlc2NyaXB0aW9uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGJvZGllc1xuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0fSBjb250ZXh0XG4gICAgICovXG4gICAgUmVuZGVyLmJvZGllcyA9IGZ1bmN0aW9uKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dCxcbiAgICAgICAgICAgIGVuZ2luZSA9IHJlbmRlci5lbmdpbmUsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnMsXG4gICAgICAgICAgICBzaG93SW50ZXJuYWxFZGdlcyA9IG9wdGlvbnMuc2hvd0ludGVybmFsRWRnZXMgfHwgIW9wdGlvbnMud2lyZWZyYW1lcyxcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICBwYXJ0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGs7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYm9keSA9IGJvZGllc1tpXTtcblxuICAgICAgICAgICAgaWYgKCFib2R5LnJlbmRlci52aXNpYmxlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBoYW5kbGUgY29tcG91bmQgcGFydHNcbiAgICAgICAgICAgIGZvciAoayA9IGJvZHkucGFydHMubGVuZ3RoID4gMSA/IDEgOiAwOyBrIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgIHBhcnQgPSBib2R5LnBhcnRzW2tdO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFwYXJ0LnJlbmRlci52aXNpYmxlKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3dTbGVlcGluZyAmJiBib2R5LmlzU2xlZXBpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgYy5nbG9iYWxBbHBoYSA9IDAuNSAqIHBhcnQucmVuZGVyLm9wYWNpdHk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0LnJlbmRlci5vcGFjaXR5ICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGMuZ2xvYmFsQWxwaGEgPSBwYXJ0LnJlbmRlci5vcGFjaXR5O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChwYXJ0LnJlbmRlci5zcHJpdGUgJiYgcGFydC5yZW5kZXIuc3ByaXRlLnRleHR1cmUgJiYgIW9wdGlvbnMud2lyZWZyYW1lcykge1xuICAgICAgICAgICAgICAgICAgICAvLyBwYXJ0IHNwcml0ZVxuICAgICAgICAgICAgICAgICAgICB2YXIgc3ByaXRlID0gcGFydC5yZW5kZXIuc3ByaXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZSA9IF9nZXRUZXh0dXJlKHJlbmRlciwgc3ByaXRlLnRleHR1cmUpO1xuXG4gICAgICAgICAgICAgICAgICAgIGMudHJhbnNsYXRlKHBhcnQucG9zaXRpb24ueCwgcGFydC5wb3NpdGlvbi55KTtcbiAgICAgICAgICAgICAgICAgICAgYy5yb3RhdGUocGFydC5hbmdsZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgYy5kcmF3SW1hZ2UoXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dHVyZS53aWR0aCAqIC1zcHJpdGUueE9mZnNldCAqIHNwcml0ZS54U2NhbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLmhlaWdodCAqIC1zcHJpdGUueU9mZnNldCAqIHNwcml0ZS55U2NhbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0dXJlLndpZHRoICogc3ByaXRlLnhTY2FsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHR1cmUuaGVpZ2h0ICogc3ByaXRlLnlTY2FsZVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldmVydCB0cmFuc2xhdGlvbiwgaG9wZWZ1bGx5IGZhc3RlciB0aGFuIHNhdmUgLyByZXN0b3JlXG4gICAgICAgICAgICAgICAgICAgIGMucm90YXRlKC1wYXJ0LmFuZ2xlKTtcbiAgICAgICAgICAgICAgICAgICAgYy50cmFuc2xhdGUoLXBhcnQucG9zaXRpb24ueCwgLXBhcnQucG9zaXRpb24ueSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gcGFydCBwb2x5Z29uXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0LmNpcmNsZVJhZGl1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuYXJjKHBhcnQucG9zaXRpb24ueCwgcGFydC5wb3NpdGlvbi55LCBwYXJ0LmNpcmNsZVJhZGl1cywgMCwgMiAqIE1hdGguUEkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMubW92ZVRvKHBhcnQudmVydGljZXNbMF0ueCwgcGFydC52ZXJ0aWNlc1swXS55KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCBwYXJ0LnZlcnRpY2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwYXJ0LnZlcnRpY2VzW2ogLSAxXS5pc0ludGVybmFsIHx8IHNob3dJbnRlcm5hbEVkZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMubGluZVRvKHBhcnQudmVydGljZXNbal0ueCwgcGFydC52ZXJ0aWNlc1tqXS55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLm1vdmVUbyhwYXJ0LnZlcnRpY2VzW2pdLngsIHBhcnQudmVydGljZXNbal0ueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcnQudmVydGljZXNbal0uaXNJbnRlcm5hbCAmJiAhc2hvd0ludGVybmFsRWRnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5tb3ZlVG8ocGFydC52ZXJ0aWNlc1soaiArIDEpICUgcGFydC52ZXJ0aWNlcy5sZW5ndGhdLngsIHBhcnQudmVydGljZXNbKGogKyAxKSAlIHBhcnQudmVydGljZXMubGVuZ3RoXS55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGMubGluZVRvKHBhcnQudmVydGljZXNbMF0ueCwgcGFydC52ZXJ0aWNlc1swXS55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMud2lyZWZyYW1lcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5maWxsU3R5bGUgPSBwYXJ0LnJlbmRlci5maWxsU3R5bGU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0LnJlbmRlci5saW5lV2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLmxpbmVXaWR0aCA9IHBhcnQucmVuZGVyLmxpbmVXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLnN0cm9rZVN0eWxlID0gcGFydC5yZW5kZXIuc3Ryb2tlU3R5bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgYy5maWxsKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLmxpbmVXaWR0aCA9IDE7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLnN0cm9rZVN0eWxlID0gJyNiYmInO1xuICAgICAgICAgICAgICAgICAgICAgICAgYy5zdHJva2UoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGMuZ2xvYmFsQWxwaGEgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIE9wdGltaXNlZCBtZXRob2QgZm9yIGRyYXdpbmcgYm9keSB3aXJlZnJhbWVzIGluIG9uZSBwYXNzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGJvZHlXaXJlZnJhbWVzXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuYm9keVdpcmVmcmFtZXMgPSBmdW5jdGlvbihyZW5kZXIsIGJvZGllcywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBzaG93SW50ZXJuYWxFZGdlcyA9IHJlbmRlci5vcHRpb25zLnNob3dJbnRlcm5hbEVkZ2VzLFxuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIHBhcnQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIGs7XG5cbiAgICAgICAgYy5iZWdpblBhdGgoKTtcblxuICAgICAgICAvLyByZW5kZXIgYWxsIGJvZGllc1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBib2R5ID0gYm9kaWVzW2ldO1xuXG4gICAgICAgICAgICBpZiAoIWJvZHkucmVuZGVyLnZpc2libGUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIC8vIGhhbmRsZSBjb21wb3VuZCBwYXJ0c1xuICAgICAgICAgICAgZm9yIChrID0gYm9keS5wYXJ0cy5sZW5ndGggPiAxID8gMSA6IDA7IGsgPCBib2R5LnBhcnRzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgcGFydCA9IGJvZHkucGFydHNba107XG5cbiAgICAgICAgICAgICAgICBjLm1vdmVUbyhwYXJ0LnZlcnRpY2VzWzBdLngsIHBhcnQudmVydGljZXNbMF0ueSk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGogPSAxOyBqIDwgcGFydC52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXBhcnQudmVydGljZXNbaiAtIDFdLmlzSW50ZXJuYWwgfHwgc2hvd0ludGVybmFsRWRnZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMubGluZVRvKHBhcnQudmVydGljZXNbal0ueCwgcGFydC52ZXJ0aWNlc1tqXS55KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMubW92ZVRvKHBhcnQudmVydGljZXNbal0ueCwgcGFydC52ZXJ0aWNlc1tqXS55KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0LnZlcnRpY2VzW2pdLmlzSW50ZXJuYWwgJiYgIXNob3dJbnRlcm5hbEVkZ2VzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLm1vdmVUbyhwYXJ0LnZlcnRpY2VzWyhqICsgMSkgJSBwYXJ0LnZlcnRpY2VzLmxlbmd0aF0ueCwgcGFydC52ZXJ0aWNlc1soaiArIDEpICUgcGFydC52ZXJ0aWNlcy5sZW5ndGhdLnkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYy5saW5lVG8ocGFydC52ZXJ0aWNlc1swXS54LCBwYXJ0LnZlcnRpY2VzWzBdLnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYy5saW5lV2lkdGggPSAxO1xuICAgICAgICBjLnN0cm9rZVN0eWxlID0gJyNiYmInO1xuICAgICAgICBjLnN0cm9rZSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBPcHRpbWlzZWQgbWV0aG9kIGZvciBkcmF3aW5nIGJvZHkgY29udmV4IGh1bGwgd2lyZWZyYW1lcyBpbiBvbmUgcGFzc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBib2R5Q29udmV4SHVsbHNcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5ib2R5Q29udmV4SHVsbHMgPSBmdW5jdGlvbihyZW5kZXIsIGJvZGllcywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgcGFydCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgaztcblxuICAgICAgICBjLmJlZ2luUGF0aCgpO1xuXG4gICAgICAgIC8vIHJlbmRlciBjb252ZXggaHVsbHNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYm9keSA9IGJvZGllc1tpXTtcblxuICAgICAgICAgICAgaWYgKCFib2R5LnJlbmRlci52aXNpYmxlIHx8IGJvZHkucGFydHMubGVuZ3RoID09PSAxKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjLm1vdmVUbyhib2R5LnZlcnRpY2VzWzBdLngsIGJvZHkudmVydGljZXNbMF0ueSk7XG5cbiAgICAgICAgICAgIGZvciAoaiA9IDE7IGogPCBib2R5LnZlcnRpY2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgYy5saW5lVG8oYm9keS52ZXJ0aWNlc1tqXS54LCBib2R5LnZlcnRpY2VzW2pdLnkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjLmxpbmVUbyhib2R5LnZlcnRpY2VzWzBdLngsIGJvZHkudmVydGljZXNbMF0ueSk7XG4gICAgICAgIH1cblxuICAgICAgICBjLmxpbmVXaWR0aCA9IDE7XG4gICAgICAgIGMuc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsMjU1LDI1NSwwLjIpJztcbiAgICAgICAgYy5zdHJva2UoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyBib2R5IHZlcnRleCBudW1iZXJzLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCB2ZXJ0ZXhOdW1iZXJzXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIudmVydGV4TnVtYmVycyA9IGZ1bmN0aW9uKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqLFxuICAgICAgICAgICAgaztcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcGFydHMgPSBib2RpZXNbaV0ucGFydHM7XG4gICAgICAgICAgICBmb3IgKGsgPSBwYXJ0cy5sZW5ndGggPiAxID8gMSA6IDA7IGsgPCBwYXJ0cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgIHZhciBwYXJ0ID0gcGFydHNba107XG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IHBhcnQudmVydGljZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYy5maWxsU3R5bGUgPSAncmdiYSgyNTUsMjU1LDI1NSwwLjIpJztcbiAgICAgICAgICAgICAgICAgICAgYy5maWxsVGV4dChpICsgJ18nICsgaiwgcGFydC5wb3NpdGlvbi54ICsgKHBhcnQudmVydGljZXNbal0ueCAtIHBhcnQucG9zaXRpb24ueCkgKiAwLjgsIHBhcnQucG9zaXRpb24ueSArIChwYXJ0LnZlcnRpY2VzW2pdLnkgLSBwYXJ0LnBvc2l0aW9uLnkpICogMC44KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogUmVuZGVycyBtb3VzZSBwb3NpdGlvbi5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgbW91c2VQb3NpdGlvblxuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge21vdXNlfSBtb3VzZVxuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5tb3VzZVBvc2l0aW9uID0gZnVuY3Rpb24ocmVuZGVyLCBtb3VzZSwgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQ7XG4gICAgICAgIGMuZmlsbFN0eWxlID0gJ3JnYmEoMjU1LDI1NSwyNTUsMC44KSc7XG4gICAgICAgIGMuZmlsbFRleHQobW91c2UucG9zaXRpb24ueCArICcgICcgKyBtb3VzZS5wb3NpdGlvbi55LCBtb3VzZS5wb3NpdGlvbi54ICsgNSwgbW91c2UucG9zaXRpb24ueSAtIDUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEcmF3cyBib2R5IGJvdW5kc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBib2R5Qm91bmRzXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuYm9keUJvdW5kcyA9IGZ1bmN0aW9uKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dCxcbiAgICAgICAgICAgIGVuZ2luZSA9IHJlbmRlci5lbmdpbmUsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnM7XG5cbiAgICAgICAgYy5iZWdpblBhdGgoKTtcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV07XG5cbiAgICAgICAgICAgIGlmIChib2R5LnJlbmRlci52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gYm9kaWVzW2ldLnBhcnRzO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSBwYXJ0cy5sZW5ndGggPiAxID8gMSA6IDA7IGogPCBwYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGFydCA9IHBhcnRzW2pdO1xuICAgICAgICAgICAgICAgICAgICBjLnJlY3QocGFydC5ib3VuZHMubWluLngsIHBhcnQuYm91bmRzLm1pbi55LCBwYXJ0LmJvdW5kcy5tYXgueCAtIHBhcnQuYm91bmRzLm1pbi54LCBwYXJ0LmJvdW5kcy5tYXgueSAtIHBhcnQuYm91bmRzLm1pbi55KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy53aXJlZnJhbWVzKSB7XG4gICAgICAgICAgICBjLnN0cm9rZVN0eWxlID0gJ3JnYmEoMjU1LDI1NSwyNTUsMC4wOCknO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9ICdyZ2JhKDAsMCwwLDAuMSknO1xuICAgICAgICB9XG5cbiAgICAgICAgYy5saW5lV2lkdGggPSAxO1xuICAgICAgICBjLnN0cm9rZSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEcmF3cyBib2R5IGFuZ2xlIGluZGljYXRvcnMgYW5kIGF4ZXNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgYm9keUF4ZXNcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5ib2R5QXhlcyA9IGZ1bmN0aW9uKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dCxcbiAgICAgICAgICAgIGVuZ2luZSA9IHJlbmRlci5lbmdpbmUsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnMsXG4gICAgICAgICAgICBwYXJ0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGosXG4gICAgICAgICAgICBrO1xuXG4gICAgICAgIGMuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGJvZHkgPSBib2RpZXNbaV0sXG4gICAgICAgICAgICAgICAgcGFydHMgPSBib2R5LnBhcnRzO1xuXG4gICAgICAgICAgICBpZiAoIWJvZHkucmVuZGVyLnZpc2libGUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3dBeGVzKSB7XG4gICAgICAgICAgICAgICAgLy8gcmVuZGVyIGFsbCBheGVzXG4gICAgICAgICAgICAgICAgZm9yIChqID0gcGFydHMubGVuZ3RoID4gMSA/IDEgOiAwOyBqIDwgcGFydHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgcGFydCA9IHBhcnRzW2pdO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgcGFydC5heGVzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXhpcyA9IHBhcnQuYXhlc1trXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMubW92ZVRvKHBhcnQucG9zaXRpb24ueCwgcGFydC5wb3NpdGlvbi55KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGMubGluZVRvKHBhcnQucG9zaXRpb24ueCArIGF4aXMueCAqIDIwLCBwYXJ0LnBvc2l0aW9uLnkgKyBheGlzLnkgKiAyMCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZvciAoaiA9IHBhcnRzLmxlbmd0aCA+IDEgPyAxIDogMDsgaiA8IHBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnQgPSBwYXJ0c1tqXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IHBhcnQuYXhlcy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcmVuZGVyIGEgc2luZ2xlIGF4aXMgaW5kaWNhdG9yXG4gICAgICAgICAgICAgICAgICAgICAgICBjLm1vdmVUbyhwYXJ0LnBvc2l0aW9uLngsIHBhcnQucG9zaXRpb24ueSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjLmxpbmVUbygocGFydC52ZXJ0aWNlc1swXS54ICsgcGFydC52ZXJ0aWNlc1twYXJ0LnZlcnRpY2VzLmxlbmd0aC0xXS54KSAvIDIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBhcnQudmVydGljZXNbMF0ueSArIHBhcnQudmVydGljZXNbcGFydC52ZXJ0aWNlcy5sZW5ndGgtMV0ueSkgLyAyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLndpcmVmcmFtZXMpIHtcbiAgICAgICAgICAgIGMuc3Ryb2tlU3R5bGUgPSAnaW5kaWFucmVkJztcbiAgICAgICAgICAgIGMubGluZVdpZHRoID0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGMuc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsIDI1NSwgMjU1LCAwLjQpJztcbiAgICAgICAgICAgIGMuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ292ZXJsYXknO1xuICAgICAgICAgICAgYy5saW5lV2lkdGggPSAyO1xuICAgICAgICB9XG5cbiAgICAgICAgYy5zdHJva2UoKTtcbiAgICAgICAgYy5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnc291cmNlLW92ZXInO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEcmF3cyBib2R5IHBvc2l0aW9uc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBib2R5UG9zaXRpb25zXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7Ym9keVtdfSBib2RpZXNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuYm9keVBvc2l0aW9ucyA9IGZ1bmN0aW9uKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dCxcbiAgICAgICAgICAgIGVuZ2luZSA9IHJlbmRlci5lbmdpbmUsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnMsXG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgcGFydCxcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBrO1xuXG4gICAgICAgIGMuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgLy8gcmVuZGVyIGN1cnJlbnQgcG9zaXRpb25zXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBib2RpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJvZHkgPSBib2RpZXNbaV07XG5cbiAgICAgICAgICAgIGlmICghYm9keS5yZW5kZXIudmlzaWJsZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgLy8gaGFuZGxlIGNvbXBvdW5kIHBhcnRzXG4gICAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgYm9keS5wYXJ0cy5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgIHBhcnQgPSBib2R5LnBhcnRzW2tdO1xuICAgICAgICAgICAgICAgIGMuYXJjKHBhcnQucG9zaXRpb24ueCwgcGFydC5wb3NpdGlvbi55LCAzLCAwLCAyICogTWF0aC5QSSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGMuY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy53aXJlZnJhbWVzKSB7XG4gICAgICAgICAgICBjLmZpbGxTdHlsZSA9ICdpbmRpYW5yZWQnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYy5maWxsU3R5bGUgPSAncmdiYSgwLDAsMCwwLjUpJztcbiAgICAgICAgfVxuICAgICAgICBjLmZpbGwoKTtcblxuICAgICAgICBjLmJlZ2luUGF0aCgpO1xuXG4gICAgICAgIC8vIHJlbmRlciBwcmV2aW91cyBwb3NpdGlvbnNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYm9keSA9IGJvZGllc1tpXTtcbiAgICAgICAgICAgIGlmIChib2R5LnJlbmRlci52aXNpYmxlKSB7XG4gICAgICAgICAgICAgICAgYy5hcmMoYm9keS5wb3NpdGlvblByZXYueCwgYm9keS5wb3NpdGlvblByZXYueSwgMiwgMCwgMiAqIE1hdGguUEksIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBjLmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYy5maWxsU3R5bGUgPSAncmdiYSgyNTUsMTY1LDAsMC44KSc7XG4gICAgICAgIGMuZmlsbCgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEcmF3cyBib2R5IHZlbG9jaXR5XG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGJvZHlWZWxvY2l0eVxuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge2JvZHlbXX0gYm9kaWVzXG4gICAgICogQHBhcmFtIHtSZW5kZXJpbmdDb250ZXh0fSBjb250ZXh0XG4gICAgICovXG4gICAgUmVuZGVyLmJvZHlWZWxvY2l0eSA9IGZ1bmN0aW9uKHJlbmRlciwgYm9kaWVzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dDtcblxuICAgICAgICBjLmJlZ2luUGF0aCgpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYm9kaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYm9keSA9IGJvZGllc1tpXTtcblxuICAgICAgICAgICAgaWYgKCFib2R5LnJlbmRlci52aXNpYmxlKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICB2YXIgdmVsb2NpdHkgPSBCb2R5LmdldFZlbG9jaXR5KGJvZHkpO1xuXG4gICAgICAgICAgICBjLm1vdmVUbyhib2R5LnBvc2l0aW9uLngsIGJvZHkucG9zaXRpb24ueSk7XG4gICAgICAgICAgICBjLmxpbmVUbyhib2R5LnBvc2l0aW9uLnggKyB2ZWxvY2l0eS54LCBib2R5LnBvc2l0aW9uLnkgKyB2ZWxvY2l0eS55KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGMubGluZVdpZHRoID0gMztcbiAgICAgICAgYy5zdHJva2VTdHlsZSA9ICdjb3JuZmxvd2VyYmx1ZSc7XG4gICAgICAgIGMuc3Ryb2tlKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERyYXdzIGJvZHkgaWRzXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbWV0aG9kIGJvZHlJZHNcbiAgICAgKiBAcGFyYW0ge3JlbmRlcn0gcmVuZGVyXG4gICAgICogQHBhcmFtIHtib2R5W119IGJvZGllc1xuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5ib2R5SWRzID0gZnVuY3Rpb24ocmVuZGVyLCBib2RpZXMsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGMgPSBjb250ZXh0LFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGo7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGJvZGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCFib2RpZXNbaV0ucmVuZGVyLnZpc2libGUpXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIHZhciBwYXJ0cyA9IGJvZGllc1tpXS5wYXJ0cztcbiAgICAgICAgICAgIGZvciAoaiA9IHBhcnRzLmxlbmd0aCA+IDEgPyAxIDogMDsgaiA8IHBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tqXTtcbiAgICAgICAgICAgICAgICBjLmZvbnQgPSBcIjEycHggQXJpYWxcIjtcbiAgICAgICAgICAgICAgICBjLmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMjU1LDAuNSknO1xuICAgICAgICAgICAgICAgIGMuZmlsbFRleHQocGFydC5pZCwgcGFydC5wb3NpdGlvbi54ICsgMTAsIHBhcnQucG9zaXRpb24ueSAtIDEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBjb2xsaXNpb25zXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7cGFpcltdfSBwYWlyc1xuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5jb2xsaXNpb25zID0gZnVuY3Rpb24ocmVuZGVyLCBwYWlycywgY29udGV4dCkge1xuICAgICAgICB2YXIgYyA9IGNvbnRleHQsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnMsXG4gICAgICAgICAgICBwYWlyLFxuICAgICAgICAgICAgY29sbGlzaW9uLFxuICAgICAgICAgICAgY29ycmVjdGVkLFxuICAgICAgICAgICAgYm9keUEsXG4gICAgICAgICAgICBib2R5QixcbiAgICAgICAgICAgIGksXG4gICAgICAgICAgICBqO1xuXG4gICAgICAgIGMuYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgLy8gcmVuZGVyIGNvbGxpc2lvbiBwb3NpdGlvbnNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNbaV07XG5cbiAgICAgICAgICAgIGlmICghcGFpci5pc0FjdGl2ZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb247XG4gICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgcGFpci5hY3RpdmVDb250YWN0cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBjb250YWN0ID0gcGFpci5hY3RpdmVDb250YWN0c1tqXSxcbiAgICAgICAgICAgICAgICAgICAgdmVydGV4ID0gY29udGFjdC52ZXJ0ZXg7XG4gICAgICAgICAgICAgICAgYy5yZWN0KHZlcnRleC54IC0gMS41LCB2ZXJ0ZXgueSAtIDEuNSwgMy41LCAzLjUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMud2lyZWZyYW1lcykge1xuICAgICAgICAgICAgYy5maWxsU3R5bGUgPSAncmdiYSgyNTUsMjU1LDI1NSwwLjcpJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGMuZmlsbFN0eWxlID0gJ29yYW5nZSc7XG4gICAgICAgIH1cbiAgICAgICAgYy5maWxsKCk7XG5cbiAgICAgICAgYy5iZWdpblBhdGgoKTtcblxuICAgICAgICAvLyByZW5kZXIgY29sbGlzaW9uIG5vcm1hbHNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNbaV07XG5cbiAgICAgICAgICAgIGlmICghcGFpci5pc0FjdGl2ZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb247XG5cbiAgICAgICAgICAgIGlmIChwYWlyLmFjdGl2ZUNvbnRhY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICB2YXIgbm9ybWFsUG9zWCA9IHBhaXIuYWN0aXZlQ29udGFjdHNbMF0udmVydGV4LngsXG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbFBvc1kgPSBwYWlyLmFjdGl2ZUNvbnRhY3RzWzBdLnZlcnRleC55O1xuXG4gICAgICAgICAgICAgICAgaWYgKHBhaXIuYWN0aXZlQ29udGFjdHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vcm1hbFBvc1ggPSAocGFpci5hY3RpdmVDb250YWN0c1swXS52ZXJ0ZXgueCArIHBhaXIuYWN0aXZlQ29udGFjdHNbMV0udmVydGV4LngpIC8gMjtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsUG9zWSA9IChwYWlyLmFjdGl2ZUNvbnRhY3RzWzBdLnZlcnRleC55ICsgcGFpci5hY3RpdmVDb250YWN0c1sxXS52ZXJ0ZXgueSkgLyAyO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChjb2xsaXNpb24uYm9keUIgPT09IGNvbGxpc2lvbi5zdXBwb3J0c1swXS5ib2R5IHx8IGNvbGxpc2lvbi5ib2R5QS5pc1N0YXRpYyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjLm1vdmVUbyhub3JtYWxQb3NYIC0gY29sbGlzaW9uLm5vcm1hbC54ICogOCwgbm9ybWFsUG9zWSAtIGNvbGxpc2lvbi5ub3JtYWwueSAqIDgpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGMubW92ZVRvKG5vcm1hbFBvc1ggKyBjb2xsaXNpb24ubm9ybWFsLnggKiA4LCBub3JtYWxQb3NZICsgY29sbGlzaW9uLm5vcm1hbC55ICogOCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgYy5saW5lVG8obm9ybWFsUG9zWCwgbm9ybWFsUG9zWSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy53aXJlZnJhbWVzKSB7XG4gICAgICAgICAgICBjLnN0cm9rZVN0eWxlID0gJ3JnYmEoMjU1LDE2NSwwLDAuNyknO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYy5zdHJva2VTdHlsZSA9ICdvcmFuZ2UnO1xuICAgICAgICB9XG5cbiAgICAgICAgYy5saW5lV2lkdGggPSAxO1xuICAgICAgICBjLnN0cm9rZSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZXNjcmlwdGlvblxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG1ldGhvZCBzZXBhcmF0aW9uc1xuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge3BhaXJbXX0gcGFpcnNcbiAgICAgKiBAcGFyYW0ge1JlbmRlcmluZ0NvbnRleHR9IGNvbnRleHRcbiAgICAgKi9cbiAgICBSZW5kZXIuc2VwYXJhdGlvbnMgPSBmdW5jdGlvbihyZW5kZXIsIHBhaXJzLCBjb250ZXh0KSB7XG4gICAgICAgIHZhciBjID0gY29udGV4dCxcbiAgICAgICAgICAgIG9wdGlvbnMgPSByZW5kZXIub3B0aW9ucyxcbiAgICAgICAgICAgIHBhaXIsXG4gICAgICAgICAgICBjb2xsaXNpb24sXG4gICAgICAgICAgICBjb3JyZWN0ZWQsXG4gICAgICAgICAgICBib2R5QSxcbiAgICAgICAgICAgIGJvZHlCLFxuICAgICAgICAgICAgaSxcbiAgICAgICAgICAgIGo7XG5cbiAgICAgICAgYy5iZWdpblBhdGgoKTtcblxuICAgICAgICAvLyByZW5kZXIgc2VwYXJhdGlvbnNcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBwYWlyID0gcGFpcnNbaV07XG5cbiAgICAgICAgICAgIGlmICghcGFpci5pc0FjdGl2ZSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAgICAgY29sbGlzaW9uID0gcGFpci5jb2xsaXNpb247XG4gICAgICAgICAgICBib2R5QSA9IGNvbGxpc2lvbi5ib2R5QTtcbiAgICAgICAgICAgIGJvZHlCID0gY29sbGlzaW9uLmJvZHlCO1xuXG4gICAgICAgICAgICB2YXIgayA9IDE7XG5cbiAgICAgICAgICAgIGlmICghYm9keUIuaXNTdGF0aWMgJiYgIWJvZHlBLmlzU3RhdGljKSBrID0gMC41O1xuICAgICAgICAgICAgaWYgKGJvZHlCLmlzU3RhdGljKSBrID0gMDtcblxuICAgICAgICAgICAgYy5tb3ZlVG8oYm9keUIucG9zaXRpb24ueCwgYm9keUIucG9zaXRpb24ueSk7XG4gICAgICAgICAgICBjLmxpbmVUbyhib2R5Qi5wb3NpdGlvbi54IC0gY29sbGlzaW9uLnBlbmV0cmF0aW9uLnggKiBrLCBib2R5Qi5wb3NpdGlvbi55IC0gY29sbGlzaW9uLnBlbmV0cmF0aW9uLnkgKiBrKTtcblxuICAgICAgICAgICAgayA9IDE7XG5cbiAgICAgICAgICAgIGlmICghYm9keUIuaXNTdGF0aWMgJiYgIWJvZHlBLmlzU3RhdGljKSBrID0gMC41O1xuICAgICAgICAgICAgaWYgKGJvZHlBLmlzU3RhdGljKSBrID0gMDtcblxuICAgICAgICAgICAgYy5tb3ZlVG8oYm9keUEucG9zaXRpb24ueCwgYm9keUEucG9zaXRpb24ueSk7XG4gICAgICAgICAgICBjLmxpbmVUbyhib2R5QS5wb3NpdGlvbi54ICsgY29sbGlzaW9uLnBlbmV0cmF0aW9uLnggKiBrLCBib2R5QS5wb3NpdGlvbi55ICsgY29sbGlzaW9uLnBlbmV0cmF0aW9uLnkgKiBrKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLndpcmVmcmFtZXMpIHtcbiAgICAgICAgICAgIGMuc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsMTY1LDAsMC41KSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjLnN0cm9rZVN0eWxlID0gJ29yYW5nZSc7XG4gICAgICAgIH1cbiAgICAgICAgYy5zdHJva2UoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVzY3JpcHRpb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBtZXRob2QgaW5zcGVjdG9yXG4gICAgICogQHBhcmFtIHtpbnNwZWN0b3J9IGluc3BlY3RvclxuICAgICAqIEBwYXJhbSB7UmVuZGVyaW5nQ29udGV4dH0gY29udGV4dFxuICAgICAqL1xuICAgIFJlbmRlci5pbnNwZWN0b3IgPSBmdW5jdGlvbihpbnNwZWN0b3IsIGNvbnRleHQpIHtcbiAgICAgICAgdmFyIGVuZ2luZSA9IGluc3BlY3Rvci5lbmdpbmUsXG4gICAgICAgICAgICBzZWxlY3RlZCA9IGluc3BlY3Rvci5zZWxlY3RlZCxcbiAgICAgICAgICAgIHJlbmRlciA9IGluc3BlY3Rvci5yZW5kZXIsXG4gICAgICAgICAgICBvcHRpb25zID0gcmVuZGVyLm9wdGlvbnMsXG4gICAgICAgICAgICBib3VuZHM7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzQm91bmRzKSB7XG4gICAgICAgICAgICB2YXIgYm91bmRzV2lkdGggPSByZW5kZXIuYm91bmRzLm1heC54IC0gcmVuZGVyLmJvdW5kcy5taW4ueCxcbiAgICAgICAgICAgICAgICBib3VuZHNIZWlnaHQgPSByZW5kZXIuYm91bmRzLm1heC55IC0gcmVuZGVyLmJvdW5kcy5taW4ueSxcbiAgICAgICAgICAgICAgICBib3VuZHNTY2FsZVggPSBib3VuZHNXaWR0aCAvIHJlbmRlci5vcHRpb25zLndpZHRoLFxuICAgICAgICAgICAgICAgIGJvdW5kc1NjYWxlWSA9IGJvdW5kc0hlaWdodCAvIHJlbmRlci5vcHRpb25zLmhlaWdodDtcblxuICAgICAgICAgICAgY29udGV4dC5zY2FsZSgxIC8gYm91bmRzU2NhbGVYLCAxIC8gYm91bmRzU2NhbGVZKTtcbiAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKC1yZW5kZXIuYm91bmRzLm1pbi54LCAtcmVuZGVyLmJvdW5kcy5taW4ueSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGVjdGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHNlbGVjdGVkW2ldLmRhdGE7XG5cbiAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKDAuNSwgMC41KTtcbiAgICAgICAgICAgIGNvbnRleHQubGluZVdpZHRoID0gMTtcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsMTY1LDAsMC45KSc7XG4gICAgICAgICAgICBjb250ZXh0LnNldExpbmVEYXNoKFsxLDJdKTtcblxuICAgICAgICAgICAgc3dpdGNoIChpdGVtLnR5cGUpIHtcblxuICAgICAgICAgICAgY2FzZSAnYm9keSc6XG5cbiAgICAgICAgICAgICAgICAvLyByZW5kZXIgYm9keSBzZWxlY3Rpb25zXG4gICAgICAgICAgICAgICAgYm91bmRzID0gaXRlbS5ib3VuZHM7XG4gICAgICAgICAgICAgICAgY29udGV4dC5iZWdpblBhdGgoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnJlY3QoTWF0aC5mbG9vcihib3VuZHMubWluLnggLSAzKSwgTWF0aC5mbG9vcihib3VuZHMubWluLnkgLSAzKSxcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5mbG9vcihib3VuZHMubWF4LnggLSBib3VuZHMubWluLnggKyA2KSwgTWF0aC5mbG9vcihib3VuZHMubWF4LnkgLSBib3VuZHMubWluLnkgKyA2KSk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LnN0cm9rZSgpO1xuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2NvbnN0cmFpbnQnOlxuXG4gICAgICAgICAgICAgICAgLy8gcmVuZGVyIGNvbnN0cmFpbnQgc2VsZWN0aW9uc1xuICAgICAgICAgICAgICAgIHZhciBwb2ludCA9IGl0ZW0ucG9pbnRBO1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLmJvZHlBKVxuICAgICAgICAgICAgICAgICAgICBwb2ludCA9IGl0ZW0ucG9pbnRCO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgY29udGV4dC5hcmMocG9pbnQueCwgcG9pbnQueSwgMTAsIDAsIDIgKiBNYXRoLlBJKTtcbiAgICAgICAgICAgICAgICBjb250ZXh0LmNsb3NlUGF0aCgpO1xuICAgICAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG5cbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb250ZXh0LnNldExpbmVEYXNoKFtdKTtcbiAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKC0wLjUsIC0wLjUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVuZGVyIHNlbGVjdGlvbiByZWdpb25cbiAgICAgICAgaWYgKGluc3BlY3Rvci5zZWxlY3RTdGFydCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGV4dC50cmFuc2xhdGUoMC41LCAwLjUpO1xuICAgICAgICAgICAgY29udGV4dC5saW5lV2lkdGggPSAxO1xuICAgICAgICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9ICdyZ2JhKDI1NSwxNjUsMCwwLjYpJztcbiAgICAgICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJ3JnYmEoMjU1LDE2NSwwLDAuMSknO1xuICAgICAgICAgICAgYm91bmRzID0gaW5zcGVjdG9yLnNlbGVjdEJvdW5kcztcbiAgICAgICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICBjb250ZXh0LnJlY3QoTWF0aC5mbG9vcihib3VuZHMubWluLngpLCBNYXRoLmZsb29yKGJvdW5kcy5taW4ueSksXG4gICAgICAgICAgICAgICAgTWF0aC5mbG9vcihib3VuZHMubWF4LnggLSBib3VuZHMubWluLngpLCBNYXRoLmZsb29yKGJvdW5kcy5tYXgueSAtIGJvdW5kcy5taW4ueSkpO1xuICAgICAgICAgICAgY29udGV4dC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgIGNvbnRleHQuc3Ryb2tlKCk7XG4gICAgICAgICAgICBjb250ZXh0LmZpbGwoKTtcbiAgICAgICAgICAgIGNvbnRleHQudHJhbnNsYXRlKC0wLjUsIC0wLjUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuaGFzQm91bmRzKVxuICAgICAgICAgICAgY29udGV4dC5zZXRUcmFuc2Zvcm0oMSwgMCwgMCwgMSwgMCwgMCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZXMgcmVuZGVyIHRpbWluZy5cbiAgICAgKiBAbWV0aG9kIF91cGRhdGVUaW1pbmdcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZVxuICAgICAqL1xuICAgIHZhciBfdXBkYXRlVGltaW5nID0gZnVuY3Rpb24ocmVuZGVyLCB0aW1lKSB7XG4gICAgICAgIHZhciBlbmdpbmUgPSByZW5kZXIuZW5naW5lLFxuICAgICAgICAgICAgdGltaW5nID0gcmVuZGVyLnRpbWluZyxcbiAgICAgICAgICAgIGhpc3RvcnlTaXplID0gdGltaW5nLmhpc3RvcnlTaXplLFxuICAgICAgICAgICAgdGltZXN0YW1wID0gZW5naW5lLnRpbWluZy50aW1lc3RhbXA7XG5cbiAgICAgICAgdGltaW5nLmRlbHRhID0gdGltZSAtIHRpbWluZy5sYXN0VGltZSB8fCBSZW5kZXIuX2dvb2REZWx0YTtcbiAgICAgICAgdGltaW5nLmxhc3RUaW1lID0gdGltZTtcblxuICAgICAgICB0aW1pbmcudGltZXN0YW1wRWxhcHNlZCA9IHRpbWVzdGFtcCAtIHRpbWluZy5sYXN0VGltZXN0YW1wIHx8IDA7XG4gICAgICAgIHRpbWluZy5sYXN0VGltZXN0YW1wID0gdGltZXN0YW1wO1xuXG4gICAgICAgIHRpbWluZy5kZWx0YUhpc3RvcnkudW5zaGlmdCh0aW1pbmcuZGVsdGEpO1xuICAgICAgICB0aW1pbmcuZGVsdGFIaXN0b3J5Lmxlbmd0aCA9IE1hdGgubWluKHRpbWluZy5kZWx0YUhpc3RvcnkubGVuZ3RoLCBoaXN0b3J5U2l6ZSk7XG5cbiAgICAgICAgdGltaW5nLmVuZ2luZURlbHRhSGlzdG9yeS51bnNoaWZ0KGVuZ2luZS50aW1pbmcubGFzdERlbHRhKTtcbiAgICAgICAgdGltaW5nLmVuZ2luZURlbHRhSGlzdG9yeS5sZW5ndGggPSBNYXRoLm1pbih0aW1pbmcuZW5naW5lRGVsdGFIaXN0b3J5Lmxlbmd0aCwgaGlzdG9yeVNpemUpO1xuXG4gICAgICAgIHRpbWluZy50aW1lc3RhbXBFbGFwc2VkSGlzdG9yeS51bnNoaWZ0KHRpbWluZy50aW1lc3RhbXBFbGFwc2VkKTtcbiAgICAgICAgdGltaW5nLnRpbWVzdGFtcEVsYXBzZWRIaXN0b3J5Lmxlbmd0aCA9IE1hdGgubWluKHRpbWluZy50aW1lc3RhbXBFbGFwc2VkSGlzdG9yeS5sZW5ndGgsIGhpc3RvcnlTaXplKTtcblxuICAgICAgICB0aW1pbmcuZW5naW5lRWxhcHNlZEhpc3RvcnkudW5zaGlmdChlbmdpbmUudGltaW5nLmxhc3RFbGFwc2VkKTtcbiAgICAgICAgdGltaW5nLmVuZ2luZUVsYXBzZWRIaXN0b3J5Lmxlbmd0aCA9IE1hdGgubWluKHRpbWluZy5lbmdpbmVFbGFwc2VkSGlzdG9yeS5sZW5ndGgsIGhpc3RvcnlTaXplKTtcblxuICAgICAgICB0aW1pbmcuZWxhcHNlZEhpc3RvcnkudW5zaGlmdCh0aW1pbmcubGFzdEVsYXBzZWQpO1xuICAgICAgICB0aW1pbmcuZWxhcHNlZEhpc3RvcnkubGVuZ3RoID0gTWF0aC5taW4odGltaW5nLmVsYXBzZWRIaXN0b3J5Lmxlbmd0aCwgaGlzdG9yeVNpemUpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtZWFuIHZhbHVlIG9mIHRoZSBnaXZlbiBudW1iZXJzLlxuICAgICAqIEBtZXRob2QgX21lYW5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7TnVtYmVyW119IHZhbHVlc1xuICAgICAqIEByZXR1cm4ge051bWJlcn0gdGhlIG1lYW4gb2YgZ2l2ZW4gdmFsdWVzXG4gICAgICovXG4gICAgdmFyIF9tZWFuID0gZnVuY3Rpb24odmFsdWVzKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSAwO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgcmVzdWx0ICs9IHZhbHVlc1tpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKHJlc3VsdCAvIHZhbHVlcy5sZW5ndGgpIHx8IDA7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEBtZXRob2QgX2NyZWF0ZUNhbnZhc1xuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHt9IHdpZHRoXG4gICAgICogQHBhcmFtIHt9IGhlaWdodFxuICAgICAqIEByZXR1cm4gY2FudmFzXG4gICAgICovXG4gICAgdmFyIF9jcmVhdGVDYW52YXMgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG4gICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgY2FudmFzLndpZHRoID0gd2lkdGg7XG4gICAgICAgIGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGNhbnZhcy5vbmNvbnRleHRtZW51ID0gZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZTsgfTtcbiAgICAgICAgY2FudmFzLm9uc2VsZWN0c3RhcnQgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9O1xuICAgICAgICByZXR1cm4gY2FudmFzO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBwaXhlbCByYXRpbyBvZiB0aGUgY2FudmFzLlxuICAgICAqIEBtZXRob2QgX2dldFBpeGVsUmF0aW9cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGNhbnZhc1xuICAgICAqIEByZXR1cm4ge051bWJlcn0gcGl4ZWwgcmF0aW9cbiAgICAgKi9cbiAgICB2YXIgX2dldFBpeGVsUmF0aW8gPSBmdW5jdGlvbihjYW52YXMpIHtcbiAgICAgICAgdmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKSxcbiAgICAgICAgICAgIGRldmljZVBpeGVsUmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxLFxuICAgICAgICAgICAgYmFja2luZ1N0b3JlUGl4ZWxSYXRpbyA9IGNvbnRleHQud2Via2l0QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyB8fCBjb250ZXh0Lm1vekJhY2tpbmdTdG9yZVBpeGVsUmF0aW9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfHwgY29udGV4dC5tc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHwgY29udGV4dC5vQmFja2luZ1N0b3JlUGl4ZWxSYXRpb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8fCBjb250ZXh0LmJhY2tpbmdTdG9yZVBpeGVsUmF0aW8gfHwgMTtcblxuICAgICAgICByZXR1cm4gZGV2aWNlUGl4ZWxSYXRpbyAvIGJhY2tpbmdTdG9yZVBpeGVsUmF0aW87XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHJlcXVlc3RlZCB0ZXh0dXJlIChhbiBJbWFnZSkgdmlhIGl0cyBwYXRoXG4gICAgICogQG1ldGhvZCBfZ2V0VGV4dHVyZVxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtyZW5kZXJ9IHJlbmRlclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpbWFnZVBhdGhcbiAgICAgKiBAcmV0dXJuIHtJbWFnZX0gdGV4dHVyZVxuICAgICAqL1xuICAgIHZhciBfZ2V0VGV4dHVyZSA9IGZ1bmN0aW9uKHJlbmRlciwgaW1hZ2VQYXRoKSB7XG4gICAgICAgIHZhciBpbWFnZSA9IHJlbmRlci50ZXh0dXJlc1tpbWFnZVBhdGhdO1xuXG4gICAgICAgIGlmIChpbWFnZSlcbiAgICAgICAgICAgIHJldHVybiBpbWFnZTtcblxuICAgICAgICBpbWFnZSA9IHJlbmRlci50ZXh0dXJlc1tpbWFnZVBhdGhdID0gbmV3IEltYWdlKCk7XG4gICAgICAgIGltYWdlLnNyYyA9IGltYWdlUGF0aDtcblxuICAgICAgICByZXR1cm4gaW1hZ2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEFwcGxpZXMgdGhlIGJhY2tncm91bmQgdG8gdGhlIGNhbnZhcyB1c2luZyBDU1MuXG4gICAgICogQG1ldGhvZCBhcHBseUJhY2tncm91bmRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7cmVuZGVyfSByZW5kZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gYmFja2dyb3VuZFxuICAgICAqL1xuICAgIHZhciBfYXBwbHlCYWNrZ3JvdW5kID0gZnVuY3Rpb24ocmVuZGVyLCBiYWNrZ3JvdW5kKSB7XG4gICAgICAgIHZhciBjc3NCYWNrZ3JvdW5kID0gYmFja2dyb3VuZDtcblxuICAgICAgICBpZiAoLyhqcGd8Z2lmfHBuZykkLy50ZXN0KGJhY2tncm91bmQpKVxuICAgICAgICAgICAgY3NzQmFja2dyb3VuZCA9ICd1cmwoJyArIGJhY2tncm91bmQgKyAnKSc7XG5cbiAgICAgICAgcmVuZGVyLmNhbnZhcy5zdHlsZS5iYWNrZ3JvdW5kID0gY3NzQmFja2dyb3VuZDtcbiAgICAgICAgcmVuZGVyLmNhbnZhcy5zdHlsZS5iYWNrZ3JvdW5kU2l6ZSA9IFwiY29udGFpblwiO1xuICAgICAgICByZW5kZXIuY3VycmVudEJhY2tncm91bmQgPSBiYWNrZ3JvdW5kO1xuICAgIH07XG5cbiAgICAvKlxuICAgICpcbiAgICAqICBFdmVudHMgRG9jdW1lbnRhdGlvblxuICAgICpcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCBiZWZvcmUgcmVuZGVyaW5nXG4gICAgKlxuICAgICogQGV2ZW50IGJlZm9yZVJlbmRlclxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYWZ0ZXIgcmVuZGVyaW5nXG4gICAgKlxuICAgICogQGV2ZW50IGFmdGVyUmVuZGVyXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnQudGltZXN0YW1wIFRoZSBlbmdpbmUudGltaW5nLnRpbWVzdGFtcCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLypcbiAgICAqXG4gICAgKiAgUHJvcGVydGllcyBEb2N1bWVudGF0aW9uXG4gICAgKlxuICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGJhY2stcmVmZXJlbmNlIHRvIHRoZSBgTWF0dGVyLlJlbmRlcmAgbW9kdWxlLlxuICAgICAqXG4gICAgICogQGRlcHJlY2F0ZWRcbiAgICAgKiBAcHJvcGVydHkgY29udHJvbGxlclxuICAgICAqIEB0eXBlIHJlbmRlclxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGBNYXR0ZXIuRW5naW5lYCBpbnN0YW5jZSB0byBiZSB1c2VkLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IGVuZ2luZVxuICAgICAqIEB0eXBlIGVuZ2luZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSByZWZlcmVuY2UgdG8gdGhlIGVsZW1lbnQgd2hlcmUgdGhlIGNhbnZhcyBpcyB0byBiZSBpbnNlcnRlZCAoaWYgYHJlbmRlci5jYW52YXNgIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQpXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgZWxlbWVudFxuICAgICAqIEB0eXBlIEhUTUxFbGVtZW50XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIGNhbnZhcyBlbGVtZW50IHRvIHJlbmRlciB0by4gSWYgbm90IHNwZWNpZmllZCwgb25lIHdpbGwgYmUgY3JlYXRlZCBpZiBgcmVuZGVyLmVsZW1lbnRgIGhhcyBiZWVuIHNwZWNpZmllZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBjYW52YXNcbiAgICAgKiBAdHlwZSBIVE1MQ2FudmFzRWxlbWVudFxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYEJvdW5kc2Agb2JqZWN0IHRoYXQgc3BlY2lmaWVzIHRoZSBkcmF3aW5nIHZpZXcgcmVnaW9uLlxuICAgICAqIFJlbmRlcmluZyB3aWxsIGJlIGF1dG9tYXRpY2FsbHkgdHJhbnNmb3JtZWQgYW5kIHNjYWxlZCB0byBmaXQgd2l0aGluIHRoZSBjYW52YXMgc2l6ZSAoYHJlbmRlci5vcHRpb25zLndpZHRoYCBhbmQgYHJlbmRlci5vcHRpb25zLmhlaWdodGApLlxuICAgICAqIFRoaXMgYWxsb3dzIGZvciBjcmVhdGluZyB2aWV3cyB0aGF0IGNhbiBwYW4gb3Igem9vbSBhcm91bmQgdGhlIHNjZW5lLlxuICAgICAqIFlvdSBtdXN0IGFsc28gc2V0IGByZW5kZXIub3B0aW9ucy5oYXNCb3VuZHNgIHRvIGB0cnVlYCB0byBlbmFibGUgYm91bmRlZCByZW5kZXJpbmcuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgYm91bmRzXG4gICAgICogQHR5cGUgYm91bmRzXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgMmQgcmVuZGVyaW5nIGNvbnRleHQgZnJvbSB0aGUgYHJlbmRlci5jYW52YXNgIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgY29udGV4dFxuICAgICAqIEB0eXBlIENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNwcml0ZSB0ZXh0dXJlIGNhY2hlLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IHRleHR1cmVzXG4gICAgICogQHR5cGUge31cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBtb3VzZSB0byByZW5kZXIgaWYgYHJlbmRlci5vcHRpb25zLnNob3dNb3VzZVBvc2l0aW9uYCBpcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IG1vdXNlXG4gICAgICogQHR5cGUgbW91c2VcbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBUaGUgY29uZmlndXJhdGlvbiBvcHRpb25zIG9mIHRoZSByZW5kZXJlci5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBvcHRpb25zXG4gICAgICogQHR5cGUge31cbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSB0YXJnZXQgd2lkdGggaW4gcGl4ZWxzIG9mIHRoZSBgcmVuZGVyLmNhbnZhc2AgdG8gYmUgY3JlYXRlZC5cbiAgICAgKiBTZWUgYWxzbyB0aGUgYG9wdGlvbnMucGl4ZWxSYXRpb2AgcHJvcGVydHkgdG8gY2hhbmdlIHJlbmRlciBxdWFsaXR5LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IG9wdGlvbnMud2lkdGhcbiAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgKiBAZGVmYXVsdCA4MDBcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSB0YXJnZXQgaGVpZ2h0IGluIHBpeGVscyBvZiB0aGUgYHJlbmRlci5jYW52YXNgIHRvIGJlIGNyZWF0ZWQuXG4gICAgICogU2VlIGFsc28gdGhlIGBvcHRpb25zLnBpeGVsUmF0aW9gIHByb3BlcnR5IHRvIGNoYW5nZSByZW5kZXIgcXVhbGl0eS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBvcHRpb25zLmhlaWdodFxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDYwMFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogVGhlIFtwaXhlbCByYXRpb10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dpbmRvdy9kZXZpY2VQaXhlbFJhdGlvKSB0byB1c2Ugd2hlbiByZW5kZXJpbmcuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgb3B0aW9ucy5waXhlbFJhdGlvXG4gICAgICogQHR5cGUgbnVtYmVyXG4gICAgICogQGRlZmF1bHQgMVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBDU1MgYmFja2dyb3VuZCBjb2xvciBzdHJpbmcgdG8gdXNlIHdoZW4gYHJlbmRlci5vcHRpb25zLndpcmVmcmFtZXNgIGlzIGRpc2FibGVkLlxuICAgICAqIFRoaXMgbWF5IGJlIGFsc28gc2V0IHRvIGAndHJhbnNwYXJlbnQnYCBvciBlcXVpdmFsZW50LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IG9wdGlvbnMuYmFja2dyb3VuZFxuICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAqIEBkZWZhdWx0ICcjMTQxNTFmJ1xuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBDU1MgYmFja2dyb3VuZCBjb2xvciBzdHJpbmcgdG8gdXNlIHdoZW4gYHJlbmRlci5vcHRpb25zLndpcmVmcmFtZXNgIGlzIGVuYWJsZWQuXG4gICAgICogVGhpcyBtYXkgYmUgYWxzbyBzZXQgdG8gYCd0cmFuc3BhcmVudCdgIG9yIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgb3B0aW9ucy53aXJlZnJhbWVCYWNrZ3JvdW5kXG4gICAgICogQHR5cGUgc3RyaW5nXG4gICAgICogQGRlZmF1bHQgJyMxNDE1MWYnXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdGhhdCBzcGVjaWZpZXMgaWYgYHJlbmRlci5ib3VuZHNgIHNob3VsZCBiZSB1c2VkIHdoZW4gcmVuZGVyaW5nLlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IG9wdGlvbnMuaGFzQm91bmRzXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdG8gZW5hYmxlIG9yIGRpc2FibGUgYWxsIGRlYnVnIGluZm9ybWF0aW9uIG92ZXJsYXlzIHRvZ2V0aGVyLiAgXG4gICAgICogVGhpcyBpbmNsdWRlcyBhbmQgaGFzIHByaW9yaXR5IG92ZXIgdGhlIHZhbHVlcyBvZjpcbiAgICAgKlxuICAgICAqIC0gYHJlbmRlci5vcHRpb25zLnNob3dTdGF0c2BcbiAgICAgKiAtIGByZW5kZXIub3B0aW9ucy5zaG93UGVyZm9ybWFuY2VgXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgb3B0aW9ucy5zaG93RGVidWdcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0byBlbmFibGUgb3IgZGlzYWJsZSB0aGUgZW5naW5lIHN0YXRzIGluZm8gb3ZlcmxheS4gIFxuICAgICAqIEZyb20gbGVmdCB0byByaWdodCwgdGhlIHZhbHVlcyBzaG93biBhcmU6XG4gICAgICpcbiAgICAgKiAtIGJvZHkgcGFydHMgdG90YWxcbiAgICAgKiAtIGJvZHkgdG90YWxcbiAgICAgKiAtIGNvbnN0cmFpbnRzIHRvdGFsXG4gICAgICogLSBjb21wb3NpdGVzIHRvdGFsXG4gICAgICogLSBjb2xsaXNpb24gcGFpcnMgdG90YWxcbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBvcHRpb25zLnNob3dTdGF0c1xuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBmbGFnIHRvIGVuYWJsZSBvciBkaXNhYmxlIHBlcmZvcm1hbmNlIGNoYXJ0cy4gIFxuICAgICAqIEZyb20gbGVmdCB0byByaWdodCwgdGhlIHZhbHVlcyBzaG93biBhcmU6XG4gICAgICpcbiAgICAgKiAtIGF2ZXJhZ2UgcmVuZGVyIGZyZXF1ZW5jeSAoZS5nLiA2MCBmcHMpXG4gICAgICogLSBleGFjdCBlbmdpbmUgZGVsdGEgdGltZSB1c2VkIGZvciBsYXN0IHVwZGF0ZSAoZS5nLiAxNi42Nm1zKVxuICAgICAqIC0gYXZlcmFnZSBlbmdpbmUgZXhlY3V0aW9uIGR1cmF0aW9uIChlLmcuIDUuMDBtcylcbiAgICAgKiAtIGF2ZXJhZ2UgcmVuZGVyIGV4ZWN1dGlvbiBkdXJhdGlvbiAoZS5nLiAwLjQwbXMpXG4gICAgICogLSBhdmVyYWdlIGVmZmVjdGl2ZSBwbGF5IHNwZWVkIChlLmcuICcxLjAweCcgaXMgJ3JlYWwtdGltZScpXG4gICAgICpcbiAgICAgKiBFYWNoIHZhbHVlIGlzIHJlY29yZGVkIG92ZXIgYSBmaXhlZCBzYW1wbGUgb2YgcGFzdCBmcmFtZXMgKDYwIGZyYW1lcykuXG4gICAgICpcbiAgICAgKiBBIGNoYXJ0IHNob3duIGJlbG93IGVhY2ggdmFsdWUgaW5kaWNhdGVzIHRoZSB2YXJpYW5jZSBmcm9tIHRoZSBhdmVyYWdlIG92ZXIgdGhlIHNhbXBsZS5cbiAgICAgKiBUaGUgbW9yZSBzdGFibGUgb3IgZml4ZWQgdGhlIHZhbHVlIGlzIHRoZSBmbGF0dGVyIHRoZSBjaGFydCB3aWxsIGFwcGVhci5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBvcHRpb25zLnNob3dQZXJmb3JtYW5jZVxuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIFxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0byBlbmFibGUgb3IgZGlzYWJsZSByZW5kZXJpbmcgZW50aXJlbHkuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgb3B0aW9ucy5lbmFibGVkXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdG8gdG9nZ2xlIHdpcmVmcmFtZSByZW5kZXJpbmcgb3RoZXJ3aXNlIHNvbGlkIGZpbGwgcmVuZGVyaW5nIGlzIHVzZWQuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgb3B0aW9ucy53aXJlZnJhbWVzXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0byBlbmFibGUgb3IgZGlzYWJsZSBzbGVlcGluZyBib2RpZXMgaW5kaWNhdG9ycy5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBvcHRpb25zLnNob3dTbGVlcGluZ1xuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdG8gZW5hYmxlIG9yIGRpc2FibGUgdGhlIGRlYnVnIGluZm9ybWF0aW9uIG92ZXJsYXkuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgb3B0aW9ucy5zaG93RGVidWdcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0byBlbmFibGUgb3IgZGlzYWJsZSB0aGUgY29sbGlzaW9uIGJyb2FkcGhhc2UgZGVidWcgb3ZlcmxheS5cbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIG5vIGxvbmdlciBpbXBsZW1lbnRlZFxuICAgICAqIEBwcm9wZXJ0eSBvcHRpb25zLnNob3dCcm9hZHBoYXNlXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdG8gZW5hYmxlIG9yIGRpc2FibGUgdGhlIGJvZHkgYm91bmRzIGRlYnVnIG92ZXJsYXkuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgb3B0aW9ucy5zaG93Qm91bmRzXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdG8gZW5hYmxlIG9yIGRpc2FibGUgdGhlIGJvZHkgdmVsb2NpdHkgZGVidWcgb3ZlcmxheS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBvcHRpb25zLnNob3dWZWxvY2l0eVxuICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBmbGFnIHRvIGVuYWJsZSBvciBkaXNhYmxlIHRoZSBib2R5IGNvbGxpc2lvbnMgZGVidWcgb3ZlcmxheS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBvcHRpb25zLnNob3dDb2xsaXNpb25zXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdG8gZW5hYmxlIG9yIGRpc2FibGUgdGhlIGNvbGxpc2lvbiByZXNvbHZlciBzZXBhcmF0aW9ucyBkZWJ1ZyBvdmVybGF5LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IG9wdGlvbnMuc2hvd1NlcGFyYXRpb25zXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdG8gZW5hYmxlIG9yIGRpc2FibGUgdGhlIGJvZHkgYXhlcyBkZWJ1ZyBvdmVybGF5LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IG9wdGlvbnMuc2hvd0F4ZXNcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0byBlbmFibGUgb3IgZGlzYWJsZSB0aGUgYm9keSBwb3NpdGlvbnMgZGVidWcgb3ZlcmxheS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBvcHRpb25zLnNob3dQb3NpdGlvbnNcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0byBlbmFibGUgb3IgZGlzYWJsZSB0aGUgYm9keSBhbmdsZSBkZWJ1ZyBvdmVybGF5LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IG9wdGlvbnMuc2hvd0FuZ2xlSW5kaWNhdG9yXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdG8gZW5hYmxlIG9yIGRpc2FibGUgdGhlIGJvZHkgYW5kIHBhcnQgaWRzIGRlYnVnIG92ZXJsYXkuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgb3B0aW9ucy5zaG93SWRzXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdG8gZW5hYmxlIG9yIGRpc2FibGUgdGhlIGJvZHkgdmVydGV4IG51bWJlcnMgZGVidWcgb3ZlcmxheS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBvcHRpb25zLnNob3dWZXJ0ZXhOdW1iZXJzXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGZsYWcgdG8gZW5hYmxlIG9yIGRpc2FibGUgdGhlIGJvZHkgY29udmV4IGh1bGxzIGRlYnVnIG92ZXJsYXkuXG4gICAgICpcbiAgICAgKiBAcHJvcGVydHkgb3B0aW9ucy5zaG93Q29udmV4SHVsbHNcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0byBlbmFibGUgb3IgZGlzYWJsZSB0aGUgYm9keSBpbnRlcm5hbCBlZGdlcyBkZWJ1ZyBvdmVybGF5LlxuICAgICAqXG4gICAgICogQHByb3BlcnR5IG9wdGlvbnMuc2hvd0ludGVybmFsRWRnZXNcbiAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgZmxhZyB0byBlbmFibGUgb3IgZGlzYWJsZSB0aGUgbW91c2UgcG9zaXRpb24gZGVidWcgb3ZlcmxheS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBvcHRpb25zLnNob3dNb3VzZVBvc2l0aW9uXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG5cbn0pKCk7XG5cblxuLyoqKi8gfSksXG4vKiAyNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKipcbiogVGhlIGBNYXR0ZXIuUnVubmVyYCBtb2R1bGUgaXMgYW4gb3B0aW9uYWwgdXRpbGl0eSB3aGljaCBwcm92aWRlcyBhIGdhbWUgbG9vcCwgXG4qIHRoYXQgaGFuZGxlcyBjb250aW51b3VzbHkgdXBkYXRpbmcgYSBgTWF0dGVyLkVuZ2luZWAgZm9yIHlvdSB3aXRoaW4gYSBicm93c2VyLlxuKiBJdCBpcyBpbnRlbmRlZCBmb3IgZGV2ZWxvcG1lbnQgYW5kIGRlYnVnZ2luZyBwdXJwb3NlcywgYnV0IG1heSBhbHNvIGJlIHN1aXRhYmxlIGZvciBzaW1wbGUgZ2FtZXMuXG4qIElmIHlvdSBhcmUgdXNpbmcgeW91ciBvd24gZ2FtZSBsb29wIGluc3RlYWQsIHRoZW4geW91IGRvIG5vdCBuZWVkIHRoZSBgTWF0dGVyLlJ1bm5lcmAgbW9kdWxlLlxuKiBJbnN0ZWFkIGp1c3QgY2FsbCBgRW5naW5lLnVwZGF0ZShlbmdpbmUsIGRlbHRhKWAgaW4geW91ciBvd24gbG9vcC5cbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIFJ1bm5lclxuKi9cblxudmFyIFJ1bm5lciA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJ1bm5lcjtcblxudmFyIEV2ZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG52YXIgRW5naW5lID0gX193ZWJwYWNrX3JlcXVpcmVfXygxNyk7XG52YXIgQ29tbW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgdmFyIF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUsXG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZTtcblxuICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBfcmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cud2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHwgd2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lO1xuICAgXG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZSA9IHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHx8IHdpbmRvdy53ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSB8fCB3aW5kb3cubXNDYW5jZWxBbmltYXRpb25GcmFtZTtcbiAgICB9XG5cbiAgICBpZiAoIV9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpIHtcbiAgICAgICAgdmFyIF9mcmFtZVRpbWVvdXQ7XG5cbiAgICAgICAgX3JlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKGNhbGxiYWNrKXsgXG4gICAgICAgICAgICBfZnJhbWVUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpIHsgXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soQ29tbW9uLm5vdygpKTsgXG4gICAgICAgICAgICB9LCAxMDAwIC8gNjApO1xuICAgICAgICB9O1xuXG4gICAgICAgIF9jYW5jZWxBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KF9mcmFtZVRpbWVvdXQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgUnVubmVyLiBUaGUgb3B0aW9ucyBwYXJhbWV0ZXIgaXMgYW4gb2JqZWN0IHRoYXQgc3BlY2lmaWVzIGFueSBwcm9wZXJ0aWVzIHlvdSB3aXNoIHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0cy5cbiAgICAgKiBAbWV0aG9kIGNyZWF0ZVxuICAgICAqIEBwYXJhbSB7fSBvcHRpb25zXG4gICAgICovXG4gICAgUnVubmVyLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAgICAgZnBzOiA2MCxcbiAgICAgICAgICAgIGRlbHRhU2FtcGxlU2l6ZTogNjAsXG4gICAgICAgICAgICBjb3VudGVyVGltZXN0YW1wOiAwLFxuICAgICAgICAgICAgZnJhbWVDb3VudGVyOiAwLFxuICAgICAgICAgICAgZGVsdGFIaXN0b3J5OiBbXSxcbiAgICAgICAgICAgIHRpbWVQcmV2OiBudWxsLFxuICAgICAgICAgICAgZnJhbWVSZXF1ZXN0SWQ6IG51bGwsXG4gICAgICAgICAgICBpc0ZpeGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGVuYWJsZWQ6IHRydWVcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgcnVubmVyID0gQ29tbW9uLmV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XG5cbiAgICAgICAgcnVubmVyLmRlbHRhID0gcnVubmVyLmRlbHRhIHx8IDEwMDAgLyBydW5uZXIuZnBzO1xuICAgICAgICBydW5uZXIuZGVsdGFNaW4gPSBydW5uZXIuZGVsdGFNaW4gfHwgMTAwMCAvIHJ1bm5lci5mcHM7XG4gICAgICAgIHJ1bm5lci5kZWx0YU1heCA9IHJ1bm5lci5kZWx0YU1heCB8fCAxMDAwIC8gKHJ1bm5lci5mcHMgKiAwLjUpO1xuICAgICAgICBydW5uZXIuZnBzID0gMTAwMCAvIHJ1bm5lci5kZWx0YTtcblxuICAgICAgICByZXR1cm4gcnVubmVyO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb250aW51b3VzbHkgdGlja3MgYSBgTWF0dGVyLkVuZ2luZWAgYnkgY2FsbGluZyBgUnVubmVyLnRpY2tgIG9uIHRoZSBgcmVxdWVzdEFuaW1hdGlvbkZyYW1lYCBldmVudC5cbiAgICAgKiBAbWV0aG9kIHJ1blxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKi9cbiAgICBSdW5uZXIucnVuID0gZnVuY3Rpb24ocnVubmVyLCBlbmdpbmUpIHtcbiAgICAgICAgLy8gY3JlYXRlIHJ1bm5lciBpZiBlbmdpbmUgaXMgZmlyc3QgYXJndW1lbnRcbiAgICAgICAgaWYgKHR5cGVvZiBydW5uZXIucG9zaXRpb25JdGVyYXRpb25zICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZW5naW5lID0gcnVubmVyO1xuICAgICAgICAgICAgcnVubmVyID0gUnVubmVyLmNyZWF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgKGZ1bmN0aW9uIHJ1bih0aW1lKXtcbiAgICAgICAgICAgIHJ1bm5lci5mcmFtZVJlcXVlc3RJZCA9IF9yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocnVuKTtcblxuICAgICAgICAgICAgaWYgKHRpbWUgJiYgcnVubmVyLmVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBSdW5uZXIudGljayhydW5uZXIsIGVuZ2luZSwgdGltZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgcmV0dXJuIHJ1bm5lcjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQSBnYW1lIGxvb3AgdXRpbGl0eSB0aGF0IHVwZGF0ZXMgdGhlIGVuZ2luZSBhbmQgcmVuZGVyZXIgYnkgb25lIHN0ZXAgKGEgJ3RpY2snKS5cbiAgICAgKiBGZWF0dXJlcyBkZWx0YSBzbW9vdGhpbmcsIHRpbWUgY29ycmVjdGlvbiBhbmQgZml4ZWQgb3IgZHluYW1pYyB0aW1pbmcuXG4gICAgICogQ29uc2lkZXIganVzdCBgRW5naW5lLnVwZGF0ZShlbmdpbmUsIGRlbHRhKWAgaWYgeW91J3JlIHVzaW5nIHlvdXIgb3duIGxvb3AuXG4gICAgICogQG1ldGhvZCB0aWNrXG4gICAgICogQHBhcmFtIHtydW5uZXJ9IHJ1bm5lclxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdGltZVxuICAgICAqL1xuICAgIFJ1bm5lci50aWNrID0gZnVuY3Rpb24ocnVubmVyLCBlbmdpbmUsIHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWluZyA9IGVuZ2luZS50aW1pbmcsXG4gICAgICAgICAgICBkZWx0YTtcblxuICAgICAgICBpZiAocnVubmVyLmlzRml4ZWQpIHtcbiAgICAgICAgICAgIC8vIGZpeGVkIHRpbWVzdGVwXG4gICAgICAgICAgICBkZWx0YSA9IHJ1bm5lci5kZWx0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGR5bmFtaWMgdGltZXN0ZXAgYmFzZWQgb24gd2FsbCBjbG9jayBiZXR3ZWVuIGNhbGxzXG4gICAgICAgICAgICBkZWx0YSA9ICh0aW1lIC0gcnVubmVyLnRpbWVQcmV2KSB8fCBydW5uZXIuZGVsdGE7XG4gICAgICAgICAgICBydW5uZXIudGltZVByZXYgPSB0aW1lO1xuXG4gICAgICAgICAgICAvLyBvcHRpbWlzdGljYWxseSBmaWx0ZXIgZGVsdGEgb3ZlciBhIGZldyBmcmFtZXMsIHRvIGltcHJvdmUgc3RhYmlsaXR5XG4gICAgICAgICAgICBydW5uZXIuZGVsdGFIaXN0b3J5LnB1c2goZGVsdGEpO1xuICAgICAgICAgICAgcnVubmVyLmRlbHRhSGlzdG9yeSA9IHJ1bm5lci5kZWx0YUhpc3Rvcnkuc2xpY2UoLXJ1bm5lci5kZWx0YVNhbXBsZVNpemUpO1xuICAgICAgICAgICAgZGVsdGEgPSBNYXRoLm1pbi5hcHBseShudWxsLCBydW5uZXIuZGVsdGFIaXN0b3J5KTtcblxuICAgICAgICAgICAgLy8gbGltaXQgZGVsdGFcbiAgICAgICAgICAgIGRlbHRhID0gZGVsdGEgPCBydW5uZXIuZGVsdGFNaW4gPyBydW5uZXIuZGVsdGFNaW4gOiBkZWx0YTtcbiAgICAgICAgICAgIGRlbHRhID0gZGVsdGEgPiBydW5uZXIuZGVsdGFNYXggPyBydW5uZXIuZGVsdGFNYXggOiBkZWx0YTtcblxuICAgICAgICAgICAgLy8gdXBkYXRlIGVuZ2luZSB0aW1pbmcgb2JqZWN0XG4gICAgICAgICAgICBydW5uZXIuZGVsdGEgPSBkZWx0YTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGNyZWF0ZSBhbiBldmVudCBvYmplY3RcbiAgICAgICAgdmFyIGV2ZW50ID0ge1xuICAgICAgICAgICAgdGltZXN0YW1wOiB0aW1pbmcudGltZXN0YW1wXG4gICAgICAgIH07XG5cbiAgICAgICAgRXZlbnRzLnRyaWdnZXIocnVubmVyLCAnYmVmb3JlVGljaycsIGV2ZW50KTtcblxuICAgICAgICAvLyBmcHMgY291bnRlclxuICAgICAgICBydW5uZXIuZnJhbWVDb3VudGVyICs9IDE7XG4gICAgICAgIGlmICh0aW1lIC0gcnVubmVyLmNvdW50ZXJUaW1lc3RhbXAgPj0gMTAwMCkge1xuICAgICAgICAgICAgcnVubmVyLmZwcyA9IHJ1bm5lci5mcmFtZUNvdW50ZXIgKiAoKHRpbWUgLSBydW5uZXIuY291bnRlclRpbWVzdGFtcCkgLyAxMDAwKTtcbiAgICAgICAgICAgIHJ1bm5lci5jb3VudGVyVGltZXN0YW1wID0gdGltZTtcbiAgICAgICAgICAgIHJ1bm5lci5mcmFtZUNvdW50ZXIgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgRXZlbnRzLnRyaWdnZXIocnVubmVyLCAndGljaycsIGV2ZW50KTtcblxuICAgICAgICAvLyB1cGRhdGVcbiAgICAgICAgRXZlbnRzLnRyaWdnZXIocnVubmVyLCAnYmVmb3JlVXBkYXRlJywgZXZlbnQpO1xuXG4gICAgICAgIEVuZ2luZS51cGRhdGUoZW5naW5lLCBkZWx0YSk7XG5cbiAgICAgICAgRXZlbnRzLnRyaWdnZXIocnVubmVyLCAnYWZ0ZXJVcGRhdGUnLCBldmVudCk7XG5cbiAgICAgICAgRXZlbnRzLnRyaWdnZXIocnVubmVyLCAnYWZ0ZXJUaWNrJywgZXZlbnQpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFbmRzIGV4ZWN1dGlvbiBvZiBgUnVubmVyLnJ1bmAgb24gdGhlIGdpdmVuIGBydW5uZXJgLCBieSBjYW5jZWxpbmcgdGhlIGFuaW1hdGlvbiBmcmFtZSByZXF1ZXN0IGV2ZW50IGxvb3AuXG4gICAgICogSWYgeW91IHdpc2ggdG8gb25seSB0ZW1wb3JhcmlseSBwYXVzZSB0aGUgZW5naW5lLCBzZWUgYGVuZ2luZS5lbmFibGVkYCBpbnN0ZWFkLlxuICAgICAqIEBtZXRob2Qgc3RvcFxuICAgICAqIEBwYXJhbSB7cnVubmVyfSBydW5uZXJcbiAgICAgKi9cbiAgICBSdW5uZXIuc3RvcCA9IGZ1bmN0aW9uKHJ1bm5lcikge1xuICAgICAgICBfY2FuY2VsQW5pbWF0aW9uRnJhbWUocnVubmVyLmZyYW1lUmVxdWVzdElkKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIGBSdW5uZXIucnVuYC5cbiAgICAgKiBAbWV0aG9kIHN0YXJ0XG4gICAgICogQHBhcmFtIHtydW5uZXJ9IHJ1bm5lclxuICAgICAqIEBwYXJhbSB7ZW5naW5lfSBlbmdpbmVcbiAgICAgKi9cbiAgICBSdW5uZXIuc3RhcnQgPSBmdW5jdGlvbihydW5uZXIsIGVuZ2luZSkge1xuICAgICAgICBSdW5uZXIucnVuKHJ1bm5lciwgZW5naW5lKTtcbiAgICB9O1xuXG4gICAgLypcbiAgICAqXG4gICAgKiAgRXZlbnRzIERvY3VtZW50YXRpb25cbiAgICAqXG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYXQgdGhlIHN0YXJ0IG9mIGEgdGljaywgYmVmb3JlIGFueSB1cGRhdGVzIHRvIHRoZSBlbmdpbmUgb3IgdGltaW5nXG4gICAgKlxuICAgICogQGV2ZW50IGJlZm9yZVRpY2tcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC50aW1lc3RhbXAgVGhlIGVuZ2luZS50aW1pbmcudGltZXN0YW1wIG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIGFmdGVyIGVuZ2luZSB0aW1pbmcgdXBkYXRlZCwgYnV0IGp1c3QgYmVmb3JlIHVwZGF0ZVxuICAgICpcbiAgICAqIEBldmVudCB0aWNrXG4gICAgKiBAcGFyYW0ge30gZXZlbnQgQW4gZXZlbnQgb2JqZWN0XG4gICAgKiBAcGFyYW0ge251bWJlcn0gZXZlbnQudGltZXN0YW1wIFRoZSBlbmdpbmUudGltaW5nLnRpbWVzdGFtcCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5zb3VyY2UgVGhlIHNvdXJjZSBvYmplY3Qgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQubmFtZSBUaGUgbmFtZSBvZiB0aGUgZXZlbnRcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgKiBGaXJlZCBhdCB0aGUgZW5kIG9mIGEgdGljaywgYWZ0ZXIgZW5naW5lIHVwZGF0ZSBhbmQgYWZ0ZXIgcmVuZGVyaW5nXG4gICAgKlxuICAgICogQGV2ZW50IGFmdGVyVGlja1xuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qKlxuICAgICogRmlyZWQgYmVmb3JlIHVwZGF0ZVxuICAgICpcbiAgICAqIEBldmVudCBiZWZvcmVVcGRhdGVcbiAgICAqIEBwYXJhbSB7fSBldmVudCBBbiBldmVudCBvYmplY3RcbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBldmVudC50aW1lc3RhbXAgVGhlIGVuZ2luZS50aW1pbmcudGltZXN0YW1wIG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50LnNvdXJjZSBUaGUgc291cmNlIG9iamVjdCBvZiB0aGUgZXZlbnRcbiAgICAqIEBwYXJhbSB7fSBldmVudC5uYW1lIFRoZSBuYW1lIG9mIHRoZSBldmVudFxuICAgICovXG5cbiAgICAvKipcbiAgICAqIEZpcmVkIGFmdGVyIHVwZGF0ZVxuICAgICpcbiAgICAqIEBldmVudCBhZnRlclVwZGF0ZVxuICAgICogQHBhcmFtIHt9IGV2ZW50IEFuIGV2ZW50IG9iamVjdFxuICAgICogQHBhcmFtIHtudW1iZXJ9IGV2ZW50LnRpbWVzdGFtcCBUaGUgZW5naW5lLnRpbWluZy50aW1lc3RhbXAgb2YgdGhlIGV2ZW50XG4gICAgKiBAcGFyYW0ge30gZXZlbnQuc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0IG9mIHRoZSBldmVudFxuICAgICogQHBhcmFtIHt9IGV2ZW50Lm5hbWUgVGhlIG5hbWUgb2YgdGhlIGV2ZW50XG4gICAgKi9cblxuICAgIC8qXG4gICAgKlxuICAgICogIFByb3BlcnRpZXMgRG9jdW1lbnRhdGlvblxuICAgICpcbiAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQSBmbGFnIHRoYXQgc3BlY2lmaWVzIHdoZXRoZXIgdGhlIHJ1bm5lciBpcyBydW5uaW5nIG9yIG5vdC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBlbmFibGVkXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEEgYEJvb2xlYW5gIHRoYXQgc3BlY2lmaWVzIGlmIHRoZSBydW5uZXIgc2hvdWxkIHVzZSBhIGZpeGVkIHRpbWVzdGVwIChvdGhlcndpc2UgaXQgaXMgdmFyaWFibGUpLlxuICAgICAqIElmIHRpbWluZyBpcyBmaXhlZCwgdGhlbiB0aGUgYXBwYXJlbnQgc2ltdWxhdGlvbiBzcGVlZCB3aWxsIGNoYW5nZSBkZXBlbmRpbmcgb24gdGhlIGZyYW1lIHJhdGUgKGJ1dCBiZWhhdmlvdXIgd2lsbCBiZSBkZXRlcm1pbmlzdGljKS5cbiAgICAgKiBJZiB0aGUgdGltaW5nIGlzIHZhcmlhYmxlLCB0aGVuIHRoZSBhcHBhcmVudCBzaW11bGF0aW9uIHNwZWVkIHdpbGwgYmUgY29uc3RhbnQgKGFwcHJveGltYXRlbHksIGJ1dCBhdCB0aGUgY29zdCBvZiBkZXRlcm1pbmluaXNtKS5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBpc0ZpeGVkXG4gICAgICogQHR5cGUgYm9vbGVhblxuICAgICAqIEBkZWZhdWx0IGZhbHNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBIGBOdW1iZXJgIHRoYXQgc3BlY2lmaWVzIHRoZSB0aW1lIHN0ZXAgYmV0d2VlbiB1cGRhdGVzIGluIG1pbGxpc2Vjb25kcy5cbiAgICAgKiBJZiBgZW5naW5lLnRpbWluZy5pc0ZpeGVkYCBpcyBzZXQgdG8gYHRydWVgLCB0aGVuIGBkZWx0YWAgaXMgZml4ZWQuXG4gICAgICogSWYgaXQgaXMgYGZhbHNlYCwgdGhlbiBgZGVsdGFgIGNhbiBkeW5hbWljYWxseSBjaGFuZ2UgdG8gbWFpbnRhaW4gdGhlIGNvcnJlY3QgYXBwYXJlbnQgc2ltdWxhdGlvbiBzcGVlZC5cbiAgICAgKlxuICAgICAqIEBwcm9wZXJ0eSBkZWx0YVxuICAgICAqIEB0eXBlIG51bWJlclxuICAgICAqIEBkZWZhdWx0IDEwMDAgLyA2MFxuICAgICAqL1xuXG59KSgpO1xuXG5cbi8qKiovIH0pLFxuLyogMjggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuLyoqXG4qIFRoaXMgbW9kdWxlIGhhcyBub3cgYmVlbiByZXBsYWNlZCBieSBgTWF0dGVyLkNvbGxpc2lvbmAuXG4qXG4qIEFsbCB1c2FnZSBzaG91bGQgYmUgbWlncmF0ZWQgdG8gYE1hdHRlci5Db2xsaXNpb25gLlxuKiBGb3IgYmFjay1jb21wYXRpYmlsaXR5IHB1cnBvc2VzIHRoaXMgbW9kdWxlIHdpbGwgcmVtYWluIGZvciBhIHNob3J0IHRlcm0gYW5kIHRoZW4gbGF0ZXIgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLlxuKlxuKiBUaGUgYE1hdHRlci5TQVRgIG1vZHVsZSBjb250YWlucyBtZXRob2RzIGZvciBkZXRlY3RpbmcgY29sbGlzaW9ucyB1c2luZyB0aGUgU2VwYXJhdGluZyBBeGlzIFRoZW9yZW0uXG4qXG4qIEBjbGFzcyBTQVRcbiogQGRlcHJlY2F0ZWRcbiovXG5cbnZhciBTQVQgPSB7fTtcblxubW9kdWxlLmV4cG9ydHMgPSBTQVQ7XG5cbnZhciBDb2xsaXNpb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xudmFyIENvbW1vbiA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG52YXIgZGVwcmVjYXRlZCA9IENvbW1vbi5kZXByZWNhdGVkO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBEZXRlY3QgY29sbGlzaW9uIGJldHdlZW4gdHdvIGJvZGllcyB1c2luZyB0aGUgU2VwYXJhdGluZyBBeGlzIFRoZW9yZW0uXG4gICAgICogQGRlcHJlY2F0ZWQgcmVwbGFjZWQgYnkgQ29sbGlzaW9uLmNvbGxpZGVzXG4gICAgICogQG1ldGhvZCBjb2xsaWRlc1xuICAgICAqIEBwYXJhbSB7Ym9keX0gYm9keUFcbiAgICAgKiBAcGFyYW0ge2JvZHl9IGJvZHlCXG4gICAgICogQHJldHVybiB7Y29sbGlzaW9ufSBjb2xsaXNpb25cbiAgICAgKi9cbiAgICBTQVQuY29sbGlkZXMgPSBmdW5jdGlvbihib2R5QSwgYm9keUIpIHtcbiAgICAgICAgcmV0dXJuIENvbGxpc2lvbi5jb2xsaWRlcyhib2R5QSwgYm9keUIpO1xuICAgIH07XG5cbiAgICBkZXByZWNhdGVkKFNBVCwgJ2NvbGxpZGVzJywgJ1NBVC5jb2xsaWRlcyDinqQgcmVwbGFjZWQgYnkgQ29sbGlzaW9uLmNvbGxpZGVzJyk7XG5cbn0pKCk7XG5cblxuLyoqKi8gfSksXG4vKiAyOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKipcbiogVGhlIGBNYXR0ZXIuU3ZnYCBtb2R1bGUgY29udGFpbnMgbWV0aG9kcyBmb3IgY29udmVydGluZyBTVkcgaW1hZ2VzIGludG8gYW4gYXJyYXkgb2YgdmVjdG9yIHBvaW50cy5cbipcbiogVG8gdXNlIHRoaXMgbW9kdWxlIHlvdSBhbHNvIG5lZWQgdGhlIFNWR1BhdGhTZWcgcG9seWZpbGw6IGh0dHBzOi8vZ2l0aHViLmNvbS9wcm9nZXJzL3BhdGhzZWdcbipcbiogU2VlIHRoZSBpbmNsdWRlZCB1c2FnZSBbZXhhbXBsZXNdKGh0dHBzOi8vZ2l0aHViLmNvbS9saWFicnUvbWF0dGVyLWpzL3RyZWUvbWFzdGVyL2V4YW1wbGVzKS5cbipcbiogQGNsYXNzIFN2Z1xuKi9cblxudmFyIFN2ZyA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN2ZztcblxudmFyIEJvdW5kcyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG52YXIgQ29tbW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYW4gU1ZHIHBhdGggaW50byBhbiBhcnJheSBvZiB2ZWN0b3IgcG9pbnRzLlxuICAgICAqIElmIHRoZSBpbnB1dCBwYXRoIGZvcm1zIGEgY29uY2F2ZSBzaGFwZSwgeW91IG11c3QgZGVjb21wb3NlIHRoZSByZXN1bHQgaW50byBjb252ZXggcGFydHMgYmVmb3JlIHVzZS5cbiAgICAgKiBTZWUgYEJvZGllcy5mcm9tVmVydGljZXNgIHdoaWNoIHByb3ZpZGVzIHN1cHBvcnQgZm9yIHRoaXMuXG4gICAgICogTm90ZSB0aGF0IHRoaXMgZnVuY3Rpb24gaXMgbm90IGd1YXJhbnRlZWQgdG8gc3VwcG9ydCBjb21wbGV4IHBhdGhzIChzdWNoIGFzIHRob3NlIHdpdGggaG9sZXMpLlxuICAgICAqIFlvdSBtdXN0IGxvYWQgdGhlIGBwYXRoc2VnLmpzYCBwb2x5ZmlsbCBvbiBuZXdlciBicm93c2Vycy5cbiAgICAgKiBAbWV0aG9kIHBhdGhUb1ZlcnRpY2VzXG4gICAgICogQHBhcmFtIHtTVkdQYXRoRWxlbWVudH0gcGF0aFxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbc2FtcGxlTGVuZ3RoPTE1XVxuICAgICAqIEByZXR1cm4ge1ZlY3RvcltdfSBwb2ludHNcbiAgICAgKi9cbiAgICBTdmcucGF0aFRvVmVydGljZXMgPSBmdW5jdGlvbihwYXRoLCBzYW1wbGVMZW5ndGgpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmICEoJ1NWR1BhdGhTZWcnIGluIHdpbmRvdykpIHtcbiAgICAgICAgICAgIENvbW1vbi53YXJuKCdTdmcucGF0aFRvVmVydGljZXM6IFNWR1BhdGhTZWcgbm90IGRlZmluZWQsIGEgcG9seWZpbGwgaXMgcmVxdWlyZWQuJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vd291dC9zdmcudG9wb2x5LmpzL2Jsb2IvbWFzdGVyL3N2Zy50b3BvbHkuanNcbiAgICAgICAgdmFyIGksIGlsLCB0b3RhbCwgcG9pbnQsIHNlZ21lbnQsIHNlZ21lbnRzLCBcbiAgICAgICAgICAgIHNlZ21lbnRzUXVldWUsIGxhc3RTZWdtZW50LCBcbiAgICAgICAgICAgIGxhc3RQb2ludCwgc2VnbWVudEluZGV4LCBwb2ludHMgPSBbXSxcbiAgICAgICAgICAgIGx4LCBseSwgbGVuZ3RoID0gMCwgeCA9IDAsIHkgPSAwO1xuXG4gICAgICAgIHNhbXBsZUxlbmd0aCA9IHNhbXBsZUxlbmd0aCB8fCAxNTtcblxuICAgICAgICB2YXIgYWRkUG9pbnQgPSBmdW5jdGlvbihweCwgcHksIHBhdGhTZWdUeXBlKSB7XG4gICAgICAgICAgICAvLyBhbGwgb2RkLW51bWJlcmVkIHBhdGggdHlwZXMgYXJlIHJlbGF0aXZlIGV4Y2VwdCBQQVRIU0VHX0NMT1NFUEFUSCAoMSlcbiAgICAgICAgICAgIHZhciBpc1JlbGF0aXZlID0gcGF0aFNlZ1R5cGUgJSAyID09PSAxICYmIHBhdGhTZWdUeXBlID4gMTtcblxuICAgICAgICAgICAgLy8gd2hlbiB0aGUgbGFzdCBwb2ludCBkb2Vzbid0IGVxdWFsIHRoZSBjdXJyZW50IHBvaW50IGFkZCB0aGUgY3VycmVudCBwb2ludFxuICAgICAgICAgICAgaWYgKCFsYXN0UG9pbnQgfHwgcHggIT0gbGFzdFBvaW50LnggfHwgcHkgIT0gbGFzdFBvaW50LnkpIHtcbiAgICAgICAgICAgICAgICBpZiAobGFzdFBvaW50ICYmIGlzUmVsYXRpdmUpIHtcbiAgICAgICAgICAgICAgICAgICAgbHggPSBsYXN0UG9pbnQueDtcbiAgICAgICAgICAgICAgICAgICAgbHkgPSBsYXN0UG9pbnQueTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBseCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGx5ID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgcG9pbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IGx4ICsgcHgsXG4gICAgICAgICAgICAgICAgICAgIHk6IGx5ICsgcHlcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gc2V0IGxhc3QgcG9pbnRcbiAgICAgICAgICAgICAgICBpZiAoaXNSZWxhdGl2ZSB8fCAhbGFzdFBvaW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGxhc3RQb2ludCA9IHBvaW50O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHBvaW50cy5wdXNoKHBvaW50KTtcblxuICAgICAgICAgICAgICAgIHggPSBseCArIHB4O1xuICAgICAgICAgICAgICAgIHkgPSBseSArIHB5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBhZGRTZWdtZW50UG9pbnQgPSBmdW5jdGlvbihzZWdtZW50KSB7XG4gICAgICAgICAgICB2YXIgc2VnVHlwZSA9IHNlZ21lbnQucGF0aFNlZ1R5cGVBc0xldHRlci50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICAgICAgICAvLyBza2lwIHBhdGggZW5kc1xuICAgICAgICAgICAgaWYgKHNlZ1R5cGUgPT09ICdaJykgXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICAvLyBtYXAgc2VnbWVudCB0byB4IGFuZCB5XG4gICAgICAgICAgICBzd2l0Y2ggKHNlZ1R5cGUpIHtcblxuICAgICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICBjYXNlICdMJzpcbiAgICAgICAgICAgIGNhc2UgJ1QnOlxuICAgICAgICAgICAgY2FzZSAnQyc6XG4gICAgICAgICAgICBjYXNlICdTJzpcbiAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgICAgIHggPSBzZWdtZW50Lng7XG4gICAgICAgICAgICAgICAgeSA9IHNlZ21lbnQueTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0gnOlxuICAgICAgICAgICAgICAgIHggPSBzZWdtZW50Lng7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdWJzpcbiAgICAgICAgICAgICAgICB5ID0gc2VnbWVudC55O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBhZGRQb2ludCh4LCB5LCBzZWdtZW50LnBhdGhTZWdUeXBlKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBlbnN1cmUgcGF0aCBpcyBhYnNvbHV0ZVxuICAgICAgICBTdmcuX3N2Z1BhdGhUb0Fic29sdXRlKHBhdGgpO1xuXG4gICAgICAgIC8vIGdldCB0b3RhbCBsZW5ndGhcbiAgICAgICAgdG90YWwgPSBwYXRoLmdldFRvdGFsTGVuZ3RoKCk7XG5cbiAgICAgICAgLy8gcXVldWUgc2VnbWVudHNcbiAgICAgICAgc2VnbWVudHMgPSBbXTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHBhdGgucGF0aFNlZ0xpc3QubnVtYmVyT2ZJdGVtczsgaSArPSAxKVxuICAgICAgICAgICAgc2VnbWVudHMucHVzaChwYXRoLnBhdGhTZWdMaXN0LmdldEl0ZW0oaSkpO1xuXG4gICAgICAgIHNlZ21lbnRzUXVldWUgPSBzZWdtZW50cy5jb25jYXQoKTtcblxuICAgICAgICAvLyBzYW1wbGUgdGhyb3VnaCBwYXRoXG4gICAgICAgIHdoaWxlIChsZW5ndGggPCB0b3RhbCkge1xuICAgICAgICAgICAgLy8gZ2V0IHNlZ21lbnQgYXQgcG9zaXRpb25cbiAgICAgICAgICAgIHNlZ21lbnRJbmRleCA9IHBhdGguZ2V0UGF0aFNlZ0F0TGVuZ3RoKGxlbmd0aCk7XG4gICAgICAgICAgICBzZWdtZW50ID0gc2VnbWVudHNbc2VnbWVudEluZGV4XTtcblxuICAgICAgICAgICAgLy8gbmV3IHNlZ21lbnRcbiAgICAgICAgICAgIGlmIChzZWdtZW50ICE9IGxhc3RTZWdtZW50KSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHNlZ21lbnRzUXVldWUubGVuZ3RoICYmIHNlZ21lbnRzUXVldWVbMF0gIT0gc2VnbWVudClcbiAgICAgICAgICAgICAgICAgICAgYWRkU2VnbWVudFBvaW50KHNlZ21lbnRzUXVldWUuc2hpZnQoKSk7XG5cbiAgICAgICAgICAgICAgICBsYXN0U2VnbWVudCA9IHNlZ21lbnQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGFkZCBwb2ludHMgaW4gYmV0d2VlbiB3aGVuIGN1cnZpbmdcbiAgICAgICAgICAgIC8vIFRPRE86IGFkYXB0aXZlIHNhbXBsaW5nXG4gICAgICAgICAgICBzd2l0Y2ggKHNlZ21lbnQucGF0aFNlZ1R5cGVBc0xldHRlci50b1VwcGVyQ2FzZSgpKSB7XG5cbiAgICAgICAgICAgIGNhc2UgJ0MnOlxuICAgICAgICAgICAgY2FzZSAnVCc6XG4gICAgICAgICAgICBjYXNlICdTJzpcbiAgICAgICAgICAgIGNhc2UgJ1EnOlxuICAgICAgICAgICAgY2FzZSAnQSc6XG4gICAgICAgICAgICAgICAgcG9pbnQgPSBwYXRoLmdldFBvaW50QXRMZW5ndGgobGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBhZGRQb2ludChwb2ludC54LCBwb2ludC55LCAwKTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpbmNyZW1lbnQgYnkgc2FtcGxlIHZhbHVlXG4gICAgICAgICAgICBsZW5ndGggKz0gc2FtcGxlTGVuZ3RoO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIHJlbWFpbmluZyBzZWdtZW50cyBub3QgcGFzc2VkIGJ5IHNhbXBsaW5nXG4gICAgICAgIGZvciAoaSA9IDAsIGlsID0gc2VnbWVudHNRdWV1ZS5sZW5ndGg7IGkgPCBpbDsgKytpKVxuICAgICAgICAgICAgYWRkU2VnbWVudFBvaW50KHNlZ21lbnRzUXVldWVbaV0pO1xuXG4gICAgICAgIHJldHVybiBwb2ludHM7XG4gICAgfTtcblxuICAgIFN2Zy5fc3ZnUGF0aFRvQWJzb2x1dGUgPSBmdW5jdGlvbihwYXRoKSB7XG4gICAgICAgIC8vIGh0dHA6Ly9waHJvZ3oubmV0L2NvbnZlcnQtc3ZnLXBhdGgtdG8tYWxsLWFic29sdXRlLWNvbW1hbmRzXG4gICAgICAgIC8vIENvcHlyaWdodCAoYykgR2F2aW4gS2lzdG5lclxuICAgICAgICAvLyBodHRwOi8vcGhyb2d6Lm5ldC9qcy9fUmV1c2VMaWNlbnNlLnR4dFxuICAgICAgICAvLyBNb2RpZmljYXRpb25zOiB0aWR5IGZvcm1hdHRpbmcgYW5kIG5hbWluZ1xuICAgICAgICB2YXIgeDAsIHkwLCB4MSwgeTEsIHgyLCB5Miwgc2VncyA9IHBhdGgucGF0aFNlZ0xpc3QsXG4gICAgICAgICAgICB4ID0gMCwgeSA9IDAsIGxlbiA9IHNlZ3MubnVtYmVyT2ZJdGVtcztcblxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICB2YXIgc2VnID0gc2Vncy5nZXRJdGVtKGkpLFxuICAgICAgICAgICAgICAgIHNlZ1R5cGUgPSBzZWcucGF0aFNlZ1R5cGVBc0xldHRlcjtcblxuICAgICAgICAgICAgaWYgKC9bTUxIVkNTUVRBXS8udGVzdChzZWdUeXBlKSkge1xuICAgICAgICAgICAgICAgIGlmICgneCcgaW4gc2VnKSB4ID0gc2VnLng7XG4gICAgICAgICAgICAgICAgaWYgKCd5JyBpbiBzZWcpIHkgPSBzZWcueTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKCd4MScgaW4gc2VnKSB4MSA9IHggKyBzZWcueDE7XG4gICAgICAgICAgICAgICAgaWYgKCd4MicgaW4gc2VnKSB4MiA9IHggKyBzZWcueDI7XG4gICAgICAgICAgICAgICAgaWYgKCd5MScgaW4gc2VnKSB5MSA9IHkgKyBzZWcueTE7XG4gICAgICAgICAgICAgICAgaWYgKCd5MicgaW4gc2VnKSB5MiA9IHkgKyBzZWcueTI7XG4gICAgICAgICAgICAgICAgaWYgKCd4JyBpbiBzZWcpIHggKz0gc2VnLng7XG4gICAgICAgICAgICAgICAgaWYgKCd5JyBpbiBzZWcpIHkgKz0gc2VnLnk7XG5cbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHNlZ1R5cGUpIHtcblxuICAgICAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICAgICAgICBzZWdzLnJlcGxhY2VJdGVtKHBhdGguY3JlYXRlU1ZHUGF0aFNlZ01vdmV0b0Ficyh4LCB5KSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2wnOlxuICAgICAgICAgICAgICAgICAgICBzZWdzLnJlcGxhY2VJdGVtKHBhdGguY3JlYXRlU1ZHUGF0aFNlZ0xpbmV0b0Ficyh4LCB5KSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgICAgICAgICBzZWdzLnJlcGxhY2VJdGVtKHBhdGguY3JlYXRlU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnMoeCksIGkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd2JzpcbiAgICAgICAgICAgICAgICAgICAgc2Vncy5yZXBsYWNlSXRlbShwYXRoLmNyZWF0ZVNWR1BhdGhTZWdMaW5ldG9WZXJ0aWNhbEFicyh5KSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2MnOlxuICAgICAgICAgICAgICAgICAgICBzZWdzLnJlcGxhY2VJdGVtKHBhdGguY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY0Ficyh4LCB5LCB4MSwgeTEsIHgyLCB5MiksIGkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgICAgICAgICAgc2Vncy5yZXBsYWNlSXRlbShwYXRoLmNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvQ3ViaWNTbW9vdGhBYnMoeCwgeSwgeDIsIHkyKSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3EnOlxuICAgICAgICAgICAgICAgICAgICBzZWdzLnJlcGxhY2VJdGVtKHBhdGguY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNBYnMoeCwgeSwgeDEsIHkxKSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3QnOlxuICAgICAgICAgICAgICAgICAgICBzZWdzLnJlcGxhY2VJdGVtKHBhdGguY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMoeCwgeSksIGkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdhJzpcbiAgICAgICAgICAgICAgICAgICAgc2Vncy5yZXBsYWNlSXRlbShwYXRoLmNyZWF0ZVNWR1BhdGhTZWdBcmNBYnMoeCwgeSwgc2VnLnIxLCBzZWcucjIsIHNlZy5hbmdsZSwgc2VnLmxhcmdlQXJjRmxhZywgc2VnLnN3ZWVwRmxhZyksIGkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd6JzpcbiAgICAgICAgICAgICAgICBjYXNlICdaJzpcbiAgICAgICAgICAgICAgICAgICAgeCA9IHgwO1xuICAgICAgICAgICAgICAgICAgICB5ID0geTA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc2VnVHlwZSA9PSAnTScgfHwgc2VnVHlwZSA9PSAnbScpIHtcbiAgICAgICAgICAgICAgICB4MCA9IHg7XG4gICAgICAgICAgICAgICAgeTAgPSB5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxufSkoKTtcblxuLyoqKi8gfSksXG4vKiAzMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG4vKipcbiogVGhpcyBtb2R1bGUgaGFzIG5vdyBiZWVuIHJlcGxhY2VkIGJ5IGBNYXR0ZXIuQ29tcG9zaXRlYC5cbipcbiogQWxsIHVzYWdlIHNob3VsZCBiZSBtaWdyYXRlZCB0byB0aGUgZXF1aXZhbGVudCBmdW5jdGlvbnMgZm91bmQgb24gYE1hdHRlci5Db21wb3NpdGVgLlxuKiBGb3IgZXhhbXBsZSBgV29ybGQuYWRkKHdvcmxkLCBib2R5KWAgbm93IGJlY29tZXMgYENvbXBvc2l0ZS5hZGQod29ybGQsIGJvZHkpYC5cbipcbiogVGhlIHByb3BlcnR5IGB3b3JsZC5ncmF2aXR5YCBoYXMgYmVlbiBtb3ZlZCB0byBgZW5naW5lLmdyYXZpdHlgLlxuKlxuKiBGb3IgYmFjay1jb21wYXRpYmlsaXR5IHB1cnBvc2VzIHRoaXMgbW9kdWxlIHdpbGwgcmVtYWluIGFzIGEgZGlyZWN0IGFsaWFzIHRvIGBNYXR0ZXIuQ29tcG9zaXRlYCBpbiB0aGUgc2hvcnQgdGVybSBkdXJpbmcgbWlncmF0aW9uLlxuKiBFdmVudHVhbGx5IHRoaXMgYWxpYXMgbW9kdWxlIHdpbGwgYmUgbWFya2VkIGFzIGRlcHJlY2F0ZWQgYW5kIHRoZW4gbGF0ZXIgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLlxuKlxuKiBAY2xhc3MgV29ybGRcbiovXG5cbnZhciBXb3JsZCA9IHt9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IFdvcmxkO1xuXG52YXIgQ29tcG9zaXRlID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcbnZhciBDb21tb24gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG4oZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBTZWUgYWJvdmUsIGFsaWFzZXMgZm9yIGJhY2sgY29tcGF0aWJpbGl0eSBvbmx5XG4gICAgICovXG4gICAgV29ybGQuY3JlYXRlID0gQ29tcG9zaXRlLmNyZWF0ZTtcbiAgICBXb3JsZC5hZGQgPSBDb21wb3NpdGUuYWRkO1xuICAgIFdvcmxkLnJlbW92ZSA9IENvbXBvc2l0ZS5yZW1vdmU7XG4gICAgV29ybGQuY2xlYXIgPSBDb21wb3NpdGUuY2xlYXI7XG4gICAgV29ybGQuYWRkQ29tcG9zaXRlID0gQ29tcG9zaXRlLmFkZENvbXBvc2l0ZTtcbiAgICBXb3JsZC5hZGRCb2R5ID0gQ29tcG9zaXRlLmFkZEJvZHk7XG4gICAgV29ybGQuYWRkQ29uc3RyYWludCA9IENvbXBvc2l0ZS5hZGRDb25zdHJhaW50O1xuXG59KSgpO1xuXG5cbi8qKiovIH0pXG4vKioqKioqLyBdKTtcbn0pOyIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsImV4cG9ydCBsZXQgeCA9IDBcbmV4cG9ydCBsZXQgeSA9IDBcbmV4cG9ydCBsZXQgeiA9IDBcblxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3RQZXJtaXNzaW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAgIC8vIFJlcXVlc3QgcGVybWlzc2lvbiBmb3IgaU9TIDEzKyBkZXZpY2VzXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIERldmljZU1vdGlvbkV2ZW50ICYmXG4gICAgICAgICAgICB0eXBlb2YgRGV2aWNlTW90aW9uRXZlbnQucmVxdWVzdFBlcm1pc3Npb24gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICApIHtcbiAgICAgICAgICAgIERldmljZU1vdGlvbkV2ZW50LnJlcXVlc3RQZXJtaXNzaW9uKCk7XG4gICAgICAgIH0gICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICByZXR1cm4gYCR7ZXJyb3J9YDtcbiAgICB9XG5cbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImRldmljZW1vdGlvblwiLCBoYW5kbGVNb3Rpb24pO1xufVxuXG5mdW5jdGlvbiBoYW5kbGVNb3Rpb24oZXZlbnQpIHtcbiAgICB4ID0gZXZlbnQuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS54XG4gICAgeSA9IGV2ZW50LmFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkueSAqIC0xIC8vIGludmVydCB5IGF4aXNcbiAgICB6ID0gZXZlbnQuYWNjZWxlcmF0aW9uSW5jbHVkaW5nR3Jhdml0eS56XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQyZEdyYXZpdHkoKSB7XG4gICAgcmV0dXJuIHsgeCwgeSB9XG59XG5cbi8vIGFkZCB3aW5kb3cgZXZlbnRsaXN0ZW5lciBmb3Iga2V5ZG93blxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGhhbmRsZUtleURvd24pO1xuZnVuY3Rpb24gaGFuZGxlS2V5RG93bihlKSB7XG4gICAgaWYgKCF3aW5kb3cubG9jYXRpb24uaHJlZi5pbmNsdWRlcyhcImxvY2FsaG9zdFwiKSkge1xuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKGUua2V5ID09PSBcIkFycm93VXBcIikge1xuICAgICAgICB5ID0gOS44XG4gICAgICAgIHggPSAwXG4gICAgfVxuICAgIGlmIChlLmtleSA9PT0gXCJBcnJvd0Rvd25cIikge1xuICAgICAgICB5ID0gLTkuOFxuICAgICAgICB4ID0gMFxuICAgIH1cbiAgICBpZiAoZS5rZXkgPT09IFwiQXJyb3dMZWZ0XCIpIHtcbiAgICAgICAgeCA9IC05LjhcbiAgICAgICAgeSA9IDBcbiAgICB9XG4gICAgaWYgKGUua2V5ID09PSBcIkFycm93UmlnaHRcIikge1xuICAgICAgICB4ID0gOS44XG4gICAgICAgIHkgPSAwXG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgTWF0dGVyIGZyb20gJ21hdHRlci1qcyc7XG5cbi8vIG1vZHVsZSBhbGlhc2VzXG5jb25zdCBFbmdpbmUgPSBNYXR0ZXIuRW5naW5lLFxuICAgIFJlbmRlciA9IE1hdHRlci5SZW5kZXIsXG4gICAgUnVubmVyID0gTWF0dGVyLlJ1bm5lcixcbiAgICBCb2RpZXMgPSBNYXR0ZXIuQm9kaWVzLFxuICAgIENvbXBvc2l0ZSA9IE1hdHRlci5Db21wb3NpdGU7XG5cbmxldCBlbmdpbmU6IE1hdHRlci5FbmdpbmU7XG5sZXQgcmVuZGVyOiBNYXR0ZXIuUmVuZGVyO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFBoeXNpY3MoKSB7XG5cbiAgICAvLyBjcmVhdGUgYW4gZW5naW5lXG4gICAgZW5naW5lID0gRW5naW5lLmNyZWF0ZSgpO1xuXG4gICAgLy8gZ2V0IHdpbmRvdyBzaXplXG4gICAgY29uc3Qgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICBjb25zdCBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gICAgY29uc29sZS5sb2coYHdpZHRoOiAke3dpZHRofSwgaGVpZ2h0OiAke2hlaWdodH1gKVxuXG4gICAgLy8gQ3JlYXRlIGEgcmVuZGVyZXJcbiAgICByZW5kZXIgPSBSZW5kZXIuY3JlYXRlKHtcbiAgICAgICAgZWxlbWVudDogZG9jdW1lbnQuYm9keSxcbiAgICAgICAgZW5naW5lOiBlbmdpbmUsXG4gICAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgICAgIHdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCxcbiAgICAgICAgICAgIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0LFxuICAgICAgICAgICAgd2lyZWZyYW1lczogZmFsc2UgLy8gVGhpcyBhbGxvd3MgZm9yIGNvbG9yXG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIGNyZWF0ZSB0d28gYm94ZXMgYW5kIGEgZ3JvdW5kXG4gICAgY29uc3QgYmFsbCA9IEJvZGllcy5jaXJjbGUoNDAwLCAyMDAsIDgwLCB7XG4gICAgICAgIHJlbmRlcjoge1xuICAgICAgICAgICAgZmlsbFN0eWxlOiAncmVkJ1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgQ29tcG9zaXRlLmFkZChlbmdpbmUud29ybGQsIFtiYWxsXSk7XG5cbiAgICAvLyBBZGQgd2FsbHNcbiAgICBjb25zdCB3YWxsVGhpY2tuZXNzID0gMTA7XG4gICAgY3JlYXRlV2FsbCh3aW5kb3cuaW5uZXJXaWR0aCAvIDIsIHdhbGxUaGlja25lc3MgLyAyLCB3aW5kb3cuaW5uZXJXaWR0aCwgd2FsbFRoaWNrbmVzcywgJ3JlZCcpOyAvLyBUb3BcbiAgICBjcmVhdGVXYWxsKHdpbmRvdy5pbm5lcldpZHRoIC8gMiwgd2luZG93LmlubmVySGVpZ2h0IC0gd2FsbFRoaWNrbmVzcyAvIDIsIHdpbmRvdy5pbm5lcldpZHRoLCB3YWxsVGhpY2tuZXNzLCAnYmx1ZScpOyAvLyBCb3R0b21cbiAgICBjcmVhdGVXYWxsKHdhbGxUaGlja25lc3MgLyAyLCB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyLCB3YWxsVGhpY2tuZXNzLCB3aW5kb3cuaW5uZXJIZWlnaHQsICdncmVlbicpOyAvLyBMZWZ0XG4gICAgY3JlYXRlV2FsbCh3aW5kb3cuaW5uZXJXaWR0aCAtIHdhbGxUaGlja25lc3MgLyAyLCB3aW5kb3cuaW5uZXJIZWlnaHQgLyAyLCB3YWxsVGhpY2tuZXNzLCB3aW5kb3cuaW5uZXJIZWlnaHQsICd5ZWxsb3cnKTsgLy8gUmlnaHRcblxuXG4gICAgLy8gUmVuZGVyLmxvb2tBdChyZW5kZXIsIHtcbiAgICAvLyAgICAgbWluOiB7IHg6IDAsIHk6IDAgfSxcbiAgICAvLyAgICAgbWF4OiB7IHg6IHdpZHRoLCB5OiBoZWlnaHQgfVxuICAgIC8vIH0pO1xuXG4gICAgLy8gcnVuIHRoZSByZW5kZXJlclxuICAgIFJlbmRlci5ydW4ocmVuZGVyKTtcblxuICAgIC8vIGNyZWF0ZSBydW5uZXJcbiAgICBjb25zdCBydW5uZXIgPSBSdW5uZXIuY3JlYXRlKCk7XG5cbiAgICAvLyBydW4gdGhlIGVuZ2luZVxuICAgIFJ1bm5lci5ydW4ocnVubmVyLCBlbmdpbmUpO1xuICAgIC8vIGZpdCB0aGUgcmVuZGVyIHZpZXdwb3J0IHRvIHRoZSBzY2VuZVxuICAgIGNvbnNvbGUubG9nKCdQaHlzaWNzIGxvYWRlZCcpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVdhbGwoeDogbnVtYmVyLCB5OiBudW1iZXIsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyLCBjb2xvcjogc3RyaW5nKSB7XG4gICAgY29uc3Qgd2FsbCA9IEJvZGllcy5yZWN0YW5nbGUoeCwgeSwgd2lkdGgsIGhlaWdodCwge1xuICAgICAgICBpc1N0YXRpYzogdHJ1ZSxcbiAgICAgICAgcmVuZGVyOiB7IGZpbGxTdHlsZTogY29sb3IgfVxuICAgIH0pO1xuICAgIENvbXBvc2l0ZS5hZGQoZW5naW5lLndvcmxkLCBbd2FsbF0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0R3Jhdml0eSh4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgIGlmIChlbmdpbmUpIHtcbiAgICAgICAgZW5naW5lLmdyYXZpdHkueCA9IHg7XG4gICAgICAgIGVuZ2luZS5ncmF2aXR5LnkgPSB5O1xuICAgIH1cbn1cblxuLy8gUmVzaXplIGhhbmRsaW5nXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgZnVuY3Rpb24gKCkge1xuICAgIHJlbmRlci5jYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICByZW5kZXIuY2FudmFzLmhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcbn0pO1xuIiwiaW1wb3J0IHsgZ2V0MmRHcmF2aXR5LCByZXF1ZXN0UGVybWlzc2lvbiB9IGZyb20gJy4vc2Vuc29ycy5qcyc7XG5pbXBvcnQgeyBsb2FkUGh5c2ljcywgc2V0R3Jhdml0eSB9IGZyb20gJy4vcGh5c2ljcydcblxuZnVuY3Rpb24gdXBkYXRlQmFsbFBvc2l0aW9uKCkge1xuICAgIGNvbnN0IGcgPSBnZXQyZEdyYXZpdHkoKTtcbiAgICBzZXRFbGVtZW50SW5uZXJIdG1sKCd4MScsIGB4OiAke2cueH1gKVxuICAgIHNldEVsZW1lbnRJbm5lckh0bWwoJ3kxJywgYHk6ICR7Zy55fWApXG4gICAgc2V0R3Jhdml0eShnLngsIGcueSk7XG4gICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKHVwZGF0ZUJhbGxQb3NpdGlvbik7XG59XG5cbi8vIFN0YXJ0IHRoZSBsb29wXG51cGRhdGVCYWxsUG9zaXRpb24oKTtcblxuZnVuY3Rpb24gc2V0RWxlbWVudElubmVySHRtbChuYW1lOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICBjb25zdCB4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobmFtZSk7XG4gICAgaWYgKHgpIHtcbiAgICAgICAgeC5pbm5lckhUTUwgPSBgJHt2YWx1ZX1gO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlRWxlbWVudChuYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCB4ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobmFtZSk7XG4gICAgaWYgKHgpIHtcbiAgICAgICAgeC5yZW1vdmUoKTtcbiAgICB9XG59XG5cbndpbmRvdy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3Qgc3RhcnRCdXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInN0YXJ0LWJ0blwiKTtcbiAgICBpZiAoc3RhcnRCdXR0b24pIHtcbiAgICAgICAgc2V0RWxlbWVudElubmVySHRtbCgnbXNnJywgJ1JlZ2lzdGVyZWQgY2xpY2sgaGFuZGxlcicpO1xuICAgICAgICBzdGFydEJ1dHRvbi5vbmNsaWNrID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIHNldEVsZW1lbnRJbm5lckh0bWwoJ21zZycsICdSZXF1ZXN0aW5nIHBlcm1pc3Npb24nKTtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGNvbnN0IHJwID0gcmVxdWVzdFBlcm1pc3Npb24oKVxuICAgICAgICAgICAgc2V0RWxlbWVudElubmVySHRtbCgnbXNnJywgYHJwOiAke3JwfWApO1xuICAgICAgICAgICAgcmVtb3ZlRWxlbWVudCgnc3RhcnQtYnRuJyk7XG4gICAgICAgICAgICByZW1vdmVFbGVtZW50KCdtc2cnKTtcbiAgICAgICAgICAgIGxvYWRQaHlzaWNzKCk7XG4gICAgICAgIH07XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbImZhY3RvcnkiLCJtb2R1bGVzIiwiaW5zdGFsbGVkTW9kdWxlcyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiQ29tbW9uIiwiX2Jhc2VEZWx0YSIsIl9uZXh0SWQiLCJfc2VlZCIsIl9ub3dTdGFydFRpbWUiLCJEYXRlIiwiX3dhcm5lZE9uY2UiLCJfZGVjb21wIiwiZXh0ZW5kIiwib2JqIiwiZGVlcCIsImFyZ3NTdGFydCIsImRlZXBDbG9uZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsInByb3AiLCJjb25zdHJ1Y3RvciIsImNsb25lIiwia2V5cyIsInB1c2giLCJ2YWx1ZXMiLCJwYXRoIiwiYmVnaW4iLCJlbmQiLCJzcGxpdCIsInNsaWNlIiwic2V0IiwidmFsIiwicGFydHMiLCJzaHVmZmxlIiwiYXJyYXkiLCJqIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwidGVtcCIsImNob29zZSIsImNob2ljZXMiLCJpc0VsZW1lbnQiLCJIVE1MRWxlbWVudCIsIm5vZGVUeXBlIiwibm9kZU5hbWUiLCJpc0FycmF5IiwidG9TdHJpbmciLCJpc0Z1bmN0aW9uIiwiaXNQbGFpbk9iamVjdCIsImlzU3RyaW5nIiwiY2xhbXAiLCJtaW4iLCJtYXgiLCJzaWduIiwibm93Iiwid2luZG93IiwicGVyZm9ybWFuY2UiLCJ3ZWJraXROb3ciLCJfc2VlZGVkUmFuZG9tIiwiY29sb3JUb051bWJlciIsImNvbG9yU3RyaW5nIiwicmVwbGFjZSIsImNoYXJBdCIsInBhcnNlSW50IiwibG9nTGV2ZWwiLCJsb2ciLCJjb25zb2xlIiwiYXBwbHkiLCJjb25jYXQiLCJBcnJheSIsImluZm8iLCJ3YXJuIiwid2Fybk9uY2UiLCJtZXNzYWdlIiwiam9pbiIsImRlcHJlY2F0ZWQiLCJ3YXJuaW5nIiwiY2hhaW4iLCJuZXh0SWQiLCJpbmRleE9mIiwiaGF5c3RhY2siLCJuZWVkbGUiLCJtYXAiLCJsaXN0IiwiZnVuYyIsIm1hcHBlZCIsInRvcG9sb2dpY2FsU29ydCIsImdyYXBoIiwicmVzdWx0IiwidmlzaXRlZCIsIm5vZGUiLCJfdG9wb2xvZ2ljYWxTb3J0IiwibmVpZ2hib3JzIiwibmVpZ2hib3IiLCJmdW5jcyIsIl9jaGFpbmVkIiwibGFzdFJlc3VsdCIsImFyZ3MiLCJjaGFpblBhdGhCZWZvcmUiLCJiYXNlIiwiY2hhaW5QYXRoQWZ0ZXIiLCJzZXREZWNvbXAiLCJkZWNvbXAiLCJnZXREZWNvbXAiLCJnIiwiZSIsIkJvdW5kcyIsInZlcnRpY2VzIiwiYm91bmRzIiwieCIsInkiLCJ1cGRhdGUiLCJ2ZWxvY2l0eSIsIkluZmluaXR5IiwidmVydGV4IiwiY29udGFpbnMiLCJwb2ludCIsIm92ZXJsYXBzIiwiYm91bmRzQSIsImJvdW5kc0IiLCJ0cmFuc2xhdGUiLCJ2ZWN0b3IiLCJzaGlmdCIsInBvc2l0aW9uIiwiZGVsdGFYIiwiZGVsdGFZIiwiVmVjdG9yIiwibWFnbml0dWRlIiwic3FydCIsIm1hZ25pdHVkZVNxdWFyZWQiLCJyb3RhdGUiLCJhbmdsZSIsIm91dHB1dCIsImNvcyIsInNpbiIsInJvdGF0ZUFib3V0Iiwibm9ybWFsaXNlIiwiZG90IiwidmVjdG9yQSIsInZlY3RvckIiLCJjcm9zcyIsImNyb3NzMyIsInZlY3RvckMiLCJhZGQiLCJzdWIiLCJtdWx0Iiwic2NhbGFyIiwiZGl2IiwicGVycCIsIm5lZ2F0ZSIsIm5lZyIsImF0YW4yIiwiX3RlbXAiLCJWZXJ0aWNlcyIsInBvaW50cyIsImJvZHkiLCJpbmRleCIsImlzSW50ZXJuYWwiLCJmcm9tUGF0aCIsIm1hdGNoIiwicGFyc2VGbG9hdCIsImNlbnRyZSIsImFyZWEiLCJtZWFuIiwiYXZlcmFnZSIsInNpZ25lZCIsImFicyIsImluZXJ0aWEiLCJtYXNzIiwibnVtZXJhdG9yIiwiZGVub21pbmF0b3IiLCJ2IiwidmVydGljZXNMZW5ndGgiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsImR4IiwiZHkiLCJwb2ludFgiLCJwb2ludFkiLCJuZXh0VmVydGV4Iiwic2NhbGUiLCJzY2FsZVgiLCJzY2FsZVkiLCJkZWx0YSIsImNoYW1mZXIiLCJyYWRpdXMiLCJxdWFsaXR5IiwicXVhbGl0eU1pbiIsInF1YWxpdHlNYXgiLCJuZXdWZXJ0aWNlcyIsInByZXZWZXJ0ZXgiLCJjdXJyZW50UmFkaXVzIiwicHJldk5vcm1hbCIsIm5leHROb3JtYWwiLCJkaWFnb25hbFJhZGl1cyIsInBvdyIsInJhZGl1c1ZlY3RvciIsIm1pZE5vcm1hbCIsInNjYWxlZFZlcnRleCIsInByZWNpc2lvbiIsInRoZXRhIiwiYWNvcyIsImNsb2Nrd2lzZVNvcnQiLCJzb3J0IiwidmVydGV4QSIsInZlcnRleEIiLCJpc0NvbnZleCIsImsiLCJ6IiwiZmxhZyIsImh1bGwiLCJ1cHBlciIsImxvd2VyIiwicG9wIiwiQm9keSIsIlNsZWVwaW5nIiwiQXhlcyIsIl90aW1lQ29ycmVjdGlvbiIsIl9pbmVydGlhU2NhbGUiLCJfbmV4dENvbGxpZGluZ0dyb3VwSWQiLCJfbmV4dE5vbkNvbGxpZGluZ0dyb3VwSWQiLCJfbmV4dENhdGVnb3J5Iiwib3B0aW9ucyIsImRlZmF1bHRzIiwiaWQiLCJ0eXBlIiwibGFiZWwiLCJwbHVnaW4iLCJmb3JjZSIsInRvcnF1ZSIsInBvc2l0aW9uSW1wdWxzZSIsImNvbnN0cmFpbnRJbXB1bHNlIiwidG90YWxDb250YWN0cyIsInNwZWVkIiwiYW5ndWxhclNwZWVkIiwiYW5ndWxhclZlbG9jaXR5IiwiaXNTZW5zb3IiLCJpc1N0YXRpYyIsImlzU2xlZXBpbmciLCJtb3Rpb24iLCJzbGVlcFRocmVzaG9sZCIsImRlbnNpdHkiLCJyZXN0aXR1dGlvbiIsImZyaWN0aW9uIiwiZnJpY3Rpb25TdGF0aWMiLCJmcmljdGlvbkFpciIsImNvbGxpc2lvbkZpbHRlciIsImNhdGVnb3J5IiwibWFzayIsImdyb3VwIiwic2xvcCIsInRpbWVTY2FsZSIsInJlbmRlciIsInZpc2libGUiLCJvcGFjaXR5Iiwic3Ryb2tlU3R5bGUiLCJmaWxsU3R5bGUiLCJsaW5lV2lkdGgiLCJzcHJpdGUiLCJ4U2NhbGUiLCJ5U2NhbGUiLCJ4T2Zmc2V0IiwieU9mZnNldCIsImV2ZW50cyIsImNpcmNsZVJhZGl1cyIsInBvc2l0aW9uUHJldiIsImFuZ2xlUHJldiIsInBhcmVudCIsImF4ZXMiLCJkZWx0YVRpbWUiLCJfb3JpZ2luYWwiLCJfaW5pdFByb3BlcnRpZXMiLCJuZXh0R3JvdXAiLCJpc05vbkNvbGxpZGluZyIsIm5leHRDYXRlZ29yeSIsImRlZmF1bHRGaWxsU3R5bGUiLCJkZWZhdWx0U3Ryb2tlU3R5bGUiLCJkZWZhdWx0TGluZVdpZHRoIiwic2V0dGluZ3MiLCJzZXRTdGF0aWMiLCJzZXRNYXNzIiwic2V0RGVuc2l0eSIsInNldEluZXJ0aWEiLCJzZXRWZXJ0aWNlcyIsInNldFBvc2l0aW9uIiwic2V0QW5nbGUiLCJzZXRWZWxvY2l0eSIsInNldEFuZ3VsYXJWZWxvY2l0eSIsInNldFNwZWVkIiwic2V0QW5ndWxhclNwZWVkIiwic2V0UGFydHMiLCJzZXRDZW50cmUiLCJwYXJ0IiwiaW52ZXJzZU1hc3MiLCJpbnZlcnNlSW5lcnRpYSIsIm1vbWVudCIsImZyb21WZXJ0aWNlcyIsImF1dG9IdWxsIiwiaHVsbENlbnRyZSIsInRvdGFsIiwiX3RvdGFsUHJvcGVydGllcyIsInJlbGF0aXZlIiwidXBkYXRlVmVsb2NpdHkiLCJnZXRWZWxvY2l0eSIsImdldFNwZWVkIiwiZ2V0QW5ndWxhclZlbG9jaXR5IiwiZ2V0QW5ndWxhclNwZWVkIiwidHJhbnNsYXRpb24iLCJyb3RhdGlvbiIsInRvdGFsQXJlYSIsInRvdGFsSW5lcnRpYSIsImRlbHRhVGltZVNxdWFyZWQiLCJjb3JyZWN0aW9uIiwidmVsb2NpdHlQcmV2WCIsInZlbG9jaXR5UHJldlkiLCJ1cGRhdGVWZWxvY2l0aWVzIiwiYm9keVZlbG9jaXR5IiwiYXBwbHlGb3JjZSIsIm9mZnNldCIsInByb3BlcnRpZXMiLCJFdmVudHMiLCJvbiIsImV2ZW50TmFtZXMiLCJjYWxsYmFjayIsIm5hbWVzIiwib2ZmIiwiY2FsbGJhY2tzIiwibmV3Q2FsbGJhY2tzIiwidHJpZ2dlciIsImV2ZW50IiwiZXZlbnRDbG9uZSIsIkNvbXBvc2l0ZSIsImlzTW9kaWZpZWQiLCJib2RpZXMiLCJjb25zdHJhaW50cyIsImNvbXBvc2l0ZXMiLCJjYWNoZSIsImFsbEJvZGllcyIsImFsbENvbnN0cmFpbnRzIiwiYWxsQ29tcG9zaXRlcyIsInNldE1vZGlmaWVkIiwiY29tcG9zaXRlIiwidXBkYXRlUGFyZW50cyIsInVwZGF0ZUNoaWxkcmVuIiwiY2hpbGRDb21wb3NpdGUiLCJvYmplY3RzIiwiYWRkQm9keSIsImFkZENvbnN0cmFpbnQiLCJhZGRDb21wb3NpdGUiLCJjb25zdHJhaW50IiwicmVtb3ZlIiwicmVtb3ZlQm9keSIsInJlbW92ZUNvbnN0cmFpbnQiLCJyZW1vdmVDb21wb3NpdGUiLCJjb21wb3NpdGVBIiwiY29tcG9zaXRlQiIsInJlbW92ZUNvbXBvc2l0ZUF0Iiwic3BsaWNlIiwicmVtb3ZlQm9keUF0IiwicmVtb3ZlQ29uc3RyYWludEF0IiwiY2xlYXIiLCJrZWVwU3RhdGljIiwiZmlsdGVyIiwibW92ZSIsInJlYmFzZSIsInJlY3Vyc2l2ZSIsIl9tb3Rpb25XYWtlVGhyZXNob2xkIiwiX21vdGlvblNsZWVwVGhyZXNob2xkIiwiX21pbkJpYXMiLCJtb3Rpb25TbGVlcFRocmVzaG9sZCIsIm1pbk1vdGlvbiIsIm1heE1vdGlvbiIsInNsZWVwQ291bnRlciIsImFmdGVyQ29sbGlzaW9ucyIsInBhaXJzIiwicGFpciIsImlzQWN0aXZlIiwiY29sbGlzaW9uIiwiYm9keUEiLCJib2R5QiIsInNsZWVwaW5nQm9keSIsIm1vdmluZ0JvZHkiLCJ3YXNTbGVlcGluZyIsIkNvbGxpc2lvbiIsIl9zdXBwb3J0cyIsIl9vdmVybGFwQUIiLCJfb3ZlcmxhcEJBIiwiUGFpciIsIm92ZXJsYXAiLCJheGlzIiwiY29sbGlkZWQiLCJwYXJlbnRBIiwicGFyZW50QiIsImRlcHRoIiwibm9ybWFsIiwidGFuZ2VudCIsInBlbmV0cmF0aW9uIiwic3VwcG9ydHMiLCJjb2xsaWRlcyIsIl9vdmVybGFwQXhlcyIsIm1pbk92ZXJsYXAiLCJ0YWJsZSIsIm1pbkF4aXMiLCJtaW5BeGlzWCIsIm1pbkF4aXNZIiwic3VwcG9ydHNCIiwiX2ZpbmRTdXBwb3J0cyIsInN1cHBvcnRDb3VudCIsInN1cHBvcnRzQSIsInZlcnRpY2VzQSIsInZlcnRpY2VzQiIsIm92ZXJsYXBBQiIsIm92ZXJsYXBCQSIsInZlcnRpY2VzQUxlbmd0aCIsInZlcnRpY2VzQkxlbmd0aCIsInZlcnRpY2VzQVgiLCJ2ZXJ0aWNlc0FZIiwidmVydGljZXNCWCIsInZlcnRpY2VzQlkiLCJheGVzTGVuZ3RoIiwib3ZlcmxhcE1pbiIsIk51bWJlciIsIk1BWF9WQUxVRSIsIm92ZXJsYXBBeGlzTnVtYmVyIiwiYXhpc1giLCJheGlzWSIsIm1pbkEiLCJtaW5CIiwibWF4QSIsIm1heEIiLCJfcHJvamVjdFRvQXhpcyIsInByb2plY3Rpb24iLCJkaXJlY3Rpb24iLCJ2ZXJ0ZXhDIiwiZGlzdGFuY2UiLCJib2R5QVBvc2l0aW9uWCIsImJvZHlBUG9zaXRpb25ZIiwibm9ybWFsWCIsIm5vcm1hbFkiLCJuZWFyZXN0RGlzdGFuY2UiLCJDb250YWN0IiwidGltZXN0YW1wIiwiY29udGFjdHMiLCJhY3RpdmVDb250YWN0cyIsInNlcGFyYXRpb24iLCJjb25maXJtZWRBY3RpdmUiLCJ0aW1lQ3JlYXRlZCIsInRpbWVVcGRhdGVkIiwicGFyZW50QVZlcnRpY2VzTGVuZ3RoIiwic3VwcG9ydCIsImNvbnRhY3RJZCIsImNvbnRhY3QiLCJzZXRBY3RpdmUiLCJDb25zdHJhaW50IiwiX3dhcm1pbmciLCJfdG9ycXVlRGFtcGVuIiwiX21pbkxlbmd0aCIsInBvaW50QSIsInBvaW50QiIsImluaXRpYWxQb2ludEEiLCJpbml0aWFsUG9pbnRCIiwic3RpZmZuZXNzIiwiZGFtcGluZyIsImFuZ3VsYXJTdGlmZm5lc3MiLCJhbmdsZUEiLCJhbmdsZUIiLCJhbmNob3JzIiwicHJlU29sdmVBbGwiLCJpbXB1bHNlIiwic29sdmVBbGwiLCJmaXhlZEEiLCJmaXhlZEIiLCJzb2x2ZSIsInBvaW50QVdvcmxkIiwicG9pbnRCV29ybGQiLCJjdXJyZW50TGVuZ3RoIiwic2hhcmUiLCJub3JtYWxWZWxvY2l0eSIsInJlbGF0aXZlVmVsb2NpdHkiLCJkaWZmZXJlbmNlIiwibWFzc1RvdGFsIiwicmVzaXN0YW5jZVRvdGFsIiwiemVybyIsInBvc3RTb2x2ZUFsbCIsImdyYWRpZW50IiwidG9GaXhlZCIsInh4IiwiQm9kaWVzIiwicmVjdGFuZ2xlIiwid2lkdGgiLCJoZWlnaHQiLCJ0cmFwZXpvaWQiLCJzbG9wZSIsInZlcnRpY2VzUGF0aCIsIngxIiwieDIiLCJ4MyIsImNpcmNsZSIsIm1heFNpZGVzIiwic2lkZXMiLCJjZWlsIiwicG9seWdvbiIsIlBJIiwieXkiLCJ2ZXJ0ZXhTZXRzIiwiZmxhZ0ludGVybmFsIiwicmVtb3ZlQ29sbGluZWFyIiwibWluaW11bUFyZWEiLCJyZW1vdmVEdXBsaWNhdGVQb2ludHMiLCJjYW5EZWNvbXAiLCJCb29sZWFuIiwicXVpY2tEZWNvbXAiLCJjb25jYXZlIiwibWFrZUNDVyIsInJlbW92ZUNvbGxpbmVhclBvaW50cyIsImRlY29tcG9zZWQiLCJjaHVua1ZlcnRpY2VzIiwicGFydEEiLCJwYXJ0QiIsInBhdiIsInBidiIsImRhIiwiZGIiLCJEZXRlY3RvciIsInNldEJvZGllcyIsImRldGVjdG9yIiwiY29sbGlzaW9ucyIsImJvZGllc0xlbmd0aCIsImNhbkNvbGxpZGUiLCJfY29tcGFyZUJvdW5kc1giLCJib3VuZFhNYXgiLCJib3VuZFlNYXgiLCJib3VuZFlNaW4iLCJib2R5QVN0YXRpYyIsInBhcnRzQUxlbmd0aCIsInBhcnRzQVNpbmdsZSIsInBhcnRzQkxlbmd0aCIsInBhcnRzQlN0YXJ0IiwiZmlsdGVyQSIsImZpbHRlckIiLCJNb3VzZSIsImVsZW1lbnQiLCJtb3VzZSIsImRvY3VtZW50IiwiYWJzb2x1dGUiLCJtb3VzZWRvd25Qb3NpdGlvbiIsIm1vdXNldXBQb3NpdGlvbiIsIndoZWVsRGVsdGEiLCJidXR0b24iLCJwaXhlbFJhdGlvIiwiZ2V0QXR0cmlidXRlIiwic291cmNlRXZlbnRzIiwibW91c2Vtb3ZlIiwibW91c2Vkb3duIiwibW91c2V1cCIsIm1vdXNld2hlZWwiLCJfZ2V0UmVsYXRpdmVNb3VzZVBvc2l0aW9uIiwiY2hhbmdlZFRvdWNoZXMiLCJwcmV2ZW50RGVmYXVsdCIsImRldGFpbCIsInNldEVsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiY2xlYXJTb3VyY2VFdmVudHMiLCJzZXRPZmZzZXQiLCJzZXRTY2FsZSIsImVsZW1lbnRCb3VuZHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyb290Tm9kZSIsImRvY3VtZW50RWxlbWVudCIsInBhcmVudE5vZGUiLCJzY3JvbGxYIiwidW5kZWZpbmVkIiwicGFnZVhPZmZzZXQiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsWSIsInBhZ2VZT2Zmc2V0Iiwic2Nyb2xsVG9wIiwidG91Y2hlcyIsInBhZ2VYIiwibGVmdCIsInBhZ2VZIiwidG9wIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJQbHVnaW4iLCJfcmVnaXN0cnkiLCJyZWdpc3RlciIsImlzUGx1Z2luIiwicmVnaXN0ZXJlZCIsInBsdWdpblZlcnNpb24iLCJ2ZXJzaW9uUGFyc2UiLCJ2ZXJzaW9uIiwibnVtYmVyIiwicmVnaXN0ZXJlZFZlcnNpb24iLCJyZXNvbHZlIiwiZGVwZW5kZW5jeSIsImRlcGVuZGVuY3lQYXJzZSIsInJhbmdlIiwiaW5zdGFsbCIsImlzVXNlZCIsInVzZWQiLCJpc0ZvciIsInBhcnNlZCIsImZvciIsInZlcnNpb25TYXRpc2ZpZXMiLCJ1c2UiLCJwbHVnaW5zIiwidXNlcyIsImRlcGVuZGVuY2llcyIsInNvcnRlZERlcGVuZGVuY2llcyIsInN0YXR1cyIsIl93YXJuZWQiLCJ0cmFja2VkIiwicGFyc2VkQmFzZSIsInJlc29sdmVkIiwidGVzdCIsInBhdHRlcm4iLCJleGVjIiwibWFqb3IiLCJtaW5vciIsInBhdGNoIiwiaXNSYW5nZSIsIm9wZXJhdG9yIiwicHJlcmVsZWFzZSIsIm5vcm1hbEltcHVsc2UiLCJ0YW5nZW50SW1wdWxzZSIsIkVuZ2luZSIsIlJlc29sdmVyIiwiUGFpcnMiLCJlbmdpbmUiLCJwb3NpdGlvbkl0ZXJhdGlvbnMiLCJ2ZWxvY2l0eUl0ZXJhdGlvbnMiLCJjb25zdHJhaW50SXRlcmF0aW9ucyIsImVuYWJsZVNsZWVwaW5nIiwiZ3Jhdml0eSIsInRpbWluZyIsImxhc3REZWx0YSIsImxhc3RFbGFwc2VkIiwid29ybGQiLCJncmlkIiwiYnVja2V0cyIsImJyb2FkcGhhc2UiLCJtZXRyaWNzIiwic3RhcnRUaW1lIiwiX2JvZGllc0FwcGx5R3Jhdml0eSIsIl9ib2RpZXNVcGRhdGUiLCJjb2xsaXNpb25TdGFydCIsInBvc2l0aW9uRGFtcGluZyIsInByZVNvbHZlUG9zaXRpb24iLCJzb2x2ZVBvc2l0aW9uIiwicG9zdFNvbHZlUG9zaXRpb24iLCJwcmVTb2x2ZVZlbG9jaXR5Iiwic29sdmVWZWxvY2l0eSIsIl9ib2RpZXNVcGRhdGVWZWxvY2l0aWVzIiwiY29sbGlzaW9uQWN0aXZlIiwiY29sbGlzaW9uRW5kIiwiX2JvZGllc0NsZWFyRm9yY2VzIiwibWVyZ2UiLCJlbmdpbmVBIiwiZW5naW5lQiIsImdyYXZpdHlTY2FsZSIsIl9yZXN0aW5nVGhyZXNoIiwiX3Jlc3RpbmdUaHJlc2hUYW5nZW50IiwiX3Bvc2l0aW9uRGFtcGVuIiwiX3Bvc2l0aW9uV2FybWluZyIsIl9mcmljdGlvbk5vcm1hbE11bHRpcGxpZXIiLCJfZnJpY3Rpb25NYXhTdGF0aWMiLCJhY3RpdmVDb3VudCIsInBhaXJzTGVuZ3RoIiwiY29udGFjdFNoYXJlIiwicG9zaXRpb25EYW1wZW4iLCJzbG9wRGFtcGVuIiwicG9zaXRpb25XYXJtaW5nIiwidmVydGljZXNUcmFuc2xhdGUiLCJib3VuZHNVcGRhdGUiLCJwb3NpdGlvbkltcHVsc2VYIiwicG9zaXRpb25JbXB1bHNlWSIsImNvbnRhY3RzTGVuZ3RoIiwiY29udGFjdFZlcnRleCIsImltcHVsc2VYIiwiaW1wdWxzZVkiLCJtYXhGcmljdGlvbiIsInRpbWVTY2FsZUN1YmVkIiwicmVzdGluZ1RocmVzaCIsInJlc3RpbmdUaHJlc2hUYW5nZW50IiwiZnJpY3Rpb25Ob3JtYWxNdWx0aXBsaWVyIiwiZnJpY3Rpb25NYXhTdGF0aWMiLCJib2R5QVZlbG9jaXR5IiwiYm9keUJWZWxvY2l0eSIsInRhbmdlbnRYIiwidGFuZ2VudFkiLCJpbnZlcnNlTWFzc1RvdGFsIiwib2Zmc2V0QVgiLCJvZmZzZXRBWSIsIm9mZnNldEJYIiwib2Zmc2V0QlkiLCJ2ZWxvY2l0eVBvaW50QVgiLCJ2ZWxvY2l0eVBvaW50QVkiLCJyZWxhdGl2ZVZlbG9jaXR5WCIsInJlbGF0aXZlVmVsb2NpdHlZIiwidGFuZ2VudFZlbG9jaXR5Iiwibm9ybWFsT3ZlcmxhcCIsIm5vcm1hbEZvcmNlIiwiZnJpY3Rpb25MaW1pdCIsIm9BY04iLCJvQmNOIiwiY29udGFjdE5vcm1hbEltcHVsc2UiLCJjb250YWN0VGFuZ2VudEltcHVsc2UiLCJwYWlySW5kZXgiLCJwYWlyc0xpc3QiLCJwYWlyc0xpc3RMZW5ndGgiLCJwYWlyc1RhYmxlIiwiY29sbGlzaW9uc0xlbmd0aCIsInJlbW92ZVBhaXJJbmRleCIsIk1hdHRlciIsIkNvbXBvc2l0ZXMiLCJHcmlkIiwiTW91c2VDb25zdHJhaW50IiwiUXVlcnkiLCJSZW5kZXIiLCJSdW5uZXIiLCJTQVQiLCJTdmciLCJXb3JsZCIsInJ1biIsImJlZm9yZSIsImFmdGVyIiwic3RhY2siLCJjb2x1bW5zIiwicm93cyIsImNvbHVtbkdhcCIsInJvd0dhcCIsImxhc3RCb2R5Iiwicm93IiwibWF4SGVpZ2h0IiwiY29sdW1uIiwiYm9keUhlaWdodCIsImJvZHlXaWR0aCIsInhPZmZzZXRBIiwieU9mZnNldEEiLCJ4T2Zmc2V0QiIsInlPZmZzZXRCIiwiYm9keUFIZWlnaHQiLCJib2R5QVdpZHRoIiwiYm9keUJIZWlnaHQiLCJtZXNoIiwiY3Jvc3NCcmFjZSIsImNvbCIsImJvZHlDIiwicHlyYW1pZCIsImFjdHVhbFJvd3MiLCJsYXN0Qm9keVdpZHRoIiwibmV3dG9uc0NyYWRsZSIsInNpemUiLCJjYXIiLCJ3aGVlbFNpemUiLCJ3aGVlbEFPZmZzZXQiLCJ3aGVlbEJPZmZzZXQiLCJ3aGVlbEEiLCJ3aGVlbEIiLCJheGVsQSIsImF4ZWxCIiwic29mdEJvZHkiLCJwYXJ0aWNsZVJhZGl1cyIsInBhcnRpY2xlT3B0aW9ucyIsImNvbnN0cmFpbnRPcHRpb25zIiwiYnVja2V0V2lkdGgiLCJidWNrZXRIZWlnaHQiLCJmb3JjZVVwZGF0ZSIsImJ1Y2tldCIsImJ1Y2tldElkIiwiZ3JpZENoYW5nZWQiLCJuZXdSZWdpb24iLCJfZ2V0UmVnaW9uIiwicmVnaW9uIiwidW5pb24iLCJfcmVnaW9uVW5pb24iLCJzdGFydENvbCIsImVuZENvbCIsInN0YXJ0Um93IiwiZW5kUm93IiwiX2dldEJ1Y2tldElkIiwiaXNJbnNpZGVOZXdSZWdpb24iLCJpc0luc2lkZU9sZFJlZ2lvbiIsIl9idWNrZXRSZW1vdmVCb2R5IiwiX2NyZWF0ZUJ1Y2tldCIsIl9idWNrZXRBZGRCb2R5IiwiX2NyZWF0ZUFjdGl2ZVBhaXJzTGlzdCIsInJlZ2lvbkEiLCJyZWdpb25CIiwiX2NyZWF0ZVJlZ2lvbiIsImdyaWRQYWlycyIsInBhaXJJZCIsImJ1Y2tldExlbmd0aCIsInBhaXJLZXlzIiwicGFpcktleXNMZW5ndGgiLCJjYW52YXMiLCJtb3VzZUNvbnN0cmFpbnQiLCJfdHJpZ2dlckV2ZW50cyIsIm1vdXNlRXZlbnRzIiwicGFydHNBU3RhcnQiLCJyYXkiLCJzdGFydFBvaW50IiwiZW5kUG9pbnQiLCJyYXlXaWR0aCIsInJheUFuZ2xlIiwicmF5TGVuZ3RoIiwicmF5WCIsInJheVkiLCJvdXRzaWRlIiwiX3JlcXVlc3RBbmltYXRpb25GcmFtZSIsIl9jYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1velJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2V0VGltZW91dCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwibW96Q2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRDYW5jZWxBbmltYXRpb25GcmFtZSIsIm1zQ2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJfZ29vZEZwcyIsIl9nb29kRGVsdGEiLCJmcmFtZVJlcXVlc3RJZCIsImhpc3RvcnlTaXplIiwiZGVsdGFIaXN0b3J5IiwibGFzdFRpbWUiLCJsYXN0VGltZXN0YW1wIiwidGltZXN0YW1wRWxhcHNlZCIsInRpbWVzdGFtcEVsYXBzZWRIaXN0b3J5IiwiZW5naW5lRGVsdGFIaXN0b3J5IiwiZW5naW5lRWxhcHNlZEhpc3RvcnkiLCJlbGFwc2VkSGlzdG9yeSIsImJhY2tncm91bmQiLCJ3aXJlZnJhbWVCYWNrZ3JvdW5kIiwiaGFzQm91bmRzIiwiZW5hYmxlZCIsIndpcmVmcmFtZXMiLCJzaG93U2xlZXBpbmciLCJzaG93RGVidWciLCJzaG93U3RhdHMiLCJzaG93UGVyZm9ybWFuY2UiLCJzaG93Qm91bmRzIiwic2hvd1ZlbG9jaXR5Iiwic2hvd0NvbGxpc2lvbnMiLCJzaG93U2VwYXJhdGlvbnMiLCJzaG93QXhlcyIsInNob3dQb3NpdGlvbnMiLCJzaG93QW5nbGVJbmRpY2F0b3IiLCJzaG93SWRzIiwic2hvd1ZlcnRleE51bWJlcnMiLCJzaG93Q29udmV4SHVsbHMiLCJzaG93SW50ZXJuYWxFZGdlcyIsInNob3dNb3VzZVBvc2l0aW9uIiwiX2NyZWF0ZUNhbnZhcyIsImNvbnRleHQiLCJnZXRDb250ZXh0IiwidGV4dHVyZXMiLCJjb250cm9sbGVyIiwic2hvd0Jyb2FkcGhhc2UiLCJzZXRQaXhlbFJhdGlvIiwiYXBwZW5kQ2hpbGQiLCJsb29wIiwidGltZSIsIl91cGRhdGVUaW1pbmciLCJzdGF0cyIsInN0b3AiLCJfZ2V0UGl4ZWxSYXRpbyIsInNldEF0dHJpYnV0ZSIsInN0eWxlIiwibG9va0F0IiwicGFkZGluZyIsImNlbnRlciIsInZpZXdIZWlnaHQiLCJvdXRlclJhdGlvIiwiaW5uZXJSYXRpbyIsInN0YXJ0Vmlld1RyYW5zZm9ybSIsImJvdW5kc1dpZHRoIiwiYm91bmRzSGVpZ2h0IiwiYm91bmRzU2NhbGVYIiwiYm91bmRzU2NhbGVZIiwic2V0VHJhbnNmb3JtIiwiZW5kVmlld1RyYW5zZm9ybSIsImN1cnJlbnRCYWNrZ3JvdW5kIiwiX2FwcGx5QmFja2dyb3VuZCIsImdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiIsImZpbGxSZWN0IiwiYm9keUNvbnZleEh1bGxzIiwiYm9keVdpcmVmcmFtZXMiLCJib2R5Qm91bmRzIiwiYm9keUF4ZXMiLCJib2R5UG9zaXRpb25zIiwiYm9keUlkcyIsInNlcGFyYXRpb25zIiwidmVydGV4TnVtYmVycyIsIm1vdXNlUG9zaXRpb24iLCJzZWN0aW9ucyIsImZvbnQiLCJ0ZXh0QmFzZWxpbmUiLCJ0ZXh0QWxpZ24iLCJzZWN0aW9uIiwiZmlsbFRleHQiLCJsYXN0RW5naW5lRGVsdGEiLCJkZWx0YU1lYW4iLCJfbWVhbiIsImVsYXBzZWRNZWFuIiwiZW5naW5lRGVsdGFNZWFuIiwiZW5naW5lRWxhcHNlZE1lYW4iLCJyYXRlTWVhbiIsImZwcyIsImdhcCIsInJvdW5kIiwiY291bnQiLCJpbmRpY2F0b3IiLCJwbG90WSIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsInN0YXJ0IiwiYXJjIiwiY2xvc2VQYXRoIiwiY29pbHMiLCJmaWxsIiwiZ2xvYmFsQWxwaGEiLCJ0ZXh0dXJlIiwiX2dldFRleHR1cmUiLCJkcmF3SW1hZ2UiLCJyZWN0Iiwibm9ybWFsUG9zWCIsIm5vcm1hbFBvc1kiLCJpbnNwZWN0b3IiLCJzZWxlY3RlZCIsIml0ZW0iLCJkYXRhIiwic2V0TGluZURhc2giLCJzZWxlY3RTdGFydCIsInNlbGVjdEJvdW5kcyIsInVuc2hpZnQiLCJjcmVhdGVFbGVtZW50Iiwib25jb250ZXh0bWVudSIsIm9uc2VsZWN0c3RhcnQiLCJkZXZpY2VQaXhlbFJhdGlvIiwid2Via2l0QmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsIm1vekJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJtc0JhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJvQmFja2luZ1N0b3JlUGl4ZWxSYXRpbyIsImJhY2tpbmdTdG9yZVBpeGVsUmF0aW8iLCJpbWFnZVBhdGgiLCJpbWFnZSIsIkltYWdlIiwic3JjIiwiY3NzQmFja2dyb3VuZCIsImJhY2tncm91bmRTaXplIiwiX2ZyYW1lVGltZW91dCIsImNsZWFyVGltZW91dCIsInJ1bm5lciIsImRlbHRhU2FtcGxlU2l6ZSIsImNvdW50ZXJUaW1lc3RhbXAiLCJmcmFtZUNvdW50ZXIiLCJ0aW1lUHJldiIsImlzRml4ZWQiLCJkZWx0YU1pbiIsImRlbHRhTWF4IiwidGljayIsInBhdGhUb1ZlcnRpY2VzIiwic2FtcGxlTGVuZ3RoIiwiaWwiLCJzZWdtZW50Iiwic2VnbWVudHMiLCJzZWdtZW50c1F1ZXVlIiwibGFzdFNlZ21lbnQiLCJsYXN0UG9pbnQiLCJseCIsImx5IiwiYWRkUG9pbnQiLCJweCIsInB5IiwicGF0aFNlZ1R5cGUiLCJpc1JlbGF0aXZlIiwiYWRkU2VnbWVudFBvaW50Iiwic2VnVHlwZSIsInBhdGhTZWdUeXBlQXNMZXR0ZXIiLCJ0b1VwcGVyQ2FzZSIsIl9zdmdQYXRoVG9BYnNvbHV0ZSIsImdldFRvdGFsTGVuZ3RoIiwicGF0aFNlZ0xpc3QiLCJudW1iZXJPZkl0ZW1zIiwiZ2V0SXRlbSIsImdldFBhdGhTZWdBdExlbmd0aCIsImdldFBvaW50QXRMZW5ndGgiLCJ4MCIsInkwIiwieTEiLCJ5MiIsInNlZ3MiLCJsZW4iLCJzZWciLCJyZXBsYWNlSXRlbSIsImNyZWF0ZVNWR1BhdGhTZWdNb3ZldG9BYnMiLCJjcmVhdGVTVkdQYXRoU2VnTGluZXRvQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0xpbmV0b0hvcml6b250YWxBYnMiLCJjcmVhdGVTVkdQYXRoU2VnTGluZXRvVmVydGljYWxBYnMiLCJjcmVhdGVTVkdQYXRoU2VnQ3VydmV0b0N1YmljQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9DdWJpY1Ntb290aEFicyIsImNyZWF0ZVNWR1BhdGhTZWdDdXJ2ZXRvUXVhZHJhdGljQWJzIiwiY3JlYXRlU1ZHUGF0aFNlZ0N1cnZldG9RdWFkcmF0aWNTbW9vdGhBYnMiLCJjcmVhdGVTVkdQYXRoU2VnQXJjQWJzIiwicjEiLCJyMiIsImxhcmdlQXJjRmxhZyIsInN3ZWVwRmxhZyIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2xvYmFsVGhpcyIsInRoaXMiLCJGdW5jdGlvbiIsImhhbmRsZU1vdGlvbiIsImFjY2VsZXJhdGlvbkluY2x1ZGluZ0dyYXZpdHkiLCJsb2NhdGlvbiIsImhyZWYiLCJpbmNsdWRlcyIsImNyZWF0ZVdhbGwiLCJjb2xvciIsIndhbGwiLCJzZXRFbGVtZW50SW5uZXJIdG1sIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiLCJyZW1vdmVFbGVtZW50IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwidXBkYXRlQmFsbFBvc2l0aW9uIiwic2V0R3Jhdml0eSIsIm9ubG9hZCIsInN0YXJ0QnV0dG9uIiwib25jbGljayIsIkRldmljZU1vdGlvbkV2ZW50IiwicmVxdWVzdFBlcm1pc3Npb24iLCJlcnJvciIsImJhbGwiLCJ3YWxsVGhpY2tuZXNzIiwibG9hZFBoeXNpY3MiXSwic291cmNlUm9vdCI6IiJ9